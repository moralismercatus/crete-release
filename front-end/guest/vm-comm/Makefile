#############################################################################
# Makefile for building: vm_comm
# Generated by qmake (3.0) (Qt 5.3.0)
# Template: lib
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       =  
CFLAGS        = -pipe -g -fPIC -Wall -W -D_REENTRANT -fno-inline $(DEFINES)
CXXFLAGS      = -pipe -g -fPIC -Wall -W -D_REENTRANT -fno-inline $(DEFINES)
INCPATH       = -I../include -I.
LINK          = g++
LFLAGS        = -shared -Wl,-soname,libcrete_vm_comm.so.1 
LIBS          = $(SUBLIBS) -L../bin
AR            = ar cqs
RANLIB        = 
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = custom_instr.c
OBJECTS       = custom_instr.o
DESTDIR       = ../bin#avoid trailing-slash linebreak
TARGET        = $(DESTDIR)/libcrete_vm_comm.so.1.0.0
TARGETA       = $(DESTDIR)/libcrete_vm_comm.a
TARGET0       = $(DESTDIR)/libcrete_vm_comm.so
TARGETD       = $(DESTDIR)/libcrete_vm_comm.so.1.0.0
TARGET1       = $(DESTDIR)/libcrete_vm_comm.so.1
TARGET2       = $(DESTDIR)/libcrete_vm_comm.so.1.0
TARGET_INST   = libcrete_vm_comm.so.1.0.0
TARGETA_INST  = libcrete_vm_comm.a
TARGET0_INST  = libcrete_vm_comm.so
TARGETD_INST  = libcrete_vm_comm.so.1.0.0
TARGET1_INST  = libcrete_vm_comm.so.1
TARGET2_INST  = libcrete_vm_comm.so.1.0


first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: $(TARGET) $(TARGETA)

$(TARGET):  $(OBJECTS) $(SUBLIBS) $(OBJCOMP)  
	-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS) $(OBJCOMP)
	-ln -s $(TARGET) $(TARGET0)
	-ln -s $(TARGET) $(TARGET1)
	-ln -s $(TARGET) $(TARGET2)



staticlib: $(TARGETA)

$(TARGETA):  $(OBJECTS) $(OBJCOMP) 
	-$(DEL_FILE) $(TARGETA) 
	$(AR) $(TARGETA) $(OBJECTS)

dist: 
	@test -d .tmp/vm_comm1.0.0 || mkdir -p .tmp/vm_comm1.0.0
	$(COPY_FILE) --parents $(DIST) .tmp/vm_comm1.0.0/ && $(COPY_FILE) --parents vm_comm.h vm_comm_global.h .tmp/vm_comm1.0.0/ && $(COPY_FILE) --parents vm_comm.cpp .tmp/vm_comm1.0.0/ && (cd `dirname .tmp/vm_comm1.0.0` && $(TAR) vm_comm1.0.0.tar vm_comm1.0.0 && $(COMPRESS) vm_comm1.0.0.tar) && $(MOVE) `dirname .tmp/vm_comm1.0.0`/vm_comm1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/vm_comm1.0.0


clean: 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


distclean: clean 
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) $(TARGET0) $(TARGET1) $(TARGET2) $(TARGETA)


####### Sub-libraries

check: first

####### Compile

####### Install

install_target: first FORCE
	@test -d $(INSTALL_ROOT)/usr/lib || mkdir -p $(INSTALL_ROOT)/usr/lib
	-$(INSTALL_PROGRAM) "$(TARGET)" "$(INSTALL_ROOT)/usr/lib/$(TARGET_INST)"
	-$(INSTALL_FILE) "$(TARGETA)" "$(INSTALL_ROOT)/usr/lib/$(TARGETA_INST)"
	-$(SYMLINK) "$(INSTALL_ROOT)/usr/lib/$(TARGET_INST)" "$(INSTALL_ROOT)/usr/lib/$(TARGET0_INST)"
	-$(SYMLINK) "$(INSTALL_ROOT)/usr/lib/$(TARGET_INST)" "$(INSTALL_ROOT)/usr/lib/$(TARGET1_INST)"
	-$(SYMLINK) "$(INSTALL_ROOT)/usr/lib/$(TARGET_INST)" "$(INSTALL_ROOT)/usr/lib/$(TARGET2_INST)"

uninstall_target: FORCE
	-$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET_INST)" 
	-$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGETA_INST)" 
	 -$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET0_INST)" 
	 -$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET1_INST)" 
	 -$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET2_INST)"


install:  install_target  FORCE

uninstall: uninstall_target   FORCE

FORCE:

