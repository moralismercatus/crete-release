#############################################################################
# Makefile for building: runner 
# Generated by qmake (3.0) (Qt 5.3.0)
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DFUSION_MAX_VECTOR_SIZE=20 # Max number of FSM states
CFLAGS        = -pipe -g -Wall -W -fPIE $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -fPIE $(DEFINES)
INCPATH       = -I../include -I../asio/client 
LINK          = g++
LFLAGS        = 
BOOSTLIBS     = -lboost_system -lboost_serialization -lboost_filesystem -lboost_program_options
LIBS          = $(SUBLIBS) -L../bin -Wl,-Bdynamic $(BOOSTLIBS) -lcrete_asio_client -lpthread -lboost_regex -lcrete_proc_reader -lcrete_elf_reader -lcrete_vm_comm
AR            = ar cqs
RANLIB        = 
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = runner.cpp \
                harness_config.cpp \
                run_config.cpp \
		main.cpp
OBJECTS       = runner.o \
                harness_config.o \
                run_config.o \
		main.o
DESTDIR       = ../bin#avoid trailing-slash linebreak
TARGET        = $(DESTDIR)/crete-run
TARGET_INST   = crete-run


first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: $(TARGET)

$(TARGET): $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)


clean: 
	-$(DEL_FILE) $(OBJECTS)


distclean: clean 
	-$(DEL_FILE) $(TARGET) 

####### Sub-libraries

check: first

####### Compile

runner.o: runner.cpp run_config.o
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o runner.o runner.cpp
run_config.o: run_config.cpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o run_config.o run_config.cpp
main.o: main.cpp runner.o
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

####### Install

install: FORCE
	@test -d $(INSTALL_ROOT)/usr/bin || mkdir -p $(INSTALL_ROOT)/usr/bin
	-$(INSTALL_PROGRAM) "$(TARGET)" "$(INSTALL_ROOT)/usr/bin/$(TARGET_INST)"


uninstall:   FORCE
	-$(DEL_FILE) "$(INSTALL_ROOT)/usr/bin/$(TARGET_INST)"

FORCE:

