; ModuleID = 'op_helper.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CPUX86State = type { [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, [6 x %struct.SegmentCache], %struct.SegmentCache, %struct.SegmentCache, %struct.SegmentCache, %struct.SegmentCache, [5 x i32], i32, i32, i16, i16, [8 x i8], [8 x i8], [8 x %union.FPReg], i16, i64, i64, %struct.float_status, %struct.floatx80, %struct.float_status, %struct.float_status, i32, [8 x %union.XMMReg], %union.XMMReg, %union.MMXReg, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i16, i16, i16, i16, i32, i8, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, [8 x i32], %union.anon, i32, i32, i8, i8, %struct.TranslationBlock*, i64, i32, i32, i32, i32, [2 x [256 x %struct.CPUTLBEntry]], [2 x [256 x i64]], i32, i32, [4096 x %struct.TranslationBlock*], [128 x i64], i64, %union.anon.1, i32, %struct.breakpoints_head, i32, %struct.watchpoints_head, %struct.CPUWatchpoint*, %struct.GDBRegisterState*, [1 x %struct.__jmp_buf_tag], i32, %struct.CPUX86State*, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.QemuThread*, %struct.QemuCond*, i32, %struct.qemu_work_item*, %struct.qemu_work_item*, i8*, %struct.KVMState*, %struct.kvm_run*, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], i32, i32, i32, i32, i32, i32, [11 x i64], i64, [8 x %struct.MTRRVar], i32, i32, i32, i8, i8, i32, i32, i32, i8, i32, %struct.DeviceState*, i64, i64, [40 x i64], i64, i16, i16, i16, i64, [8 x %union.XMMReg], i64 }
%struct.SegmentCache = type { i32, i32, i32, i32 }
%union.FPReg = type { %struct.floatx80 }
%struct.floatx80 = type { i64, i16 }
%struct.float_status = type { i8, i8, i8, i8, i8, i8, i8 }
%union.XMMReg = type { [2 x i64] }
%union.MMXReg = type { i64 }
%union.anon = type { [4 x %struct.CPUBreakpoint*] }
%struct.CPUBreakpoint = type { i32, i32, %struct.anon }
%struct.anon = type { %struct.CPUBreakpoint*, %struct.CPUBreakpoint** }
%struct.TranslationBlock = type { i32, i32, i64, i16, i16, i8*, %struct.TranslationBlock*, [2 x %struct.TranslationBlock*], [2 x i64], [2 x i16], [2 x i16], [2 x %struct.TranslationBlock*], %struct.TranslationBlock*, i32, %struct.TCGLLVMContext*, %struct.Function*, i8*, i8*, [2 x %struct.TranslationBlock*] }
%struct.TCGLLVMContext = type opaque
%struct.Function = type opaque
%struct.CPUTLBEntry = type { i32, i32, i32, i64, [8 x i8] }
%union.anon.1 = type { i32 }
%struct.breakpoints_head = type { %struct.CPUBreakpoint*, %struct.CPUBreakpoint** }
%struct.watchpoints_head = type { %struct.CPUWatchpoint*, %struct.CPUWatchpoint** }
%struct.CPUWatchpoint = type { i32, i32, i32, %struct.anon.0 }
%struct.anon.0 = type { %struct.CPUWatchpoint*, %struct.CPUWatchpoint** }
%struct.GDBRegisterState = type opaque
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.QemuThread = type opaque
%struct.QemuCond = type opaque
%struct.qemu_work_item = type { %struct.qemu_work_item*, void (i8*)*, i8*, i32 }
%struct.KVMState = type opaque
%struct.kvm_run = type opaque
%struct.MTRRVar = type { i64, i64 }
%struct.DeviceState = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@env = global %struct.CPUX86State* null, align 8
@.str = private unnamed_addr constant [46 x i8] c"helper_crete_debug_print_f32 called with %f!\0A\00", align 1
@loglevel = external global i32
@logfile = external global %struct._IO_FILE*
@.str3 = private unnamed_addr constant [12 x i8] c"SMM: enter\0A\00", align 1
@.str4 = private unnamed_addr constant [16 x i8] c"SMM: after RSM\0A\00", align 1
@parity_table = external constant [256 x i8]
@.str5 = private unnamed_addr constant [13 x i8] c"vmrun! %08x\0A\00", align 1
@.str6 = private unnamed_addr constant [18 x i8] c"Injecting(%#hx): \00", align 1
@.str7 = private unnamed_addr constant [5 x i8] c"INTR\00", align 1
@.str8 = private unnamed_addr constant [4 x i8] c"NMI\00", align 1
@.str9 = private unnamed_addr constant [6 x i8] c"EXEPT\00", align 1
@.str10 = private unnamed_addr constant [5 x i8] c"SOFT\00", align 1
@.str11 = private unnamed_addr constant [10 x i8] c" %#x %#x\0A\00", align 1
@.str12 = private unnamed_addr constant [32 x i8] c"vmload! %08x\0AFS: %016lx | %08x\0A\00", align 1
@.str13 = private unnamed_addr constant [32 x i8] c"vmsave! %08x\0AFS: %016lx | %08x\0A\00", align 1
@.str14 = private unnamed_addr constant [37 x i8] c"vmexit(%08x, %016lx, %016lx, %08x)!\0A\00", align 1
@comis_eflags = internal unnamed_addr constant [4 x i32] [i32 1, i32 64, i32 0, i32 69], align 16
@rclb_table = external constant [32 x i8]
@rclw_table = external constant [32 x i8]
@.str15 = private unnamed_addr constant [12 x i8] c"invalid tss\00", align 1
@.str16 = private unnamed_addr constant [17 x i8] c"invalid tss type\00", align 1
@do_interrupt_all.count = internal unnamed_addr global i32 0, align 4
@.str17 = private unnamed_addr constant [65 x i8] c"%6d: v=%02x e=%04x i=%d cpl=%d IP=%04x:%08x pc=%08x SP=%04x:%08x\00", align 1
@.str18 = private unnamed_addr constant [10 x i8] c" CR2=%08x\00", align 1
@.str19 = private unnamed_addr constant [10 x i8] c" EAX=%08x\00", align 1
@switch.table = private unnamed_addr constant [10 x i32] [i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1]
@str = private unnamed_addr constant [27 x i8] c"crete_assume_begin called!\00"
@str21 = private unnamed_addr constant [21 x i8] c"crete_assume called!\00"

define void @helper_write_eflags(i32 %t0, i32 %update_mask) nounwind uwtable {
  %1 = and i32 %t0, 2261
  %2 = load %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 3
  store i32 %1, i32* %3, align 4
  %4 = lshr i32 %t0, 10
  %5 = shl nuw nsw i32 %4, 1
  %6 = and i32 %5, 2
  %7 = sub nsw i32 1, %6
  %8 = load %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State* %8, i64 0, i32 6
  store i32 %7, i32* %9, align 4
  %10 = load %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State* %10, i64 0, i32 2
  %12 = load i32* %11, align 4
  %13 = xor i32 %update_mask, -3
  %14 = and i32 %12, %13
  %15 = and i32 %update_mask, %t0
  %16 = or i32 %15, %14
  %17 = or i32 %16, 2
  store i32 %17, i32* %11, align 4
  ret void
}

define void @helper_crete_make_symbolic() nounwind uwtable readnone {
  ret void
}

define void @helper_crete_debug_print_f32(i32 %eax) nounwind uwtable {
  %1 = bitcast i32 %eax to float
  %2 = fpext float %1 to double
  %3 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([46 x i8]* @.str, i64 0, i64 0), double %2) nounwind
  ret void
}

declare i32 @printf(i8* nocapture, ...) nounwind

define void @helper_crete_assume_begin() nounwind uwtable {
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([27 x i8]* @str, i64 0, i64 0))
  ret void
}

define void @helper_crete_assume(i32 %eax) nounwind uwtable {
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([21 x i8]* @str21, i64 0, i64 0))
  ret void
}

define i32 @helper_read_eflags() nounwind uwtable readonly {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 6
  %6 = load i32* %5, align 4
  %7 = and i32 %6, 1024
  %8 = or i32 %7, %4
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %10 = load i32* %9, align 4
  %11 = and i32 %10, -196609
  %12 = or i32 %8, %11
  ret i32 %12
}

define i32 @helper_cc_compute_all(i32 %op) nounwind uwtable readonly {
  switch i32 %op, label %820 [
    i32 1, label %1
    i32 2, label %5
    i32 3, label %26
    i32 4, label %50
    i32 6, label %73
    i32 7, label %106
    i32 8, label %140
    i32 10, label %172
    i32 11, label %206
    i32 12, label %241
    i32 14, label %274
    i32 15, label %305
    i32 16, label %339
    i32 18, label %370
    i32 19, label %402
    i32 20, label %437
    i32 22, label %469
    i32 23, label %483
    i32 24, label %500
    i32 26, label %516
    i32 27, label %541
    i32 28, label %569
    i32 30, label %596
    i32 31, label %621
    i32 32, label %649
    i32 34, label %676
    i32 35, label %699
    i32 36, label %725
    i32 38, label %749
    i32 39, label %771
    i32 40, label %796
  ]

; <label>:1                                       ; preds = %0
  %2 = load %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 3
  %4 = load i32* %3, align 4
  br label %820

; <label>:5                                       ; preds = %0
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 3
  %8 = load i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  %10 = zext i1 %9 to i32
  %11 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 4
  %12 = load i32* %11, align 4
  %.mask.i8 = and i32 %12, 255
  %13 = zext i32 %.mask.i8 to i64
  %14 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %13
  %15 = load i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp eq i32 %.mask.i8, 0
  %18 = zext i1 %17 to i32
  %19 = shl nuw nsw i32 %18, 6
  %20 = and i32 %12, 128
  %21 = shl nuw nsw i32 %10, 11
  %22 = or i32 %20, %10
  %23 = or i32 %22, %16
  %24 = or i32 %23, %21
  %25 = or i32 %24, %19
  br label %820

; <label>:26                                      ; preds = %0
  %27 = load %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 3
  %29 = load i32* %28, align 4
  %30 = icmp ne i32 %29, 0
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 4
  %33 = load i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = and i64 %34, 255
  %36 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %35
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = and i32 %33, 65535
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i32
  %42 = shl nuw nsw i32 %41, 6
  %43 = lshr i32 %33, 8
  %44 = and i32 %43, 128
  %45 = shl nuw nsw i32 %31, 11
  %46 = or i32 %38, %31
  %47 = or i32 %46, %44
  %48 = or i32 %47, %45
  %49 = or i32 %48, %42
  br label %820

; <label>:50                                      ; preds = %0
  %51 = load %struct.CPUX86State** @env, align 8
  %52 = getelementptr inbounds %struct.CPUX86State* %51, i64 0, i32 3
  %53 = load i32* %52, align 4
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i32
  %56 = getelementptr inbounds %struct.CPUX86State* %51, i64 0, i32 4
  %57 = load i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = and i64 %58, 255
  %60 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %59
  %61 = load i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %57, 0
  %64 = zext i1 %63 to i32
  %65 = shl nuw nsw i32 %64, 6
  %66 = lshr i32 %57, 24
  %67 = and i32 %66, 128
  %68 = shl nuw nsw i32 %55, 11
  %69 = or i32 %62, %55
  %70 = or i32 %69, %67
  %71 = or i32 %70, %68
  %72 = or i32 %71, %65
  br label %820

; <label>:73                                      ; preds = %0
  %74 = load %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State* %74, i64 0, i32 3
  %76 = load i32* %75, align 4
  %77 = getelementptr inbounds %struct.CPUX86State* %74, i64 0, i32 4
  %78 = load i32* %77, align 4
  %79 = sub i32 %78, %76
  %80 = zext i32 %78 to i64
  %81 = and i32 %78, 255
  %82 = and i32 %76, 255
  %83 = icmp ult i32 %81, %82
  %84 = zext i1 %83 to i32
  %85 = and i64 %80, 255
  %86 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %85
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = xor i32 %78, %76
  %90 = xor i32 %89, %79
  %91 = and i32 %90, 16
  %92 = icmp eq i32 %81, 0
  %93 = zext i1 %92 to i32
  %94 = shl nuw nsw i32 %93, 6
  %95 = and i32 %78, 128
  %96 = xor i32 %76, 128
  %97 = xor i32 %96, %79
  %98 = and i32 %97, %89
  %99 = shl i32 %98, 4
  %100 = and i32 %99, 2048
  %101 = or i32 %88, %95
  %102 = or i32 %101, %84
  %103 = or i32 %102, %91
  %104 = or i32 %103, %94
  %105 = or i32 %104, %100
  br label %820

; <label>:106                                     ; preds = %0
  %107 = load %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State* %107, i64 0, i32 3
  %109 = load i32* %108, align 4
  %110 = getelementptr inbounds %struct.CPUX86State* %107, i64 0, i32 4
  %111 = load i32* %110, align 4
  %112 = sub i32 %111, %109
  %113 = and i32 %111, 65535
  %114 = and i32 %109, 65535
  %115 = icmp ult i32 %113, %114
  %116 = zext i1 %115 to i32
  %117 = zext i32 %111 to i64
  %118 = and i64 %117, 255
  %119 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %118
  %120 = load i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = xor i32 %111, %109
  %123 = xor i32 %122, %112
  %124 = and i32 %123, 16
  %125 = icmp eq i32 %113, 0
  %126 = zext i1 %125 to i32
  %127 = shl nuw nsw i32 %126, 6
  %128 = lshr i32 %111, 8
  %129 = and i32 %128, 128
  %130 = xor i32 %109, 32768
  %131 = xor i32 %130, %112
  %132 = and i32 %131, %122
  %133 = lshr i32 %132, 4
  %134 = and i32 %133, 2048
  %135 = or i32 %129, %121
  %136 = or i32 %135, %116
  %137 = or i32 %136, %124
  %138 = or i32 %137, %127
  %139 = or i32 %138, %134
  br label %820

; <label>:140                                     ; preds = %0
  %141 = load %struct.CPUX86State** @env, align 8
  %142 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 3
  %143 = load i32* %142, align 4
  %144 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 4
  %145 = load i32* %144, align 4
  %146 = sub i32 %145, %143
  %147 = icmp ult i32 %145, %143
  %148 = zext i1 %147 to i32
  %149 = zext i32 %145 to i64
  %150 = and i64 %149, 255
  %151 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %150
  %152 = load i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = xor i32 %145, %143
  %155 = xor i32 %154, %146
  %156 = and i32 %155, 16
  %157 = icmp eq i32 %145, 0
  %158 = zext i1 %157 to i32
  %159 = shl nuw nsw i32 %158, 6
  %160 = lshr i32 %145, 24
  %161 = and i32 %160, 128
  %162 = xor i32 %143, -2147483648
  %163 = xor i32 %162, %146
  %164 = and i32 %163, %154
  %165 = lshr i32 %164, 20
  %166 = and i32 %165, 2048
  %167 = or i32 %148, %153
  %168 = or i32 %167, %161
  %169 = or i32 %168, %156
  %170 = or i32 %169, %159
  %171 = or i32 %170, %166
  br label %820

; <label>:172                                     ; preds = %0
  %173 = load %struct.CPUX86State** @env, align 8
  %174 = getelementptr inbounds %struct.CPUX86State* %173, i64 0, i32 3
  %175 = load i32* %174, align 4
  %176 = getelementptr inbounds %struct.CPUX86State* %173, i64 0, i32 4
  %177 = load i32* %176, align 4
  %178 = sub i32 %177, %175
  %179 = add i32 %178, -1
  %180 = zext i32 %177 to i64
  %181 = and i32 %177, 255
  %182 = and i32 %175, 255
  %183 = icmp ule i32 %181, %182
  %184 = zext i1 %183 to i32
  %185 = and i64 %180, 255
  %186 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %185
  %187 = load i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = xor i32 %177, %175
  %190 = xor i32 %179, %189
  %191 = and i32 %190, 16
  %192 = icmp eq i32 %181, 0
  %193 = zext i1 %192 to i32
  %194 = shl nuw nsw i32 %193, 6
  %195 = and i32 %177, 128
  %196 = xor i32 %175, 128
  %197 = xor i32 %196, %179
  %198 = and i32 %197, %189
  %199 = shl i32 %198, 4
  %200 = and i32 %199, 2048
  %201 = or i32 %188, %195
  %202 = or i32 %201, %184
  %203 = or i32 %202, %191
  %204 = or i32 %203, %194
  %205 = or i32 %204, %200
  br label %820

; <label>:206                                     ; preds = %0
  %207 = load %struct.CPUX86State** @env, align 8
  %208 = getelementptr inbounds %struct.CPUX86State* %207, i64 0, i32 3
  %209 = load i32* %208, align 4
  %210 = getelementptr inbounds %struct.CPUX86State* %207, i64 0, i32 4
  %211 = load i32* %210, align 4
  %212 = sub i32 %211, %209
  %213 = add i32 %212, -1
  %214 = and i32 %211, 65535
  %215 = and i32 %209, 65535
  %216 = icmp ule i32 %214, %215
  %217 = zext i1 %216 to i32
  %218 = zext i32 %211 to i64
  %219 = and i64 %218, 255
  %220 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %219
  %221 = load i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = xor i32 %211, %209
  %224 = xor i32 %213, %223
  %225 = and i32 %224, 16
  %226 = icmp eq i32 %214, 0
  %227 = zext i1 %226 to i32
  %228 = shl nuw nsw i32 %227, 6
  %229 = lshr i32 %211, 8
  %230 = and i32 %229, 128
  %231 = xor i32 %209, 32768
  %232 = xor i32 %231, %213
  %233 = and i32 %232, %223
  %234 = lshr i32 %233, 4
  %235 = and i32 %234, 2048
  %236 = or i32 %230, %222
  %237 = or i32 %236, %217
  %238 = or i32 %237, %225
  %239 = or i32 %238, %228
  %240 = or i32 %239, %235
  br label %820

; <label>:241                                     ; preds = %0
  %242 = load %struct.CPUX86State** @env, align 8
  %243 = getelementptr inbounds %struct.CPUX86State* %242, i64 0, i32 3
  %244 = load i32* %243, align 4
  %245 = getelementptr inbounds %struct.CPUX86State* %242, i64 0, i32 4
  %246 = load i32* %245, align 4
  %247 = sub i32 %246, %244
  %248 = add i32 %247, -1
  %249 = icmp ule i32 %246, %244
  %250 = zext i1 %249 to i32
  %251 = zext i32 %246 to i64
  %252 = and i64 %251, 255
  %253 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %252
  %254 = load i8* %253, align 1
  %255 = zext i8 %254 to i32
  %256 = xor i32 %246, %244
  %257 = xor i32 %248, %256
  %258 = and i32 %257, 16
  %259 = icmp eq i32 %246, 0
  %260 = zext i1 %259 to i32
  %261 = shl nuw nsw i32 %260, 6
  %262 = lshr i32 %246, 24
  %263 = and i32 %262, 128
  %264 = xor i32 %244, -2147483648
  %265 = xor i32 %264, %248
  %266 = and i32 %265, %256
  %267 = lshr i32 %266, 20
  %268 = and i32 %267, 2048
  %269 = or i32 %250, %255
  %270 = or i32 %269, %263
  %271 = or i32 %270, %261
  %272 = or i32 %271, %258
  %273 = or i32 %272, %268
  br label %820

; <label>:274                                     ; preds = %0
  %275 = load %struct.CPUX86State** @env, align 8
  %276 = getelementptr inbounds %struct.CPUX86State* %275, i64 0, i32 4
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %struct.CPUX86State* %275, i64 0, i32 3
  %279 = load i32* %278, align 4
  %280 = add i32 %279, %277
  %281 = and i32 %280, 255
  %282 = and i32 %279, 255
  %283 = icmp ult i32 %281, %282
  %284 = zext i1 %283 to i32
  %.mask.i7 = and i32 %277, 255
  %285 = zext i32 %.mask.i7 to i64
  %286 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %285
  %287 = load i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = xor i32 %280, %277
  %290 = xor i32 %289, %279
  %291 = and i32 %290, 16
  %292 = icmp eq i32 %.mask.i7, 0
  %293 = zext i1 %292 to i32
  %294 = shl nuw nsw i32 %293, 6
  %295 = and i32 %277, 128
  %296 = xor i32 %280, %279
  %297 = and i32 %296, %289
  %298 = shl i32 %297, 4
  %299 = and i32 %298, 2048
  %300 = or i32 %288, %295
  %301 = or i32 %300, %294
  %302 = or i32 %301, %284
  %303 = or i32 %302, %291
  %304 = or i32 %303, %299
  br label %820

; <label>:305                                     ; preds = %0
  %306 = load %struct.CPUX86State** @env, align 8
  %307 = getelementptr inbounds %struct.CPUX86State* %306, i64 0, i32 4
  %308 = load i32* %307, align 4
  %309 = getelementptr inbounds %struct.CPUX86State* %306, i64 0, i32 3
  %310 = load i32* %309, align 4
  %311 = add i32 %310, %308
  %312 = and i32 %311, 65535
  %313 = and i32 %310, 65535
  %314 = icmp ult i32 %312, %313
  %315 = zext i1 %314 to i32
  %316 = zext i32 %308 to i64
  %317 = and i64 %316, 255
  %318 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %317
  %319 = load i8* %318, align 1
  %320 = zext i8 %319 to i32
  %321 = xor i32 %311, %308
  %322 = xor i32 %321, %310
  %323 = and i32 %322, 16
  %324 = and i32 %308, 65535
  %325 = icmp eq i32 %324, 0
  %326 = zext i1 %325 to i32
  %327 = shl nuw nsw i32 %326, 6
  %328 = lshr i32 %308, 8
  %329 = and i32 %328, 128
  %330 = xor i32 %311, %310
  %331 = and i32 %330, %321
  %332 = lshr i32 %331, 4
  %333 = and i32 %332, 2048
  %334 = or i32 %320, %329
  %335 = or i32 %334, %327
  %336 = or i32 %335, %315
  %337 = or i32 %336, %323
  %338 = or i32 %337, %333
  br label %820

; <label>:339                                     ; preds = %0
  %340 = load %struct.CPUX86State** @env, align 8
  %341 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 4
  %342 = load i32* %341, align 4
  %343 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 3
  %344 = load i32* %343, align 4
  %uadd.i = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %342, i32 %344) nounwind
  %345 = extractvalue { i32, i1 } %uadd.i, 0
  %346 = extractvalue { i32, i1 } %uadd.i, 1
  %347 = zext i1 %346 to i32
  %348 = zext i32 %342 to i64
  %349 = and i64 %348, 255
  %350 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %349
  %351 = load i8* %350, align 1
  %352 = zext i8 %351 to i32
  %353 = xor i32 %345, %342
  %354 = xor i32 %353, %344
  %355 = and i32 %354, 16
  %356 = icmp eq i32 %342, 0
  %357 = zext i1 %356 to i32
  %358 = shl nuw nsw i32 %357, 6
  %359 = lshr i32 %342, 24
  %360 = and i32 %359, 128
  %361 = xor i32 %345, %344
  %362 = and i32 %361, %353
  %363 = lshr i32 %362, 20
  %364 = and i32 %363, 2048
  %365 = or i32 %358, %360
  %366 = or i32 %365, %352
  %367 = or i32 %366, %347
  %368 = or i32 %367, %355
  %369 = or i32 %368, %364
  br label %820

; <label>:370                                     ; preds = %0
  %371 = load %struct.CPUX86State** @env, align 8
  %372 = getelementptr inbounds %struct.CPUX86State* %371, i64 0, i32 4
  %373 = load i32* %372, align 4
  %374 = getelementptr inbounds %struct.CPUX86State* %371, i64 0, i32 3
  %375 = load i32* %374, align 4
  %376 = add i32 %373, 1
  %377 = add i32 %376, %375
  %378 = and i32 %377, 255
  %379 = and i32 %375, 255
  %380 = icmp ule i32 %378, %379
  %381 = zext i1 %380 to i32
  %.mask.i6 = and i32 %373, 255
  %382 = zext i32 %.mask.i6 to i64
  %383 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %382
  %384 = load i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = xor i32 %377, %373
  %387 = xor i32 %386, %375
  %388 = and i32 %387, 16
  %389 = icmp eq i32 %.mask.i6, 0
  %390 = zext i1 %389 to i32
  %391 = shl nuw nsw i32 %390, 6
  %392 = and i32 %373, 128
  %393 = xor i32 %377, %375
  %394 = and i32 %393, %386
  %395 = shl i32 %394, 4
  %396 = and i32 %395, 2048
  %397 = or i32 %385, %392
  %398 = or i32 %397, %391
  %399 = or i32 %398, %381
  %400 = or i32 %399, %388
  %401 = or i32 %400, %396
  br label %820

; <label>:402                                     ; preds = %0
  %403 = load %struct.CPUX86State** @env, align 8
  %404 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 4
  %405 = load i32* %404, align 4
  %406 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 3
  %407 = load i32* %406, align 4
  %408 = add i32 %405, 1
  %409 = add i32 %408, %407
  %410 = and i32 %409, 65535
  %411 = and i32 %407, 65535
  %412 = icmp ule i32 %410, %411
  %413 = zext i1 %412 to i32
  %414 = zext i32 %405 to i64
  %415 = and i64 %414, 255
  %416 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %415
  %417 = load i8* %416, align 1
  %418 = zext i8 %417 to i32
  %419 = xor i32 %409, %405
  %420 = xor i32 %419, %407
  %421 = and i32 %420, 16
  %422 = and i32 %405, 65535
  %423 = icmp eq i32 %422, 0
  %424 = zext i1 %423 to i32
  %425 = shl nuw nsw i32 %424, 6
  %426 = lshr i32 %405, 8
  %427 = and i32 %426, 128
  %428 = xor i32 %409, %407
  %429 = and i32 %428, %419
  %430 = lshr i32 %429, 4
  %431 = and i32 %430, 2048
  %432 = or i32 %418, %427
  %433 = or i32 %432, %425
  %434 = or i32 %433, %413
  %435 = or i32 %434, %421
  %436 = or i32 %435, %431
  br label %820

; <label>:437                                     ; preds = %0
  %438 = load %struct.CPUX86State** @env, align 8
  %439 = getelementptr inbounds %struct.CPUX86State* %438, i64 0, i32 4
  %440 = load i32* %439, align 4
  %441 = getelementptr inbounds %struct.CPUX86State* %438, i64 0, i32 3
  %442 = load i32* %441, align 4
  %443 = add i32 %440, 1
  %444 = add i32 %443, %442
  %445 = icmp ule i32 %444, %442
  %446 = zext i1 %445 to i32
  %447 = zext i32 %440 to i64
  %448 = and i64 %447, 255
  %449 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %448
  %450 = load i8* %449, align 1
  %451 = zext i8 %450 to i32
  %452 = xor i32 %444, %440
  %453 = xor i32 %452, %442
  %454 = and i32 %453, 16
  %455 = icmp eq i32 %440, 0
  %456 = zext i1 %455 to i32
  %457 = shl nuw nsw i32 %456, 6
  %458 = lshr i32 %440, 24
  %459 = and i32 %458, 128
  %460 = xor i32 %444, %442
  %461 = and i32 %460, %452
  %462 = lshr i32 %461, 20
  %463 = and i32 %462, 2048
  %464 = or i32 %451, %459
  %465 = or i32 %464, %457
  %466 = or i32 %465, %446
  %467 = or i32 %466, %454
  %468 = or i32 %467, %463
  br label %820

; <label>:469                                     ; preds = %0
  %470 = load %struct.CPUX86State** @env, align 8
  %471 = getelementptr inbounds %struct.CPUX86State* %470, i64 0, i32 4
  %472 = load i32* %471, align 4
  %.mask.i5 = and i32 %472, 255
  %473 = zext i32 %.mask.i5 to i64
  %474 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %473
  %475 = load i8* %474, align 1
  %476 = zext i8 %475 to i32
  %477 = icmp eq i32 %.mask.i5, 0
  %478 = zext i1 %477 to i32
  %479 = shl nuw nsw i32 %478, 6
  %480 = and i32 %472, 128
  %481 = or i32 %476, %480
  %482 = or i32 %481, %479
  br label %820

; <label>:483                                     ; preds = %0
  %484 = load %struct.CPUX86State** @env, align 8
  %485 = getelementptr inbounds %struct.CPUX86State* %484, i64 0, i32 4
  %486 = load i32* %485, align 4
  %487 = zext i32 %486 to i64
  %488 = and i64 %487, 255
  %489 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %488
  %490 = load i8* %489, align 1
  %491 = zext i8 %490 to i32
  %492 = and i32 %486, 65535
  %493 = icmp eq i32 %492, 0
  %494 = zext i1 %493 to i32
  %495 = shl nuw nsw i32 %494, 6
  %496 = lshr i32 %486, 8
  %497 = and i32 %496, 128
  %498 = or i32 %497, %491
  %499 = or i32 %498, %495
  br label %820

; <label>:500                                     ; preds = %0
  %501 = load %struct.CPUX86State** @env, align 8
  %502 = getelementptr inbounds %struct.CPUX86State* %501, i64 0, i32 4
  %503 = load i32* %502, align 4
  %504 = zext i32 %503 to i64
  %505 = and i64 %504, 255
  %506 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %505
  %507 = load i8* %506, align 1
  %508 = zext i8 %507 to i32
  %509 = icmp eq i32 %503, 0
  %510 = zext i1 %509 to i32
  %511 = shl nuw nsw i32 %510, 6
  %512 = lshr i32 %503, 24
  %513 = and i32 %512, 128
  %514 = or i32 %513, %508
  %515 = or i32 %514, %511
  br label %820

; <label>:516                                     ; preds = %0
  %517 = load %struct.CPUX86State** @env, align 8
  %518 = getelementptr inbounds %struct.CPUX86State* %517, i64 0, i32 4
  %519 = load i32* %518, align 4
  %520 = add i32 %519, 31
  %521 = getelementptr inbounds %struct.CPUX86State* %517, i64 0, i32 3
  %522 = load i32* %521, align 4
  %.mask.i4 = and i32 %519, 255
  %523 = zext i32 %.mask.i4 to i64
  %524 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %523
  %525 = load i8* %524, align 1
  %526 = zext i8 %525 to i32
  %527 = xor i32 %520, %519
  %528 = and i32 %527, 16
  %529 = icmp eq i32 %.mask.i4, 0
  %530 = zext i1 %529 to i32
  %531 = shl nuw nsw i32 %530, 6
  %532 = and i32 %519, 128
  %533 = icmp eq i32 %.mask.i4, 128
  %534 = zext i1 %533 to i32
  %535 = shl nuw nsw i32 %534, 11
  %536 = or i32 %532, %522
  %537 = or i32 %536, %526
  %538 = or i32 %537, %528
  %539 = or i32 %538, %531
  %540 = or i32 %539, %535
  br label %820

; <label>:541                                     ; preds = %0
  %542 = load %struct.CPUX86State** @env, align 8
  %543 = getelementptr inbounds %struct.CPUX86State* %542, i64 0, i32 4
  %544 = load i32* %543, align 4
  %545 = add i32 %544, 31
  %546 = getelementptr inbounds %struct.CPUX86State* %542, i64 0, i32 3
  %547 = load i32* %546, align 4
  %548 = zext i32 %544 to i64
  %549 = and i64 %548, 255
  %550 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %549
  %551 = load i8* %550, align 1
  %552 = zext i8 %551 to i32
  %553 = xor i32 %545, %544
  %554 = and i32 %553, 16
  %555 = and i32 %544, 65535
  %556 = icmp eq i32 %555, 0
  %557 = zext i1 %556 to i32
  %558 = shl nuw nsw i32 %557, 6
  %559 = lshr i32 %544, 8
  %560 = and i32 %559, 128
  %561 = icmp eq i32 %555, 32768
  %562 = zext i1 %561 to i32
  %563 = shl nuw nsw i32 %562, 11
  %564 = or i32 %560, %547
  %565 = or i32 %564, %552
  %566 = or i32 %565, %554
  %567 = or i32 %566, %558
  %568 = or i32 %567, %563
  br label %820

; <label>:569                                     ; preds = %0
  %570 = load %struct.CPUX86State** @env, align 8
  %571 = getelementptr inbounds %struct.CPUX86State* %570, i64 0, i32 4
  %572 = load i32* %571, align 4
  %573 = add i32 %572, 31
  %574 = getelementptr inbounds %struct.CPUX86State* %570, i64 0, i32 3
  %575 = load i32* %574, align 4
  %576 = zext i32 %572 to i64
  %577 = and i64 %576, 255
  %578 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %577
  %579 = load i8* %578, align 1
  %580 = zext i8 %579 to i32
  %581 = xor i32 %573, %572
  %582 = and i32 %581, 16
  %583 = icmp eq i32 %572, 0
  %584 = zext i1 %583 to i32
  %585 = shl nuw nsw i32 %584, 6
  %586 = lshr i32 %572, 24
  %587 = and i32 %586, 128
  %588 = icmp eq i32 %572, -2147483648
  %589 = zext i1 %588 to i32
  %590 = shl nuw nsw i32 %589, 11
  %591 = or i32 %587, %575
  %592 = or i32 %591, %580
  %593 = or i32 %592, %582
  %594 = or i32 %593, %585
  %595 = or i32 %594, %590
  br label %820

; <label>:596                                     ; preds = %0
  %597 = load %struct.CPUX86State** @env, align 8
  %598 = getelementptr inbounds %struct.CPUX86State* %597, i64 0, i32 4
  %599 = load i32* %598, align 4
  %600 = add i32 %599, 1
  %601 = getelementptr inbounds %struct.CPUX86State* %597, i64 0, i32 3
  %602 = load i32* %601, align 4
  %.mask.i3 = and i32 %599, 255
  %603 = zext i32 %.mask.i3 to i64
  %604 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %603
  %605 = load i8* %604, align 1
  %606 = zext i8 %605 to i32
  %607 = xor i32 %600, %599
  %608 = and i32 %607, 16
  %609 = icmp eq i32 %.mask.i3, 0
  %610 = zext i1 %609 to i32
  %611 = shl nuw nsw i32 %610, 6
  %612 = and i32 %599, 128
  %613 = icmp eq i32 %.mask.i3, 127
  %614 = zext i1 %613 to i32
  %615 = shl nuw nsw i32 %614, 11
  %616 = or i32 %612, %602
  %617 = or i32 %616, %606
  %618 = or i32 %617, %608
  %619 = or i32 %618, %611
  %620 = or i32 %619, %615
  br label %820

; <label>:621                                     ; preds = %0
  %622 = load %struct.CPUX86State** @env, align 8
  %623 = getelementptr inbounds %struct.CPUX86State* %622, i64 0, i32 4
  %624 = load i32* %623, align 4
  %625 = add i32 %624, 1
  %626 = getelementptr inbounds %struct.CPUX86State* %622, i64 0, i32 3
  %627 = load i32* %626, align 4
  %628 = zext i32 %624 to i64
  %629 = and i64 %628, 255
  %630 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %629
  %631 = load i8* %630, align 1
  %632 = zext i8 %631 to i32
  %633 = xor i32 %625, %624
  %634 = and i32 %633, 16
  %635 = and i32 %624, 65535
  %636 = icmp eq i32 %635, 0
  %637 = zext i1 %636 to i32
  %638 = shl nuw nsw i32 %637, 6
  %639 = lshr i32 %624, 8
  %640 = and i32 %639, 128
  %641 = icmp eq i32 %635, 32767
  %642 = zext i1 %641 to i32
  %643 = shl nuw nsw i32 %642, 11
  %644 = or i32 %640, %627
  %645 = or i32 %644, %632
  %646 = or i32 %645, %634
  %647 = or i32 %646, %638
  %648 = or i32 %647, %643
  br label %820

; <label>:649                                     ; preds = %0
  %650 = load %struct.CPUX86State** @env, align 8
  %651 = getelementptr inbounds %struct.CPUX86State* %650, i64 0, i32 4
  %652 = load i32* %651, align 4
  %653 = add i32 %652, 1
  %654 = getelementptr inbounds %struct.CPUX86State* %650, i64 0, i32 3
  %655 = load i32* %654, align 4
  %656 = zext i32 %652 to i64
  %657 = and i64 %656, 255
  %658 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %657
  %659 = load i8* %658, align 1
  %660 = zext i8 %659 to i32
  %661 = xor i32 %653, %652
  %662 = and i32 %661, 16
  %663 = icmp eq i32 %652, 0
  %664 = zext i1 %663 to i32
  %665 = shl nuw nsw i32 %664, 6
  %666 = lshr i32 %652, 24
  %667 = and i32 %666, 128
  %668 = icmp eq i32 %652, 2147483647
  %669 = zext i1 %668 to i32
  %670 = shl nuw nsw i32 %669, 11
  %671 = or i32 %667, %655
  %672 = or i32 %671, %660
  %673 = or i32 %672, %662
  %674 = or i32 %673, %665
  %675 = or i32 %674, %670
  br label %820

; <label>:676                                     ; preds = %0
  %677 = load %struct.CPUX86State** @env, align 8
  %678 = getelementptr inbounds %struct.CPUX86State* %677, i64 0, i32 3
  %679 = load i32* %678, align 4
  %680 = lshr i32 %679, 7
  %681 = and i32 %680, 1
  %682 = getelementptr inbounds %struct.CPUX86State* %677, i64 0, i32 4
  %683 = load i32* %682, align 4
  %.mask.i2 = and i32 %683, 255
  %684 = zext i32 %.mask.i2 to i64
  %685 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %684
  %686 = load i8* %685, align 1
  %687 = zext i8 %686 to i32
  %688 = icmp eq i32 %.mask.i2, 0
  %689 = zext i1 %688 to i32
  %690 = shl nuw nsw i32 %689, 6
  %691 = and i32 %683, 128
  %692 = xor i32 %683, %679
  %693 = shl i32 %692, 4
  %694 = and i32 %693, 2048
  %695 = or i32 %691, %681
  %696 = or i32 %695, %687
  %697 = or i32 %696, %694
  %698 = or i32 %697, %690
  br label %820

; <label>:699                                     ; preds = %0
  %700 = load %struct.CPUX86State** @env, align 8
  %701 = getelementptr inbounds %struct.CPUX86State* %700, i64 0, i32 3
  %702 = load i32* %701, align 4
  %703 = lshr i32 %702, 15
  %704 = and i32 %703, 1
  %705 = getelementptr inbounds %struct.CPUX86State* %700, i64 0, i32 4
  %706 = load i32* %705, align 4
  %707 = zext i32 %706 to i64
  %708 = and i64 %707, 255
  %709 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %708
  %710 = load i8* %709, align 1
  %711 = zext i8 %710 to i32
  %712 = and i32 %706, 65535
  %713 = icmp eq i32 %712, 0
  %714 = zext i1 %713 to i32
  %715 = shl nuw nsw i32 %714, 6
  %716 = lshr i32 %706, 8
  %717 = and i32 %716, 128
  %718 = xor i32 %706, %702
  %719 = lshr i32 %718, 4
  %720 = and i32 %719, 2048
  %721 = or i32 %711, %704
  %722 = or i32 %721, %717
  %723 = or i32 %722, %720
  %724 = or i32 %723, %715
  br label %820

; <label>:725                                     ; preds = %0
  %726 = load %struct.CPUX86State** @env, align 8
  %727 = getelementptr inbounds %struct.CPUX86State* %726, i64 0, i32 3
  %728 = load i32* %727, align 4
  %729 = lshr i32 %728, 31
  %730 = getelementptr inbounds %struct.CPUX86State* %726, i64 0, i32 4
  %731 = load i32* %730, align 4
  %732 = zext i32 %731 to i64
  %733 = and i64 %732, 255
  %734 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %733
  %735 = load i8* %734, align 1
  %736 = zext i8 %735 to i32
  %737 = icmp eq i32 %731, 0
  %738 = zext i1 %737 to i32
  %739 = shl nuw nsw i32 %738, 6
  %740 = lshr i32 %731, 24
  %741 = and i32 %740, 128
  %742 = xor i32 %731, %728
  %743 = lshr i32 %742, 20
  %744 = and i32 %743, 2048
  %745 = or i32 %736, %729
  %746 = or i32 %745, %741
  %747 = or i32 %746, %739
  %748 = or i32 %747, %744
  br label %820

; <label>:749                                     ; preds = %0
  %750 = load %struct.CPUX86State** @env, align 8
  %751 = getelementptr inbounds %struct.CPUX86State* %750, i64 0, i32 3
  %752 = load i32* %751, align 4
  %753 = and i32 %752, 1
  %754 = getelementptr inbounds %struct.CPUX86State* %750, i64 0, i32 4
  %755 = load i32* %754, align 4
  %.mask.i = and i32 %755, 255
  %756 = zext i32 %.mask.i to i64
  %757 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %756
  %758 = load i8* %757, align 1
  %759 = zext i8 %758 to i32
  %760 = icmp eq i32 %.mask.i, 0
  %761 = zext i1 %760 to i32
  %762 = shl nuw nsw i32 %761, 6
  %763 = and i32 %755, 128
  %764 = xor i32 %755, %752
  %765 = shl i32 %764, 4
  %766 = and i32 %765, 2048
  %767 = or i32 %763, %753
  %768 = or i32 %767, %759
  %769 = or i32 %768, %766
  %770 = or i32 %769, %762
  br label %820

; <label>:771                                     ; preds = %0
  %772 = load %struct.CPUX86State** @env, align 8
  %773 = getelementptr inbounds %struct.CPUX86State* %772, i64 0, i32 3
  %774 = load i32* %773, align 4
  %775 = and i32 %774, 1
  %776 = getelementptr inbounds %struct.CPUX86State* %772, i64 0, i32 4
  %777 = load i32* %776, align 4
  %778 = zext i32 %777 to i64
  %779 = and i64 %778, 255
  %780 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %779
  %781 = load i8* %780, align 1
  %782 = zext i8 %781 to i32
  %783 = and i32 %777, 65535
  %784 = icmp eq i32 %783, 0
  %785 = zext i1 %784 to i32
  %786 = shl nuw nsw i32 %785, 6
  %787 = lshr i32 %777, 8
  %788 = and i32 %787, 128
  %789 = xor i32 %777, %774
  %790 = lshr i32 %789, 4
  %791 = and i32 %790, 2048
  %792 = or i32 %782, %775
  %793 = or i32 %792, %788
  %794 = or i32 %793, %791
  %795 = or i32 %794, %786
  br label %820

; <label>:796                                     ; preds = %0
  %797 = load %struct.CPUX86State** @env, align 8
  %798 = getelementptr inbounds %struct.CPUX86State* %797, i64 0, i32 3
  %799 = load i32* %798, align 4
  %800 = and i32 %799, 1
  %801 = getelementptr inbounds %struct.CPUX86State* %797, i64 0, i32 4
  %802 = load i32* %801, align 4
  %803 = zext i32 %802 to i64
  %804 = and i64 %803, 255
  %805 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %804
  %806 = load i8* %805, align 1
  %807 = zext i8 %806 to i32
  %808 = icmp eq i32 %802, 0
  %809 = zext i1 %808 to i32
  %810 = shl nuw nsw i32 %809, 6
  %811 = lshr i32 %802, 24
  %812 = and i32 %811, 128
  %813 = xor i32 %802, %799
  %814 = lshr i32 %813, 20
  %815 = and i32 %814, 2048
  %816 = or i32 %807, %800
  %817 = or i32 %816, %812
  %818 = or i32 %817, %810
  %819 = or i32 %818, %815
  br label %820

; <label>:820                                     ; preds = %796, %771, %749, %725, %699, %676, %649, %621, %596, %569, %541, %516, %500, %483, %469, %437, %402, %370, %339, %305, %274, %241, %206, %172, %140, %106, %73, %50, %26, %5, %1, %0
  %.0 = phi i32 [ %819, %796 ], [ %795, %771 ], [ %770, %749 ], [ %748, %725 ], [ %724, %699 ], [ %698, %676 ], [ %675, %649 ], [ %648, %621 ], [ %620, %596 ], [ %595, %569 ], [ %568, %541 ], [ %540, %516 ], [ %515, %500 ], [ %499, %483 ], [ %482, %469 ], [ %468, %437 ], [ %436, %402 ], [ %401, %370 ], [ %369, %339 ], [ %338, %305 ], [ %304, %274 ], [ %273, %241 ], [ %240, %206 ], [ %205, %172 ], [ %171, %140 ], [ %139, %106 ], [ %105, %73 ], [ %72, %50 ], [ %49, %26 ], [ %25, %5 ], [ %4, %1 ], [ 0, %0 ]
  ret i32 %.0
}

define void @helper_check_iob(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 3
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 36608
  %5 = icmp eq i32 %4, 35072
  br i1 %5, label %6, label %50

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 2
  %8 = load i32* %7, align 4
  %9 = icmp ult i32 %8, 103
  br i1 %9, label %50, label %10

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %12 = load i32* %11, align 4
  %13 = add i32 %12, 102
  %14 = lshr i32 %13, 12
  %15 = and i32 %14, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %16, i32 0
  %18 = load i32* %17, align 4
  %19 = and i32 %13, -4095
  %20 = icmp eq i32 %18, %19
  %21 = zext i32 %13 to i64
  br i1 %20, label %22, label %lduw_kernel.exit.i, !prof !0

; <label>:22                                      ; preds = %10
  %23 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %16, i32 3
  %24 = load i64* %23, align 8
  %25 = add i64 %24, %21
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %22, %10
  %.sink.in.in.i.i = phi i64 [ %25, %22 ], [ %21, %10 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %26 = zext i16 %.sink.i.i to i32
  %27 = ashr i32 %t0, 3
  %28 = add nsw i32 %26, %27
  %29 = add nsw i32 %28, 1
  %30 = icmp ugt i32 %29, %8
  br i1 %30, label %50, label %31

; <label>:31                                      ; preds = %lduw_kernel.exit.i
  %32 = add i32 %28, %12
  %33 = lshr i32 %32, 12
  %34 = and i32 %33, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %35, i32 0
  %37 = load i32* %36, align 4
  %38 = and i32 %32, -4095
  %39 = icmp eq i32 %37, %38
  %40 = zext i32 %32 to i64
  br i1 %39, label %41, label %lduw_kernel.exit10.i, !prof !0

; <label>:41                                      ; preds = %31
  %42 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %35, i32 3
  %43 = load i64* %42, align 8
  %44 = add i64 %43, %40
  br label %lduw_kernel.exit10.i

lduw_kernel.exit10.i:                             ; preds = %41, %31
  %.sink.in.in.i7.i = phi i64 [ %44, %41 ], [ %40, %31 ]
  %.sink.in.i8.i = inttoptr i64 %.sink.in.in.i7.i to i16*
  %.sink.i9.i = load i16* %.sink.in.i8.i, align 2
  %45 = zext i16 %.sink.i9.i to i32
  %46 = and i32 %t0, 7
  %47 = shl i32 1, %46
  %48 = and i32 %45, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %check_io.exit, label %50

; <label>:50                                      ; preds = %lduw_kernel.exit10.i, %lduw_kernel.exit.i, %6, %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

check_io.exit:                                    ; preds = %lduw_kernel.exit10.i
  ret void
}

define void @helper_check_iow(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 3
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 36608
  %5 = icmp eq i32 %4, 35072
  br i1 %5, label %6, label %50

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 2
  %8 = load i32* %7, align 4
  %9 = icmp ult i32 %8, 103
  br i1 %9, label %50, label %10

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %12 = load i32* %11, align 4
  %13 = add i32 %12, 102
  %14 = lshr i32 %13, 12
  %15 = and i32 %14, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %16, i32 0
  %18 = load i32* %17, align 4
  %19 = and i32 %13, -4095
  %20 = icmp eq i32 %18, %19
  %21 = zext i32 %13 to i64
  br i1 %20, label %22, label %lduw_kernel.exit.i, !prof !0

; <label>:22                                      ; preds = %10
  %23 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %16, i32 3
  %24 = load i64* %23, align 8
  %25 = add i64 %24, %21
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %22, %10
  %.sink.in.in.i.i = phi i64 [ %25, %22 ], [ %21, %10 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %26 = zext i16 %.sink.i.i to i32
  %27 = ashr i32 %t0, 3
  %28 = add nsw i32 %26, %27
  %29 = add nsw i32 %28, 1
  %30 = icmp ugt i32 %29, %8
  br i1 %30, label %50, label %31

; <label>:31                                      ; preds = %lduw_kernel.exit.i
  %32 = add i32 %28, %12
  %33 = lshr i32 %32, 12
  %34 = and i32 %33, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %35, i32 0
  %37 = load i32* %36, align 4
  %38 = and i32 %32, -4095
  %39 = icmp eq i32 %37, %38
  %40 = zext i32 %32 to i64
  br i1 %39, label %41, label %lduw_kernel.exit10.i, !prof !0

; <label>:41                                      ; preds = %31
  %42 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %35, i32 3
  %43 = load i64* %42, align 8
  %44 = add i64 %43, %40
  br label %lduw_kernel.exit10.i

lduw_kernel.exit10.i:                             ; preds = %41, %31
  %.sink.in.in.i7.i = phi i64 [ %44, %41 ], [ %40, %31 ]
  %.sink.in.i8.i = inttoptr i64 %.sink.in.in.i7.i to i16*
  %.sink.i9.i = load i16* %.sink.in.i8.i, align 2
  %45 = zext i16 %.sink.i9.i to i32
  %46 = and i32 %t0, 7
  %47 = shl i32 3, %46
  %48 = and i32 %45, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %check_io.exit, label %50

; <label>:50                                      ; preds = %lduw_kernel.exit10.i, %lduw_kernel.exit.i, %6, %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

check_io.exit:                                    ; preds = %lduw_kernel.exit10.i
  ret void
}

define void @helper_check_iol(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 3
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 36608
  %5 = icmp eq i32 %4, 35072
  br i1 %5, label %6, label %50

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 2
  %8 = load i32* %7, align 4
  %9 = icmp ult i32 %8, 103
  br i1 %9, label %50, label %10

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %12 = load i32* %11, align 4
  %13 = add i32 %12, 102
  %14 = lshr i32 %13, 12
  %15 = and i32 %14, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %16, i32 0
  %18 = load i32* %17, align 4
  %19 = and i32 %13, -4095
  %20 = icmp eq i32 %18, %19
  %21 = zext i32 %13 to i64
  br i1 %20, label %22, label %lduw_kernel.exit.i, !prof !0

; <label>:22                                      ; preds = %10
  %23 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %16, i32 3
  %24 = load i64* %23, align 8
  %25 = add i64 %24, %21
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %22, %10
  %.sink.in.in.i.i = phi i64 [ %25, %22 ], [ %21, %10 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %26 = zext i16 %.sink.i.i to i32
  %27 = ashr i32 %t0, 3
  %28 = add nsw i32 %26, %27
  %29 = add nsw i32 %28, 1
  %30 = icmp ugt i32 %29, %8
  br i1 %30, label %50, label %31

; <label>:31                                      ; preds = %lduw_kernel.exit.i
  %32 = add i32 %28, %12
  %33 = lshr i32 %32, 12
  %34 = and i32 %33, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %35, i32 0
  %37 = load i32* %36, align 4
  %38 = and i32 %32, -4095
  %39 = icmp eq i32 %37, %38
  %40 = zext i32 %32 to i64
  br i1 %39, label %41, label %lduw_kernel.exit10.i, !prof !0

; <label>:41                                      ; preds = %31
  %42 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %35, i32 3
  %43 = load i64* %42, align 8
  %44 = add i64 %43, %40
  br label %lduw_kernel.exit10.i

lduw_kernel.exit10.i:                             ; preds = %41, %31
  %.sink.in.in.i7.i = phi i64 [ %44, %41 ], [ %40, %31 ]
  %.sink.in.i8.i = inttoptr i64 %.sink.in.in.i7.i to i16*
  %.sink.i9.i = load i16* %.sink.in.i8.i, align 2
  %45 = zext i16 %.sink.i9.i to i32
  %46 = and i32 %t0, 7
  %47 = shl i32 15, %46
  %48 = and i32 %45, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %check_io.exit, label %50

; <label>:50                                      ; preds = %lduw_kernel.exit10.i, %lduw_kernel.exit.i, %6, %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

check_io.exit:                                    ; preds = %lduw_kernel.exit10.i
  ret void
}

define void @helper_outb(i32 %port, i32 %data) nounwind uwtable {
  %1 = trunc i32 %data to i8
  tail call void @cpu_outb(i32 %port, i8 zeroext %1) nounwind
  ret void
}

declare void @cpu_outb(i32, i8 zeroext)

define i32 @helper_inb(i32 %port) nounwind uwtable {
  %1 = tail call zeroext i8 @cpu_inb(i32 %port) nounwind
  %2 = zext i8 %1 to i32
  ret i32 %2
}

declare zeroext i8 @cpu_inb(i32)

define void @helper_outw(i32 %port, i32 %data) nounwind uwtable {
  %1 = trunc i32 %data to i16
  tail call void @cpu_outw(i32 %port, i16 zeroext %1) nounwind
  ret void
}

declare void @cpu_outw(i32, i16 zeroext)

define i32 @helper_inw(i32 %port) nounwind uwtable {
  %1 = tail call zeroext i16 @cpu_inw(i32 %port) nounwind
  %2 = zext i16 %1 to i32
  ret i32 %2
}

declare zeroext i16 @cpu_inw(i32)

define void @helper_outl(i32 %port, i32 %data) nounwind uwtable {
  tail call void @cpu_outl(i32 %port, i32 %data) nounwind
  ret void
}

declare void @cpu_outl(i32, i32)

define i32 @helper_inl(i32 %port) nounwind uwtable {
  %1 = tail call i32 @cpu_inl(i32 %port) nounwind
  ret i32 %1
}

declare i32 @cpu_inl(i32)

define void @do_interrupt(%struct.CPUX86State* %env1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %env1, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %env1, i64 0, i32 86
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds %struct.CPUX86State* %env1, i64 0, i32 57
  %5 = load i32* %4, align 4
  %6 = getelementptr inbounds %struct.CPUX86State* %env1, i64 0, i32 56
  %7 = load i32* %6, align 4
  %8 = getelementptr inbounds %struct.CPUX86State* %env1, i64 0, i32 58
  %9 = load i32* %8, align 4
  tail call fastcc void @do_interrupt_all(i32 %3, i32 %5, i32 %7, i32 %9, i32 0)
  %10 = load %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State* %10, i64 0, i32 62
  store i32 -1, i32* %11, align 4
  store %struct.CPUX86State* %1, %struct.CPUX86State** @env, align 8
  ret void
}

define internal fastcc void @do_interrupt_all(i32 %intno, i32 %is_int, i32 %error_code, i32 %next_eip, i32 %is_hw) nounwind uwtable {
  %1 = load i32* @loglevel, align 4
  %2 = and i32 %1, 16
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %._crit_edge, label %4

; <label>:4                                       ; preds = %0
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 14, i64 0
  %7 = load i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge, label %10

; <label>:10                                      ; preds = %4
  %11 = load %struct._IO_FILE** @logfile, align 8
  %12 = icmp eq %struct._IO_FILE* %11, null
  br i1 %12, label %30, label %13

; <label>:13                                      ; preds = %10
  %14 = load i32* @do_interrupt_all.count, align 4
  %15 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 7
  %16 = load i32* %15, align 4
  %17 = and i32 %16, 3
  %18 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 9, i64 1, i32 0
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 1
  %21 = load i32* %20, align 4
  %22 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 9, i64 1, i32 1
  %23 = load i32* %22, align 4
  %24 = add i32 %23, %21
  %25 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 9, i64 2, i32 0
  %26 = load i32* %25, align 4
  %27 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 0, i64 4
  %28 = load i32* %27, align 4
  %29 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([65 x i8]* @.str17, i64 0, i64 0), i32 %14, i32 %intno, i32 %error_code, i32 %is_int, i32 %17, i32 %19, i32 %21, i32 %24, i32 %26, i32 %28) nounwind
  %.pr = load %struct._IO_FILE** @logfile, align 8
  br label %30

; <label>:30                                      ; preds = %13, %10
  %31 = phi %struct._IO_FILE* [ null, %10 ], [ %.pr, %13 ]
  %32 = icmp eq i32 %intno, 14
  %33 = icmp ne %struct._IO_FILE* %31, null
  br i1 %32, label %34, label %40

; <label>:34                                      ; preds = %30
  br i1 %33, label %35, label %46

; <label>:35                                      ; preds = %34
  %36 = load %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 14, i64 2
  %38 = load i32* %37, align 4
  %39 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([10 x i8]* @.str18, i64 0, i64 0), i32 %38) nounwind
  br label %46

; <label>:40                                      ; preds = %30
  br i1 %33, label %41, label %46

; <label>:41                                      ; preds = %40
  %42 = load %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State* %42, i64 0, i32 0, i64 0
  %44 = load i32* %43, align 4
  %45 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([10 x i8]* @.str19, i64 0, i64 0), i32 %44) nounwind
  br label %46

; <label>:46                                      ; preds = %41, %40, %35, %34
  %47 = load %struct._IO_FILE** @logfile, align 8
  %48 = icmp eq %struct._IO_FILE* %47, null
  br i1 %48, label %50, label %49

; <label>:49                                      ; preds = %46
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %47)
  br label %50

; <label>:50                                      ; preds = %49, %46
  %51 = load i32* @do_interrupt_all.count, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* @do_interrupt_all.count, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %50, %4, %0
  %53 = load %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 14, i64 0
  %55 = load i32* %54, align 4
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 7
  %59 = load i32* %58, align 4
  %60 = and i32 %59, 2097152
  %61 = icmp ne i32 %60, 0
  br i1 %57, label %1191, label %62

; <label>:62                                      ; preds = %._crit_edge
  br i1 %61, label %63, label %handle_even_inj.exit25

; <label>:63                                      ; preds = %62
  %64 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 40
  %65 = load i64* %64, align 8
  %66 = add i64 %65, 168
  %67 = tail call i32 @ldl_phys(i64 %66) nounwind
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %handle_even_inj.exit25, label %69

; <label>:69                                      ; preds = %63
  %70 = icmp eq i32 %is_int, 0
  %..i22 = select i1 %70, i32 768, i32 1024
  %71 = or i32 %..i22, %intno
  %72 = or i32 %71, -2147483648
  %switch.tableidx.i.i23 = add i32 %intno, -8
  %73 = icmp ult i32 %switch.tableidx.i.i23, 10
  br i1 %73, label %exeption_has_error_code.exit.i24, label %exeption_has_error_code.exit.thread.i

exeption_has_error_code.exit.i24:                 ; preds = %69
  %74 = lshr i32 386, %switch.tableidx.i.i23
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %exeption_has_error_code.exit.thread.i

; <label>:77                                      ; preds = %exeption_has_error_code.exit.i24
  %78 = or i32 %71, -2147481600
  %79 = load %struct.CPUX86State** @env, align 8
  %80 = getelementptr inbounds %struct.CPUX86State* %79, i64 0, i32 40
  %81 = load i64* %80, align 8
  %82 = add i64 %81, 172
  tail call void @stl_phys(i64 %82, i32 %error_code) nounwind
  br label %exeption_has_error_code.exit.thread.i

exeption_has_error_code.exit.thread.i:            ; preds = %77, %exeption_has_error_code.exit.i24, %69
  %event_inj.0.i = phi i32 [ %78, %77 ], [ %72, %exeption_has_error_code.exit.i24 ], [ %72, %69 ]
  %83 = load %struct.CPUX86State** @env, align 8
  %84 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 40
  %85 = load i64* %84, align 8
  %86 = add i64 %85, 168
  tail call void @stl_phys(i64 %86, i32 %event_inj.0.i) nounwind
  br label %handle_even_inj.exit25

handle_even_inj.exit25:                           ; preds = %exeption_has_error_code.exit.thread.i, %63, %62
  %87 = icmp ne i32 %is_int, 0
  %.not.i = xor i1 %87, true
  %88 = icmp eq i32 %is_hw, 0
  %or.cond.i = and i1 %88, %.not.i
  br i1 %or.cond.i, label %89, label %exeption_has_error_code.exit.i

; <label>:89                                      ; preds = %handle_even_inj.exit25
  %switch.tableidx.i.i = add i32 %intno, -8
  %90 = icmp ult i32 %switch.tableidx.i.i, 10
  br i1 %90, label %switch.lookup.i.i, label %exeption_has_error_code.exit.i

switch.lookup.i.i:                                ; preds = %89
  %91 = sext i32 %switch.tableidx.i.i to i64
  %switch.gep.i.i = getelementptr inbounds [10 x i32]* @switch.table, i64 0, i64 %91
  %switch.load.i.i = load i32* %switch.gep.i.i, align 4
  br label %exeption_has_error_code.exit.i

exeption_has_error_code.exit.i:                   ; preds = %switch.lookup.i.i, %89, %handle_even_inj.exit25
  %has_error_code.0.i = phi i32 [ %switch.load.i.i, %switch.lookup.i.i ], [ 0, %handle_even_inj.exit25 ], [ 0, %89 ]
  %.pre208.i = load %struct.CPUX86State** @env, align 8
  br i1 %87, label %exeption_has_error_code.exit._crit_edge.i, label %92

; <label>:92                                      ; preds = %exeption_has_error_code.exit.i
  %93 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 1
  %94 = load i32* %93, align 4
  br label %exeption_has_error_code.exit._crit_edge.i

exeption_has_error_code.exit._crit_edge.i:        ; preds = %92, %exeption_has_error_code.exit.i
  %old_eip.0.i = phi i32 [ %94, %92 ], [ %next_eip, %exeption_has_error_code.exit.i ]
  %95 = shl nsw i32 %intno, 3
  %96 = or i32 %95, 7
  %97 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 13, i32 2
  %98 = load i32* %97, align 4
  %99 = icmp ugt i32 %96, %98
  br i1 %99, label %100, label %102

; <label>:100                                     ; preds = %exeption_has_error_code.exit._crit_edge.i
  %101 = or i32 %95, 2
  tail call fastcc void @raise_exception_err(i32 13, i32 %101) noreturn nounwind
  unreachable

; <label>:102                                     ; preds = %exeption_has_error_code.exit._crit_edge.i
  %103 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 13, i32 1
  %104 = load i32* %103, align 4
  %105 = add i32 %104, %95
  %106 = lshr i32 %105, 12
  %107 = and i32 %106, 255
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %108, i32 0
  %110 = load i32* %109, align 4
  %111 = and i32 %105, -4093
  %112 = icmp eq i32 %110, %111
  %113 = zext i32 %105 to i64
  br i1 %112, label %114, label %ldl_kernel.exit.i, !prof !0

; <label>:114                                     ; preds = %102
  %115 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %108, i32 3
  %116 = load i64* %115, align 8
  %117 = add i64 %116, %113
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %114, %102
  %res.0.in.in.i.i = phi i64 [ %117, %114 ], [ %113, %102 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %118 = add i32 %105, 4
  %119 = lshr i32 %118, 12
  %120 = and i32 %119, 255
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %121, i32 0
  %123 = load i32* %122, align 4
  %124 = and i32 %118, -4093
  %125 = icmp eq i32 %123, %124
  %126 = zext i32 %118 to i64
  br i1 %125, label %127, label %ldl_kernel.exit137.i, !prof !0

; <label>:127                                     ; preds = %ldl_kernel.exit.i
  %128 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %121, i32 3
  %129 = load i64* %128, align 8
  %130 = add i64 %129, %126
  br label %ldl_kernel.exit137.i

ldl_kernel.exit137.i:                             ; preds = %127, %ldl_kernel.exit.i
  %res.0.in.in.i134.i = phi i64 [ %130, %127 ], [ %126, %ldl_kernel.exit.i ]
  %res.0.in.i135.i = inttoptr i64 %res.0.in.in.i134.i to i32*
  %res.0.i136.i = load i32* %res.0.in.i135.i, align 4
  %131 = lshr i32 %res.0.i136.i, 8
  %132 = and i32 %131, 31
  switch i32 %132, label %197 [
    i32 5, label %133
    i32 6, label %199
    i32 7, label %199
    i32 14, label %199
    i32 15, label %199
  ]

; <label>:133                                     ; preds = %ldl_kernel.exit137.i
  %134 = and i32 %res.0.i136.i, 32768
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %138

; <label>:136                                     ; preds = %133
  %137 = or i32 %95, 2
  tail call fastcc void @raise_exception_err(i32 11, i32 %137) noreturn nounwind
  unreachable

; <label>:138                                     ; preds = %133
  tail call fastcc void @switch_tss(i32 %95, i32 %res.0.i.i, i32 %res.0.i136.i, i32 2, i32 %old_eip.0.i) nounwind
  %139 = icmp eq i32 %has_error_code.0.i, 0
  br i1 %139, label %do_interrupt_protected.exit, label %140

; <label>:140                                     ; preds = %138
  %141 = load %struct.CPUX86State** @env, align 8
  %142 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 11, i32 3
  %143 = load i32* %142, align 4
  %144 = lshr i32 %143, 11
  %145 = and i32 %144, 1
  %146 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 9, i64 2, i32 3
  %147 = load i32* %146, align 4
  %148 = lshr i32 %147, 6
  %149 = and i32 %148, 65536
  %150 = xor i32 %149, 65536
  %151 = add i32 %150, -1
  %152 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 0, i64 4
  %153 = load i32* %152, align 4
  %154 = shl i32 2, %145
  %155 = sub i32 %153, %154
  %156 = and i32 %151, %155
  %157 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 9, i64 2, i32 1
  %158 = load i32* %157, align 4
  %159 = add i32 %156, %158
  %160 = icmp eq i32 %145, 0
  %161 = lshr i32 %159, 12
  %162 = and i32 %161, 255
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 71, i64 0, i64 %163, i32 1
  %165 = load i32* %164, align 4
  br i1 %160, label %177, label %166

; <label>:166                                     ; preds = %140
  %167 = and i32 %159, -4093
  %168 = icmp eq i32 %165, %167
  %169 = zext i32 %159 to i64
  br i1 %168, label %172, label %170, !prof !0

; <label>:170                                     ; preds = %166
  %171 = inttoptr i64 %169 to i32*
  store i32 %error_code, i32* %171, align 4
  br label %stl_kernel.exit144.i

; <label>:172                                     ; preds = %166
  %173 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 71, i64 0, i64 %163, i32 3
  %174 = load i64* %173, align 8
  %175 = add i64 %174, %169
  %176 = inttoptr i64 %175 to i32*
  store i32 %error_code, i32* %176, align 4
  br label %stl_kernel.exit144.i

; <label>:177                                     ; preds = %140
  %178 = and i32 %159, -4095
  %179 = icmp eq i32 %165, %178
  br i1 %179, label %184, label %180, !prof !0

; <label>:180                                     ; preds = %177
  %181 = trunc i32 %error_code to i16
  %182 = zext i32 %159 to i64
  %183 = inttoptr i64 %182 to i16*
  store i16 %181, i16* %183, align 2
  br label %stl_kernel.exit144.i

; <label>:184                                     ; preds = %177
  %185 = zext i32 %159 to i64
  %186 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 71, i64 0, i64 %163, i32 3
  %187 = load i64* %186, align 8
  %188 = add i64 %187, %185
  %189 = trunc i32 %error_code to i16
  %190 = inttoptr i64 %188 to i16*
  store i16 %189, i16* %190, align 2
  br label %stl_kernel.exit144.i

stl_kernel.exit144.i:                             ; preds = %184, %180, %172, %170
  %191 = load %struct.CPUX86State** @env, align 8
  %192 = getelementptr inbounds %struct.CPUX86State* %191, i64 0, i32 0, i64 4
  %193 = load i32* %192, align 4
  %194 = sub i32 0, %150
  %195 = and i32 %193, %194
  %196 = or i32 %195, %156
  store i32 %196, i32* %192, align 4
  br label %do_interrupt_protected.exit

; <label>:197                                     ; preds = %ldl_kernel.exit137.i
  %198 = or i32 %95, 2
  tail call fastcc void @raise_exception_err(i32 13, i32 %198) noreturn nounwind
  unreachable

; <label>:199                                     ; preds = %ldl_kernel.exit137.i, %ldl_kernel.exit137.i, %ldl_kernel.exit137.i, %ldl_kernel.exit137.i
  %200 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 7
  %201 = load i32* %200, align 4
  %202 = and i32 %201, 3
  br i1 %87, label %203, label %209

; <label>:203                                     ; preds = %199
  %204 = lshr i32 %res.0.i136.i, 13
  %205 = and i32 %204, 3
  %206 = icmp ult i32 %205, %202
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %203
  %208 = or i32 %95, 2
  tail call fastcc void @raise_exception_err(i32 13, i32 %208) noreturn nounwind
  unreachable

; <label>:209                                     ; preds = %203, %199
  %210 = and i32 %res.0.i136.i, 32768
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %214

; <label>:212                                     ; preds = %209
  %213 = or i32 %95, 2
  tail call fastcc void @raise_exception_err(i32 11, i32 %213) noreturn nounwind
  unreachable

; <label>:214                                     ; preds = %209
  %215 = lshr i32 %res.0.i.i, 16
  %216 = and i32 %res.0.i136.i, -65536
  %217 = and i32 %res.0.i.i, 65535
  %218 = or i32 %216, %217
  %219 = and i32 %215, 65532
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %222

; <label>:221                                     ; preds = %214
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

; <label>:222                                     ; preds = %214
  %223 = and i32 %215, 4
  %224 = icmp eq i32 %223, 0
  %225 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 10
  %226 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 12
  %dt.0.i.i = select i1 %224, %struct.SegmentCache* %226, %struct.SegmentCache* %225
  %227 = or i32 %215, 7
  %228 = getelementptr inbounds %struct.SegmentCache* %dt.0.i.i, i64 0, i32 2
  %229 = load i32* %228, align 4
  %230 = icmp ugt i32 %227, %229
  br i1 %230, label %261, label %231

; <label>:231                                     ; preds = %222
  %232 = and i32 %215, 65528
  %233 = getelementptr inbounds %struct.SegmentCache* %dt.0.i.i, i64 0, i32 1
  %234 = load i32* %233, align 4
  %235 = add i32 %234, %232
  %236 = lshr i32 %235, 12
  %237 = and i32 %236, 255
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %238, i32 0
  %240 = load i32* %239, align 4
  %241 = and i32 %235, -4093
  %242 = icmp eq i32 %240, %241
  %243 = zext i32 %235 to i64
  br i1 %242, label %244, label %ldl_kernel.exit.i.i, !prof !0

; <label>:244                                     ; preds = %231
  %245 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %238, i32 3
  %246 = load i64* %245, align 8
  %247 = add i64 %246, %243
  br label %ldl_kernel.exit.i.i

ldl_kernel.exit.i.i:                              ; preds = %244, %231
  %res.0.in.in.i.i.i = phi i64 [ %247, %244 ], [ %243, %231 ]
  %res.0.in.i.i.i = inttoptr i64 %res.0.in.in.i.i.i to i32*
  %res.0.i.i.i = load i32* %res.0.in.i.i.i, align 4
  %248 = add i32 %235, 4
  %249 = lshr i32 %248, 12
  %250 = and i32 %249, 255
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %251, i32 0
  %253 = load i32* %252, align 4
  %254 = and i32 %248, -4093
  %255 = icmp eq i32 %253, %254
  %256 = zext i32 %248 to i64
  br i1 %255, label %257, label %262, !prof !0

; <label>:257                                     ; preds = %ldl_kernel.exit.i.i
  %258 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %251, i32 3
  %259 = load i64* %258, align 8
  %260 = add i64 %259, %256
  br label %262

; <label>:261                                     ; preds = %222
  tail call fastcc void @raise_exception_err(i32 13, i32 %219) noreturn nounwind
  unreachable

; <label>:262                                     ; preds = %257, %ldl_kernel.exit.i.i
  %res.0.in.in.i8.i.i = phi i64 [ %260, %257 ], [ %256, %ldl_kernel.exit.i.i ]
  %res.0.in.i9.i.i = inttoptr i64 %res.0.in.in.i8.i.i to i32*
  %res.0.i10.i.i = load i32* %res.0.in.i9.i.i, align 4
  %263 = and i32 %res.0.i10.i.i, 6144
  %264 = icmp eq i32 %263, 6144
  br i1 %264, label %266, label %265

; <label>:265                                     ; preds = %262
  tail call fastcc void @raise_exception_err(i32 13, i32 %219) noreturn nounwind
  unreachable

; <label>:266                                     ; preds = %262
  %267 = lshr i32 %res.0.i10.i.i, 13
  %268 = and i32 %267, 3
  %269 = icmp ugt i32 %268, %202
  br i1 %269, label %270, label %271

; <label>:270                                     ; preds = %266
  tail call fastcc void @raise_exception_err(i32 13, i32 %219) noreturn nounwind
  unreachable

; <label>:271                                     ; preds = %266
  %272 = and i32 %res.0.i10.i.i, 32768
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %275

; <label>:274                                     ; preds = %271
  tail call fastcc void @raise_exception_err(i32 11, i32 %219) noreturn nounwind
  unreachable

; <label>:275                                     ; preds = %271
  %276 = and i32 %res.0.i10.i.i, 1024
  %277 = icmp eq i32 %276, 0
  %278 = icmp ult i32 %268, %202
  %or.cond96.i = and i1 %277, %278
  br i1 %or.cond96.i, label %279, label %427

; <label>:279                                     ; preds = %275
  %280 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 11, i32 3
  %281 = load i32* %280, align 4
  %282 = and i32 %281, 32768
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %285

; <label>:284                                     ; preds = %279
  tail call void (%struct.CPUX86State*, i8*, ...)* @cpu_abort(%struct.CPUX86State* %.pre208.i, i8* getelementptr inbounds ([12 x i8]* @.str15, i64 0, i64 0)) noreturn nounwind
  unreachable

; <label>:285                                     ; preds = %279
  %286 = and i32 %281, 1792
  %287 = icmp eq i32 %286, 256
  br i1 %287, label %289, label %288

; <label>:288                                     ; preds = %285
  tail call void (%struct.CPUX86State*, i8*, ...)* @cpu_abort(%struct.CPUX86State* %.pre208.i, i8* getelementptr inbounds ([17 x i8]* @.str16, i64 0, i64 0)) noreturn nounwind
  unreachable

; <label>:289                                     ; preds = %285
  %290 = lshr i32 %281, 11
  %291 = and i32 %290, 1
  %292 = shl nuw nsw i32 %268, 2
  %293 = or i32 %292, 2
  %294 = shl i32 %293, %291
  %295 = shl i32 4, %291
  %296 = add i32 %295, -1
  %297 = add i32 %296, %294
  %298 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 11, i32 2
  %299 = load i32* %298, align 4
  %300 = icmp ugt i32 %297, %299
  br i1 %300, label %301, label %305

; <label>:301                                     ; preds = %289
  %302 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 11, i32 0
  %303 = load i32* %302, align 4
  %304 = and i32 %303, 65532
  tail call fastcc void @raise_exception_err(i32 10, i32 %304) noreturn nounwind
  unreachable

; <label>:305                                     ; preds = %289
  %306 = icmp eq i32 %291, 0
  %307 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 11, i32 1
  %308 = load i32* %307, align 4
  %309 = add i32 %308, %294
  %310 = lshr i32 %309, 12
  %311 = and i32 %310, 255
  %312 = zext i32 %311 to i64
  %313 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %312, i32 0
  %314 = load i32* %313, align 4
  br i1 %306, label %315, label %338

; <label>:315                                     ; preds = %305
  %316 = and i32 %309, -4095
  %317 = icmp eq i32 %314, %316
  %318 = zext i32 %309 to i64
  br i1 %317, label %319, label %lduw_kernel.exit.i.i, !prof !0

; <label>:319                                     ; preds = %315
  %320 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %312, i32 3
  %321 = load i64* %320, align 8
  %322 = add i64 %321, %318
  br label %lduw_kernel.exit.i.i

lduw_kernel.exit.i.i:                             ; preds = %319, %315
  %.sink.in.in.i.i.i = phi i64 [ %322, %319 ], [ %318, %315 ]
  %.sink.in.i.i.i = inttoptr i64 %.sink.in.in.i.i.i to i16*
  %.sink.i.i.i = load i16* %.sink.in.i.i.i, align 2
  %323 = zext i16 %.sink.i.i.i to i32
  %324 = add i32 %294, 2
  %325 = add i32 %324, %308
  %326 = lshr i32 %325, 12
  %327 = and i32 %326, 255
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %328, i32 0
  %330 = load i32* %329, align 4
  %331 = and i32 %325, -4095
  %332 = icmp eq i32 %330, %331
  %333 = zext i32 %325 to i64
  br i1 %332, label %334, label %get_ss_esp_from_tss.exit.i, !prof !0

; <label>:334                                     ; preds = %lduw_kernel.exit.i.i
  %335 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %328, i32 3
  %336 = load i64* %335, align 8
  %337 = add i64 %336, %333
  br label %get_ss_esp_from_tss.exit.i

; <label>:338                                     ; preds = %305
  %339 = and i32 %309, -4093
  %340 = icmp eq i32 %314, %339
  %341 = zext i32 %309 to i64
  br i1 %340, label %342, label %ldl_kernel.exit.i149.i, !prof !0

; <label>:342                                     ; preds = %338
  %343 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %312, i32 3
  %344 = load i64* %343, align 8
  %345 = add i64 %344, %341
  br label %ldl_kernel.exit.i149.i

ldl_kernel.exit.i149.i:                           ; preds = %342, %338
  %res.0.in.in.i.i146.i = phi i64 [ %345, %342 ], [ %341, %338 ]
  %res.0.in.i.i147.i = inttoptr i64 %res.0.in.in.i.i146.i to i32*
  %res.0.i.i148.i = load i32* %res.0.in.i.i147.i, align 4
  %346 = add i32 %294, 4
  %347 = add i32 %346, %308
  %348 = lshr i32 %347, 12
  %349 = and i32 %348, 255
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %350, i32 0
  %352 = load i32* %351, align 4
  %353 = and i32 %347, -4095
  %354 = icmp eq i32 %352, %353
  %355 = zext i32 %347 to i64
  br i1 %354, label %356, label %get_ss_esp_from_tss.exit.i, !prof !0

; <label>:356                                     ; preds = %ldl_kernel.exit.i149.i
  %357 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %350, i32 3
  %358 = load i64* %357, align 8
  %359 = add i64 %358, %355
  br label %get_ss_esp_from_tss.exit.i

get_ss_esp_from_tss.exit.i:                       ; preds = %356, %ldl_kernel.exit.i149.i, %334, %lduw_kernel.exit.i.i
  %360 = phi i32 [ %323, %334 ], [ %323, %lduw_kernel.exit.i.i ], [ %res.0.i.i148.i, %356 ], [ %res.0.i.i148.i, %ldl_kernel.exit.i149.i ]
  %.sink.i17.sink.in.in.i.i = phi i64 [ %337, %334 ], [ %333, %lduw_kernel.exit.i.i ], [ %359, %356 ], [ %355, %ldl_kernel.exit.i149.i ]
  %.sink.i17.sink.in.i.i = inttoptr i64 %.sink.i17.sink.in.in.i.i to i16*
  %.sink.i17.sink.i.i = load i16* %.sink.i17.sink.in.i.i, align 2
  %361 = zext i16 %.sink.i17.sink.i.i to i32
  %362 = and i32 %361, 65532
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %364, label %365

; <label>:364                                     ; preds = %get_ss_esp_from_tss.exit.i
  tail call fastcc void @raise_exception_err(i32 10, i32 0) noreturn nounwind
  unreachable

; <label>:365                                     ; preds = %get_ss_esp_from_tss.exit.i
  %366 = and i32 %361, 3
  %367 = icmp eq i32 %366, %268
  br i1 %367, label %369, label %368

; <label>:368                                     ; preds = %365
  tail call fastcc void @raise_exception_err(i32 10, i32 %362) noreturn nounwind
  unreachable

; <label>:369                                     ; preds = %365
  %370 = and i32 %361, 4
  %371 = icmp eq i32 %370, 0
  %dt.0.i150.i = select i1 %371, %struct.SegmentCache* %226, %struct.SegmentCache* %225
  %372 = or i32 %361, 7
  %373 = getelementptr inbounds %struct.SegmentCache* %dt.0.i150.i, i64 0, i32 2
  %374 = load i32* %373, align 4
  %375 = icmp ugt i32 %372, %374
  br i1 %375, label %406, label %376

; <label>:376                                     ; preds = %369
  %377 = and i32 %361, 65528
  %378 = getelementptr inbounds %struct.SegmentCache* %dt.0.i150.i, i64 0, i32 1
  %379 = load i32* %378, align 4
  %380 = add i32 %379, %377
  %381 = lshr i32 %380, 12
  %382 = and i32 %381, 255
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %383, i32 0
  %385 = load i32* %384, align 4
  %386 = and i32 %380, -4093
  %387 = icmp eq i32 %385, %386
  %388 = zext i32 %380 to i64
  br i1 %387, label %389, label %ldl_kernel.exit.i154.i, !prof !0

; <label>:389                                     ; preds = %376
  %390 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %383, i32 3
  %391 = load i64* %390, align 8
  %392 = add i64 %391, %388
  br label %ldl_kernel.exit.i154.i

ldl_kernel.exit.i154.i:                           ; preds = %389, %376
  %res.0.in.in.i.i151.i = phi i64 [ %392, %389 ], [ %388, %376 ]
  %res.0.in.i.i152.i = inttoptr i64 %res.0.in.in.i.i151.i to i32*
  %res.0.i.i153.i = load i32* %res.0.in.i.i152.i, align 4
  %393 = add i32 %380, 4
  %394 = lshr i32 %393, 12
  %395 = and i32 %394, 255
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %396, i32 0
  %398 = load i32* %397, align 4
  %399 = and i32 %393, -4093
  %400 = icmp eq i32 %398, %399
  %401 = zext i32 %393 to i64
  br i1 %400, label %402, label %407, !prof !0

; <label>:402                                     ; preds = %ldl_kernel.exit.i154.i
  %403 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %396, i32 3
  %404 = load i64* %403, align 8
  %405 = add i64 %404, %401
  br label %407

; <label>:406                                     ; preds = %369
  tail call fastcc void @raise_exception_err(i32 10, i32 %362) noreturn nounwind
  unreachable

; <label>:407                                     ; preds = %402, %ldl_kernel.exit.i154.i
  %res.0.in.in.i8.i155.i = phi i64 [ %405, %402 ], [ %401, %ldl_kernel.exit.i154.i ]
  %res.0.in.i9.i156.i = inttoptr i64 %res.0.in.in.i8.i155.i to i32*
  %res.0.i10.i157.i = load i32* %res.0.in.i9.i156.i, align 4
  %408 = lshr i32 %res.0.i10.i157.i, 13
  %409 = and i32 %408, 3
  %410 = icmp eq i32 %409, %268
  br i1 %410, label %412, label %411

; <label>:411                                     ; preds = %407
  tail call fastcc void @raise_exception_err(i32 10, i32 %362) noreturn nounwind
  unreachable

; <label>:412                                     ; preds = %407
  %413 = and i32 %res.0.i10.i157.i, 6656
  %414 = icmp eq i32 %413, 4608
  br i1 %414, label %416, label %415

; <label>:415                                     ; preds = %412
  tail call fastcc void @raise_exception_err(i32 10, i32 %362) noreturn nounwind
  unreachable

; <label>:416                                     ; preds = %412
  %417 = and i32 %res.0.i10.i157.i, 32768
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %420

; <label>:419                                     ; preds = %416
  tail call fastcc void @raise_exception_err(i32 10, i32 %362) noreturn nounwind
  unreachable

; <label>:420                                     ; preds = %416
  %421 = lshr i32 %res.0.i.i153.i, 16
  %422 = shl i32 %res.0.i10.i157.i, 16
  %423 = and i32 %422, 16711680
  %424 = and i32 %res.0.i10.i157.i, -16777216
  %425 = or i32 %424, %421
  %426 = or i32 %425, %423
  %phitmp207.i = and i32 %res.0.i.i153.i, 65535
  br label %444

; <label>:427                                     ; preds = %275
  %428 = icmp ne i32 %276, 0
  %429 = icmp eq i32 %268, %202
  %or.cond101.i = or i1 %428, %429
  br i1 %or.cond101.i, label %430, label %443

; <label>:430                                     ; preds = %427
  %431 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 2
  %432 = load i32* %431, align 4
  %433 = and i32 %432, 131072
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %436, label %435

; <label>:435                                     ; preds = %430
  tail call fastcc void @raise_exception_err(i32 13, i32 %219) noreturn nounwind
  unreachable

; <label>:436                                     ; preds = %430
  %437 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 9, i64 2, i32 3
  %438 = load i32* %437, align 4
  %439 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 9, i64 2, i32 1
  %440 = load i32* %439, align 4
  %441 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 0, i64 4
  %442 = load i32* %441, align 4
  br label %444

; <label>:443                                     ; preds = %427
  tail call fastcc void @raise_exception_err(i32 13, i32 %219) noreturn nounwind
  unreachable

; <label>:444                                     ; preds = %436, %420
  %445 = phi i32 [ 0, %436 ], [ %362, %420 ]
  %446 = phi i32 [ %442, %436 ], [ %360, %420 ]
  %447 = phi i32 [ 0, %436 ], [ %phitmp207.i, %420 ]
  %448 = phi i32 [ 0, %436 ], [ %res.0.i10.i157.i, %420 ]
  %new_stack.0.i = phi i1 [ false, %436 ], [ true, %420 ]
  %dpl.0.i = phi i32 [ %202, %436 ], [ %268, %420 ]
  %sp_mask.0.in.in.in.in.i = phi i32 [ %438, %436 ], [ %res.0.i10.i157.i, %420 ]
  %449 = phi i32 [ %440, %436 ], [ %426, %420 ]
  %sp_mask.0.in.in.in.i = lshr i32 %sp_mask.0.in.in.in.in.i, 6
  %sp_mask.0.in.in.i = and i32 %sp_mask.0.in.in.in.i, 65536
  %sp_mask.0.in.i = xor i32 %sp_mask.0.in.in.i, 65536
  %sp_mask.0.i = add i32 %sp_mask.0.in.i, -1
  %.mask.i = and i32 %131, 24
  %450 = icmp eq i32 %.mask.i, 8
  br i1 %450, label %451, label %675

; <label>:451                                     ; preds = %444
  br i1 %new_stack.0.i, label %452, label %stl_kernel.exit138.i

; <label>:452                                     ; preds = %451
  %453 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 2
  %454 = load i32* %453, align 4
  %455 = and i32 %454, 131072
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %stl_kernel.exit140.i, label %457

; <label>:457                                     ; preds = %452
  %458 = add i32 %446, -4
  %459 = and i32 %sp_mask.0.i, %458
  %460 = add i32 %459, %449
  %461 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 9, i64 5, i32 0
  %462 = load i32* %461, align 4
  %463 = lshr i32 %460, 12
  %464 = and i32 %463, 255
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %465, i32 1
  %467 = load i32* %466, align 4
  %468 = and i32 %460, -4093
  %469 = icmp eq i32 %467, %468
  %470 = zext i32 %460 to i64
  br i1 %469, label %473, label %471, !prof !0

; <label>:471                                     ; preds = %457
  %472 = inttoptr i64 %470 to i32*
  store i32 %462, i32* %472, align 4
  br label %stl_kernel.exit143.i

; <label>:473                                     ; preds = %457
  %474 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %465, i32 3
  %475 = load i64* %474, align 8
  %476 = add i64 %475, %470
  %477 = inttoptr i64 %476 to i32*
  store i32 %462, i32* %477, align 4
  br label %stl_kernel.exit143.i

stl_kernel.exit143.i:                             ; preds = %473, %471
  %478 = add i32 %446, -8
  %479 = and i32 %sp_mask.0.i, %478
  %480 = add i32 %479, %449
  %481 = load %struct.CPUX86State** @env, align 8
  %482 = getelementptr inbounds %struct.CPUX86State* %481, i64 0, i32 9, i64 4, i32 0
  %483 = load i32* %482, align 4
  %484 = lshr i32 %480, 12
  %485 = and i32 %484, 255
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds %struct.CPUX86State* %481, i64 0, i32 71, i64 0, i64 %486, i32 1
  %488 = load i32* %487, align 4
  %489 = and i32 %480, -4093
  %490 = icmp eq i32 %488, %489
  %491 = zext i32 %480 to i64
  br i1 %490, label %494, label %492, !prof !0

; <label>:492                                     ; preds = %stl_kernel.exit143.i
  %493 = inttoptr i64 %491 to i32*
  store i32 %483, i32* %493, align 4
  br label %stl_kernel.exit142.i

; <label>:494                                     ; preds = %stl_kernel.exit143.i
  %495 = getelementptr inbounds %struct.CPUX86State* %481, i64 0, i32 71, i64 0, i64 %486, i32 3
  %496 = load i64* %495, align 8
  %497 = add i64 %496, %491
  %498 = inttoptr i64 %497 to i32*
  store i32 %483, i32* %498, align 4
  br label %stl_kernel.exit142.i

stl_kernel.exit142.i:                             ; preds = %494, %492
  %499 = add i32 %446, -12
  %500 = and i32 %sp_mask.0.i, %499
  %501 = add i32 %500, %449
  %502 = load %struct.CPUX86State** @env, align 8
  %503 = getelementptr inbounds %struct.CPUX86State* %502, i64 0, i32 9, i64 3, i32 0
  %504 = load i32* %503, align 4
  %505 = lshr i32 %501, 12
  %506 = and i32 %505, 255
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds %struct.CPUX86State* %502, i64 0, i32 71, i64 0, i64 %507, i32 1
  %509 = load i32* %508, align 4
  %510 = and i32 %501, -4093
  %511 = icmp eq i32 %509, %510
  %512 = zext i32 %501 to i64
  br i1 %511, label %515, label %513, !prof !0

; <label>:513                                     ; preds = %stl_kernel.exit142.i
  %514 = inttoptr i64 %512 to i32*
  store i32 %504, i32* %514, align 4
  br label %stl_kernel.exit141.i

; <label>:515                                     ; preds = %stl_kernel.exit142.i
  %516 = getelementptr inbounds %struct.CPUX86State* %502, i64 0, i32 71, i64 0, i64 %507, i32 3
  %517 = load i64* %516, align 8
  %518 = add i64 %517, %512
  %519 = inttoptr i64 %518 to i32*
  store i32 %504, i32* %519, align 4
  br label %stl_kernel.exit141.i

stl_kernel.exit141.i:                             ; preds = %515, %513
  %520 = add i32 %446, -16
  %521 = and i32 %sp_mask.0.i, %520
  %522 = add i32 %521, %449
  %523 = load %struct.CPUX86State** @env, align 8
  %524 = getelementptr inbounds %struct.CPUX86State* %523, i64 0, i32 9, i64 0, i32 0
  %525 = load i32* %524, align 4
  %526 = lshr i32 %522, 12
  %527 = and i32 %526, 255
  %528 = zext i32 %527 to i64
  %529 = getelementptr inbounds %struct.CPUX86State* %523, i64 0, i32 71, i64 0, i64 %528, i32 1
  %530 = load i32* %529, align 4
  %531 = and i32 %522, -4093
  %532 = icmp eq i32 %530, %531
  %533 = zext i32 %522 to i64
  br i1 %532, label %536, label %534, !prof !0

; <label>:534                                     ; preds = %stl_kernel.exit141.i
  %535 = inttoptr i64 %533 to i32*
  store i32 %525, i32* %535, align 4
  br label %stl_kernel.exit140.i

; <label>:536                                     ; preds = %stl_kernel.exit141.i
  %537 = getelementptr inbounds %struct.CPUX86State* %523, i64 0, i32 71, i64 0, i64 %528, i32 3
  %538 = load i64* %537, align 8
  %539 = add i64 %538, %533
  %540 = inttoptr i64 %539 to i32*
  store i32 %525, i32* %540, align 4
  br label %stl_kernel.exit140.i

stl_kernel.exit140.i:                             ; preds = %536, %534, %452
  %541 = phi i32 [ %446, %452 ], [ %520, %534 ], [ %520, %536 ]
  %542 = add i32 %541, -4
  %543 = and i32 %542, %sp_mask.0.i
  %544 = add i32 %543, %449
  %545 = load %struct.CPUX86State** @env, align 8
  %546 = getelementptr inbounds %struct.CPUX86State* %545, i64 0, i32 9, i64 2, i32 0
  %547 = load i32* %546, align 4
  %548 = lshr i32 %544, 12
  %549 = and i32 %548, 255
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds %struct.CPUX86State* %545, i64 0, i32 71, i64 0, i64 %550, i32 1
  %552 = load i32* %551, align 4
  %553 = and i32 %544, -4093
  %554 = icmp eq i32 %552, %553
  %555 = zext i32 %544 to i64
  br i1 %554, label %558, label %556, !prof !0

; <label>:556                                     ; preds = %stl_kernel.exit140.i
  %557 = inttoptr i64 %555 to i32*
  store i32 %547, i32* %557, align 4
  br label %stl_kernel.exit139.i

; <label>:558                                     ; preds = %stl_kernel.exit140.i
  %559 = getelementptr inbounds %struct.CPUX86State* %545, i64 0, i32 71, i64 0, i64 %550, i32 3
  %560 = load i64* %559, align 8
  %561 = add i64 %560, %555
  %562 = inttoptr i64 %561 to i32*
  store i32 %547, i32* %562, align 4
  br label %stl_kernel.exit139.i

stl_kernel.exit139.i:                             ; preds = %558, %556
  %563 = add i32 %541, -8
  %564 = and i32 %563, %sp_mask.0.i
  %565 = add i32 %564, %449
  %566 = load %struct.CPUX86State** @env, align 8
  %567 = getelementptr inbounds %struct.CPUX86State* %566, i64 0, i32 0, i64 4
  %568 = load i32* %567, align 4
  %569 = lshr i32 %565, 12
  %570 = and i32 %569, 255
  %571 = zext i32 %570 to i64
  %572 = getelementptr inbounds %struct.CPUX86State* %566, i64 0, i32 71, i64 0, i64 %571, i32 1
  %573 = load i32* %572, align 4
  %574 = and i32 %565, -4093
  %575 = icmp eq i32 %573, %574
  %576 = zext i32 %565 to i64
  br i1 %575, label %579, label %577, !prof !0

; <label>:577                                     ; preds = %stl_kernel.exit139.i
  %578 = inttoptr i64 %576 to i32*
  store i32 %568, i32* %578, align 4
  br label %stl_kernel.exit138.i

; <label>:579                                     ; preds = %stl_kernel.exit139.i
  %580 = getelementptr inbounds %struct.CPUX86State* %566, i64 0, i32 71, i64 0, i64 %571, i32 3
  %581 = load i64* %580, align 8
  %582 = add i64 %581, %576
  %583 = inttoptr i64 %582 to i32*
  store i32 %568, i32* %583, align 4
  br label %stl_kernel.exit138.i

stl_kernel.exit138.i:                             ; preds = %579, %577, %451
  %584 = phi i32 [ %446, %451 ], [ %563, %577 ], [ %563, %579 ]
  %585 = add i32 %584, -4
  %586 = and i32 %585, %sp_mask.0.i
  %587 = add i32 %586, %449
  %588 = load %struct.CPUX86State** @env, align 8
  %589 = getelementptr inbounds %struct.CPUX86State* %588, i64 0, i32 2
  %590 = load i32* %589, align 4
  %591 = getelementptr inbounds %struct.CPUX86State* %588, i64 0, i32 5
  %592 = load i32* %591, align 4
  %593 = tail call i32 @helper_cc_compute_all(i32 %592) nounwind
  %594 = or i32 %593, %590
  %595 = getelementptr inbounds %struct.CPUX86State* %588, i64 0, i32 6
  %596 = load i32* %595, align 4
  %597 = and i32 %596, 1024
  %598 = or i32 %594, %597
  %599 = lshr i32 %587, 12
  %600 = and i32 %599, 255
  %601 = zext i32 %600 to i64
  %602 = getelementptr inbounds %struct.CPUX86State* %588, i64 0, i32 71, i64 0, i64 %601, i32 1
  %603 = load i32* %602, align 4
  %604 = and i32 %587, -4093
  %605 = icmp eq i32 %603, %604
  %606 = zext i32 %587 to i64
  br i1 %605, label %609, label %607, !prof !0

; <label>:607                                     ; preds = %stl_kernel.exit138.i
  %608 = inttoptr i64 %606 to i32*
  store i32 %598, i32* %608, align 4
  br label %stl_kernel.exit133.i

; <label>:609                                     ; preds = %stl_kernel.exit138.i
  %610 = getelementptr inbounds %struct.CPUX86State* %588, i64 0, i32 71, i64 0, i64 %601, i32 3
  %611 = load i64* %610, align 8
  %612 = add i64 %611, %606
  %613 = inttoptr i64 %612 to i32*
  store i32 %598, i32* %613, align 4
  br label %stl_kernel.exit133.i

stl_kernel.exit133.i:                             ; preds = %609, %607
  %614 = add i32 %584, -8
  %615 = and i32 %614, %sp_mask.0.i
  %616 = add i32 %615, %449
  %617 = load %struct.CPUX86State** @env, align 8
  %618 = getelementptr inbounds %struct.CPUX86State* %617, i64 0, i32 9, i64 1, i32 0
  %619 = load i32* %618, align 4
  %620 = lshr i32 %616, 12
  %621 = and i32 %620, 255
  %622 = zext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CPUX86State* %617, i64 0, i32 71, i64 0, i64 %622, i32 1
  %624 = load i32* %623, align 4
  %625 = and i32 %616, -4093
  %626 = icmp eq i32 %624, %625
  %627 = zext i32 %616 to i64
  br i1 %626, label %630, label %628, !prof !0

; <label>:628                                     ; preds = %stl_kernel.exit133.i
  %629 = inttoptr i64 %627 to i32*
  store i32 %619, i32* %629, align 4
  br label %stl_kernel.exit132.i

; <label>:630                                     ; preds = %stl_kernel.exit133.i
  %631 = getelementptr inbounds %struct.CPUX86State* %617, i64 0, i32 71, i64 0, i64 %622, i32 3
  %632 = load i64* %631, align 8
  %633 = add i64 %632, %627
  %634 = inttoptr i64 %633 to i32*
  store i32 %619, i32* %634, align 4
  br label %stl_kernel.exit132.i

stl_kernel.exit132.i:                             ; preds = %630, %628
  %635 = add i32 %584, -12
  %636 = and i32 %635, %sp_mask.0.i
  %637 = add i32 %636, %449
  %638 = lshr i32 %637, 12
  %639 = and i32 %638, 255
  %640 = zext i32 %639 to i64
  %641 = load %struct.CPUX86State** @env, align 8
  %642 = getelementptr inbounds %struct.CPUX86State* %641, i64 0, i32 71, i64 0, i64 %640, i32 1
  %643 = load i32* %642, align 4
  %644 = and i32 %637, -4093
  %645 = icmp eq i32 %643, %644
  %646 = zext i32 %637 to i64
  br i1 %645, label %649, label %647, !prof !0

; <label>:647                                     ; preds = %stl_kernel.exit132.i
  %648 = inttoptr i64 %646 to i32*
  store i32 %old_eip.0.i, i32* %648, align 4
  br label %stl_kernel.exit131.i

; <label>:649                                     ; preds = %stl_kernel.exit132.i
  %650 = getelementptr inbounds %struct.CPUX86State* %641, i64 0, i32 71, i64 0, i64 %640, i32 3
  %651 = load i64* %650, align 8
  %652 = add i64 %651, %646
  %653 = inttoptr i64 %652 to i32*
  store i32 %old_eip.0.i, i32* %653, align 4
  br label %stl_kernel.exit131.i

stl_kernel.exit131.i:                             ; preds = %649, %647
  %654 = icmp eq i32 %has_error_code.0.i, 0
  br i1 %654, label %stl_kernel.exit.i, label %655

; <label>:655                                     ; preds = %stl_kernel.exit131.i
  %656 = add i32 %584, -16
  %657 = and i32 %656, %sp_mask.0.i
  %658 = add i32 %657, %449
  %659 = lshr i32 %658, 12
  %660 = and i32 %659, 255
  %661 = zext i32 %660 to i64
  %662 = load %struct.CPUX86State** @env, align 8
  %663 = getelementptr inbounds %struct.CPUX86State* %662, i64 0, i32 71, i64 0, i64 %661, i32 1
  %664 = load i32* %663, align 4
  %665 = and i32 %658, -4093
  %666 = icmp eq i32 %664, %665
  %667 = zext i32 %658 to i64
  br i1 %666, label %670, label %668, !prof !0

; <label>:668                                     ; preds = %655
  %669 = inttoptr i64 %667 to i32*
  store i32 %error_code, i32* %669, align 4
  br label %stl_kernel.exit.i

; <label>:670                                     ; preds = %655
  %671 = getelementptr inbounds %struct.CPUX86State* %662, i64 0, i32 71, i64 0, i64 %661, i32 3
  %672 = load i64* %671, align 8
  %673 = add i64 %672, %667
  %674 = inttoptr i64 %673 to i32*
  store i32 %error_code, i32* %674, align 4
  br label %stl_kernel.exit.i

; <label>:675                                     ; preds = %444
  br i1 %new_stack.0.i, label %676, label %stw_kernel.exit125.i

; <label>:676                                     ; preds = %675
  %677 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 2
  %678 = load i32* %677, align 4
  %679 = and i32 %678, 131072
  %680 = icmp eq i32 %679, 0
  br i1 %680, label %stw_kernel.exit127.i, label %681

; <label>:681                                     ; preds = %676
  %682 = add i32 %446, -2
  %683 = and i32 %sp_mask.0.i, %682
  %684 = add i32 %683, %449
  %685 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 9, i64 5, i32 0
  %686 = load i32* %685, align 4
  %687 = lshr i32 %684, 12
  %688 = and i32 %687, 255
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %689, i32 1
  %691 = load i32* %690, align 4
  %692 = and i32 %684, -4095
  %693 = icmp eq i32 %691, %692
  br i1 %693, label %698, label %694, !prof !0

; <label>:694                                     ; preds = %681
  %695 = trunc i32 %686 to i16
  %696 = zext i32 %684 to i64
  %697 = inttoptr i64 %696 to i16*
  store i16 %695, i16* %697, align 2
  br label %stw_kernel.exit130.i

; <label>:698                                     ; preds = %681
  %699 = zext i32 %684 to i64
  %700 = getelementptr inbounds %struct.CPUX86State* %.pre208.i, i64 0, i32 71, i64 0, i64 %689, i32 3
  %701 = load i64* %700, align 8
  %702 = add i64 %701, %699
  %703 = trunc i32 %686 to i16
  %704 = inttoptr i64 %702 to i16*
  store i16 %703, i16* %704, align 2
  br label %stw_kernel.exit130.i

stw_kernel.exit130.i:                             ; preds = %698, %694
  %705 = add i32 %446, -4
  %706 = and i32 %sp_mask.0.i, %705
  %707 = add i32 %706, %449
  %708 = load %struct.CPUX86State** @env, align 8
  %709 = getelementptr inbounds %struct.CPUX86State* %708, i64 0, i32 9, i64 4, i32 0
  %710 = load i32* %709, align 4
  %711 = lshr i32 %707, 12
  %712 = and i32 %711, 255
  %713 = zext i32 %712 to i64
  %714 = getelementptr inbounds %struct.CPUX86State* %708, i64 0, i32 71, i64 0, i64 %713, i32 1
  %715 = load i32* %714, align 4
  %716 = and i32 %707, -4095
  %717 = icmp eq i32 %715, %716
  br i1 %717, label %722, label %718, !prof !0

; <label>:718                                     ; preds = %stw_kernel.exit130.i
  %719 = trunc i32 %710 to i16
  %720 = zext i32 %707 to i64
  %721 = inttoptr i64 %720 to i16*
  store i16 %719, i16* %721, align 2
  br label %stw_kernel.exit129.i

; <label>:722                                     ; preds = %stw_kernel.exit130.i
  %723 = zext i32 %707 to i64
  %724 = getelementptr inbounds %struct.CPUX86State* %708, i64 0, i32 71, i64 0, i64 %713, i32 3
  %725 = load i64* %724, align 8
  %726 = add i64 %725, %723
  %727 = trunc i32 %710 to i16
  %728 = inttoptr i64 %726 to i16*
  store i16 %727, i16* %728, align 2
  br label %stw_kernel.exit129.i

stw_kernel.exit129.i:                             ; preds = %722, %718
  %729 = add i32 %446, -6
  %730 = and i32 %sp_mask.0.i, %729
  %731 = add i32 %730, %449
  %732 = load %struct.CPUX86State** @env, align 8
  %733 = getelementptr inbounds %struct.CPUX86State* %732, i64 0, i32 9, i64 3, i32 0
  %734 = load i32* %733, align 4
  %735 = lshr i32 %731, 12
  %736 = and i32 %735, 255
  %737 = zext i32 %736 to i64
  %738 = getelementptr inbounds %struct.CPUX86State* %732, i64 0, i32 71, i64 0, i64 %737, i32 1
  %739 = load i32* %738, align 4
  %740 = and i32 %731, -4095
  %741 = icmp eq i32 %739, %740
  br i1 %741, label %746, label %742, !prof !0

; <label>:742                                     ; preds = %stw_kernel.exit129.i
  %743 = trunc i32 %734 to i16
  %744 = zext i32 %731 to i64
  %745 = inttoptr i64 %744 to i16*
  store i16 %743, i16* %745, align 2
  br label %stw_kernel.exit128.i

; <label>:746                                     ; preds = %stw_kernel.exit129.i
  %747 = zext i32 %731 to i64
  %748 = getelementptr inbounds %struct.CPUX86State* %732, i64 0, i32 71, i64 0, i64 %737, i32 3
  %749 = load i64* %748, align 8
  %750 = add i64 %749, %747
  %751 = trunc i32 %734 to i16
  %752 = inttoptr i64 %750 to i16*
  store i16 %751, i16* %752, align 2
  br label %stw_kernel.exit128.i

stw_kernel.exit128.i:                             ; preds = %746, %742
  %753 = add i32 %446, -8
  %754 = and i32 %sp_mask.0.i, %753
  %755 = add i32 %754, %449
  %756 = load %struct.CPUX86State** @env, align 8
  %757 = getelementptr inbounds %struct.CPUX86State* %756, i64 0, i32 9, i64 0, i32 0
  %758 = load i32* %757, align 4
  %759 = lshr i32 %755, 12
  %760 = and i32 %759, 255
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds %struct.CPUX86State* %756, i64 0, i32 71, i64 0, i64 %761, i32 1
  %763 = load i32* %762, align 4
  %764 = and i32 %755, -4095
  %765 = icmp eq i32 %763, %764
  br i1 %765, label %770, label %766, !prof !0

; <label>:766                                     ; preds = %stw_kernel.exit128.i
  %767 = trunc i32 %758 to i16
  %768 = zext i32 %755 to i64
  %769 = inttoptr i64 %768 to i16*
  store i16 %767, i16* %769, align 2
  br label %stw_kernel.exit127.i

; <label>:770                                     ; preds = %stw_kernel.exit128.i
  %771 = zext i32 %755 to i64
  %772 = getelementptr inbounds %struct.CPUX86State* %756, i64 0, i32 71, i64 0, i64 %761, i32 3
  %773 = load i64* %772, align 8
  %774 = add i64 %773, %771
  %775 = trunc i32 %758 to i16
  %776 = inttoptr i64 %774 to i16*
  store i16 %775, i16* %776, align 2
  br label %stw_kernel.exit127.i

stw_kernel.exit127.i:                             ; preds = %770, %766, %676
  %777 = phi i32 [ %446, %676 ], [ %753, %766 ], [ %753, %770 ]
  %778 = add i32 %777, -2
  %779 = and i32 %778, %sp_mask.0.i
  %780 = add i32 %779, %449
  %781 = load %struct.CPUX86State** @env, align 8
  %782 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 2, i32 0
  %783 = load i32* %782, align 4
  %784 = lshr i32 %780, 12
  %785 = and i32 %784, 255
  %786 = zext i32 %785 to i64
  %787 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 71, i64 0, i64 %786, i32 1
  %788 = load i32* %787, align 4
  %789 = and i32 %780, -4095
  %790 = icmp eq i32 %788, %789
  br i1 %790, label %795, label %791, !prof !0

; <label>:791                                     ; preds = %stw_kernel.exit127.i
  %792 = trunc i32 %783 to i16
  %793 = zext i32 %780 to i64
  %794 = inttoptr i64 %793 to i16*
  store i16 %792, i16* %794, align 2
  br label %stw_kernel.exit126.i

; <label>:795                                     ; preds = %stw_kernel.exit127.i
  %796 = zext i32 %780 to i64
  %797 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 71, i64 0, i64 %786, i32 3
  %798 = load i64* %797, align 8
  %799 = add i64 %798, %796
  %800 = trunc i32 %783 to i16
  %801 = inttoptr i64 %799 to i16*
  store i16 %800, i16* %801, align 2
  br label %stw_kernel.exit126.i

stw_kernel.exit126.i:                             ; preds = %795, %791
  %802 = add i32 %777, -4
  %803 = and i32 %802, %sp_mask.0.i
  %804 = add i32 %803, %449
  %805 = load %struct.CPUX86State** @env, align 8
  %806 = getelementptr inbounds %struct.CPUX86State* %805, i64 0, i32 0, i64 4
  %807 = load i32* %806, align 4
  %808 = lshr i32 %804, 12
  %809 = and i32 %808, 255
  %810 = zext i32 %809 to i64
  %811 = getelementptr inbounds %struct.CPUX86State* %805, i64 0, i32 71, i64 0, i64 %810, i32 1
  %812 = load i32* %811, align 4
  %813 = and i32 %804, -4095
  %814 = icmp eq i32 %812, %813
  br i1 %814, label %819, label %815, !prof !0

; <label>:815                                     ; preds = %stw_kernel.exit126.i
  %816 = trunc i32 %807 to i16
  %817 = zext i32 %804 to i64
  %818 = inttoptr i64 %817 to i16*
  store i16 %816, i16* %818, align 2
  br label %stw_kernel.exit125.i

; <label>:819                                     ; preds = %stw_kernel.exit126.i
  %820 = zext i32 %804 to i64
  %821 = getelementptr inbounds %struct.CPUX86State* %805, i64 0, i32 71, i64 0, i64 %810, i32 3
  %822 = load i64* %821, align 8
  %823 = add i64 %822, %820
  %824 = trunc i32 %807 to i16
  %825 = inttoptr i64 %823 to i16*
  store i16 %824, i16* %825, align 2
  br label %stw_kernel.exit125.i

stw_kernel.exit125.i:                             ; preds = %819, %815, %675
  %826 = phi i32 [ %446, %675 ], [ %802, %815 ], [ %802, %819 ]
  %827 = add i32 %826, -2
  %828 = and i32 %827, %sp_mask.0.i
  %829 = add i32 %828, %449
  %830 = load %struct.CPUX86State** @env, align 8
  %831 = getelementptr inbounds %struct.CPUX86State* %830, i64 0, i32 2
  %832 = load i32* %831, align 4
  %833 = getelementptr inbounds %struct.CPUX86State* %830, i64 0, i32 5
  %834 = load i32* %833, align 4
  %835 = tail call i32 @helper_cc_compute_all(i32 %834) nounwind
  %836 = or i32 %835, %832
  %837 = getelementptr inbounds %struct.CPUX86State* %830, i64 0, i32 6
  %838 = load i32* %837, align 4
  %839 = and i32 %838, 1024
  %840 = or i32 %836, %839
  %841 = lshr i32 %829, 12
  %842 = and i32 %841, 255
  %843 = zext i32 %842 to i64
  %844 = getelementptr inbounds %struct.CPUX86State* %830, i64 0, i32 71, i64 0, i64 %843, i32 1
  %845 = load i32* %844, align 4
  %846 = and i32 %829, -4095
  %847 = icmp eq i32 %845, %846
  br i1 %847, label %852, label %848, !prof !0

; <label>:848                                     ; preds = %stw_kernel.exit125.i
  %849 = trunc i32 %840 to i16
  %850 = zext i32 %829 to i64
  %851 = inttoptr i64 %850 to i16*
  store i16 %849, i16* %851, align 2
  br label %stw_kernel.exit124.i

; <label>:852                                     ; preds = %stw_kernel.exit125.i
  %853 = zext i32 %829 to i64
  %854 = getelementptr inbounds %struct.CPUX86State* %830, i64 0, i32 71, i64 0, i64 %843, i32 3
  %855 = load i64* %854, align 8
  %856 = add i64 %855, %853
  %857 = trunc i32 %840 to i16
  %858 = inttoptr i64 %856 to i16*
  store i16 %857, i16* %858, align 2
  br label %stw_kernel.exit124.i

stw_kernel.exit124.i:                             ; preds = %852, %848
  %859 = add i32 %826, -4
  %860 = and i32 %859, %sp_mask.0.i
  %861 = add i32 %860, %449
  %862 = load %struct.CPUX86State** @env, align 8
  %863 = getelementptr inbounds %struct.CPUX86State* %862, i64 0, i32 9, i64 1, i32 0
  %864 = load i32* %863, align 4
  %865 = lshr i32 %861, 12
  %866 = and i32 %865, 255
  %867 = zext i32 %866 to i64
  %868 = getelementptr inbounds %struct.CPUX86State* %862, i64 0, i32 71, i64 0, i64 %867, i32 1
  %869 = load i32* %868, align 4
  %870 = and i32 %861, -4095
  %871 = icmp eq i32 %869, %870
  br i1 %871, label %876, label %872, !prof !0

; <label>:872                                     ; preds = %stw_kernel.exit124.i
  %873 = trunc i32 %864 to i16
  %874 = zext i32 %861 to i64
  %875 = inttoptr i64 %874 to i16*
  store i16 %873, i16* %875, align 2
  br label %stw_kernel.exit123.i

; <label>:876                                     ; preds = %stw_kernel.exit124.i
  %877 = zext i32 %861 to i64
  %878 = getelementptr inbounds %struct.CPUX86State* %862, i64 0, i32 71, i64 0, i64 %867, i32 3
  %879 = load i64* %878, align 8
  %880 = add i64 %879, %877
  %881 = trunc i32 %864 to i16
  %882 = inttoptr i64 %880 to i16*
  store i16 %881, i16* %882, align 2
  br label %stw_kernel.exit123.i

stw_kernel.exit123.i:                             ; preds = %876, %872
  %883 = add i32 %826, -6
  %884 = and i32 %883, %sp_mask.0.i
  %885 = add i32 %884, %449
  %886 = lshr i32 %885, 12
  %887 = and i32 %886, 255
  %888 = zext i32 %887 to i64
  %889 = load %struct.CPUX86State** @env, align 8
  %890 = getelementptr inbounds %struct.CPUX86State* %889, i64 0, i32 71, i64 0, i64 %888, i32 1
  %891 = load i32* %890, align 4
  %892 = and i32 %885, -4095
  %893 = icmp eq i32 %891, %892
  br i1 %893, label %898, label %894, !prof !0

; <label>:894                                     ; preds = %stw_kernel.exit123.i
  %895 = trunc i32 %old_eip.0.i to i16
  %896 = zext i32 %885 to i64
  %897 = inttoptr i64 %896 to i16*
  store i16 %895, i16* %897, align 2
  br label %stw_kernel.exit122.i

; <label>:898                                     ; preds = %stw_kernel.exit123.i
  %899 = zext i32 %885 to i64
  %900 = getelementptr inbounds %struct.CPUX86State* %889, i64 0, i32 71, i64 0, i64 %888, i32 3
  %901 = load i64* %900, align 8
  %902 = add i64 %901, %899
  %903 = trunc i32 %old_eip.0.i to i16
  %904 = inttoptr i64 %902 to i16*
  store i16 %903, i16* %904, align 2
  br label %stw_kernel.exit122.i

stw_kernel.exit122.i:                             ; preds = %898, %894
  %905 = icmp eq i32 %has_error_code.0.i, 0
  br i1 %905, label %stl_kernel.exit.i, label %906

; <label>:906                                     ; preds = %stw_kernel.exit122.i
  %907 = add i32 %826, -8
  %908 = and i32 %907, %sp_mask.0.i
  %909 = add i32 %908, %449
  %910 = lshr i32 %909, 12
  %911 = and i32 %910, 255
  %912 = zext i32 %911 to i64
  %913 = load %struct.CPUX86State** @env, align 8
  %914 = getelementptr inbounds %struct.CPUX86State* %913, i64 0, i32 71, i64 0, i64 %912, i32 1
  %915 = load i32* %914, align 4
  %916 = and i32 %909, -4095
  %917 = icmp eq i32 %915, %916
  br i1 %917, label %922, label %918, !prof !0

; <label>:918                                     ; preds = %906
  %919 = trunc i32 %error_code to i16
  %920 = zext i32 %909 to i64
  %921 = inttoptr i64 %920 to i16*
  store i16 %919, i16* %921, align 2
  br label %stl_kernel.exit.i

; <label>:922                                     ; preds = %906
  %923 = zext i32 %909 to i64
  %924 = getelementptr inbounds %struct.CPUX86State* %913, i64 0, i32 71, i64 0, i64 %912, i32 3
  %925 = load i64* %924, align 8
  %926 = add i64 %925, %923
  %927 = trunc i32 %error_code to i16
  %928 = inttoptr i64 %926 to i16*
  store i16 %927, i16* %928, align 2
  br label %stl_kernel.exit.i

stl_kernel.exit.i:                                ; preds = %922, %918, %stw_kernel.exit122.i, %670, %668, %stl_kernel.exit131.i
  %929 = phi i32 [ %635, %stl_kernel.exit131.i ], [ %883, %stw_kernel.exit122.i ], [ %656, %668 ], [ %656, %670 ], [ %907, %918 ], [ %907, %922 ]
  br i1 %new_stack.0.i, label %930, label %1107

; <label>:930                                     ; preds = %stl_kernel.exit.i
  %931 = load %struct.CPUX86State** @env, align 8
  %932 = getelementptr inbounds %struct.CPUX86State* %931, i64 0, i32 2
  %933 = load i32* %932, align 4
  %934 = and i32 %933, 131072
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %1061, label %cpu_x86_load_seg_cache.exit121.i

cpu_x86_load_seg_cache.exit121.i:                 ; preds = %930
  %936 = getelementptr inbounds %struct.CPUX86State* %931, i64 0, i32 9, i64 0, i32 0
  %.phi.trans.insert.i118.i = getelementptr inbounds %struct.CPUX86State* %931, i64 0, i32 7
  %937 = bitcast i32* %936 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %937, i8 0, i64 16, i32 4, i1 false) nounwind
  %.pre.i119.i = load i32* %.phi.trans.insert.i118.i, align 4
  %938 = getelementptr inbounds %struct.CPUX86State* %931, i64 0, i32 9, i64 2, i32 3
  %939 = load i32* %938, align 4
  %940 = lshr i32 %939, 17
  %941 = and i32 %940, 32
  %942 = and i32 %.pre.i119.i, 32768
  %943 = icmp eq i32 %942, 0
  %944 = or i32 %941, 64
  %new_hflags.0.i120.i = select i1 %943, i32 %944, i32 %941
  %945 = and i32 %.pre.i119.i, -97
  %946 = or i32 %new_hflags.0.i120.i, %945
  store i32 %946, i32* %.phi.trans.insert.i118.i, align 4
  %947 = load %struct.CPUX86State** @env, align 8
  %948 = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 9, i64 3, i32 0
  %.phi.trans.insert.i114.i = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 7
  %949 = bitcast i32* %948 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %949, i8 0, i64 16, i32 4, i1 false) nounwind
  %.pre.i115.i = load i32* %.phi.trans.insert.i114.i, align 4
  %950 = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 9, i64 2, i32 3
  %951 = load i32* %950, align 4
  %952 = lshr i32 %951, 17
  %953 = and i32 %952, 32
  %954 = and i32 %.pre.i115.i, 32768
  %955 = icmp eq i32 %954, 0
  br i1 %955, label %956, label %cpu_x86_load_seg_cache.exit117.i

; <label>:956                                     ; preds = %cpu_x86_load_seg_cache.exit121.i
  %957 = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 14, i64 0
  %958 = load i32* %957, align 4
  %959 = and i32 %958, 1
  %960 = icmp eq i32 %959, 0
  br i1 %960, label %969, label %961

; <label>:961                                     ; preds = %956
  %962 = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 2
  %963 = load i32* %962, align 4
  %964 = and i32 %963, 131072
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %966, label %969

; <label>:966                                     ; preds = %961
  %967 = and i32 %.pre.i115.i, 16
  %968 = icmp eq i32 %967, 0
  br i1 %968, label %969, label %971

; <label>:969                                     ; preds = %966, %961, %956
  %970 = or i32 %953, 64
  br label %cpu_x86_load_seg_cache.exit117.i

; <label>:971                                     ; preds = %966
  %972 = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 9, i64 0, i32 1
  %973 = load i32* %972, align 4
  %974 = getelementptr inbounds %struct.CPUX86State* %947, i64 0, i32 9, i64 2, i32 1
  %975 = load i32* %974, align 4
  %976 = or i32 %975, %973
  %977 = icmp ne i32 %976, 0
  %978 = zext i1 %977 to i32
  %979 = shl nuw nsw i32 %978, 6
  %980 = or i32 %979, %953
  br label %cpu_x86_load_seg_cache.exit117.i

cpu_x86_load_seg_cache.exit117.i:                 ; preds = %971, %969, %cpu_x86_load_seg_cache.exit121.i
  %new_hflags.0.i116.i = phi i32 [ %953, %cpu_x86_load_seg_cache.exit121.i ], [ %970, %969 ], [ %980, %971 ]
  %981 = and i32 %.pre.i115.i, -97
  %982 = or i32 %new_hflags.0.i116.i, %981
  store i32 %982, i32* %.phi.trans.insert.i114.i, align 4
  %983 = load %struct.CPUX86State** @env, align 8
  %984 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 9, i64 4, i32 0
  %.phi.trans.insert.i110.i = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 7
  %985 = bitcast i32* %984 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %985, i8 0, i64 16, i32 4, i1 false) nounwind
  %.pre.i111.i = load i32* %.phi.trans.insert.i110.i, align 4
  %986 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 9, i64 2, i32 3
  %987 = load i32* %986, align 4
  %988 = lshr i32 %987, 17
  %989 = and i32 %988, 32
  %990 = and i32 %.pre.i111.i, 32768
  %991 = icmp eq i32 %990, 0
  br i1 %991, label %992, label %cpu_x86_load_seg_cache.exit113.i

; <label>:992                                     ; preds = %cpu_x86_load_seg_cache.exit117.i
  %993 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 14, i64 0
  %994 = load i32* %993, align 4
  %995 = and i32 %994, 1
  %996 = icmp eq i32 %995, 0
  br i1 %996, label %1005, label %997

; <label>:997                                     ; preds = %992
  %998 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 2
  %999 = load i32* %998, align 4
  %1000 = and i32 %999, 131072
  %1001 = icmp eq i32 %1000, 0
  br i1 %1001, label %1002, label %1005

; <label>:1002                                    ; preds = %997
  %1003 = and i32 %.pre.i111.i, 16
  %1004 = icmp eq i32 %1003, 0
  br i1 %1004, label %1005, label %1007

; <label>:1005                                    ; preds = %1002, %997, %992
  %1006 = or i32 %989, 64
  br label %cpu_x86_load_seg_cache.exit113.i

; <label>:1007                                    ; preds = %1002
  %1008 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 9, i64 3, i32 1
  %1009 = load i32* %1008, align 4
  %1010 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 9, i64 0, i32 1
  %1011 = load i32* %1010, align 4
  %1012 = or i32 %1011, %1009
  %1013 = getelementptr inbounds %struct.CPUX86State* %983, i64 0, i32 9, i64 2, i32 1
  %1014 = load i32* %1013, align 4
  %1015 = or i32 %1012, %1014
  %1016 = icmp ne i32 %1015, 0
  %1017 = zext i1 %1016 to i32
  %1018 = shl nuw nsw i32 %1017, 6
  %1019 = or i32 %1018, %989
  br label %cpu_x86_load_seg_cache.exit113.i

cpu_x86_load_seg_cache.exit113.i:                 ; preds = %1007, %1005, %cpu_x86_load_seg_cache.exit117.i
  %new_hflags.0.i112.i = phi i32 [ %989, %cpu_x86_load_seg_cache.exit117.i ], [ %1006, %1005 ], [ %1019, %1007 ]
  %1020 = and i32 %.pre.i111.i, -97
  %1021 = or i32 %new_hflags.0.i112.i, %1020
  store i32 %1021, i32* %.phi.trans.insert.i110.i, align 4
  %1022 = load %struct.CPUX86State** @env, align 8
  %1023 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 9, i64 5, i32 0
  %.phi.trans.insert.i106.i = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 7
  %1024 = bitcast i32* %1023 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %1024, i8 0, i64 16, i32 4, i1 false) nounwind
  %.pre.i107.i = load i32* %.phi.trans.insert.i106.i, align 4
  %1025 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 9, i64 2, i32 3
  %1026 = load i32* %1025, align 4
  %1027 = lshr i32 %1026, 17
  %1028 = and i32 %1027, 32
  %1029 = and i32 %.pre.i107.i, 32768
  %1030 = icmp eq i32 %1029, 0
  br i1 %1030, label %1031, label %cpu_x86_load_seg_cache.exit109.i

; <label>:1031                                    ; preds = %cpu_x86_load_seg_cache.exit113.i
  %1032 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 14, i64 0
  %1033 = load i32* %1032, align 4
  %1034 = and i32 %1033, 1
  %1035 = icmp eq i32 %1034, 0
  br i1 %1035, label %1044, label %1036

; <label>:1036                                    ; preds = %1031
  %1037 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 2
  %1038 = load i32* %1037, align 4
  %1039 = and i32 %1038, 131072
  %1040 = icmp eq i32 %1039, 0
  br i1 %1040, label %1041, label %1044

; <label>:1041                                    ; preds = %1036
  %1042 = and i32 %.pre.i107.i, 16
  %1043 = icmp eq i32 %1042, 0
  br i1 %1043, label %1044, label %1046

; <label>:1044                                    ; preds = %1041, %1036, %1031
  %1045 = or i32 %1028, 64
  br label %cpu_x86_load_seg_cache.exit109.i

; <label>:1046                                    ; preds = %1041
  %1047 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 9, i64 3, i32 1
  %1048 = load i32* %1047, align 4
  %1049 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 9, i64 0, i32 1
  %1050 = load i32* %1049, align 4
  %1051 = or i32 %1050, %1048
  %1052 = getelementptr inbounds %struct.CPUX86State* %1022, i64 0, i32 9, i64 2, i32 1
  %1053 = load i32* %1052, align 4
  %1054 = or i32 %1051, %1053
  %1055 = icmp ne i32 %1054, 0
  %1056 = zext i1 %1055 to i32
  %1057 = shl nuw nsw i32 %1056, 6
  %1058 = or i32 %1057, %1028
  br label %cpu_x86_load_seg_cache.exit109.i

cpu_x86_load_seg_cache.exit109.i:                 ; preds = %1046, %1044, %cpu_x86_load_seg_cache.exit113.i
  %new_hflags.0.i108.i = phi i32 [ %1028, %cpu_x86_load_seg_cache.exit113.i ], [ %1045, %1044 ], [ %1058, %1046 ]
  %1059 = and i32 %.pre.i107.i, -97
  %1060 = or i32 %new_hflags.0.i108.i, %1059
  store i32 %1060, i32* %.phi.trans.insert.i106.i, align 4
  %.pre.i = load %struct.CPUX86State** @env, align 8
  br label %1061

; <label>:1061                                    ; preds = %cpu_x86_load_seg_cache.exit109.i, %930
  %1062 = phi %struct.CPUX86State* [ %931, %930 ], [ %.pre.i, %cpu_x86_load_seg_cache.exit109.i ]
  %1063 = or i32 %dpl.0.i, %445
  %1064 = and i32 %448, 983040
  %1065 = or i32 %1064, %447
  %1066 = and i32 %448, 8388608
  %1067 = icmp eq i32 %1066, 0
  br i1 %1067, label %get_seg_limit.exit105.i, label %1068

; <label>:1068                                    ; preds = %1061
  %1069 = shl nuw i32 %1065, 12
  %1070 = or i32 %1069, 4095
  br label %get_seg_limit.exit105.i

get_seg_limit.exit105.i:                          ; preds = %1068, %1061
  %limit.0.i104.i = phi i32 [ %1070, %1068 ], [ %1065, %1061 ]
  %1071 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 9, i64 2, i32 0
  store i32 %1063, i32* %1071, align 4
  %1072 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 9, i64 2, i32 1
  store i32 %449, i32* %1072, align 4
  %1073 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 9, i64 2, i32 2
  store i32 %limit.0.i104.i, i32* %1073, align 4
  %1074 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 9, i64 2, i32 3
  store i32 %448, i32* %1074, align 4
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 7
  %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4
  %1075 = lshr i32 %448, 17
  %1076 = and i32 %1075, 32
  %1077 = and i32 %.pre.i.i, 32768
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %cpu_x86_load_seg_cache.exit103.i

; <label>:1079                                    ; preds = %get_seg_limit.exit105.i
  %1080 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 14, i64 0
  %1081 = load i32* %1080, align 4
  %1082 = and i32 %1081, 1
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1092, label %1084

; <label>:1084                                    ; preds = %1079
  %1085 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 2
  %1086 = load i32* %1085, align 4
  %1087 = and i32 %1086, 131072
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1089, label %1092

; <label>:1089                                    ; preds = %1084
  %1090 = and i32 %.pre.i.i, 16
  %1091 = icmp eq i32 %1090, 0
  br i1 %1091, label %1092, label %1094

; <label>:1092                                    ; preds = %1089, %1084, %1079
  %1093 = or i32 %1076, 64
  br label %cpu_x86_load_seg_cache.exit103.i

; <label>:1094                                    ; preds = %1089
  %1095 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 9, i64 3, i32 1
  %1096 = load i32* %1095, align 4
  %1097 = getelementptr inbounds %struct.CPUX86State* %1062, i64 0, i32 9, i64 0, i32 1
  %1098 = load i32* %1097, align 4
  %1099 = or i32 %1096, %449
  %1100 = or i32 %1099, %1098
  %1101 = icmp ne i32 %1100, 0
  %1102 = zext i1 %1101 to i32
  %1103 = shl nuw nsw i32 %1102, 6
  %1104 = or i32 %1103, %1076
  br label %cpu_x86_load_seg_cache.exit103.i

cpu_x86_load_seg_cache.exit103.i:                 ; preds = %1094, %1092, %get_seg_limit.exit105.i
  %new_hflags.0.i102.i = phi i32 [ %1076, %get_seg_limit.exit105.i ], [ %1093, %1092 ], [ %1104, %1094 ]
  %1105 = and i32 %.pre.i.i, -97
  %1106 = or i32 %new_hflags.0.i102.i, %1105
  store i32 %1106, i32* %.phi.trans.insert.i.i, align 4
  br label %1107

; <label>:1107                                    ; preds = %cpu_x86_load_seg_cache.exit103.i, %stl_kernel.exit.i
  %1108 = load %struct.CPUX86State** @env, align 8
  %1109 = getelementptr inbounds %struct.CPUX86State* %1108, i64 0, i32 0, i64 4
  %1110 = load i32* %1109, align 4
  %1111 = sub i32 0, %sp_mask.0.in.i
  %1112 = and i32 %1110, %1111
  %1113 = and i32 %929, %sp_mask.0.i
  %1114 = or i32 %1112, %1113
  store i32 %1114, i32* %1109, align 4
  %1115 = or i32 %dpl.0.i, %219
  %1116 = load %struct.CPUX86State** @env, align 8
  %1117 = lshr i32 %res.0.i.i.i, 16
  %1118 = shl i32 %res.0.i10.i.i, 16
  %1119 = and i32 %1118, 16711680
  %1120 = and i32 %res.0.i10.i.i, -16777216
  %1121 = or i32 %1120, %1117
  %1122 = or i32 %1121, %1119
  %1123 = and i32 %res.0.i.i.i, 65535
  %1124 = and i32 %res.0.i10.i.i, 983040
  %1125 = or i32 %1124, %1123
  %1126 = and i32 %res.0.i10.i.i, 8388608
  %1127 = icmp eq i32 %1126, 0
  br i1 %1127, label %get_seg_limit.exit.i, label %1128

; <label>:1128                                    ; preds = %1107
  %1129 = shl nuw i32 %1125, 12
  %1130 = or i32 %1129, 4095
  br label %get_seg_limit.exit.i

get_seg_limit.exit.i:                             ; preds = %1128, %1107
  %limit.0.i.i = phi i32 [ %1130, %1128 ], [ %1125, %1107 ]
  %1131 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 1, i32 0
  store i32 %1115, i32* %1131, align 4
  %1132 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 1, i32 1
  store i32 %1122, i32* %1132, align 4
  %1133 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i.i, i32* %1133, align 4
  %1134 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i.i, i32* %1134, align 4
  %1135 = lshr i32 %res.0.i10.i.i, 18
  %1136 = and i32 %1135, 16
  %1137 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 7
  %1138 = load i32* %1137, align 4
  %1139 = and i32 %1138, -32785
  %1140 = or i32 %1139, %1136
  store i32 %1140, i32* %1137, align 4
  %1141 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 2, i32 3
  %1142 = load i32* %1141, align 4
  %1143 = lshr i32 %1142, 17
  %1144 = and i32 %1143, 32
  %1145 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 14, i64 0
  %1146 = load i32* %1145, align 4
  %1147 = and i32 %1146, 1
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1155, label %1149

; <label>:1149                                    ; preds = %get_seg_limit.exit.i
  %1150 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 2
  %1151 = load i32* %1150, align 4
  %1152 = and i32 %1151, 131072
  %1153 = icmp ne i32 %1152, 0
  %1154 = icmp eq i32 %1136, 0
  %or.cond206.i = or i1 %1153, %1154
  br i1 %or.cond206.i, label %1155, label %1157

; <label>:1155                                    ; preds = %1149, %get_seg_limit.exit.i
  %1156 = or i32 %1144, 64
  br label %cpu_x86_load_seg_cache.exit.i

; <label>:1157                                    ; preds = %1149
  %1158 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 3, i32 1
  %1159 = load i32* %1158, align 4
  %1160 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 0, i32 1
  %1161 = load i32* %1160, align 4
  %1162 = or i32 %1161, %1159
  %1163 = getelementptr inbounds %struct.CPUX86State* %1116, i64 0, i32 9, i64 2, i32 1
  %1164 = load i32* %1163, align 4
  %1165 = or i32 %1162, %1164
  %1166 = icmp ne i32 %1165, 0
  %1167 = zext i1 %1166 to i32
  %1168 = shl nuw nsw i32 %1167, 6
  %1169 = or i32 %1168, %1144
  br label %cpu_x86_load_seg_cache.exit.i

cpu_x86_load_seg_cache.exit.i:                    ; preds = %1157, %1155
  %new_hflags.0.i.i = phi i32 [ %1156, %1155 ], [ %1169, %1157 ]
  %1170 = and i32 %1140, -32865
  %1171 = or i32 %new_hflags.0.i.i, %1170
  store i32 %1171, i32* %1137, align 4
  %1172 = load %struct.CPUX86State** @env, align 8
  %1173 = getelementptr inbounds %struct.CPUX86State* %1172, i64 0, i32 7
  %1174 = load i32* %1173, align 4
  %1175 = and i32 %1174, -4
  %1176 = or i32 %1175, %dpl.0.i
  store i32 %1176, i32* %1173, align 4
  %1177 = load %struct.CPUX86State** @env, align 8
  %1178 = getelementptr inbounds %struct.CPUX86State* %1177, i64 0, i32 1
  store i32 %218, i32* %1178, align 4
  %1179 = and i32 %131, 1
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1181, label %1186

; <label>:1181                                    ; preds = %cpu_x86_load_seg_cache.exit.i
  %1182 = load %struct.CPUX86State** @env, align 8
  %1183 = getelementptr inbounds %struct.CPUX86State* %1182, i64 0, i32 2
  %1184 = load i32* %1183, align 4
  %1185 = and i32 %1184, -513
  store i32 %1185, i32* %1183, align 4
  br label %1186

; <label>:1186                                    ; preds = %1181, %cpu_x86_load_seg_cache.exit.i
  %1187 = load %struct.CPUX86State** @env, align 8
  %1188 = getelementptr inbounds %struct.CPUX86State* %1187, i64 0, i32 2
  %1189 = load i32* %1188, align 4
  %1190 = and i32 %1189, -213249
  store i32 %1190, i32* %1188, align 4
  br label %do_interrupt_protected.exit

; <label>:1191                                    ; preds = %._crit_edge
  br i1 %61, label %1192, label %handle_even_inj.exit

; <label>:1192                                    ; preds = %1191
  %1193 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 40
  %1194 = load i64* %1193, align 8
  %1195 = add i64 %1194, 168
  %1196 = tail call i32 @ldl_phys(i64 %1195) nounwind
  %1197 = icmp slt i32 %1196, 0
  br i1 %1197, label %handle_even_inj.exit, label %1198

; <label>:1198                                    ; preds = %1192
  %1199 = icmp eq i32 %is_int, 0
  %..i = select i1 %1199, i32 768, i32 1024
  %1200 = or i32 %..i, %intno
  %1201 = or i32 %1200, -2147483648
  %1202 = load %struct.CPUX86State** @env, align 8
  %1203 = getelementptr inbounds %struct.CPUX86State* %1202, i64 0, i32 40
  %1204 = load i64* %1203, align 8
  %1205 = add i64 %1204, 168
  tail call void @stl_phys(i64 %1205, i32 %1201) nounwind
  br label %handle_even_inj.exit

handle_even_inj.exit:                             ; preds = %1198, %1192, %1191
  %1206 = load %struct.CPUX86State** @env, align 8
  %1207 = shl nsw i32 %intno, 2
  %1208 = or i32 %1207, 3
  %1209 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 13, i32 2
  %1210 = load i32* %1209, align 4
  %1211 = icmp ugt i32 %1208, %1210
  br i1 %1211, label %1212, label %1215

; <label>:1212                                    ; preds = %handle_even_inj.exit
  %1213 = shl nsw i32 %intno, 3
  %1214 = or i32 %1213, 2
  tail call fastcc void @raise_exception_err(i32 13, i32 %1214) noreturn nounwind
  unreachable

; <label>:1215                                    ; preds = %handle_even_inj.exit
  %1216 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 13, i32 1
  %1217 = load i32* %1216, align 4
  %1218 = add i32 %1217, %1207
  %1219 = lshr i32 %1218, 12
  %1220 = and i32 %1219, 255
  %1221 = zext i32 %1220 to i64
  %1222 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 71, i64 0, i64 %1221, i32 0
  %1223 = load i32* %1222, align 4
  %1224 = and i32 %1218, -4095
  %1225 = icmp eq i32 %1223, %1224
  %1226 = zext i32 %1218 to i64
  br i1 %1225, label %1227, label %lduw_kernel.exit.i, !prof !0

; <label>:1227                                    ; preds = %1215
  %1228 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 71, i64 0, i64 %1221, i32 3
  %1229 = load i64* %1228, align 8
  %1230 = add i64 %1229, %1226
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %1227, %1215
  %.sink.in.in.i.i = phi i64 [ %1230, %1227 ], [ %1226, %1215 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %1231 = zext i16 %.sink.i.i to i32
  %1232 = add i32 %1218, 2
  %1233 = lshr i32 %1232, 12
  %1234 = and i32 %1233, 255
  %1235 = zext i32 %1234 to i64
  %1236 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 71, i64 0, i64 %1235, i32 0
  %1237 = load i32* %1236, align 4
  %1238 = and i32 %1232, -4095
  %1239 = icmp eq i32 %1237, %1238
  %1240 = zext i32 %1232 to i64
  br i1 %1239, label %1241, label %lduw_kernel.exit6.i, !prof !0

; <label>:1241                                    ; preds = %lduw_kernel.exit.i
  %1242 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 71, i64 0, i64 %1235, i32 3
  %1243 = load i64* %1242, align 8
  %1244 = add i64 %1243, %1240
  br label %lduw_kernel.exit6.i

lduw_kernel.exit6.i:                              ; preds = %1241, %lduw_kernel.exit.i
  %.sink.in.in.i3.i = phi i64 [ %1244, %1241 ], [ %1240, %lduw_kernel.exit.i ]
  %.sink.in.i4.i = inttoptr i64 %.sink.in.in.i3.i to i16*
  %.sink.i5.i = load i16* %.sink.in.i4.i, align 2
  %1245 = zext i16 %.sink.i5.i to i32
  %1246 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 0, i64 4
  %1247 = load i32* %1246, align 4
  %1248 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 9, i64 2, i32 1
  %1249 = load i32* %1248, align 4
  %1250 = icmp eq i32 %is_int, 0
  br i1 %1250, label %1251, label %1254

; <label>:1251                                    ; preds = %lduw_kernel.exit6.i
  %1252 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 1
  %1253 = load i32* %1252, align 4
  br label %1254

; <label>:1254                                    ; preds = %1251, %lduw_kernel.exit6.i
  %old_eip.0.i21 = phi i32 [ %1253, %1251 ], [ %next_eip, %lduw_kernel.exit6.i ]
  %1255 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 9, i64 1, i32 0
  %1256 = load i32* %1255, align 4
  %1257 = add i32 %1247, 65534
  %1258 = and i32 %1257, 65535
  %1259 = add i32 %1258, %1249
  %1260 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 2
  %1261 = load i32* %1260, align 4
  %1262 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 5
  %1263 = load i32* %1262, align 4
  %1264 = tail call i32 @helper_cc_compute_all(i32 %1263) nounwind
  %1265 = or i32 %1264, %1261
  %1266 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 6
  %1267 = load i32* %1266, align 4
  %1268 = and i32 %1267, 1024
  %1269 = or i32 %1265, %1268
  %1270 = lshr i32 %1259, 12
  %1271 = and i32 %1270, 255
  %1272 = zext i32 %1271 to i64
  %1273 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 71, i64 0, i64 %1272, i32 1
  %1274 = load i32* %1273, align 4
  %1275 = and i32 %1259, -4095
  %1276 = icmp eq i32 %1274, %1275
  br i1 %1276, label %1281, label %1277, !prof !0

; <label>:1277                                    ; preds = %1254
  %1278 = trunc i32 %1269 to i16
  %1279 = zext i32 %1259 to i64
  %1280 = inttoptr i64 %1279 to i16*
  store i16 %1278, i16* %1280, align 2
  br label %stw_kernel.exit2.i

; <label>:1281                                    ; preds = %1254
  %1282 = zext i32 %1259 to i64
  %1283 = getelementptr inbounds %struct.CPUX86State* %1206, i64 0, i32 71, i64 0, i64 %1272, i32 3
  %1284 = load i64* %1283, align 8
  %1285 = add i64 %1284, %1282
  %1286 = trunc i32 %1269 to i16
  %1287 = inttoptr i64 %1285 to i16*
  store i16 %1286, i16* %1287, align 2
  br label %stw_kernel.exit2.i

stw_kernel.exit2.i:                               ; preds = %1281, %1277
  %1288 = add i32 %1247, 65532
  %1289 = and i32 %1288, 65535
  %1290 = add i32 %1289, %1249
  %1291 = lshr i32 %1290, 12
  %1292 = and i32 %1291, 255
  %1293 = zext i32 %1292 to i64
  %1294 = load %struct.CPUX86State** @env, align 8
  %1295 = getelementptr inbounds %struct.CPUX86State* %1294, i64 0, i32 71, i64 0, i64 %1293, i32 1
  %1296 = load i32* %1295, align 4
  %1297 = and i32 %1290, -4095
  %1298 = icmp eq i32 %1296, %1297
  br i1 %1298, label %1303, label %1299, !prof !0

; <label>:1299                                    ; preds = %stw_kernel.exit2.i
  %1300 = trunc i32 %1256 to i16
  %1301 = zext i32 %1290 to i64
  %1302 = inttoptr i64 %1301 to i16*
  store i16 %1300, i16* %1302, align 2
  br label %stw_kernel.exit1.i

; <label>:1303                                    ; preds = %stw_kernel.exit2.i
  %1304 = zext i32 %1290 to i64
  %1305 = getelementptr inbounds %struct.CPUX86State* %1294, i64 0, i32 71, i64 0, i64 %1293, i32 3
  %1306 = load i64* %1305, align 8
  %1307 = add i64 %1306, %1304
  %1308 = trunc i32 %1256 to i16
  %1309 = inttoptr i64 %1307 to i16*
  store i16 %1308, i16* %1309, align 2
  br label %stw_kernel.exit1.i

stw_kernel.exit1.i:                               ; preds = %1303, %1299
  %1310 = add i32 %1247, 65530
  %1311 = and i32 %1310, 65535
  %1312 = add i32 %1311, %1249
  %1313 = lshr i32 %1312, 12
  %1314 = and i32 %1313, 255
  %1315 = zext i32 %1314 to i64
  %1316 = load %struct.CPUX86State** @env, align 8
  %1317 = getelementptr inbounds %struct.CPUX86State* %1316, i64 0, i32 71, i64 0, i64 %1315, i32 1
  %1318 = load i32* %1317, align 4
  %1319 = and i32 %1312, -4095
  %1320 = icmp eq i32 %1318, %1319
  br i1 %1320, label %1325, label %1321, !prof !0

; <label>:1321                                    ; preds = %stw_kernel.exit1.i
  %1322 = trunc i32 %old_eip.0.i21 to i16
  %1323 = zext i32 %1312 to i64
  %1324 = inttoptr i64 %1323 to i16*
  store i16 %1322, i16* %1324, align 2
  br label %do_interrupt_real.exit

; <label>:1325                                    ; preds = %stw_kernel.exit1.i
  %1326 = zext i32 %1312 to i64
  %1327 = getelementptr inbounds %struct.CPUX86State* %1316, i64 0, i32 71, i64 0, i64 %1315, i32 3
  %1328 = load i64* %1327, align 8
  %1329 = add i64 %1328, %1326
  %1330 = trunc i32 %old_eip.0.i21 to i16
  %1331 = inttoptr i64 %1329 to i16*
  store i16 %1330, i16* %1331, align 2
  br label %do_interrupt_real.exit

do_interrupt_real.exit:                           ; preds = %1325, %1321
  %1332 = load %struct.CPUX86State** @env, align 8
  %1333 = getelementptr inbounds %struct.CPUX86State* %1332, i64 0, i32 0, i64 4
  %1334 = load i32* %1333, align 4
  %1335 = and i32 %1334, -65536
  %1336 = or i32 %1335, %1311
  store i32 %1336, i32* %1333, align 4
  %1337 = load %struct.CPUX86State** @env, align 8
  %1338 = getelementptr inbounds %struct.CPUX86State* %1337, i64 0, i32 1
  store i32 %1231, i32* %1338, align 4
  %1339 = load %struct.CPUX86State** @env, align 8
  %1340 = getelementptr inbounds %struct.CPUX86State* %1339, i64 0, i32 9, i64 1, i32 0
  store i32 %1245, i32* %1340, align 4
  %1341 = shl nuw nsw i32 %1245, 4
  %1342 = load %struct.CPUX86State** @env, align 8
  %1343 = getelementptr inbounds %struct.CPUX86State* %1342, i64 0, i32 9, i64 1, i32 1
  store i32 %1341, i32* %1343, align 4
  %1344 = load %struct.CPUX86State** @env, align 8
  %1345 = getelementptr inbounds %struct.CPUX86State* %1344, i64 0, i32 2
  %1346 = load i32* %1345, align 4
  %1347 = and i32 %1346, -328449
  store i32 %1347, i32* %1345, align 4
  br label %do_interrupt_protected.exit

do_interrupt_protected.exit:                      ; preds = %do_interrupt_real.exit, %1186, %stl_kernel.exit144.i, %138
  %1348 = load %struct.CPUX86State** @env, align 8
  %1349 = getelementptr inbounds %struct.CPUX86State* %1348, i64 0, i32 7
  %1350 = load i32* %1349, align 4
  %1351 = and i32 %1350, 2097152
  %1352 = icmp eq i32 %1351, 0
  br i1 %1352, label %1363, label %1353

; <label>:1353                                    ; preds = %do_interrupt_protected.exit
  %1354 = getelementptr inbounds %struct.CPUX86State* %1348, i64 0, i32 40
  %1355 = load i64* %1354, align 8
  %1356 = add i64 %1355, 168
  %1357 = tail call i32 @ldl_phys(i64 %1356) nounwind
  %1358 = load %struct.CPUX86State** @env, align 8
  %1359 = getelementptr inbounds %struct.CPUX86State* %1358, i64 0, i32 40
  %1360 = load i64* %1359, align 8
  %1361 = add i64 %1360, 168
  %1362 = and i32 %1357, 2147483647
  tail call void @stl_phys(i64 %1361, i32 %1362) nounwind
  br label %1363

; <label>:1363                                    ; preds = %1353, %do_interrupt_protected.exit
  ret void
}

define void @do_interrupt_x86_hardirq(%struct.CPUX86State* %env1, i32 %intno, i32 %is_hw) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %env1, %struct.CPUX86State** @env, align 8
  tail call fastcc void @do_interrupt_all(i32 %intno, i32 0, i32 0, i32 0, i32 %is_hw)
  store %struct.CPUX86State* %1, %struct.CPUX86State** @env, align 8
  ret void
}

define void @raise_exception_err_env(%struct.CPUX86State* %nenv, i32 %exception_index, i32 %error_code) noreturn nounwind uwtable {
  store %struct.CPUX86State* %nenv, %struct.CPUX86State** @env, align 8
  %1 = tail call i32 (...)* @raise_interrupt(i32 %exception_index, i32 0, i32 %error_code, i32 0) nounwind
  ret void
}

declare i32 @raise_interrupt(...)

define void @raise_exception_env(i32 %exception_index, %struct.CPUX86State* %nenv) noreturn nounwind uwtable {
  store %struct.CPUX86State* %nenv, %struct.CPUX86State** @env, align 8
  tail call fastcc void @raise_exception(i32 %exception_index) noreturn
  unreachable
}

define internal fastcc void @raise_exception(i32 %exception_index) noreturn nounwind uwtable {
  %1 = tail call i32 (...)* @raise_interrupt(i32 %exception_index, i32 0, i32 0, i32 0) nounwind
  ret void
}

define void @do_smm_enter(%struct.CPUX86State* %env1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %env1, %struct.CPUX86State** @env, align 8
  %2 = load i32* @loglevel, align 4
  %3 = and i32 %2, 16
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

; <label>:5                                       ; preds = %0
  %6 = load %struct._IO_FILE** @logfile, align 8
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([12 x i8]* @.str3, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %6)
  %.pre = load i32* @loglevel, align 4
  br label %8

; <label>:8                                       ; preds = %5, %0
  %9 = phi i32 [ %2, %0 ], [ %.pre, %5 ]
  %10 = and i32 %9, 16
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %._crit_edge, label %12

; <label>:12                                      ; preds = %8
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = load %struct._IO_FILE** @logfile, align 8
  tail call void @cpu_dump_state(%struct.CPUX86State* %13, %struct._IO_FILE* %14, i32 (%struct._IO_FILE*, i8*, ...)* @fprintf, i32 2) nounwind
  br label %._crit_edge

._crit_edge:                                      ; preds = %12, %8
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 7
  %17 = load i32* %16, align 4
  %18 = or i32 %17, 524288
  store i32 %18, i32* %16, align 4
  %19 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_smm_update(%struct.CPUX86State* %19) nounwind
  %20 = load %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State* %20, i64 0, i32 61
  %22 = load i32* %21, align 4
  %23 = add i32 %22, 65532
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State* %20, i64 0, i32 14, i64 0
  %26 = load i32* %25, align 4
  tail call void @stl_phys(i64 %24, i32 %26) nounwind
  %27 = add i32 %22, 65528
  %28 = zext i32 %27 to i64
  %29 = load %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State* %29, i64 0, i32 14, i64 3
  %31 = load i32* %30, align 4
  tail call void @stl_phys(i64 %28, i32 %31) nounwind
  %32 = add i32 %22, 65524
  %33 = zext i32 %32 to i64
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 2
  %36 = load i32* %35, align 4
  %37 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 5
  %38 = load i32* %37, align 4
  %39 = tail call i32 @helper_cc_compute_all(i32 %38) nounwind
  %40 = or i32 %39, %36
  %41 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 6
  %42 = load i32* %41, align 4
  %43 = and i32 %42, 1024
  %44 = or i32 %40, %43
  tail call void @stl_phys(i64 %33, i32 %44) nounwind
  %45 = add i32 %22, 65520
  %46 = zext i32 %45 to i64
  %47 = load %struct.CPUX86State** @env, align 8
  %48 = getelementptr inbounds %struct.CPUX86State* %47, i64 0, i32 1
  %49 = load i32* %48, align 4
  tail call void @stl_phys(i64 %46, i32 %49) nounwind
  %50 = add i32 %22, 65516
  %51 = zext i32 %50 to i64
  %52 = load %struct.CPUX86State** @env, align 8
  %53 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 0, i64 7
  %54 = load i32* %53, align 4
  tail call void @stl_phys(i64 %51, i32 %54) nounwind
  %55 = add i32 %22, 65512
  %56 = zext i32 %55 to i64
  %57 = load %struct.CPUX86State** @env, align 8
  %58 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 0, i64 6
  %59 = load i32* %58, align 4
  tail call void @stl_phys(i64 %56, i32 %59) nounwind
  %60 = add i32 %22, 65508
  %61 = zext i32 %60 to i64
  %62 = load %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State* %62, i64 0, i32 0, i64 5
  %64 = load i32* %63, align 4
  tail call void @stl_phys(i64 %61, i32 %64) nounwind
  %65 = add i32 %22, 65504
  %66 = zext i32 %65 to i64
  %67 = load %struct.CPUX86State** @env, align 8
  %68 = getelementptr inbounds %struct.CPUX86State* %67, i64 0, i32 0, i64 4
  %69 = load i32* %68, align 4
  tail call void @stl_phys(i64 %66, i32 %69) nounwind
  %70 = add i32 %22, 65500
  %71 = zext i32 %70 to i64
  %72 = load %struct.CPUX86State** @env, align 8
  %73 = getelementptr inbounds %struct.CPUX86State* %72, i64 0, i32 0, i64 3
  %74 = load i32* %73, align 4
  tail call void @stl_phys(i64 %71, i32 %74) nounwind
  %75 = add i32 %22, 65496
  %76 = zext i32 %75 to i64
  %77 = load %struct.CPUX86State** @env, align 8
  %78 = getelementptr inbounds %struct.CPUX86State* %77, i64 0, i32 0, i64 2
  %79 = load i32* %78, align 4
  tail call void @stl_phys(i64 %76, i32 %79) nounwind
  %80 = add i32 %22, 65492
  %81 = zext i32 %80 to i64
  %82 = load %struct.CPUX86State** @env, align 8
  %83 = getelementptr inbounds %struct.CPUX86State* %82, i64 0, i32 0, i64 1
  %84 = load i32* %83, align 4
  tail call void @stl_phys(i64 %81, i32 %84) nounwind
  %85 = add i32 %22, 65488
  %86 = zext i32 %85 to i64
  %87 = load %struct.CPUX86State** @env, align 8
  %88 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 0, i64 0
  %89 = load i32* %88, align 4
  tail call void @stl_phys(i64 %86, i32 %89) nounwind
  %90 = add i32 %22, 65484
  %91 = zext i32 %90 to i64
  %92 = load %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State* %92, i64 0, i32 59, i64 6
  %94 = load i32* %93, align 4
  tail call void @stl_phys(i64 %91, i32 %94) nounwind
  %95 = add i32 %22, 65480
  %96 = zext i32 %95 to i64
  %97 = load %struct.CPUX86State** @env, align 8
  %98 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 59, i64 7
  %99 = load i32* %98, align 4
  tail call void @stl_phys(i64 %96, i32 %99) nounwind
  %100 = add i32 %22, 65476
  %101 = zext i32 %100 to i64
  %102 = load %struct.CPUX86State** @env, align 8
  %103 = getelementptr inbounds %struct.CPUX86State* %102, i64 0, i32 11, i32 0
  %104 = load i32* %103, align 4
  tail call void @stl_phys(i64 %101, i32 %104) nounwind
  %105 = add i32 %22, 65380
  %106 = zext i32 %105 to i64
  %107 = load %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State* %107, i64 0, i32 11, i32 1
  %109 = load i32* %108, align 4
  tail call void @stl_phys(i64 %106, i32 %109) nounwind
  %110 = add i32 %22, 65376
  %111 = zext i32 %110 to i64
  %112 = load %struct.CPUX86State** @env, align 8
  %113 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 11, i32 2
  %114 = load i32* %113, align 4
  tail call void @stl_phys(i64 %111, i32 %114) nounwind
  %115 = add i32 %22, 65372
  %116 = zext i32 %115 to i64
  %117 = load %struct.CPUX86State** @env, align 8
  %118 = getelementptr inbounds %struct.CPUX86State* %117, i64 0, i32 11, i32 3
  %119 = load i32* %118, align 4
  %120 = lshr i32 %119, 8
  %121 = and i32 %120, 61695
  tail call void @stl_phys(i64 %116, i32 %121) nounwind
  %122 = add i32 %22, 65472
  %123 = zext i32 %122 to i64
  %124 = load %struct.CPUX86State** @env, align 8
  %125 = getelementptr inbounds %struct.CPUX86State* %124, i64 0, i32 10, i32 0
  %126 = load i32* %125, align 4
  tail call void @stl_phys(i64 %123, i32 %126) nounwind
  %127 = add i32 %22, 65408
  %128 = zext i32 %127 to i64
  %129 = load %struct.CPUX86State** @env, align 8
  %130 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 10, i32 1
  %131 = load i32* %130, align 4
  tail call void @stl_phys(i64 %128, i32 %131) nounwind
  %132 = add i32 %22, 65404
  %133 = zext i32 %132 to i64
  %134 = load %struct.CPUX86State** @env, align 8
  %135 = getelementptr inbounds %struct.CPUX86State* %134, i64 0, i32 10, i32 2
  %136 = load i32* %135, align 4
  tail call void @stl_phys(i64 %133, i32 %136) nounwind
  %137 = add i32 %22, 65400
  %138 = zext i32 %137 to i64
  %139 = load %struct.CPUX86State** @env, align 8
  %140 = getelementptr inbounds %struct.CPUX86State* %139, i64 0, i32 10, i32 3
  %141 = load i32* %140, align 4
  %142 = lshr i32 %141, 8
  %143 = and i32 %142, 61695
  tail call void @stl_phys(i64 %138, i32 %143) nounwind
  %144 = add i32 %22, 65396
  %145 = zext i32 %144 to i64
  %146 = load %struct.CPUX86State** @env, align 8
  %147 = getelementptr inbounds %struct.CPUX86State* %146, i64 0, i32 12, i32 1
  %148 = load i32* %147, align 4
  tail call void @stl_phys(i64 %145, i32 %148) nounwind
  %149 = add i32 %22, 65392
  %150 = zext i32 %149 to i64
  %151 = load %struct.CPUX86State** @env, align 8
  %152 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 12, i32 2
  %153 = load i32* %152, align 4
  tail call void @stl_phys(i64 %150, i32 %153) nounwind
  %154 = add i32 %22, 65368
  %155 = zext i32 %154 to i64
  %156 = load %struct.CPUX86State** @env, align 8
  %157 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 13, i32 1
  %158 = load i32* %157, align 4
  tail call void @stl_phys(i64 %155, i32 %158) nounwind
  %159 = add i32 %22, 65364
  %160 = zext i32 %159 to i64
  %161 = load %struct.CPUX86State** @env, align 8
  %162 = getelementptr inbounds %struct.CPUX86State* %161, i64 0, i32 13, i32 2
  %163 = load i32* %162, align 4
  tail call void @stl_phys(i64 %160, i32 %163) nounwind
  %164 = add i32 %22, 65448
  %offset.0 = add i32 %22, 32768
  br label %165

; <label>:165                                     ; preds = %165, %._crit_edge
  %indvars.iv = phi i64 [ 0, %._crit_edge ], [ %indvars.iv.next, %165 ]
  %166 = load %struct.CPUX86State** @env, align 8
  %167 = trunc i64 %indvars.iv to i32
  %168 = icmp slt i32 %167, 3
  %169 = mul i64 %indvars.iv, 12
  %offset.0.v = select i1 %168, i32 32644, i32 32520
  %170 = shl i64 %indvars.iv, 2
  %171 = trunc i64 %170 to i32
  %172 = add i32 %164, %171
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds %struct.CPUX86State* %166, i64 0, i32 9, i64 %indvars.iv, i32 0
  %175 = load i32* %174, align 4
  tail call void @stl_phys(i64 %173, i32 %175) nounwind
  %176 = trunc i64 %169 to i32
  %177 = add i32 %offset.0, %176
  %178 = add i32 %177, %offset.0.v
  %179 = add i32 %178, 8
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds %struct.CPUX86State* %166, i64 0, i32 9, i64 %indvars.iv, i32 1
  %182 = load i32* %181, align 4
  tail call void @stl_phys(i64 %180, i32 %182) nounwind
  %183 = add i32 %178, 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %struct.CPUX86State* %166, i64 0, i32 9, i64 %indvars.iv, i32 2
  %186 = load i32* %185, align 4
  tail call void @stl_phys(i64 %184, i32 %186) nounwind
  %187 = zext i32 %178 to i64
  %188 = getelementptr inbounds %struct.CPUX86State* %166, i64 0, i32 9, i64 %indvars.iv, i32 3
  %189 = load i32* %188, align 4
  %190 = lshr i32 %189, 8
  %191 = and i32 %190, 61695
  tail call void @stl_phys(i64 %187, i32 %191) nounwind
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 6
  br i1 %exitcond, label %cpu_x86_load_seg_cache.exit60, label %165

cpu_x86_load_seg_cache.exit60:                    ; preds = %165
  %192 = add i32 %22, 65300
  %193 = zext i32 %192 to i64
  %194 = load %struct.CPUX86State** @env, align 8
  %195 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 14, i64 4
  %196 = load i32* %195, align 4
  tail call void @stl_phys(i64 %193, i32 %196) nounwind
  %197 = add i32 %22, 65276
  %198 = zext i32 %197 to i64
  tail call void @stl_phys(i64 %198, i32 131072) nounwind
  %199 = add i32 %22, 65272
  %200 = zext i32 %199 to i64
  %201 = load %struct.CPUX86State** @env, align 8
  %202 = getelementptr inbounds %struct.CPUX86State* %201, i64 0, i32 61
  %203 = load i32* %202, align 4
  tail call void @stl_phys(i64 %200, i32 %203) nounwind
  %204 = load %struct.CPUX86State** @env, align 8
  %205 = getelementptr inbounds %struct.CPUX86State* %204, i64 0, i32 3
  store i32 0, i32* %205, align 4
  %206 = load %struct.CPUX86State** @env, align 8
  %207 = getelementptr inbounds %struct.CPUX86State* %206, i64 0, i32 6
  store i32 1, i32* %207, align 4
  %208 = load %struct.CPUX86State** @env, align 8
  %209 = getelementptr inbounds %struct.CPUX86State* %208, i64 0, i32 2
  %210 = load i32* %209, align 4
  %211 = and i32 %210, 3285
  %212 = or i32 %211, 2
  store i32 %212, i32* %209, align 4
  %213 = load %struct.CPUX86State** @env, align 8
  %214 = getelementptr inbounds %struct.CPUX86State* %213, i64 0, i32 1
  store i32 32768, i32* %214, align 4
  %215 = load %struct.CPUX86State** @env, align 8
  %216 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 61
  %217 = load i32* %216, align 4
  %218 = lshr i32 %217, 4
  %219 = and i32 %218, 65535
  %220 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 9, i64 1, i32 0
  store i32 %219, i32* %220, align 4
  %221 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 9, i64 1, i32 1
  store i32 %217, i32* %221, align 4
  %222 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 9, i64 1, i32 2
  store i32 -1, i32* %222, align 4
  %223 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 9, i64 1, i32 3
  store i32 0, i32* %223, align 4
  %224 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 7
  %225 = load i32* %224, align 4
  %226 = getelementptr inbounds %struct.CPUX86State* %215, i64 0, i32 9, i64 2, i32 3
  %227 = load i32* %226, align 4
  %228 = lshr i32 %227, 17
  %229 = and i32 %228, 32
  %230 = and i32 %225, -32881
  %231 = or i32 %230, %229
  %232 = or i32 %231, 64
  store i32 %232, i32* %224, align 4
  %233 = load %struct.CPUX86State** @env, align 8
  %234 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 3, i32 0
  store i32 0, i32* %234, align 4
  %235 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 3, i32 1
  store i32 0, i32* %235, align 4
  %236 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 3, i32 2
  store i32 -1, i32* %236, align 4
  %237 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 3, i32 3
  store i32 0, i32* %237, align 4
  %.phi.trans.insert.i55 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 7
  %.pre.i56 = load i32* %.phi.trans.insert.i55, align 4
  %238 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 2, i32 3
  %239 = load i32* %238, align 4
  %240 = lshr i32 %239, 17
  %241 = and i32 %240, 32
  %242 = and i32 %.pre.i56, 32768
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %cpu_x86_load_seg_cache.exit58

; <label>:244                                     ; preds = %cpu_x86_load_seg_cache.exit60
  %245 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 14, i64 0
  %246 = load i32* %245, align 4
  %247 = and i32 %246, 1
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %257, label %249

; <label>:249                                     ; preds = %244
  %250 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 2
  %251 = load i32* %250, align 4
  %252 = and i32 %251, 131072
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %257

; <label>:254                                     ; preds = %249
  %255 = and i32 %.pre.i56, 16
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %259

; <label>:257                                     ; preds = %254, %249, %244
  %258 = or i32 %241, 64
  br label %cpu_x86_load_seg_cache.exit58

; <label>:259                                     ; preds = %254
  %260 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 0, i32 1
  %261 = load i32* %260, align 4
  %262 = getelementptr inbounds %struct.CPUX86State* %233, i64 0, i32 9, i64 2, i32 1
  %263 = load i32* %262, align 4
  %264 = or i32 %261, %263
  %265 = icmp ne i32 %264, 0
  %266 = zext i1 %265 to i32
  %267 = shl nuw nsw i32 %266, 6
  %268 = or i32 %267, %241
  br label %cpu_x86_load_seg_cache.exit58

cpu_x86_load_seg_cache.exit58:                    ; preds = %259, %257, %cpu_x86_load_seg_cache.exit60
  %new_hflags.0.i57 = phi i32 [ %241, %cpu_x86_load_seg_cache.exit60 ], [ %258, %257 ], [ %268, %259 ]
  %269 = and i32 %.pre.i56, -97
  %270 = or i32 %new_hflags.0.i57, %269
  store i32 %270, i32* %.phi.trans.insert.i55, align 4
  %271 = load %struct.CPUX86State** @env, align 8
  %272 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 0, i32 0
  store i32 0, i32* %272, align 4
  %273 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 0, i32 1
  store i32 0, i32* %273, align 4
  %274 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 0, i32 2
  store i32 -1, i32* %274, align 4
  %275 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 0, i32 3
  store i32 0, i32* %275, align 4
  %.phi.trans.insert.i51 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 7
  %.pre.i52 = load i32* %.phi.trans.insert.i51, align 4
  %276 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 2, i32 3
  %277 = load i32* %276, align 4
  %278 = lshr i32 %277, 17
  %279 = and i32 %278, 32
  %280 = and i32 %.pre.i52, 32768
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %cpu_x86_load_seg_cache.exit54

; <label>:282                                     ; preds = %cpu_x86_load_seg_cache.exit58
  %283 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 14, i64 0
  %284 = load i32* %283, align 4
  %285 = and i32 %284, 1
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %295, label %287

; <label>:287                                     ; preds = %282
  %288 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 131072
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %295

; <label>:292                                     ; preds = %287
  %293 = and i32 %.pre.i52, 16
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %297

; <label>:295                                     ; preds = %292, %287, %282
  %296 = or i32 %279, 64
  br label %cpu_x86_load_seg_cache.exit54

; <label>:297                                     ; preds = %292
  %298 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 3, i32 1
  %299 = load i32* %298, align 4
  %300 = getelementptr inbounds %struct.CPUX86State* %271, i64 0, i32 9, i64 2, i32 1
  %301 = load i32* %300, align 4
  %302 = or i32 %299, %301
  %303 = icmp ne i32 %302, 0
  %304 = zext i1 %303 to i32
  %305 = shl nuw nsw i32 %304, 6
  %306 = or i32 %305, %279
  br label %cpu_x86_load_seg_cache.exit54

cpu_x86_load_seg_cache.exit54:                    ; preds = %297, %295, %cpu_x86_load_seg_cache.exit58
  %new_hflags.0.i53 = phi i32 [ %279, %cpu_x86_load_seg_cache.exit58 ], [ %296, %295 ], [ %306, %297 ]
  %307 = and i32 %.pre.i52, -97
  %308 = or i32 %new_hflags.0.i53, %307
  store i32 %308, i32* %.phi.trans.insert.i51, align 4
  %309 = load %struct.CPUX86State** @env, align 8
  %310 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 9, i64 2, i32 0
  store i32 0, i32* %310, align 4
  %311 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 9, i64 2, i32 1
  store i32 0, i32* %311, align 4
  %312 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 9, i64 2, i32 2
  store i32 -1, i32* %312, align 4
  %313 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 9, i64 2, i32 3
  store i32 0, i32* %313, align 4
  %.phi.trans.insert.i47 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 7
  %.pre.i48 = load i32* %.phi.trans.insert.i47, align 4
  %314 = and i32 %.pre.i48, 32768
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %cpu_x86_load_seg_cache.exit50

; <label>:316                                     ; preds = %cpu_x86_load_seg_cache.exit54
  %317 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 14, i64 0
  %318 = load i32* %317, align 4
  %319 = and i32 %318, 1
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %cpu_x86_load_seg_cache.exit50, label %321

; <label>:321                                     ; preds = %316
  %322 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 2
  %323 = load i32* %322, align 4
  %324 = and i32 %323, 131072
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %cpu_x86_load_seg_cache.exit50

; <label>:326                                     ; preds = %321
  %327 = and i32 %.pre.i48, 16
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %cpu_x86_load_seg_cache.exit50, label %329

; <label>:329                                     ; preds = %326
  %330 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 9, i64 3, i32 1
  %331 = load i32* %330, align 4
  %332 = getelementptr inbounds %struct.CPUX86State* %309, i64 0, i32 9, i64 0, i32 1
  %333 = load i32* %332, align 4
  %334 = or i32 %333, %331
  %335 = icmp ne i32 %334, 0
  %336 = zext i1 %335 to i32
  %337 = shl nuw nsw i32 %336, 6
  br label %cpu_x86_load_seg_cache.exit50

cpu_x86_load_seg_cache.exit50:                    ; preds = %329, %326, %321, %316, %cpu_x86_load_seg_cache.exit54
  %new_hflags.0.i49 = phi i32 [ 0, %cpu_x86_load_seg_cache.exit54 ], [ %337, %329 ], [ 64, %326 ], [ 64, %321 ], [ 64, %316 ]
  %338 = and i32 %.pre.i48, -97
  %339 = or i32 %new_hflags.0.i49, %338
  store i32 %339, i32* %.phi.trans.insert.i47, align 4
  %340 = load %struct.CPUX86State** @env, align 8
  %341 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 4, i32 0
  store i32 0, i32* %341, align 4
  %342 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 4, i32 1
  store i32 0, i32* %342, align 4
  %343 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 4, i32 2
  store i32 -1, i32* %343, align 4
  %344 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 4, i32 3
  store i32 0, i32* %344, align 4
  %.phi.trans.insert.i43 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 7
  %.pre.i44 = load i32* %.phi.trans.insert.i43, align 4
  %345 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 2, i32 3
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 17
  %348 = and i32 %347, 32
  %349 = and i32 %.pre.i44, 32768
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %cpu_x86_load_seg_cache.exit46

; <label>:351                                     ; preds = %cpu_x86_load_seg_cache.exit50
  %352 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 14, i64 0
  %353 = load i32* %352, align 4
  %354 = and i32 %353, 1
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %364, label %356

; <label>:356                                     ; preds = %351
  %357 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 2
  %358 = load i32* %357, align 4
  %359 = and i32 %358, 131072
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %364

; <label>:361                                     ; preds = %356
  %362 = and i32 %.pre.i44, 16
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %364, label %366

; <label>:364                                     ; preds = %361, %356, %351
  %365 = or i32 %348, 64
  br label %cpu_x86_load_seg_cache.exit46

; <label>:366                                     ; preds = %361
  %367 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 3, i32 1
  %368 = load i32* %367, align 4
  %369 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 0, i32 1
  %370 = load i32* %369, align 4
  %371 = or i32 %370, %368
  %372 = getelementptr inbounds %struct.CPUX86State* %340, i64 0, i32 9, i64 2, i32 1
  %373 = load i32* %372, align 4
  %374 = or i32 %371, %373
  %375 = icmp ne i32 %374, 0
  %376 = zext i1 %375 to i32
  %377 = shl nuw nsw i32 %376, 6
  %378 = or i32 %377, %348
  br label %cpu_x86_load_seg_cache.exit46

cpu_x86_load_seg_cache.exit46:                    ; preds = %366, %364, %cpu_x86_load_seg_cache.exit50
  %new_hflags.0.i45 = phi i32 [ %348, %cpu_x86_load_seg_cache.exit50 ], [ %365, %364 ], [ %378, %366 ]
  %379 = and i32 %.pre.i44, -97
  %380 = or i32 %new_hflags.0.i45, %379
  store i32 %380, i32* %.phi.trans.insert.i43, align 4
  %381 = load %struct.CPUX86State** @env, align 8
  %382 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 5, i32 0
  store i32 0, i32* %382, align 4
  %383 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 5, i32 1
  store i32 0, i32* %383, align 4
  %384 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 5, i32 2
  store i32 -1, i32* %384, align 4
  %385 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 5, i32 3
  store i32 0, i32* %385, align 4
  %.phi.trans.insert.i = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 7
  %.pre.i = load i32* %.phi.trans.insert.i, align 4
  %386 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 2, i32 3
  %387 = load i32* %386, align 4
  %388 = lshr i32 %387, 17
  %389 = and i32 %388, 32
  %390 = and i32 %.pre.i, 32768
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %cpu_x86_load_seg_cache.exit

; <label>:392                                     ; preds = %cpu_x86_load_seg_cache.exit46
  %393 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 14, i64 0
  %394 = load i32* %393, align 4
  %395 = and i32 %394, 1
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %405, label %397

; <label>:397                                     ; preds = %392
  %398 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 2
  %399 = load i32* %398, align 4
  %400 = and i32 %399, 131072
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %405

; <label>:402                                     ; preds = %397
  %403 = and i32 %.pre.i, 16
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %405, label %407

; <label>:405                                     ; preds = %402, %397, %392
  %406 = or i32 %389, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:407                                     ; preds = %402
  %408 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 3, i32 1
  %409 = load i32* %408, align 4
  %410 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 0, i32 1
  %411 = load i32* %410, align 4
  %412 = or i32 %411, %409
  %413 = getelementptr inbounds %struct.CPUX86State* %381, i64 0, i32 9, i64 2, i32 1
  %414 = load i32* %413, align 4
  %415 = or i32 %412, %414
  %416 = icmp ne i32 %415, 0
  %417 = zext i1 %416 to i32
  %418 = shl nuw nsw i32 %417, 6
  %419 = or i32 %418, %389
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %407, %405, %cpu_x86_load_seg_cache.exit46
  %new_hflags.0.i = phi i32 [ %389, %cpu_x86_load_seg_cache.exit46 ], [ %406, %405 ], [ %419, %407 ]
  %420 = and i32 %.pre.i, -97
  %421 = or i32 %new_hflags.0.i, %420
  store i32 %421, i32* %.phi.trans.insert.i, align 4
  %422 = load %struct.CPUX86State** @env, align 8
  %423 = getelementptr inbounds %struct.CPUX86State* %422, i64 0, i32 14, i64 0
  %424 = load i32* %423, align 4
  %425 = and i32 %424, 2147483634
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %422, i32 %425) nounwind
  %426 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %426, i32 0) nounwind
  %427 = load %struct.CPUX86State** @env, align 8
  %428 = getelementptr inbounds %struct.CPUX86State* %427, i64 0, i32 59, i64 7
  store i32 1024, i32* %428, align 4
  %429 = load %struct.CPUX86State** @env, align 8
  %430 = getelementptr inbounds %struct.CPUX86State* %429, i64 0, i32 5
  store i32 1, i32* %430, align 4
  store %struct.CPUX86State* %1, %struct.CPUX86State** @env, align 8
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture, ...) nounwind

declare void @cpu_dump_state(%struct.CPUX86State*, %struct._IO_FILE*, i32 (%struct._IO_FILE*, i8*, ...)*, i32)

declare void @cpu_smm_update(%struct.CPUX86State*)

declare void @stl_phys(i64, i32)

declare void @cpu_x86_update_cr0(%struct.CPUX86State*, i32)

declare void @cpu_x86_update_cr4(%struct.CPUX86State*, i32)

define void @helper_rsm() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 61
  %3 = load i32* %2, align 4
  %4 = add i32 %3, 65532
  %5 = zext i32 %4 to i64
  %6 = tail call i32 @ldl_phys(i64 %5) nounwind
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %1, i32 %6) nounwind
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = add i32 %3, 65528
  %9 = zext i32 %8 to i64
  %10 = tail call i32 @ldl_phys(i64 %9) nounwind
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %7, i32 %10) nounwind
  %11 = add i32 %3, 65524
  %12 = zext i32 %11 to i64
  %13 = tail call i32 @ldl_phys(i64 %12) nounwind
  %14 = and i32 %13, 2261
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 3
  store i32 %14, i32* %16, align 4
  %17 = lshr i32 %13, 10
  %18 = shl nuw nsw i32 %17, 1
  %19 = and i32 %18, 2
  %20 = sub nsw i32 1, %19
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 6
  store i32 %20, i32* %22, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 2
  %25 = load i32* %24, align 4
  %26 = and i32 %25, 3285
  %27 = and i32 %13, -3288
  %28 = or i32 %27, %26
  %29 = or i32 %28, 2
  store i32 %29, i32* %24, align 4
  %30 = add i32 %3, 65520
  %31 = zext i32 %30 to i64
  %32 = tail call i32 @ldl_phys(i64 %31) nounwind
  %33 = load %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State* %33, i64 0, i32 1
  store i32 %32, i32* %34, align 4
  %35 = add i32 %3, 65516
  %36 = zext i32 %35 to i64
  %37 = tail call i32 @ldl_phys(i64 %36) nounwind
  %38 = load %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State* %38, i64 0, i32 0, i64 7
  store i32 %37, i32* %39, align 4
  %40 = add i32 %3, 65512
  %41 = zext i32 %40 to i64
  %42 = tail call i32 @ldl_phys(i64 %41) nounwind
  %43 = load %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State* %43, i64 0, i32 0, i64 6
  store i32 %42, i32* %44, align 4
  %45 = add i32 %3, 65508
  %46 = zext i32 %45 to i64
  %47 = tail call i32 @ldl_phys(i64 %46) nounwind
  %48 = load %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State* %48, i64 0, i32 0, i64 5
  store i32 %47, i32* %49, align 4
  %50 = add i32 %3, 65504
  %51 = zext i32 %50 to i64
  %52 = tail call i32 @ldl_phys(i64 %51) nounwind
  %53 = load %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 0, i64 4
  store i32 %52, i32* %54, align 4
  %55 = add i32 %3, 65500
  %56 = zext i32 %55 to i64
  %57 = tail call i32 @ldl_phys(i64 %56) nounwind
  %58 = load %struct.CPUX86State** @env, align 8
  %59 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 0, i64 3
  store i32 %57, i32* %59, align 4
  %60 = add i32 %3, 65496
  %61 = zext i32 %60 to i64
  %62 = tail call i32 @ldl_phys(i64 %61) nounwind
  %63 = load %struct.CPUX86State** @env, align 8
  %64 = getelementptr inbounds %struct.CPUX86State* %63, i64 0, i32 0, i64 2
  store i32 %62, i32* %64, align 4
  %65 = add i32 %3, 65492
  %66 = zext i32 %65 to i64
  %67 = tail call i32 @ldl_phys(i64 %66) nounwind
  %68 = load %struct.CPUX86State** @env, align 8
  %69 = getelementptr inbounds %struct.CPUX86State* %68, i64 0, i32 0, i64 1
  store i32 %67, i32* %69, align 4
  %70 = add i32 %3, 65488
  %71 = zext i32 %70 to i64
  %72 = tail call i32 @ldl_phys(i64 %71) nounwind
  %73 = load %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 0, i64 0
  store i32 %72, i32* %74, align 4
  %75 = add i32 %3, 65484
  %76 = zext i32 %75 to i64
  %77 = tail call i32 @ldl_phys(i64 %76) nounwind
  %78 = load %struct.CPUX86State** @env, align 8
  %79 = getelementptr inbounds %struct.CPUX86State* %78, i64 0, i32 59, i64 6
  store i32 %77, i32* %79, align 4
  %80 = add i32 %3, 65480
  %81 = zext i32 %80 to i64
  %82 = tail call i32 @ldl_phys(i64 %81) nounwind
  %83 = load %struct.CPUX86State** @env, align 8
  %84 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 59, i64 7
  store i32 %82, i32* %84, align 4
  %85 = add i32 %3, 65476
  %86 = zext i32 %85 to i64
  %87 = tail call i32 @ldl_phys(i64 %86) nounwind
  %88 = and i32 %87, 65535
  %89 = load %struct.CPUX86State** @env, align 8
  %90 = getelementptr inbounds %struct.CPUX86State* %89, i64 0, i32 11, i32 0
  store i32 %88, i32* %90, align 4
  %91 = add i32 %3, 65380
  %92 = zext i32 %91 to i64
  %93 = tail call i32 @ldl_phys(i64 %92) nounwind
  %94 = load %struct.CPUX86State** @env, align 8
  %95 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 11, i32 1
  store i32 %93, i32* %95, align 4
  %96 = add i32 %3, 65376
  %97 = zext i32 %96 to i64
  %98 = tail call i32 @ldl_phys(i64 %97) nounwind
  %99 = load %struct.CPUX86State** @env, align 8
  %100 = getelementptr inbounds %struct.CPUX86State* %99, i64 0, i32 11, i32 2
  store i32 %98, i32* %100, align 4
  %101 = add i32 %3, 65372
  %102 = zext i32 %101 to i64
  %103 = tail call i32 @ldl_phys(i64 %102) nounwind
  %104 = shl i32 %103, 8
  %105 = and i32 %104, 15793920
  %106 = load %struct.CPUX86State** @env, align 8
  %107 = getelementptr inbounds %struct.CPUX86State* %106, i64 0, i32 11, i32 3
  store i32 %105, i32* %107, align 4
  %108 = add i32 %3, 65472
  %109 = zext i32 %108 to i64
  %110 = tail call i32 @ldl_phys(i64 %109) nounwind
  %111 = and i32 %110, 65535
  %112 = load %struct.CPUX86State** @env, align 8
  %113 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 10, i32 0
  store i32 %111, i32* %113, align 4
  %114 = add i32 %3, 65408
  %115 = zext i32 %114 to i64
  %116 = tail call i32 @ldl_phys(i64 %115) nounwind
  %117 = load %struct.CPUX86State** @env, align 8
  %118 = getelementptr inbounds %struct.CPUX86State* %117, i64 0, i32 10, i32 1
  store i32 %116, i32* %118, align 4
  %119 = add i32 %3, 65404
  %120 = zext i32 %119 to i64
  %121 = tail call i32 @ldl_phys(i64 %120) nounwind
  %122 = load %struct.CPUX86State** @env, align 8
  %123 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 10, i32 2
  store i32 %121, i32* %123, align 4
  %124 = add i32 %3, 65400
  %125 = zext i32 %124 to i64
  %126 = tail call i32 @ldl_phys(i64 %125) nounwind
  %127 = shl i32 %126, 8
  %128 = and i32 %127, 15793920
  %129 = load %struct.CPUX86State** @env, align 8
  %130 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 10, i32 3
  store i32 %128, i32* %130, align 4
  %131 = add i32 %3, 65396
  %132 = zext i32 %131 to i64
  %133 = tail call i32 @ldl_phys(i64 %132) nounwind
  %134 = load %struct.CPUX86State** @env, align 8
  %135 = getelementptr inbounds %struct.CPUX86State* %134, i64 0, i32 12, i32 1
  store i32 %133, i32* %135, align 4
  %136 = add i32 %3, 65392
  %137 = zext i32 %136 to i64
  %138 = tail call i32 @ldl_phys(i64 %137) nounwind
  %139 = load %struct.CPUX86State** @env, align 8
  %140 = getelementptr inbounds %struct.CPUX86State* %139, i64 0, i32 12, i32 2
  store i32 %138, i32* %140, align 4
  %141 = add i32 %3, 65368
  %142 = zext i32 %141 to i64
  %143 = tail call i32 @ldl_phys(i64 %142) nounwind
  %144 = load %struct.CPUX86State** @env, align 8
  %145 = getelementptr inbounds %struct.CPUX86State* %144, i64 0, i32 13, i32 1
  store i32 %143, i32* %145, align 4
  %146 = add i32 %3, 65364
  %147 = zext i32 %146 to i64
  %148 = tail call i32 @ldl_phys(i64 %147) nounwind
  %149 = load %struct.CPUX86State** @env, align 8
  %150 = getelementptr inbounds %struct.CPUX86State* %149, i64 0, i32 13, i32 2
  store i32 %148, i32* %150, align 4
  %151 = add i32 %3, 65448
  %offset.0 = add i32 %3, 32768
  br label %152

; <label>:152                                     ; preds = %cpu_x86_load_seg_cache.exit, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %cpu_x86_load_seg_cache.exit ]
  %153 = trunc i64 %indvars.iv to i32
  %154 = icmp slt i32 %153, 3
  %155 = mul i64 %indvars.iv, 12
  %offset.0.v = select i1 %154, i32 32644, i32 32520
  %156 = load %struct.CPUX86State** @env, align 8
  %157 = shl i64 %indvars.iv, 2
  %158 = trunc i64 %157 to i32
  %159 = add i32 %151, %158
  %160 = zext i32 %159 to i64
  %161 = tail call i32 @ldl_phys(i64 %160) nounwind
  %162 = and i32 %161, 65535
  %163 = trunc i64 %155 to i32
  %164 = add i32 %offset.0, %163
  %165 = add i32 %164, %offset.0.v
  %166 = add i32 %165, 8
  %167 = zext i32 %166 to i64
  %168 = tail call i32 @ldl_phys(i64 %167) nounwind
  %169 = add i32 %165, 4
  %170 = zext i32 %169 to i64
  %171 = tail call i32 @ldl_phys(i64 %170) nounwind
  %172 = zext i32 %165 to i64
  %173 = tail call i32 @ldl_phys(i64 %172) nounwind
  %174 = shl i32 %173, 8
  %175 = and i32 %174, 15793920
  %176 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 %indvars.iv, i32 0
  store i32 %162, i32* %176, align 4
  %177 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 %indvars.iv, i32 1
  store i32 %168, i32* %177, align 4
  %178 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 %indvars.iv, i32 2
  store i32 %171, i32* %178, align 4
  %179 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 %indvars.iv, i32 3
  store i32 %175, i32* %179, align 4
  %180 = icmp eq i32 %153, 1
  br i1 %180, label %181, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %152
  %.phi.trans.insert.i = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 7
  %.pre.i = load i32* %.phi.trans.insert.i, align 4
  br label %190

; <label>:181                                     ; preds = %152
  %182 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 1, i32 3
  %183 = load i32* %182, align 4
  %184 = lshr i32 %183, 18
  %185 = and i32 %184, 16
  %186 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 7
  %187 = load i32* %186, align 4
  %188 = and i32 %187, -32785
  %189 = or i32 %188, %185
  store i32 %189, i32* %186, align 4
  br label %190

; <label>:190                                     ; preds = %181, %._crit_edge.i
  %191 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %189, %181 ]
  %192 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 2, i32 3
  %193 = load i32* %192, align 4
  %194 = lshr i32 %193, 17
  %195 = and i32 %194, 32
  %196 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 7
  %197 = and i32 %191, 32768
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %cpu_x86_load_seg_cache.exit

; <label>:199                                     ; preds = %190
  %200 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 14, i64 0
  %201 = load i32* %200, align 4
  %202 = and i32 %201, 1
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %212, label %204

; <label>:204                                     ; preds = %199
  %205 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 2
  %206 = load i32* %205, align 4
  %207 = and i32 %206, 131072
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %212

; <label>:209                                     ; preds = %204
  %210 = and i32 %191, 16
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %214

; <label>:212                                     ; preds = %209, %204, %199
  %213 = or i32 %195, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:214                                     ; preds = %209
  %215 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 3, i32 1
  %216 = load i32* %215, align 4
  %217 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 0, i32 1
  %218 = load i32* %217, align 4
  %219 = or i32 %218, %216
  %220 = getelementptr inbounds %struct.CPUX86State* %156, i64 0, i32 9, i64 2, i32 1
  %221 = load i32* %220, align 4
  %222 = or i32 %219, %221
  %223 = icmp ne i32 %222, 0
  %224 = zext i1 %223 to i32
  %225 = shl nuw nsw i32 %224, 6
  %226 = or i32 %225, %195
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %214, %212, %190
  %new_hflags.0.i = phi i32 [ %195, %190 ], [ %213, %212 ], [ %226, %214 ]
  %227 = and i32 %191, -97
  %228 = or i32 %new_hflags.0.i, %227
  store i32 %228, i32* %196, align 4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 6
  br i1 %exitcond, label %229, label %152

; <label>:229                                     ; preds = %cpu_x86_load_seg_cache.exit
  %230 = load %struct.CPUX86State** @env, align 8
  %231 = add i32 %3, 65300
  %232 = zext i32 %231 to i64
  %233 = tail call i32 @ldl_phys(i64 %232) nounwind
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %230, i32 %233) nounwind
  %234 = add i32 %3, 65276
  %235 = zext i32 %234 to i64
  %236 = tail call i32 @ldl_phys(i64 %235) nounwind
  %237 = and i32 %236, 131072
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %246, label %239

; <label>:239                                     ; preds = %229
  %240 = add i32 %3, 65272
  %241 = zext i32 %240 to i64
  %242 = tail call i32 @ldl_phys(i64 %241) nounwind
  %243 = and i32 %242, -32768
  %244 = load %struct.CPUX86State** @env, align 8
  %245 = getelementptr inbounds %struct.CPUX86State* %244, i64 0, i32 61
  store i32 %243, i32* %245, align 4
  br label %246

; <label>:246                                     ; preds = %239, %229
  %247 = load %struct.CPUX86State** @env, align 8
  %248 = getelementptr inbounds %struct.CPUX86State* %247, i64 0, i32 5
  store i32 1, i32* %248, align 4
  %249 = load %struct.CPUX86State** @env, align 8
  %250 = getelementptr inbounds %struct.CPUX86State* %249, i64 0, i32 7
  %251 = load i32* %250, align 4
  %252 = and i32 %251, -524289
  store i32 %252, i32* %250, align 4
  %253 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_smm_update(%struct.CPUX86State* %253) nounwind
  %254 = load i32* @loglevel, align 4
  %255 = and i32 %254, 16
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %260, label %257

; <label>:257                                     ; preds = %246
  %258 = load %struct._IO_FILE** @logfile, align 8
  %259 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8]* @.str4, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %258)
  br label %260

; <label>:260                                     ; preds = %257, %246
  ret void
}

declare i32 @ldl_phys(i64)

declare void @cpu_x86_update_cr3(%struct.CPUX86State*, i32)

define void @helper_divb_AL(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 65535
  %5 = and i32 %t0, 255
  %6 = udiv i32 %4, %5
  %7 = icmp ugt i32 %6, 255
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  tail call fastcc void @raise_exception(i32 0) noreturn
  unreachable

; <label>:9                                       ; preds = %0
  %10 = and i32 %6, 255
  %11 = urem i32 %4, %5
  %12 = and i32 %3, -65536
  %13 = shl nuw nsw i32 %11, 8
  %14 = and i32 %13, 65280
  %15 = or i32 %10, %12
  %16 = or i32 %15, %14
  store i32 %16, i32* %2, align 4
  ret void
}

define void @helper_idivb_AL(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %sext = shl i32 %3, 16
  %4 = ashr exact i32 %sext, 16
  %sext6 = shl i32 %t0, 24
  %5 = ashr exact i32 %sext6, 24
  %6 = sdiv i32 %4, %5
  %sext7 = shl i32 %6, 24
  %7 = ashr exact i32 %sext7, 24
  %8 = icmp eq i32 %6, %7
  br i1 %8, label %10, label %9

; <label>:9                                       ; preds = %0
  tail call fastcc void @raise_exception(i32 0) noreturn
  unreachable

; <label>:10                                      ; preds = %0
  %11 = and i32 %6, 255
  %12 = srem i32 %4, %5
  %13 = and i32 %3, -65536
  %14 = shl i32 %12, 8
  %15 = and i32 %14, 65280
  %16 = or i32 %11, %13
  %17 = or i32 %16, %15
  store i32 %17, i32* %2, align 4
  ret void
}

define void @helper_divw_AX(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 65535
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i32* %5, align 4
  %7 = shl i32 %6, 16
  %8 = or i32 %7, %4
  %9 = and i32 %t0, 65535
  %10 = udiv i32 %8, %9
  %11 = icmp ugt i32 %10, 65535
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %0
  tail call fastcc void @raise_exception(i32 0) noreturn
  unreachable

; <label>:13                                      ; preds = %0
  %14 = and i32 %10, 65535
  %15 = urem i32 %8, %9
  %16 = and i32 %15, 65535
  %17 = and i32 %3, -65536
  %18 = or i32 %14, %17
  store i32 %18, i32* %2, align 4
  %19 = load %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 0, i64 2
  %21 = load i32* %20, align 4
  %22 = and i32 %21, -65536
  %23 = or i32 %22, %16
  store i32 %23, i32* %20, align 4
  ret void
}

define void @helper_idivw_AX(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 65535
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i32* %5, align 4
  %7 = shl i32 %6, 16
  %8 = or i32 %7, %4
  %sext = shl i32 %t0, 16
  %9 = ashr exact i32 %sext, 16
  %10 = sdiv i32 %8, %9
  %sext6 = shl i32 %10, 16
  %11 = ashr exact i32 %sext6, 16
  %12 = icmp eq i32 %10, %11
  br i1 %12, label %14, label %13

; <label>:13                                      ; preds = %0
  tail call fastcc void @raise_exception(i32 0) noreturn
  unreachable

; <label>:14                                      ; preds = %0
  %15 = and i32 %10, 65535
  %16 = srem i32 %8, %9
  %17 = and i32 %16, 65535
  %18 = and i32 %3, -65536
  %19 = or i32 %15, %18
  store i32 %19, i32* %2, align 4
  %20 = load %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State* %20, i64 0, i32 0, i64 2
  %22 = load i32* %21, align 4
  %23 = and i32 %22, -65536
  %24 = or i32 %23, %17
  store i32 %24, i32* %21, align 4
  ret void
}

define void @helper_divl_EAX(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = or i64 %8, %4
  %10 = zext i32 %t0 to i64
  %11 = udiv i64 %9, %10
  %12 = icmp ugt i64 %11, 4294967295
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %0
  tail call fastcc void @raise_exception(i32 0) noreturn
  unreachable

; <label>:14                                      ; preds = %0
  %15 = urem i64 %9, %10
  %16 = trunc i64 %15 to i32
  %17 = trunc i64 %11 to i32
  store i32 %17, i32* %2, align 4
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 0, i64 2
  store i32 %16, i32* %19, align 4
  ret void
}

define void @helper_idivl_EAX(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = or i64 %8, %4
  %10 = sext i32 %t0 to i64
  %11 = sdiv i64 %9, %10
  %sext = shl i64 %11, 32
  %12 = ashr exact i64 %sext, 32
  %13 = icmp eq i64 %11, %12
  br i1 %13, label %15, label %14

; <label>:14                                      ; preds = %0
  tail call fastcc void @raise_exception(i32 0) noreturn
  unreachable

; <label>:15                                      ; preds = %0
  %16 = srem i64 %9, %10
  %17 = trunc i64 %11 to i32
  %18 = trunc i64 %16 to i32
  store i32 %17, i32* %2, align 4
  %19 = load %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 0, i64 2
  store i32 %18, i32* %20, align 4
  ret void
}

define void @helper_aam(i32 %base) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 255
  %5 = sdiv i32 %4, %base
  %6 = srem i32 %4, %base
  %7 = and i32 %3, -65536
  %8 = or i32 %6, %7
  %9 = shl i32 %5, 8
  %10 = or i32 %8, %9
  store i32 %10, i32* %2, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 4
  store i32 %6, i32* %12, align 4
  ret void
}

define void @helper_aad(i32 %base) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 8
  %5 = and i32 %4, 255
  %6 = mul nsw i32 %5, %base
  %7 = add nsw i32 %6, %3
  %8 = and i32 %7, 255
  %9 = and i32 %3, -65536
  %10 = or i32 %8, %9
  store i32 %10, i32* %2, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 4
  store i32 %8, i32* %12, align 4
  ret void
}

define void @helper_aaa() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %6 = load i32* %5, align 4
  %7 = and i32 %6, 254
  %8 = lshr i32 %6, 8
  %9 = icmp ugt i32 %7, 249
  %10 = zext i1 %9 to i32
  %11 = and i32 %6, 15
  %12 = icmp ugt i32 %11, 9
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %0
  %14 = and i32 %4, 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %16

; <label>:16                                      ; preds = %13, %0
  %17 = add nsw i32 %6, 6
  %18 = and i32 %17, 15
  %19 = add nsw i32 %8, 1
  %20 = add nsw i32 %19, %10
  %21 = or i32 %4, 17
  br label %24

; <label>:22                                      ; preds = %13
  %23 = and i32 %4, -18
  br label %24

; <label>:24                                      ; preds = %22, %16
  %ah.0.in = phi i32 [ %20, %16 ], [ %8, %22 ]
  %al.0 = phi i32 [ %18, %16 ], [ %11, %22 ]
  %eflags.0 = phi i32 [ %21, %16 ], [ %23, %22 ]
  %25 = and i32 %6, -65536
  %ah.0 = shl i32 %ah.0.in, 8
  %26 = and i32 %ah.0, 65280
  %27 = or i32 %26, %al.0
  %28 = or i32 %27, %25
  store i32 %28, i32* %5, align 4
  %29 = load %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State* %29, i64 0, i32 3
  store i32 %eflags.0, i32* %30, align 4
  ret void
}

define void @helper_aas() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %6 = load i32* %5, align 4
  %7 = and i32 %6, 254
  %8 = lshr i32 %6, 8
  %9 = icmp ult i32 %7, 6
  %10 = zext i1 %9 to i32
  %11 = and i32 %6, 15
  %12 = icmp ugt i32 %11, 9
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %0
  %14 = and i32 %4, 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %16

; <label>:16                                      ; preds = %13, %0
  %17 = add nsw i32 %6, 10
  %18 = and i32 %17, 15
  %19 = add nsw i32 %8, -1
  %20 = sub i32 %19, %10
  %21 = or i32 %4, 17
  br label %24

; <label>:22                                      ; preds = %13
  %23 = and i32 %4, -18
  br label %24

; <label>:24                                      ; preds = %22, %16
  %ah.0.in = phi i32 [ %20, %16 ], [ %8, %22 ]
  %al.0 = phi i32 [ %18, %16 ], [ %11, %22 ]
  %eflags.0 = phi i32 [ %21, %16 ], [ %23, %22 ]
  %25 = and i32 %6, -65536
  %ah.0 = shl i32 %ah.0.in, 8
  %26 = and i32 %ah.0, 65280
  %27 = or i32 %26, %al.0
  %28 = or i32 %27, %25
  store i32 %28, i32* %5, align 4
  %29 = load %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State* %29, i64 0, i32 3
  store i32 %eflags.0, i32* %30, align 4
  ret void
}

define void @helper_daa() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 1
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %7 = load i32* %6, align 4
  %8 = and i32 %7, 255
  %9 = and i32 %7, 14
  %10 = icmp ugt i32 %9, 9
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %0
  %12 = and i32 %4, 16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

; <label>:14                                      ; preds = %11, %0
  %15 = add nsw i32 %7, 6
  %16 = and i32 %15, 255
  br label %17

; <label>:17                                      ; preds = %14, %11
  %al.0 = phi i32 [ %16, %14 ], [ %8, %11 ]
  %eflags.0 = phi i32 [ 16, %14 ], [ 0, %11 ]
  %18 = icmp ult i32 %8, 154
  %19 = icmp eq i32 %5, 0
  %or.cond = and i1 %18, %19
  br i1 %or.cond, label %24, label %20

; <label>:20                                      ; preds = %17
  %21 = add nsw i32 %al.0, 96
  %22 = and i32 %21, 255
  %23 = or i32 %eflags.0, 1
  br label %24

; <label>:24                                      ; preds = %20, %17
  %al.1 = phi i32 [ %22, %20 ], [ %al.0, %17 ]
  %eflags.1 = phi i32 [ %23, %20 ], [ %eflags.0, %17 ]
  %25 = and i32 %7, -256
  %26 = or i32 %25, %al.1
  store i32 %26, i32* %6, align 4
  %27 = icmp eq i32 %al.1, 0
  %28 = zext i1 %27 to i32
  %29 = shl nuw nsw i32 %28, 6
  %30 = sext i32 %al.1 to i64
  %31 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %30
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %al.1, 128
  %35 = or i32 %34, %eflags.1
  %36 = or i32 %35, %29
  %37 = or i32 %36, %33
  %38 = load %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State* %38, i64 0, i32 3
  store i32 %37, i32* %39, align 4
  ret void
}

define void @helper_das() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 1
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %7 = load i32* %6, align 4
  %8 = and i32 %7, 255
  %9 = and i32 %7, 14
  %10 = icmp ugt i32 %9, 9
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %0
  %12 = and i32 %4, 16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

; <label>:14                                      ; preds = %11, %0
  %15 = icmp ugt i32 %8, 5
  %16 = icmp eq i32 %5, 0
  %or.cond = and i1 %15, %16
  %eflags.0 = select i1 %or.cond, i32 16, i32 17
  %17 = add nsw i32 %7, 250
  %18 = and i32 %17, 255
  br label %19

; <label>:19                                      ; preds = %14, %11
  %al.0 = phi i32 [ %18, %14 ], [ %8, %11 ]
  %eflags.1 = phi i32 [ %eflags.0, %14 ], [ 0, %11 ]
  %20 = icmp ult i32 %8, 154
  %21 = icmp eq i32 %5, 0
  %or.cond18 = and i1 %20, %21
  br i1 %or.cond18, label %26, label %22

; <label>:22                                      ; preds = %19
  %23 = add nsw i32 %al.0, 160
  %24 = and i32 %23, 255
  %25 = or i32 %eflags.1, 1
  br label %26

; <label>:26                                      ; preds = %22, %19
  %al.1 = phi i32 [ %24, %22 ], [ %al.0, %19 ]
  %eflags.2 = phi i32 [ %25, %22 ], [ %eflags.1, %19 ]
  %27 = and i32 %7, -256
  %28 = or i32 %27, %al.1
  store i32 %28, i32* %6, align 4
  %29 = icmp eq i32 %al.1, 0
  %30 = zext i1 %29 to i32
  %31 = shl nuw nsw i32 %30, 6
  %32 = sext i32 %al.1 to i64
  %33 = getelementptr inbounds [256 x i8]* @parity_table, i64 0, i64 %32
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = and i32 %al.1, 128
  %37 = or i32 %36, %eflags.2
  %38 = or i32 %37, %31
  %39 = or i32 %38, %35
  %40 = load %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State* %40, i64 0, i32 3
  store i32 %39, i32* %41, align 4
  ret void
}

define void @helper_into(i32 %next_eip_addend) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 2048
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7                                       ; preds = %0
  %8 = tail call i32 (...)* @raise_interrupt(i32 4, i32 1, i32 0, i32 %next_eip_addend) nounwind
  br label %9

; <label>:9                                       ; preds = %7, %0
  ret void
}

define void @helper_cmpxchg8b(i32 %a0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = lshr i32 %a0, 12
  %6 = and i32 %5, 255
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %8 = load i32* %7, align 4
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 3
  %11 = zext i32 %6 to i64
  %12 = zext i1 %10 to i64
  %13 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %12, i64 %11, i32 0
  %14 = load i32* %13, align 4
  %15 = and i32 %a0, -4089
  %16 = icmp eq i32 %14, %15
  %17 = zext i32 %a0 to i64
  br i1 %16, label %18, label %ldq_data.exit, !prof !0

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %12, i64 %11, i32 3
  %20 = load i64* %19, align 8
  %21 = add i64 %20, %17
  br label %ldq_data.exit

ldq_data.exit:                                    ; preds = %18, %0
  %res.0.in.in.i = phi i64 [ %21, %18 ], [ %17, %0 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i64*
  %res.0.i = load i64* %res.0.in.i, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %23 = load i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 %24, 32
  %26 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %25, %28
  %30 = icmp eq i64 %res.0.i, %29
  br i1 %30, label %31, label %51

; <label>:31                                      ; preds = %ldq_data.exit
  %32 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %33 = load i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw i64 %34, 32
  %36 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 3
  %37 = load i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %35, %38
  %40 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %12, i64 %11, i32 1
  %41 = load i32* %40, align 4
  %42 = icmp eq i32 %41, %15
  br i1 %42, label %45, label %43, !prof !0

; <label>:43                                      ; preds = %31
  %44 = inttoptr i64 %17 to i64*
  store i64 %39, i64* %44, align 8
  br label %stq_data.exit7

; <label>:45                                      ; preds = %31
  %46 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %12, i64 %11, i32 3
  %47 = load i64* %46, align 8
  %48 = add i64 %47, %17
  %49 = inttoptr i64 %48 to i64*
  store i64 %39, i64* %49, align 8
  br label %stq_data.exit7

stq_data.exit7:                                   ; preds = %45, %43
  %50 = or i32 %4, 64
  br label %70

; <label>:51                                      ; preds = %ldq_data.exit
  %52 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %12, i64 %11, i32 1
  %53 = load i32* %52, align 4
  %54 = icmp eq i32 %53, %15
  br i1 %54, label %57, label %55, !prof !0

; <label>:55                                      ; preds = %51
  %56 = inttoptr i64 %17 to i64*
  store i64 %res.0.i, i64* %56, align 8
  br label %stq_data.exit

; <label>:57                                      ; preds = %51
  %58 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %12, i64 %11, i32 3
  %59 = load i64* %58, align 8
  %60 = add i64 %59, %17
  %61 = inttoptr i64 %60 to i64*
  store i64 %res.0.i, i64* %61, align 8
  br label %stq_data.exit

stq_data.exit:                                    ; preds = %57, %55
  %62 = lshr i64 %res.0.i, 32
  %63 = trunc i64 %62 to i32
  %64 = load %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State* %64, i64 0, i32 0, i64 2
  store i32 %63, i32* %65, align 4
  %66 = trunc i64 %res.0.i to i32
  %67 = load %struct.CPUX86State** @env, align 8
  %68 = getelementptr inbounds %struct.CPUX86State* %67, i64 0, i32 0, i64 0
  store i32 %66, i32* %68, align 4
  %69 = and i32 %4, -65
  br label %70

; <label>:70                                      ; preds = %stq_data.exit, %stq_data.exit7
  %eflags.0 = phi i32 [ %50, %stq_data.exit7 ], [ %69, %stq_data.exit ]
  %71 = load %struct.CPUX86State** @env, align 8
  %72 = getelementptr inbounds %struct.CPUX86State* %71, i64 0, i32 3
  store i32 %eflags.0, i32* %72, align 4
  ret void
}

define void @helper_single_step() noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = tail call i32 @check_hw_breakpoints(%struct.CPUX86State* %1, i32 1) nounwind
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 59, i64 6
  %5 = load i32* %4, align 4
  %6 = or i32 %5, 16384
  store i32 %6, i32* %4, align 4
  tail call fastcc void @raise_exception(i32 1) noreturn
  unreachable
}

declare i32 @check_hw_breakpoints(%struct.CPUX86State*, i32)

define void @helper_cpuid() nounwind uwtable {
  %eax = alloca i32, align 4
  %ebx = alloca i32, align 4
  %ecx = alloca i32, align 4
  %edx = alloca i32, align 4
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 262144
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  call void @helper_vmexit(i32 114, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %12 = load i32* %11, align 4
  %13 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %14 = load i32* %13, align 4
  call void @cpu_x86_cpuid(%struct.CPUX86State* %1, i32 %12, i32 %14, i32* %eax, i32* %ebx, i32* %ecx, i32* %edx) nounwind
  %15 = load i32* %eax, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 0, i64 0
  store i32 %15, i32* %17, align 4
  %18 = load i32* %ebx, align 4
  %19 = load %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 0, i64 3
  store i32 %18, i32* %20, align 4
  %21 = load i32* %ecx, align 4
  %22 = load %struct.CPUX86State** @env, align 8
  %23 = getelementptr inbounds %struct.CPUX86State* %22, i64 0, i32 0, i64 1
  store i32 %21, i32* %23, align 4
  %24 = load i32* %edx, align 4
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 0, i64 2
  store i32 %24, i32* %26, align 4
  ret void
}

define void @helper_svm_check_intercept_param(i32 %type, i64 %param) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit, 0
  br i1 %4, label %101, label %5, !prof !0

; <label>:5                                       ; preds = %0
  switch i32 %type, label %92 [
    i32 0, label %6
    i32 1, label %6
    i32 2, label %6
    i32 3, label %6
    i32 4, label %6
    i32 5, label %6
    i32 6, label %6
    i32 7, label %6
    i32 8, label %6
    i32 16, label %14
    i32 17, label %14
    i32 18, label %14
    i32 19, label %14
    i32 20, label %14
    i32 21, label %14
    i32 22, label %14
    i32 23, label %14
    i32 24, label %14
    i32 32, label %23
    i32 33, label %23
    i32 34, label %23
    i32 35, label %23
    i32 36, label %23
    i32 37, label %23
    i32 38, label %23
    i32 39, label %23
    i32 48, label %32
    i32 49, label %32
    i32 50, label %32
    i32 51, label %32
    i32 52, label %32
    i32 53, label %32
    i32 54, label %32
    i32 55, label %32
    i32 64, label %41
    i32 65, label %41
    i32 66, label %41
    i32 67, label %41
    i32 68, label %41
    i32 69, label %41
    i32 70, label %41
    i32 71, label %41
    i32 72, label %41
    i32 73, label %41
    i32 74, label %41
    i32 75, label %41
    i32 76, label %41
    i32 77, label %41
    i32 78, label %41
    i32 79, label %41
    i32 80, label %41
    i32 81, label %41
    i32 82, label %41
    i32 83, label %41
    i32 84, label %41
    i32 85, label %41
    i32 86, label %41
    i32 87, label %41
    i32 88, label %41
    i32 89, label %41
    i32 90, label %41
    i32 91, label %41
    i32 92, label %41
    i32 93, label %41
    i32 94, label %41
    i32 95, label %41
    i32 124, label %49
  ]

; <label>:6                                       ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 43
  %8 = load i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = shl i32 1, %type
  %11 = and i32 %9, %10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %101, label %13

; <label>:13                                      ; preds = %6
  tail call void @helper_vmexit(i32 %type, i64 %param)
  unreachable

; <label>:14                                      ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5
  %15 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 44
  %16 = load i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add i32 %type, -16
  %19 = shl i32 1, %18
  %20 = and i32 %17, %19
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %101, label %22

; <label>:22                                      ; preds = %14
  tail call void @helper_vmexit(i32 %type, i64 %param)
  unreachable

; <label>:23                                      ; preds = %5, %5, %5, %5, %5, %5, %5, %5
  %24 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 45
  %25 = load i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = add i32 %type, -32
  %28 = shl i32 1, %27
  %29 = and i32 %26, %28
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %101, label %31

; <label>:31                                      ; preds = %23
  tail call void @helper_vmexit(i32 %type, i64 %param)
  unreachable

; <label>:32                                      ; preds = %5, %5, %5, %5, %5, %5, %5, %5
  %33 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 46
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = add i32 %type, -48
  %37 = shl i32 1, %36
  %38 = and i32 %35, %37
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %101, label %40

; <label>:40                                      ; preds = %32
  tail call void @helper_vmexit(i32 %type, i64 %param)
  unreachable

; <label>:41                                      ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  %42 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 47
  %43 = load i32* %42, align 4
  %44 = add i32 %type, -64
  %45 = shl i32 1, %44
  %46 = and i32 %43, %45
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %101, label %48

; <label>:48                                      ; preds = %41
  tail call void @helper_vmexit(i32 %type, i64 %param)
  unreachable

; <label>:49                                      ; preds = %5
  %50 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %51 = load i64* %50, align 8
  %52 = and i64 %51, 268435456
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %101, label %54

; <label>:54                                      ; preds = %49
  %55 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 40
  %56 = load i64* %55, align 8
  %57 = add i64 %56, 72
  %58 = tail call i64 @ldq_phys(i64 %57) nounwind
  %59 = load %struct.CPUX86State** @env, align 8
  %60 = getelementptr inbounds %struct.CPUX86State* %59, i64 0, i32 0, i64 1
  %61 = load i32* %60, align 4
  %62 = add i32 %61, 1073676288
  %63 = icmp ult i32 %62, 8192
  br i1 %63, label %77, label %74

; <label>:64                                      ; preds = %68
  %65 = shl i32 %61, 1
  %66 = lshr i32 %61, 2
  %67 = and i32 %66, 536870911
  br label %82

; <label>:68                                      ; preds = %74
  %69 = icmp ult i32 %61, 8192
  br i1 %69, label %64, label %81

; <label>:70                                      ; preds = %74
  %71 = shl i32 %61, 1
  %72 = add i32 %71, -2147467264
  %73 = lshr i32 %72, 3
  br label %82

; <label>:74                                      ; preds = %54
  %75 = add i32 %61, 1073741824
  %76 = icmp ult i32 %75, 8192
  br i1 %76, label %70, label %68

; <label>:77                                      ; preds = %54
  %78 = shl i32 %61, 1
  %79 = add i32 %78, 2147385344
  %80 = lshr i32 %79, 3
  br label %82

; <label>:81                                      ; preds = %68
  tail call void @helper_vmexit(i32 124, i64 %param)
  unreachable

; <label>:82                                      ; preds = %77, %70, %64
  %t0.0.in = phi i32 [ %79, %77 ], [ %72, %70 ], [ %65, %64 ]
  %t1.0 = phi i32 [ %80, %77 ], [ %73, %70 ], [ %67, %64 ]
  %t0.0 = and i32 %t0.0.in, 6
  %83 = zext i32 %t1.0 to i64
  %84 = add i64 %83, %58
  %85 = tail call i32 @ldub_phys(i64 %84) nounwind
  %86 = trunc i64 %param to i32
  %87 = shl i32 1, %86
  %88 = shl i32 %87, %t0.0
  %89 = and i32 %85, %88
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %101, label %91

; <label>:91                                      ; preds = %82
  tail call void @helper_vmexit(i32 124, i64 %param)
  unreachable

; <label>:92                                      ; preds = %5
  %93 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %94 = load i64* %93, align 8
  %95 = add i32 %type, -96
  %96 = zext i32 %95 to i64
  %97 = shl i64 1, %96
  %98 = and i64 %94, %97
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %101, label %100

; <label>:100                                     ; preds = %92
  tail call void @helper_vmexit(i32 %type, i64 %param)
  unreachable

; <label>:101                                     ; preds = %92, %82, %49, %41, %32, %23, %14, %6, %0
  ret void
}

declare void @cpu_x86_cpuid(%struct.CPUX86State*, i32, i32, i32*, i32*, i32*, i32*)

define void @helper_enter_level(i32 %level, i32 %data32, i32 %t1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 6
  %5 = and i32 %4, 65536
  %6 = xor i32 %5, 65536
  %7 = add i32 %6, -1
  %8 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 5
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %13 = load i32* %12, align 4
  %14 = icmp eq i32 %data32, 0
  %15 = add nsw i32 %level, -1
  %16 = icmp eq i32 %15, 0
  br i1 %14, label %90, label %17

; <label>:17                                      ; preds = %0
  %18 = add i32 %13, -8
  br i1 %16, label %66, label %.lr.ph29

.lr.ph29:                                         ; preds = %17
  %19 = shl i32 %level, 2
  br label %20

; <label>:20                                      ; preds = %stl_data.exit25.backedge._crit_edge, %.lr.ph29
  %21 = phi %struct.CPUX86State* [ %1, %.lr.ph29 ], [ %.pre35, %stl_data.exit25.backedge._crit_edge ]
  %22 = phi i32 [ %18, %.lr.ph29 ], [ %58, %stl_data.exit25.backedge._crit_edge ]
  %23 = phi i32 [ %15, %.lr.ph29 ], [ %56, %stl_data.exit25.backedge._crit_edge ]
  %ebp.028 = phi i32 [ %11, %.lr.ph29 ], [ %24, %stl_data.exit25.backedge._crit_edge ]
  %24 = add i32 %ebp.028, -4
  %25 = and i32 %22, %7
  %26 = add i32 %25, %9
  %27 = and i32 %24, %7
  %28 = add i32 %27, %9
  %29 = lshr i32 %28, 12
  %30 = and i32 %29, 255
  %31 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 7
  %32 = load i32* %31, align 4
  %33 = and i32 %32, 3
  %34 = icmp eq i32 %33, 3
  %35 = zext i32 %30 to i64
  %36 = zext i1 %34 to i64
  %37 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 71, i64 %36, i64 %35, i32 0
  %38 = load i32* %37, align 4
  %39 = and i32 %28, -4093
  %40 = icmp eq i32 %38, %39
  %41 = zext i32 %28 to i64
  br i1 %40, label %42, label %ldl_data.exit, !prof !0

; <label>:42                                      ; preds = %20
  %43 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 71, i64 %36, i64 %35, i32 3
  %44 = load i64* %43, align 8
  %45 = add i64 %44, %41
  br label %ldl_data.exit

ldl_data.exit:                                    ; preds = %42, %20
  %res.0.in.in.i = phi i64 [ %45, %42 ], [ %41, %20 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %46 = lshr i32 %26, 12
  %47 = and i32 %46, 255
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 71, i64 %36, i64 %48, i32 1
  %50 = load i32* %49, align 4
  %51 = and i32 %26, -4093
  %52 = icmp eq i32 %50, %51
  %53 = zext i32 %26 to i64
  br i1 %52, label %59, label %54, !prof !0

; <label>:54                                      ; preds = %ldl_data.exit
  %55 = inttoptr i64 %53 to i32*
  store i32 %res.0.i, i32* %55, align 4
  br label %stl_data.exit25.backedge

stl_data.exit25.backedge:                         ; preds = %59, %54
  %56 = add nsw i32 %23, -1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %stl_data.exit25._crit_edge, label %stl_data.exit25.backedge._crit_edge

stl_data.exit25.backedge._crit_edge:              ; preds = %stl_data.exit25.backedge
  %58 = add i32 %22, -4
  %.pre35 = load %struct.CPUX86State** @env, align 8
  br label %20

; <label>:59                                      ; preds = %ldl_data.exit
  %60 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 71, i64 %36, i64 %48, i32 3
  %61 = load i64* %60, align 8
  %62 = add i64 %61, %53
  %63 = inttoptr i64 %62 to i32*
  store i32 %res.0.i, i32* %63, align 4
  br label %stl_data.exit25.backedge

stl_data.exit25._crit_edge:                       ; preds = %stl_data.exit25.backedge
  %64 = add i32 %13, -4
  %65 = sub i32 %64, %19
  %.pre33 = load %struct.CPUX86State** @env, align 8
  br label %66

; <label>:66                                      ; preds = %stl_data.exit25._crit_edge, %17
  %67 = phi %struct.CPUX86State* [ %.pre33, %stl_data.exit25._crit_edge ], [ %1, %17 ]
  %.lcssa27 = phi i32 [ %65, %stl_data.exit25._crit_edge ], [ %18, %17 ]
  %68 = and i32 %.lcssa27, %7
  %69 = add i32 %68, %9
  %70 = lshr i32 %69, 12
  %71 = and i32 %70, 255
  %72 = getelementptr inbounds %struct.CPUX86State* %67, i64 0, i32 7
  %73 = load i32* %72, align 4
  %74 = and i32 %73, 3
  %75 = icmp eq i32 %74, 3
  %76 = zext i32 %71 to i64
  %77 = zext i1 %75 to i64
  %78 = getelementptr inbounds %struct.CPUX86State* %67, i64 0, i32 71, i64 %77, i64 %76, i32 1
  %79 = load i32* %78, align 4
  %80 = and i32 %69, -4093
  %81 = icmp eq i32 %79, %80
  %82 = zext i32 %69 to i64
  br i1 %81, label %85, label %83, !prof !0

; <label>:83                                      ; preds = %66
  %84 = inttoptr i64 %82 to i32*
  store i32 %t1, i32* %84, align 4
  br label %stl_data.exit

; <label>:85                                      ; preds = %66
  %86 = getelementptr inbounds %struct.CPUX86State* %67, i64 0, i32 71, i64 %77, i64 %76, i32 3
  %87 = load i64* %86, align 8
  %88 = add i64 %87, %82
  %89 = inttoptr i64 %88 to i32*
  store i32 %t1, i32* %89, align 4
  br label %stl_data.exit

; <label>:90                                      ; preds = %0
  %91 = add i32 %13, -4
  br i1 %16, label %139, label %.lr.ph

.lr.ph:                                           ; preds = %90
  %92 = shl i32 %level, 1
  br label %93

; <label>:93                                      ; preds = %stw_data.exit24.backedge._crit_edge, %.lr.ph
  %94 = phi %struct.CPUX86State* [ %1, %.lr.ph ], [ %.pre34, %stw_data.exit24.backedge._crit_edge ]
  %95 = phi i32 [ %91, %.lr.ph ], [ %131, %stw_data.exit24.backedge._crit_edge ]
  %96 = phi i32 [ %15, %.lr.ph ], [ %129, %stw_data.exit24.backedge._crit_edge ]
  %ebp.126 = phi i32 [ %11, %.lr.ph ], [ %97, %stw_data.exit24.backedge._crit_edge ]
  %97 = add i32 %ebp.126, -2
  %98 = and i32 %95, %7
  %99 = add i32 %98, %9
  %100 = and i32 %97, %7
  %101 = add i32 %100, %9
  %102 = lshr i32 %101, 12
  %103 = and i32 %102, 255
  %104 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 7
  %105 = load i32* %104, align 4
  %106 = and i32 %105, 3
  %107 = icmp eq i32 %106, 3
  %108 = zext i32 %103 to i64
  %109 = zext i1 %107 to i64
  %110 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 71, i64 %109, i64 %108, i32 0
  %111 = load i32* %110, align 4
  %112 = and i32 %101, -4095
  %113 = icmp eq i32 %111, %112
  %114 = zext i32 %101 to i64
  br i1 %113, label %115, label %lduw_data.exit, !prof !0

; <label>:115                                     ; preds = %93
  %116 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 71, i64 %109, i64 %108, i32 3
  %117 = load i64* %116, align 8
  %118 = add i64 %117, %114
  br label %lduw_data.exit

lduw_data.exit:                                   ; preds = %115, %93
  %.sink.in.in.i = phi i64 [ %118, %115 ], [ %114, %93 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %119 = lshr i32 %99, 12
  %120 = and i32 %119, 255
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 71, i64 %109, i64 %121, i32 1
  %123 = load i32* %122, align 4
  %124 = and i32 %99, -4095
  %125 = icmp eq i32 %123, %124
  %126 = zext i32 %99 to i64
  br i1 %125, label %132, label %127, !prof !0

; <label>:127                                     ; preds = %lduw_data.exit
  %128 = inttoptr i64 %126 to i16*
  store i16 %.sink.i, i16* %128, align 2
  br label %stw_data.exit24.backedge

stw_data.exit24.backedge:                         ; preds = %132, %127
  %129 = add nsw i32 %96, -1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %stw_data.exit24._crit_edge, label %stw_data.exit24.backedge._crit_edge

stw_data.exit24.backedge._crit_edge:              ; preds = %stw_data.exit24.backedge
  %131 = add i32 %95, -2
  %.pre34 = load %struct.CPUX86State** @env, align 8
  br label %93

; <label>:132                                     ; preds = %lduw_data.exit
  %133 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 71, i64 %109, i64 %121, i32 3
  %134 = load i64* %133, align 8
  %135 = add i64 %134, %126
  %136 = inttoptr i64 %135 to i16*
  store i16 %.sink.i, i16* %136, align 2
  br label %stw_data.exit24.backedge

stw_data.exit24._crit_edge:                       ; preds = %stw_data.exit24.backedge
  %137 = add i32 %13, -2
  %138 = sub i32 %137, %92
  %.pre = load %struct.CPUX86State** @env, align 8
  br label %139

; <label>:139                                     ; preds = %stw_data.exit24._crit_edge, %90
  %140 = phi %struct.CPUX86State* [ %.pre, %stw_data.exit24._crit_edge ], [ %1, %90 ]
  %.lcssa = phi i32 [ %138, %stw_data.exit24._crit_edge ], [ %91, %90 ]
  %141 = and i32 %.lcssa, %7
  %142 = add i32 %141, %9
  %143 = lshr i32 %142, 12
  %144 = and i32 %143, 255
  %145 = getelementptr inbounds %struct.CPUX86State* %140, i64 0, i32 7
  %146 = load i32* %145, align 4
  %147 = and i32 %146, 3
  %148 = icmp eq i32 %147, 3
  %149 = zext i32 %144 to i64
  %150 = zext i1 %148 to i64
  %151 = getelementptr inbounds %struct.CPUX86State* %140, i64 0, i32 71, i64 %150, i64 %149, i32 1
  %152 = load i32* %151, align 4
  %153 = and i32 %142, -4095
  %154 = icmp eq i32 %152, %153
  br i1 %154, label %159, label %155, !prof !0

; <label>:155                                     ; preds = %139
  %156 = trunc i32 %t1 to i16
  %157 = zext i32 %142 to i64
  %158 = inttoptr i64 %157 to i16*
  store i16 %156, i16* %158, align 2
  br label %stl_data.exit

; <label>:159                                     ; preds = %139
  %160 = zext i32 %142 to i64
  %161 = getelementptr inbounds %struct.CPUX86State* %140, i64 0, i32 71, i64 %150, i64 %149, i32 3
  %162 = load i64* %161, align 8
  %163 = add i64 %162, %160
  %164 = trunc i32 %t1 to i16
  %165 = inttoptr i64 %163 to i16*
  store i16 %164, i16* %165, align 2
  br label %stl_data.exit

stl_data.exit:                                    ; preds = %159, %155, %85, %83
  ret void
}

define void @helper_lldt(i32 %selector) nounwind uwtable {
  %1 = and i32 %selector, 65535
  %2 = and i32 %selector, 65532
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 10, i32 1
  store i32 0, i32* %6, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 10, i32 2
  store i32 0, i32* %8, align 4
  br label %75

; <label>:9                                       ; preds = %0
  %10 = and i32 %selector, 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

; <label>:12                                      ; preds = %9
  tail call fastcc void @raise_exception_err(i32 13, i32 %2) noreturn
  unreachable

; <label>:13                                      ; preds = %9
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = and i32 %selector, 65528
  %16 = or i32 %15, 7
  %17 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 12, i32 2
  %18 = load i32* %17, align 4
  %19 = icmp ugt i32 %16, %18
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %13
  tail call fastcc void @raise_exception_err(i32 13, i32 %2) noreturn
  unreachable

; <label>:21                                      ; preds = %13
  %22 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 12, i32 1
  %23 = load i32* %22, align 4
  %24 = add i32 %23, %15
  %25 = lshr i32 %24, 12
  %26 = and i32 %25, 255
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 71, i64 0, i64 %27, i32 0
  %29 = load i32* %28, align 4
  %30 = and i32 %24, -4093
  %31 = icmp eq i32 %29, %30
  %32 = zext i32 %24 to i64
  br i1 %31, label %33, label %ldl_kernel.exit, !prof !0

; <label>:33                                      ; preds = %21
  %34 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 71, i64 0, i64 %27, i32 3
  %35 = load i64* %34, align 8
  %36 = add i64 %35, %32
  br label %ldl_kernel.exit

ldl_kernel.exit:                                  ; preds = %33, %21
  %res.0.in.in.i = phi i64 [ %36, %33 ], [ %32, %21 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %37 = add i32 %24, 4
  %38 = lshr i32 %37, 12
  %39 = and i32 %38, 255
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 71, i64 0, i64 %40, i32 0
  %42 = load i32* %41, align 4
  %43 = and i32 %37, -4093
  %44 = icmp eq i32 %42, %43
  %45 = zext i32 %37 to i64
  br i1 %44, label %46, label %ldl_kernel.exit19, !prof !0

; <label>:46                                      ; preds = %ldl_kernel.exit
  %47 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 71, i64 0, i64 %40, i32 3
  %48 = load i64* %47, align 8
  %49 = add i64 %48, %45
  br label %ldl_kernel.exit19

ldl_kernel.exit19:                                ; preds = %46, %ldl_kernel.exit
  %res.0.in.in.i16 = phi i64 [ %49, %46 ], [ %45, %ldl_kernel.exit ]
  %res.0.in.i17 = inttoptr i64 %res.0.in.in.i16 to i32*
  %res.0.i18 = load i32* %res.0.in.i17, align 4
  %50 = and i32 %res.0.i18, 7936
  %51 = icmp eq i32 %50, 512
  br i1 %51, label %53, label %52

; <label>:52                                      ; preds = %ldl_kernel.exit19
  tail call fastcc void @raise_exception_err(i32 13, i32 %2) noreturn
  unreachable

; <label>:53                                      ; preds = %ldl_kernel.exit19
  %54 = and i32 %res.0.i18, 32768
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

; <label>:56                                      ; preds = %53
  tail call fastcc void @raise_exception_err(i32 11, i32 %2) noreturn
  unreachable

; <label>:57                                      ; preds = %53
  %58 = lshr i32 %res.0.i, 16
  %59 = shl i32 %res.0.i18, 16
  %60 = and i32 %59, 16711680
  %61 = and i32 %res.0.i18, -16777216
  %62 = or i32 %61, %58
  %63 = or i32 %62, %60
  %64 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 10, i32 1
  store i32 %63, i32* %64, align 4
  %65 = and i32 %res.0.i, 65535
  %66 = and i32 %res.0.i18, 983040
  %67 = or i32 %66, %65
  %68 = and i32 %res.0.i18, 8388608
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %load_seg_cache_raw_dt.exit, label %70

; <label>:70                                      ; preds = %57
  %71 = shl nuw i32 %67, 12
  %72 = or i32 %71, 4095
  br label %load_seg_cache_raw_dt.exit

load_seg_cache_raw_dt.exit:                       ; preds = %70, %57
  %limit.0.i.i = phi i32 [ %72, %70 ], [ %67, %57 ]
  %73 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 10, i32 2
  store i32 %limit.0.i.i, i32* %73, align 4
  %74 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 10, i32 3
  store i32 %res.0.i18, i32* %74, align 4
  br label %75

; <label>:75                                      ; preds = %load_seg_cache_raw_dt.exit, %4
  %76 = load %struct.CPUX86State** @env, align 8
  %77 = getelementptr inbounds %struct.CPUX86State* %76, i64 0, i32 10, i32 0
  store i32 %1, i32* %77, align 4
  ret void
}

define internal fastcc void @raise_exception_err(i32 %exception_index, i32 %error_code) noreturn nounwind uwtable {
  %1 = tail call i32 (...)* @raise_interrupt(i32 %exception_index, i32 0, i32 %error_code, i32 0) nounwind
  ret void
}

define void @helper_ltr(i32 %selector) nounwind uwtable {
  %1 = and i32 %selector, 65535
  %2 = and i32 %selector, 65532
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 11, i32 1
  store i32 0, i32* %6, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 11, i32 2
  store i32 0, i32* %8, align 4
  %9 = load %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State* %9, i64 0, i32 11, i32 3
  store i32 0, i32* %10, align 4
  br label %stl_kernel.exit

; <label>:11                                      ; preds = %0
  %12 = and i32 %selector, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

; <label>:14                                      ; preds = %11
  tail call fastcc void @raise_exception_err(i32 13, i32 %2) noreturn
  unreachable

; <label>:15                                      ; preds = %11
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = and i32 %selector, 65528
  %18 = or i32 %17, 7
  %19 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 12, i32 2
  %20 = load i32* %19, align 4
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %15
  tail call fastcc void @raise_exception_err(i32 13, i32 %2) noreturn
  unreachable

; <label>:23                                      ; preds = %15
  %24 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 12, i32 1
  %25 = load i32* %24, align 4
  %26 = add i32 %25, %17
  %27 = lshr i32 %26, 12
  %28 = and i32 %27, 255
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %29, i32 0
  %31 = load i32* %30, align 4
  %32 = and i32 %26, -4093
  %33 = icmp eq i32 %31, %32
  %34 = zext i32 %26 to i64
  br i1 %33, label %35, label %ldl_kernel.exit, !prof !0

; <label>:35                                      ; preds = %23
  %36 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %29, i32 3
  %37 = load i64* %36, align 8
  %38 = add i64 %37, %34
  br label %ldl_kernel.exit

ldl_kernel.exit:                                  ; preds = %35, %23
  %res.0.in.in.i = phi i64 [ %38, %35 ], [ %34, %23 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %39 = add i32 %26, 4
  %40 = lshr i32 %39, 12
  %41 = and i32 %40, 255
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %42, i32 0
  %44 = load i32* %43, align 4
  %45 = and i32 %39, -4093
  %46 = icmp eq i32 %44, %45
  %47 = zext i32 %39 to i64
  br i1 %46, label %48, label %ldl_kernel.exit23, !prof !0

; <label>:48                                      ; preds = %ldl_kernel.exit
  %49 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %42, i32 3
  %50 = load i64* %49, align 8
  %51 = add i64 %50, %47
  br label %ldl_kernel.exit23

ldl_kernel.exit23:                                ; preds = %48, %ldl_kernel.exit
  %res.0.in.in.i20 = phi i64 [ %51, %48 ], [ %47, %ldl_kernel.exit ]
  %res.0.in.i21 = inttoptr i64 %res.0.in.in.i20 to i32*
  %res.0.i22 = load i32* %res.0.in.i21, align 4
  %52 = and i32 %res.0.i22, 4096
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %57

; <label>:54                                      ; preds = %ldl_kernel.exit23
  %55 = lshr i32 %res.0.i22, 8
  %56 = and i32 %55, 15
  switch i32 %56, label %57 [
    i32 9, label %58
    i32 1, label %58
  ]

; <label>:57                                      ; preds = %54, %ldl_kernel.exit23
  tail call fastcc void @raise_exception_err(i32 13, i32 %2) noreturn
  unreachable

; <label>:58                                      ; preds = %54, %54
  %59 = and i32 %res.0.i22, 32768
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

; <label>:61                                      ; preds = %58
  tail call fastcc void @raise_exception_err(i32 11, i32 %2) noreturn
  unreachable

; <label>:62                                      ; preds = %58
  %63 = lshr i32 %res.0.i, 16
  %64 = shl i32 %res.0.i22, 16
  %65 = and i32 %64, 16711680
  %66 = and i32 %res.0.i22, -16777216
  %67 = or i32 %66, %63
  %68 = or i32 %67, %65
  %69 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 11, i32 1
  store i32 %68, i32* %69, align 4
  %70 = and i32 %res.0.i, 65535
  %71 = and i32 %res.0.i22, 983040
  %72 = or i32 %71, %70
  %73 = and i32 %res.0.i22, 8388608
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %load_seg_cache_raw_dt.exit, label %75

; <label>:75                                      ; preds = %62
  %76 = shl nuw i32 %72, 12
  %77 = or i32 %76, 4095
  br label %load_seg_cache_raw_dt.exit

load_seg_cache_raw_dt.exit:                       ; preds = %75, %62
  %limit.0.i.i = phi i32 [ %77, %75 ], [ %72, %62 ]
  %78 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 11, i32 2
  store i32 %limit.0.i.i, i32* %78, align 4
  %79 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 11, i32 3
  store i32 %res.0.i22, i32* %79, align 4
  %80 = or i32 %res.0.i22, 512
  %81 = load %struct.CPUX86State** @env, align 8
  %82 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 71, i64 0, i64 %42, i32 1
  %83 = load i32* %82, align 4
  %84 = icmp eq i32 %83, %45
  br i1 %84, label %87, label %85, !prof !0

; <label>:85                                      ; preds = %load_seg_cache_raw_dt.exit
  %86 = inttoptr i64 %47 to i32*
  store i32 %80, i32* %86, align 4
  br label %stl_kernel.exit

; <label>:87                                      ; preds = %load_seg_cache_raw_dt.exit
  %88 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 71, i64 0, i64 %42, i32 3
  %89 = load i64* %88, align 8
  %90 = add i64 %89, %47
  %91 = inttoptr i64 %90 to i32*
  store i32 %80, i32* %91, align 4
  br label %stl_kernel.exit

stl_kernel.exit:                                  ; preds = %87, %85, %4
  %92 = load %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State* %92, i64 0, i32 11, i32 0
  store i32 %1, i32* %93, align 4
  ret void
}

define void @helper_load_seg(i32 %seg_reg, i32 %selector) nounwind uwtable {
  %1 = and i32 %selector, 65535
  %2 = load %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 7
  %4 = load i32* %3, align 4
  %5 = and i32 %4, 3
  %6 = and i32 %selector, 65532
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %64

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %seg_reg, 2
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %8
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:11                                      ; preds = %8
  %12 = sext i32 %seg_reg to i64
  %13 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 0
  store i32 %1, i32* %13, align 4
  %14 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 1
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 2
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 3
  store i32 0, i32* %16, align 4
  %17 = icmp eq i32 %seg_reg, 1
  br i1 %17, label %18, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %11
  %.pre.i = load i32* %3, align 4
  br label %26

; <label>:18                                      ; preds = %11
  %19 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 1, i32 3
  %20 = load i32* %19, align 4
  %21 = lshr i32 %20, 18
  %22 = and i32 %21, 16
  %23 = load i32* %3, align 4
  %24 = and i32 %23, -32785
  %25 = or i32 %24, %22
  store i32 %25, i32* %3, align 4
  br label %26

; <label>:26                                      ; preds = %18, %._crit_edge.i
  %27 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %25, %18 ]
  %28 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 2, i32 3
  %29 = load i32* %28, align 4
  %30 = lshr i32 %29, 17
  %31 = and i32 %30, 32
  %32 = and i32 %27, 32768
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %cpu_x86_load_seg_cache.exit

; <label>:34                                      ; preds = %26
  %35 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 14, i64 0
  %36 = load i32* %35, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %47, label %39

; <label>:39                                      ; preds = %34
  %40 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 2
  %41 = load i32* %40, align 4
  %42 = and i32 %41, 131072
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %47

; <label>:44                                      ; preds = %39
  %45 = and i32 %27, 16
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

; <label>:47                                      ; preds = %44, %39, %34
  %48 = or i32 %31, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:49                                      ; preds = %44
  %50 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 3, i32 1
  %51 = load i32* %50, align 4
  %52 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 0, i32 1
  %53 = load i32* %52, align 4
  %54 = or i32 %53, %51
  %55 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 9, i64 2, i32 1
  %56 = load i32* %55, align 4
  %57 = or i32 %54, %56
  %58 = icmp ne i32 %57, 0
  %59 = zext i1 %58 to i32
  %60 = shl nuw nsw i32 %59, 6
  %61 = or i32 %60, %31
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %49, %47, %26
  %new_hflags.0.i = phi i32 [ %31, %26 ], [ %48, %47 ], [ %61, %49 ]
  %62 = and i32 %27, -97
  %63 = or i32 %new_hflags.0.i, %62
  store i32 %63, i32* %3, align 4
  br label %220

; <label>:64                                      ; preds = %0
  %65 = and i32 %selector, 4
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 10
  %68 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 12
  %dt.0 = select i1 %66, %struct.SegmentCache* %68, %struct.SegmentCache* %67
  %69 = and i32 %selector, 65528
  %70 = or i32 %69, 7
  %71 = getelementptr inbounds %struct.SegmentCache* %dt.0, i64 0, i32 2
  %72 = load i32* %71, align 4
  %73 = icmp ugt i32 %70, %72
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %64
  tail call fastcc void @raise_exception_err(i32 13, i32 %6) noreturn
  unreachable

; <label>:75                                      ; preds = %64
  %76 = getelementptr inbounds %struct.SegmentCache* %dt.0, i64 0, i32 1
  %77 = load i32* %76, align 4
  %78 = add i32 %77, %69
  %79 = lshr i32 %78, 12
  %80 = and i32 %79, 255
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 71, i64 0, i64 %81, i32 0
  %83 = load i32* %82, align 4
  %84 = and i32 %78, -4093
  %85 = icmp eq i32 %83, %84
  %86 = zext i32 %78 to i64
  br i1 %85, label %87, label %ldl_kernel.exit, !prof !0

; <label>:87                                      ; preds = %75
  %88 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 71, i64 0, i64 %81, i32 3
  %89 = load i64* %88, align 8
  %90 = add i64 %89, %86
  br label %ldl_kernel.exit

ldl_kernel.exit:                                  ; preds = %87, %75
  %res.0.in.in.i = phi i64 [ %90, %87 ], [ %86, %75 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %91 = add i32 %78, 4
  %92 = lshr i32 %91, 12
  %93 = and i32 %92, 255
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 71, i64 0, i64 %94, i32 0
  %96 = load i32* %95, align 4
  %97 = and i32 %91, -4093
  %98 = icmp eq i32 %96, %97
  %99 = zext i32 %91 to i64
  br i1 %98, label %100, label %ldl_kernel.exit53, !prof !0

; <label>:100                                     ; preds = %ldl_kernel.exit
  %101 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 71, i64 0, i64 %94, i32 3
  %102 = load i64* %101, align 8
  %103 = add i64 %102, %99
  br label %ldl_kernel.exit53

ldl_kernel.exit53:                                ; preds = %100, %ldl_kernel.exit
  %res.0.in.in.i50 = phi i64 [ %103, %100 ], [ %99, %ldl_kernel.exit ]
  %res.0.in.i51 = inttoptr i64 %res.0.in.in.i50 to i32*
  %res.0.i52 = load i32* %res.0.in.i51, align 4
  %104 = and i32 %res.0.i52, 4096
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %107

; <label>:106                                     ; preds = %ldl_kernel.exit53
  tail call fastcc void @raise_exception_err(i32 13, i32 %6) noreturn
  unreachable

; <label>:107                                     ; preds = %ldl_kernel.exit53
  %108 = and i32 %selector, 3
  %109 = lshr i32 %res.0.i52, 13
  %110 = and i32 %109, 3
  %111 = icmp eq i32 %seg_reg, 2
  %112 = and i32 %res.0.i52, 2560
  br i1 %111, label %113, label %120

; <label>:113                                     ; preds = %107
  %114 = icmp eq i32 %112, 512
  br i1 %114, label %116, label %115

; <label>:115                                     ; preds = %113
  tail call fastcc void @raise_exception_err(i32 13, i32 %6) noreturn
  unreachable

; <label>:116                                     ; preds = %113
  %117 = icmp eq i32 %108, %5
  %118 = icmp eq i32 %110, %5
  %or.cond41 = and i1 %117, %118
  br i1 %or.cond41, label %130, label %119

; <label>:119                                     ; preds = %116
  tail call fastcc void @raise_exception_err(i32 13, i32 %6) noreturn
  unreachable

; <label>:120                                     ; preds = %107
  %121 = icmp eq i32 %112, 2048
  br i1 %121, label %122, label %123

; <label>:122                                     ; preds = %120
  tail call fastcc void @raise_exception_err(i32 13, i32 %6) noreturn
  unreachable

; <label>:123                                     ; preds = %120
  %124 = and i32 %res.0.i52, 3072
  %125 = icmp eq i32 %124, 3072
  br i1 %125, label %130, label %126

; <label>:126                                     ; preds = %123
  %127 = icmp ult i32 %110, %5
  %128 = icmp ult i32 %110, %108
  %or.cond44 = or i1 %127, %128
  br i1 %or.cond44, label %129, label %130

; <label>:129                                     ; preds = %126
  tail call fastcc void @raise_exception_err(i32 13, i32 %6) noreturn
  unreachable

; <label>:130                                     ; preds = %126, %123, %116
  %131 = and i32 %res.0.i52, 32768
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %136

; <label>:133                                     ; preds = %130
  br i1 %111, label %134, label %135

; <label>:134                                     ; preds = %133
  tail call fastcc void @raise_exception_err(i32 12, i32 %6) noreturn
  unreachable

; <label>:135                                     ; preds = %133
  tail call fastcc void @raise_exception_err(i32 11, i32 %6) noreturn
  unreachable

; <label>:136                                     ; preds = %130
  %137 = and i32 %res.0.i52, 256
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %stl_kernel.exit

; <label>:139                                     ; preds = %136
  %140 = or i32 %res.0.i52, 256
  %141 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 71, i64 0, i64 %94, i32 1
  %142 = load i32* %141, align 4
  %143 = icmp eq i32 %142, %97
  br i1 %143, label %146, label %144, !prof !0

; <label>:144                                     ; preds = %139
  %145 = inttoptr i64 %99 to i32*
  store i32 %140, i32* %145, align 4
  br label %stl_kernel.exit

; <label>:146                                     ; preds = %139
  %147 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 71, i64 0, i64 %94, i32 3
  %148 = load i64* %147, align 8
  %149 = add i64 %148, %99
  %150 = inttoptr i64 %149 to i32*
  store i32 %140, i32* %150, align 4
  br label %stl_kernel.exit

stl_kernel.exit:                                  ; preds = %146, %144, %136
  %e2.0 = phi i32 [ %res.0.i52, %136 ], [ %140, %144 ], [ %140, %146 ]
  %151 = load %struct.CPUX86State** @env, align 8
  %152 = lshr i32 %res.0.i, 16
  %153 = shl i32 %e2.0, 16
  %154 = and i32 %153, 16711680
  %155 = and i32 %e2.0, -16777216
  %156 = or i32 %155, %152
  %157 = or i32 %156, %154
  %158 = and i32 %res.0.i, 65535
  %159 = and i32 %e2.0, 983040
  %160 = or i32 %159, %158
  %161 = and i32 %e2.0, 8388608
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %get_seg_limit.exit, label %163

; <label>:163                                     ; preds = %stl_kernel.exit
  %164 = shl nuw i32 %160, 12
  %165 = or i32 %164, 4095
  br label %get_seg_limit.exit

get_seg_limit.exit:                               ; preds = %163, %stl_kernel.exit
  %limit.0.i = phi i32 [ %165, %163 ], [ %160, %stl_kernel.exit ]
  %166 = sext i32 %seg_reg to i64
  %167 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 %166, i32 0
  store i32 %1, i32* %167, align 4
  %168 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 %166, i32 1
  store i32 %157, i32* %168, align 4
  %169 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 %166, i32 2
  store i32 %limit.0.i, i32* %169, align 4
  %170 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 %166, i32 3
  store i32 %e2.0, i32* %170, align 4
  %171 = icmp eq i32 %seg_reg, 1
  br i1 %171, label %172, label %._crit_edge.i47

._crit_edge.i47:                                  ; preds = %get_seg_limit.exit
  %.phi.trans.insert.i45 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 7
  %.pre.i46 = load i32* %.phi.trans.insert.i45, align 4
  br label %181

; <label>:172                                     ; preds = %get_seg_limit.exit
  %173 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 1, i32 3
  %174 = load i32* %173, align 4
  %175 = lshr i32 %174, 18
  %176 = and i32 %175, 16
  %177 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 7
  %178 = load i32* %177, align 4
  %179 = and i32 %178, -32785
  %180 = or i32 %179, %176
  store i32 %180, i32* %177, align 4
  br label %181

; <label>:181                                     ; preds = %172, %._crit_edge.i47
  %182 = phi i32 [ %.pre.i46, %._crit_edge.i47 ], [ %180, %172 ]
  %183 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 2, i32 3
  %184 = load i32* %183, align 4
  %185 = lshr i32 %184, 17
  %186 = and i32 %185, 32
  %187 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 7
  %188 = and i32 %182, 32768
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %cpu_x86_load_seg_cache.exit49

; <label>:190                                     ; preds = %181
  %191 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 14, i64 0
  %192 = load i32* %191, align 4
  %193 = and i32 %192, 1
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %203, label %195

; <label>:195                                     ; preds = %190
  %196 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 2
  %197 = load i32* %196, align 4
  %198 = and i32 %197, 131072
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %203

; <label>:200                                     ; preds = %195
  %201 = and i32 %182, 16
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %205

; <label>:203                                     ; preds = %200, %195, %190
  %204 = or i32 %186, 64
  br label %cpu_x86_load_seg_cache.exit49

; <label>:205                                     ; preds = %200
  %206 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 3, i32 1
  %207 = load i32* %206, align 4
  %208 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 0, i32 1
  %209 = load i32* %208, align 4
  %210 = or i32 %209, %207
  %211 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 9, i64 2, i32 1
  %212 = load i32* %211, align 4
  %213 = or i32 %210, %212
  %214 = icmp ne i32 %213, 0
  %215 = zext i1 %214 to i32
  %216 = shl nuw nsw i32 %215, 6
  %217 = or i32 %216, %186
  br label %cpu_x86_load_seg_cache.exit49

cpu_x86_load_seg_cache.exit49:                    ; preds = %205, %203, %181
  %new_hflags.0.i48 = phi i32 [ %186, %181 ], [ %204, %203 ], [ %217, %205 ]
  %218 = and i32 %182, -97
  %219 = or i32 %new_hflags.0.i48, %218
  store i32 %219, i32* %187, align 4
  br label %220

; <label>:220                                     ; preds = %cpu_x86_load_seg_cache.exit49, %cpu_x86_load_seg_cache.exit
  ret void
}

define void @helper_ljmp_protected(i32 %new_cs, i32 %new_eip, i32 %next_eip_addend) nounwind uwtable {
  %1 = and i32 %new_cs, 65532
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:4                                       ; preds = %0
  %5 = and i32 %new_cs, 4
  %6 = icmp eq i32 %5, 0
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 10
  %9 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 12
  %dt.0.i = select i1 %6, %struct.SegmentCache* %9, %struct.SegmentCache* %8
  %10 = or i32 %new_cs, 7
  %11 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %12 = load i32* %11, align 4
  %13 = icmp ugt i32 %10, %12
  br i1 %13, label %44, label %14

; <label>:14                                      ; preds = %4
  %15 = and i32 %new_cs, -8
  %16 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %17 = load i32* %16, align 4
  %18 = add i32 %17, %15
  %19 = lshr i32 %18, 12
  %20 = and i32 %19, 255
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %21, i32 0
  %23 = load i32* %22, align 4
  %24 = and i32 %18, -4093
  %25 = icmp eq i32 %23, %24
  %26 = zext i32 %18 to i64
  br i1 %25, label %27, label %ldl_kernel.exit.i, !prof !0

; <label>:27                                      ; preds = %14
  %28 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %21, i32 3
  %29 = load i64* %28, align 8
  %30 = add i64 %29, %26
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %27, %14
  %res.0.in.in.i.i = phi i64 [ %30, %27 ], [ %26, %14 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %31 = add i32 %18, 4
  %32 = lshr i32 %31, 12
  %33 = and i32 %32, 255
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %34, i32 0
  %36 = load i32* %35, align 4
  %37 = and i32 %31, -4093
  %38 = icmp eq i32 %36, %37
  %39 = zext i32 %31 to i64
  br i1 %38, label %40, label %45, !prof !0

; <label>:40                                      ; preds = %ldl_kernel.exit.i
  %41 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %34, i32 3
  %42 = load i64* %41, align 8
  %43 = add i64 %42, %39
  br label %45

; <label>:44                                      ; preds = %4
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:45                                      ; preds = %40, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %43, %40 ], [ %39, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %46 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 7
  %47 = load i32* %46, align 4
  %48 = and i32 %47, 3
  %49 = and i32 %res.0.i10.i, 4096
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %140, label %51

; <label>:51                                      ; preds = %45
  %52 = and i32 %res.0.i10.i, 2048
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

; <label>:54                                      ; preds = %51
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:55                                      ; preds = %51
  %56 = lshr i32 %res.0.i10.i, 13
  %57 = and i32 %56, 3
  %58 = and i32 %res.0.i10.i, 1024
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %63, label %60

; <label>:60                                      ; preds = %55
  %61 = icmp ugt i32 %57, %48
  br i1 %61, label %62, label %70

; <label>:62                                      ; preds = %60
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:63                                      ; preds = %55
  %64 = and i32 %new_cs, 3
  %65 = icmp ugt i32 %64, %48
  br i1 %65, label %66, label %67

; <label>:66                                      ; preds = %63
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:67                                      ; preds = %63
  %68 = icmp eq i32 %57, %48
  br i1 %68, label %70, label %69

; <label>:69                                      ; preds = %67
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:70                                      ; preds = %67, %60
  %71 = and i32 %res.0.i10.i, 32768
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

; <label>:73                                      ; preds = %70
  tail call fastcc void @raise_exception_err(i32 11, i32 %1) noreturn
  unreachable

; <label>:74                                      ; preds = %70
  %75 = and i32 %res.0.i.i, 65535
  %76 = and i32 %res.0.i10.i, 983040
  %77 = or i32 %76, %75
  %78 = and i32 %res.0.i10.i, 8388608
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %get_seg_limit.exit, label %80

; <label>:80                                      ; preds = %74
  %81 = shl nuw i32 %77, 12
  %82 = or i32 %81, 4095
  br label %get_seg_limit.exit

get_seg_limit.exit:                               ; preds = %80, %74
  %limit.0.i = phi i32 [ %82, %80 ], [ %77, %74 ]
  %83 = icmp ult i32 %limit.0.i, %new_eip
  br i1 %83, label %84, label %91

; <label>:84                                      ; preds = %get_seg_limit.exit
  %85 = and i32 %47, 16384
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %91

; <label>:87                                      ; preds = %84
  %88 = and i32 %res.0.i10.i, 2097152
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

; <label>:90                                      ; preds = %87
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:91                                      ; preds = %87, %84, %get_seg_limit.exit
  %92 = or i32 %48, %1
  %93 = lshr i32 %res.0.i.i, 16
  %94 = shl i32 %res.0.i10.i, 16
  %95 = and i32 %94, 16711680
  %96 = and i32 %res.0.i10.i, -16777216
  %97 = or i32 %96, %93
  %98 = or i32 %97, %95
  %99 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 0
  store i32 %92, i32* %99, align 4
  %100 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 1
  store i32 %98, i32* %100, align 4
  %101 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i, i32* %101, align 4
  %102 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i, i32* %102, align 4
  %103 = lshr i32 %res.0.i10.i, 18
  %104 = and i32 %103, 16
  %105 = and i32 %47, -32785
  %106 = or i32 %105, %104
  store i32 %106, i32* %46, align 4
  %107 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 2, i32 3
  %108 = load i32* %107, align 4
  %109 = lshr i32 %108, 17
  %110 = and i32 %109, 32
  %111 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 14, i64 0
  %112 = load i32* %111, align 4
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %121, label %115

; <label>:115                                     ; preds = %91
  %116 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 2
  %117 = load i32* %116, align 4
  %118 = and i32 %117, 131072
  %119 = icmp ne i32 %118, 0
  %120 = icmp eq i32 %104, 0
  %or.cond93 = or i1 %119, %120
  br i1 %or.cond93, label %121, label %123

; <label>:121                                     ; preds = %115, %91
  %122 = or i32 %110, 64
  br label %cpu_x86_load_seg_cache.exit55

; <label>:123                                     ; preds = %115
  %124 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 3, i32 1
  %125 = load i32* %124, align 4
  %126 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 0, i32 1
  %127 = load i32* %126, align 4
  %128 = or i32 %127, %125
  %129 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 2, i32 1
  %130 = load i32* %129, align 4
  %131 = or i32 %128, %130
  %132 = icmp ne i32 %131, 0
  %133 = zext i1 %132 to i32
  %134 = shl nuw nsw i32 %133, 6
  %135 = or i32 %134, %110
  br label %cpu_x86_load_seg_cache.exit55

cpu_x86_load_seg_cache.exit55:                    ; preds = %123, %121
  %new_hflags.0.i54 = phi i32 [ %122, %121 ], [ %135, %123 ]
  %136 = and i32 %106, -32865
  %137 = or i32 %new_hflags.0.i54, %136
  store i32 %137, i32* %46, align 4
  %138 = load %struct.CPUX86State** @env, align 8
  %139 = getelementptr inbounds %struct.CPUX86State* %138, i64 0, i32 1
  store i32 %new_eip, i32* %139, align 4
  br label %291

; <label>:140                                     ; preds = %45
  %141 = lshr i32 %res.0.i10.i, 13
  %142 = and i32 %141, 3
  %143 = and i32 %new_cs, 3
  %144 = lshr i32 %res.0.i10.i, 8
  %145 = and i32 %144, 15
  switch i32 %145, label %290 [
    i32 1, label %146
    i32 9, label %146
    i32 5, label %146
    i32 4, label %156
    i32 12, label %156
  ]

; <label>:146                                     ; preds = %140, %140, %140
  %147 = icmp ult i32 %142, %48
  %148 = icmp ult i32 %142, %143
  %or.cond = or i1 %147, %148
  br i1 %or.cond, label %149, label %150

; <label>:149                                     ; preds = %146
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:150                                     ; preds = %146
  %151 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 1
  %152 = load i32* %151, align 4
  %153 = add i32 %152, %next_eip_addend
  tail call fastcc void @switch_tss(i32 %new_cs, i32 %res.0.i.i, i32 %res.0.i10.i, i32 0, i32 %153)
  %154 = load %struct.CPUX86State** @env, align 8
  %155 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 5
  store i32 1, i32* %155, align 4
  br label %291

; <label>:156                                     ; preds = %140, %140
  %157 = icmp ult i32 %142, %48
  %158 = icmp ult i32 %142, %143
  %or.cond49 = or i1 %157, %158
  br i1 %or.cond49, label %159, label %160

; <label>:159                                     ; preds = %156
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:160                                     ; preds = %156
  %161 = and i32 %res.0.i10.i, 32768
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

; <label>:163                                     ; preds = %160
  tail call fastcc void @raise_exception_err(i32 11, i32 %1) noreturn
  unreachable

; <label>:164                                     ; preds = %160
  %165 = lshr i32 %res.0.i.i, 16
  %166 = and i32 %res.0.i.i, 65535
  %167 = icmp eq i32 %145, 12
  br i1 %167, label %168, label %171

; <label>:168                                     ; preds = %164
  %169 = and i32 %res.0.i10.i, -65536
  %170 = or i32 %169, %166
  br label %171

; <label>:171                                     ; preds = %168, %164
  %.0 = phi i32 [ %170, %168 ], [ %166, %164 ]
  %172 = and i32 %165, 4
  %173 = icmp eq i32 %172, 0
  %dt.0.i56 = select i1 %173, %struct.SegmentCache* %9, %struct.SegmentCache* %8
  %174 = or i32 %165, 7
  %175 = getelementptr inbounds %struct.SegmentCache* %dt.0.i56, i64 0, i32 2
  %176 = load i32* %175, align 4
  %177 = icmp ugt i32 %174, %176
  br i1 %177, label %208, label %178

; <label>:178                                     ; preds = %171
  %179 = and i32 %165, 65528
  %180 = getelementptr inbounds %struct.SegmentCache* %dt.0.i56, i64 0, i32 1
  %181 = load i32* %180, align 4
  %182 = add i32 %181, %179
  %183 = lshr i32 %182, 12
  %184 = and i32 %183, 255
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %185, i32 0
  %187 = load i32* %186, align 4
  %188 = and i32 %182, -4093
  %189 = icmp eq i32 %187, %188
  %190 = zext i32 %182 to i64
  br i1 %189, label %191, label %ldl_kernel.exit.i60, !prof !0

; <label>:191                                     ; preds = %178
  %192 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %185, i32 3
  %193 = load i64* %192, align 8
  %194 = add i64 %193, %190
  br label %ldl_kernel.exit.i60

ldl_kernel.exit.i60:                              ; preds = %191, %178
  %res.0.in.in.i.i57 = phi i64 [ %194, %191 ], [ %190, %178 ]
  %res.0.in.i.i58 = inttoptr i64 %res.0.in.in.i.i57 to i32*
  %res.0.i.i59 = load i32* %res.0.in.i.i58, align 4
  %195 = add i32 %182, 4
  %196 = lshr i32 %195, 12
  %197 = and i32 %196, 255
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %198, i32 0
  %200 = load i32* %199, align 4
  %201 = and i32 %195, -4093
  %202 = icmp eq i32 %200, %201
  %203 = zext i32 %195 to i64
  br i1 %202, label %204, label %210, !prof !0

; <label>:204                                     ; preds = %ldl_kernel.exit.i60
  %205 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 0, i64 %198, i32 3
  %206 = load i64* %205, align 8
  %207 = add i64 %206, %203
  br label %210

; <label>:208                                     ; preds = %171
  %209 = and i32 %165, 65532
  tail call fastcc void @raise_exception_err(i32 13, i32 %209) noreturn
  unreachable

; <label>:210                                     ; preds = %204, %ldl_kernel.exit.i60
  %res.0.in.in.i8.i61 = phi i64 [ %207, %204 ], [ %203, %ldl_kernel.exit.i60 ]
  %res.0.in.i9.i62 = inttoptr i64 %res.0.in.in.i8.i61 to i32*
  %res.0.i10.i63 = load i32* %res.0.in.i9.i62, align 4
  %211 = lshr i32 %res.0.i10.i63, 13
  %212 = and i32 %211, 3
  %213 = and i32 %res.0.i10.i63, 6144
  %214 = icmp eq i32 %213, 6144
  br i1 %214, label %217, label %215

; <label>:215                                     ; preds = %210
  %216 = and i32 %165, 65532
  tail call fastcc void @raise_exception_err(i32 13, i32 %216) noreturn
  unreachable

; <label>:217                                     ; preds = %210
  %218 = and i32 %res.0.i10.i63, 1024
  %219 = icmp ne i32 %218, 0
  %220 = icmp ugt i32 %212, %48
  %or.cond50 = and i1 %219, %220
  %221 = icmp eq i32 %212, %48
  %or.cond51 = or i1 %219, %221
  %or.cond94 = xor i1 %or.cond50, %or.cond51
  br i1 %or.cond94, label %224, label %222

; <label>:222                                     ; preds = %217
  %223 = and i32 %165, 65532
  tail call fastcc void @raise_exception_err(i32 13, i32 %223) noreturn
  unreachable

; <label>:224                                     ; preds = %217
  %225 = and i32 %res.0.i10.i63, 32768
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %229

; <label>:227                                     ; preds = %224
  %228 = and i32 %165, 65532
  tail call fastcc void @raise_exception_err(i32 13, i32 %228) noreturn
  unreachable

; <label>:229                                     ; preds = %224
  %230 = and i32 %res.0.i.i59, 65535
  %231 = and i32 %res.0.i10.i63, 983040
  %232 = or i32 %231, %230
  %233 = and i32 %res.0.i10.i63, 8388608
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %get_seg_limit.exit53, label %235

; <label>:235                                     ; preds = %229
  %236 = shl nuw i32 %232, 12
  %237 = or i32 %236, 4095
  br label %get_seg_limit.exit53

get_seg_limit.exit53:                             ; preds = %235, %229
  %limit.0.i52 = phi i32 [ %237, %235 ], [ %232, %229 ]
  %238 = icmp ugt i32 %.0, %limit.0.i52
  br i1 %238, label %239, label %240

; <label>:239                                     ; preds = %get_seg_limit.exit53
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:240                                     ; preds = %get_seg_limit.exit53
  %241 = and i32 %165, 65532
  %242 = or i32 %48, %241
  %243 = lshr i32 %res.0.i.i59, 16
  %244 = shl i32 %res.0.i10.i63, 16
  %245 = and i32 %244, 16711680
  %246 = and i32 %res.0.i10.i63, -16777216
  %247 = or i32 %246, %243
  %248 = or i32 %247, %245
  %249 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 0
  store i32 %242, i32* %249, align 4
  %250 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 1
  store i32 %248, i32* %250, align 4
  %251 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i52, i32* %251, align 4
  %252 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i63, i32* %252, align 4
  %253 = lshr i32 %res.0.i10.i63, 18
  %254 = and i32 %253, 16
  %255 = and i32 %47, -32785
  %256 = or i32 %255, %254
  store i32 %256, i32* %46, align 4
  %257 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 2, i32 3
  %258 = load i32* %257, align 4
  %259 = lshr i32 %258, 17
  %260 = and i32 %259, 32
  %261 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 14, i64 0
  %262 = load i32* %261, align 4
  %263 = and i32 %262, 1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %271, label %265

; <label>:265                                     ; preds = %240
  %266 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 2
  %267 = load i32* %266, align 4
  %268 = and i32 %267, 131072
  %269 = icmp ne i32 %268, 0
  %270 = icmp eq i32 %254, 0
  %or.cond95 = or i1 %269, %270
  br i1 %or.cond95, label %271, label %273

; <label>:271                                     ; preds = %265, %240
  %272 = or i32 %260, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:273                                     ; preds = %265
  %274 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 3, i32 1
  %275 = load i32* %274, align 4
  %276 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 0, i32 1
  %277 = load i32* %276, align 4
  %278 = or i32 %277, %275
  %279 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 9, i64 2, i32 1
  %280 = load i32* %279, align 4
  %281 = or i32 %278, %280
  %282 = icmp ne i32 %281, 0
  %283 = zext i1 %282 to i32
  %284 = shl nuw nsw i32 %283, 6
  %285 = or i32 %284, %260
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %273, %271
  %new_hflags.0.i = phi i32 [ %272, %271 ], [ %285, %273 ]
  %286 = and i32 %256, -32865
  %287 = or i32 %new_hflags.0.i, %286
  store i32 %287, i32* %46, align 4
  %288 = load %struct.CPUX86State** @env, align 8
  %289 = getelementptr inbounds %struct.CPUX86State* %288, i64 0, i32 1
  store i32 %.0, i32* %289, align 4
  br label %291

; <label>:290                                     ; preds = %140
  tail call fastcc void @raise_exception_err(i32 13, i32 %1) noreturn
  unreachable

; <label>:291                                     ; preds = %cpu_x86_load_seg_cache.exit, %150, %cpu_x86_load_seg_cache.exit55
  ret void
}

define internal fastcc void @switch_tss(i32 %tss_selector, i32 %e1, i32 %e2, i32 %source, i32 %next_eip) nounwind uwtable {
  %new_regs257 = alloca [4 x i64], align 16
  %new_regs257.sub = getelementptr inbounds [4 x i64]* %new_regs257, i64 0, i64 0
  %tmpcast = bitcast [4 x i64]* %new_regs257 to [8 x i32]*
  %new_segs = alloca [6 x i32], align 16
  %1 = lshr i32 %e2, 8
  %2 = and i32 %1, 15
  %3 = icmp eq i32 %2, 5
  br i1 %3, label %4, label %65

; <label>:4                                       ; preds = %0
  %5 = and i32 %e2, 32768
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %4
  %8 = and i32 %tss_selector, 65532
  call fastcc void @raise_exception_err(i32 11, i32 %8) noreturn
  unreachable

; <label>:9                                       ; preds = %4
  %10 = lshr i32 %e1, 16
  %11 = and i32 %10, 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

; <label>:13                                      ; preds = %9
  %14 = and i32 %10, 65532
  call fastcc void @raise_exception_err(i32 10, i32 %14) noreturn
  unreachable

; <label>:15                                      ; preds = %9
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = or i32 %10, 7
  %18 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 12, i32 2
  %19 = load i32* %18, align 4
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %51, label %21

; <label>:21                                      ; preds = %15
  %22 = and i32 %10, 65528
  %23 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 12, i32 1
  %24 = load i32* %23, align 4
  %25 = add i32 %24, %22
  %26 = lshr i32 %25, 12
  %27 = and i32 %26, 255
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %28, i32 0
  %30 = load i32* %29, align 4
  %31 = and i32 %25, -4093
  %32 = icmp eq i32 %30, %31
  %33 = zext i32 %25 to i64
  br i1 %32, label %34, label %ldl_kernel.exit.i, !prof !0

; <label>:34                                      ; preds = %21
  %35 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %28, i32 3
  %36 = load i64* %35, align 8
  %37 = add i64 %36, %33
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %34, %21
  %res.0.in.in.i.i = phi i64 [ %37, %34 ], [ %33, %21 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %38 = add i32 %25, 4
  %39 = lshr i32 %38, 12
  %40 = and i32 %39, 255
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %41, i32 0
  %43 = load i32* %42, align 4
  %44 = and i32 %38, -4093
  %45 = icmp eq i32 %43, %44
  %46 = zext i32 %38 to i64
  br i1 %45, label %47, label %53, !prof !0

; <label>:47                                      ; preds = %ldl_kernel.exit.i
  %48 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 71, i64 0, i64 %41, i32 3
  %49 = load i64* %48, align 8
  %50 = add i64 %49, %46
  br label %53

; <label>:51                                      ; preds = %15
  %52 = and i32 %10, 65532
  call fastcc void @raise_exception_err(i32 13, i32 %52) noreturn
  unreachable

; <label>:53                                      ; preds = %47, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %50, %47 ], [ %46, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %54 = and i32 %res.0.i10.i, 4096
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %58, label %56

; <label>:56                                      ; preds = %53
  %57 = and i32 %10, 65532
  call fastcc void @raise_exception_err(i32 13, i32 %57) noreturn
  unreachable

; <label>:58                                      ; preds = %53
  %59 = lshr i32 %res.0.i10.i, 8
  %60 = and i32 %59, 15
  %61 = and i32 %59, 7
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %65, label %63

; <label>:63                                      ; preds = %58
  %64 = and i32 %10, 65532
  call fastcc void @raise_exception_err(i32 13, i32 %64) noreturn
  unreachable

; <label>:65                                      ; preds = %58, %0
  %e1198 = phi i32 [ %res.0.i.i, %58 ], [ %e1, %0 ]
  %e2197 = phi i32 [ %res.0.i10.i, %58 ], [ %e2, %0 ]
  %type.0 = phi i32 [ %60, %58 ], [ %2, %0 ]
  %.0 = phi i32 [ %10, %58 ], [ %tss_selector, %0 ]
  %66 = and i32 %e2197, 32768
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

; <label>:68                                      ; preds = %65
  %69 = and i32 %.0, 65532
  call fastcc void @raise_exception_err(i32 11, i32 %69) noreturn
  unreachable

; <label>:70                                      ; preds = %65
  %71 = and i32 %type.0, 8
  %72 = icmp ne i32 %71, 0
  %. = select i1 %72, i32 103, i32 43
  %73 = and i32 %e1198, 65535
  %74 = and i32 %e2197, 983040
  %75 = or i32 %74, %73
  %76 = and i32 %e2197, 8388608
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %get_seg_limit.exit, label %78

; <label>:78                                      ; preds = %70
  %79 = shl nuw i32 %75, 12
  %80 = or i32 %79, 4095
  br label %get_seg_limit.exit

get_seg_limit.exit:                               ; preds = %78, %70
  %limit.0.i = phi i32 [ %80, %78 ], [ %75, %70 ]
  %81 = lshr i32 %e1198, 16
  %82 = shl i32 %e2197, 16
  %83 = and i32 %82, 16711680
  %84 = and i32 %e2197, -16777216
  %85 = or i32 %84, %81
  %86 = or i32 %85, %83
  %87 = and i32 %.0, 4
  %88 = icmp ne i32 %87, 0
  %89 = icmp slt i32 %limit.0.i, %.
  %or.cond = or i1 %88, %89
  br i1 %or.cond, label %90, label %92

; <label>:90                                      ; preds = %get_seg_limit.exit
  %91 = and i32 %.0, 65532
  call fastcc void @raise_exception_err(i32 10, i32 %91) noreturn
  unreachable

; <label>:92                                      ; preds = %get_seg_limit.exit
  %93 = load %struct.CPUX86State** @env, align 8
  %94 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 11, i32 3
  %95 = load i32* %94, align 4
  %96 = and i32 %95, 2048
  %97 = icmp eq i32 %96, 0
  %.100 = select i1 %97, i32 43, i32 103
  br i1 %72, label %98, label %184

; <label>:98                                      ; preds = %92
  %99 = add i32 %86, 28
  %100 = lshr i32 %99, 12
  %101 = and i32 %100, 255
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %102, i32 0
  %104 = load i32* %103, align 4
  %105 = and i32 %99, -4093
  %106 = icmp eq i32 %104, %105
  %107 = zext i32 %99 to i64
  br i1 %106, label %108, label %ldl_kernel.exit, !prof !0

; <label>:108                                     ; preds = %98
  %109 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %102, i32 3
  %110 = load i64* %109, align 8
  %111 = add i64 %110, %107
  br label %ldl_kernel.exit

ldl_kernel.exit:                                  ; preds = %108, %98
  %res.0.in.in.i = phi i64 [ %111, %108 ], [ %107, %98 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %112 = add i32 %86, 32
  %113 = lshr i32 %112, 12
  %114 = and i32 %113, 255
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %115, i32 0
  %117 = load i32* %116, align 4
  %118 = and i32 %112, -4093
  %119 = icmp eq i32 %117, %118
  %120 = zext i32 %112 to i64
  br i1 %119, label %121, label %ldl_kernel.exit108, !prof !0

; <label>:121                                     ; preds = %ldl_kernel.exit
  %122 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %115, i32 3
  %123 = load i64* %122, align 8
  %124 = add i64 %123, %120
  br label %ldl_kernel.exit108

ldl_kernel.exit108:                               ; preds = %121, %ldl_kernel.exit
  %res.0.in.in.i105 = phi i64 [ %124, %121 ], [ %120, %ldl_kernel.exit ]
  %res.0.in.i106 = inttoptr i64 %res.0.in.in.i105 to i32*
  %res.0.i107 = load i32* %res.0.in.i106, align 4
  %125 = add i32 %86, 36
  %126 = lshr i32 %125, 12
  %127 = and i32 %126, 255
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %128, i32 0
  %130 = load i32* %129, align 4
  %131 = and i32 %125, -4093
  %132 = icmp eq i32 %130, %131
  %133 = zext i32 %125 to i64
  br i1 %132, label %134, label %ldl_kernel.exit112, !prof !0

; <label>:134                                     ; preds = %ldl_kernel.exit108
  %135 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %128, i32 3
  %136 = load i64* %135, align 8
  %137 = add i64 %136, %133
  br label %ldl_kernel.exit112

ldl_kernel.exit112:                               ; preds = %134, %ldl_kernel.exit108
  %res.0.in.in.i109 = phi i64 [ %137, %134 ], [ %133, %ldl_kernel.exit108 ]
  %res.0.in.i110 = inttoptr i64 %res.0.in.in.i109 to i32*
  %res.0.i111 = load i32* %res.0.in.i110, align 4
  %138 = add i32 %86, 40
  br label %148

.preheader212:                                    ; preds = %ldl_kernel.exit116
  %139 = add i32 %86, 72
  %140 = lshr i32 %139, 12
  %141 = and i32 %140, 255
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %142, i32 0
  %144 = load i32* %143, align 4
  %145 = and i32 %139, -4095
  %146 = icmp eq i32 %144, %145
  %147 = zext i32 %139 to i64
  br i1 %146, label %165, label %lduw_kernel.exit, !prof !0

; <label>:148                                     ; preds = %ldl_kernel.exit116, %ldl_kernel.exit112
  %indvars.iv235 = phi i64 [ 0, %ldl_kernel.exit112 ], [ %indvars.iv.next236, %ldl_kernel.exit116 ]
  %149 = shl i64 %indvars.iv235, 2
  %150 = trunc i64 %149 to i32
  %151 = add i32 %138, %150
  %152 = lshr i32 %151, 12
  %153 = and i32 %152, 255
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %154, i32 0
  %156 = load i32* %155, align 4
  %157 = and i32 %151, -4093
  %158 = icmp eq i32 %156, %157
  %159 = zext i32 %151 to i64
  br i1 %158, label %160, label %ldl_kernel.exit116, !prof !0

; <label>:160                                     ; preds = %148
  %161 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %154, i32 3
  %162 = load i64* %161, align 8
  %163 = add i64 %162, %159
  br label %ldl_kernel.exit116

ldl_kernel.exit116:                               ; preds = %160, %148
  %res.0.in.in.i113 = phi i64 [ %163, %160 ], [ %159, %148 ]
  %res.0.in.i114 = inttoptr i64 %res.0.in.in.i113 to i32*
  %res.0.i115 = load i32* %res.0.in.i114, align 4
  %164 = getelementptr inbounds [8 x i32]* %tmpcast, i64 0, i64 %indvars.iv235
  store i32 %res.0.i115, i32* %164, align 4
  %indvars.iv.next236 = add i64 %indvars.iv235, 1
  %lftr.wideiv237 = trunc i64 %indvars.iv.next236 to i32
  %exitcond238 = icmp eq i32 %lftr.wideiv237, 8
  br i1 %exitcond238, label %.preheader212, label %148

; <label>:165                                     ; preds = %.preheader212
  %166 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %142, i32 3
  %167 = load i64* %166, align 8
  %168 = add i64 %167, %147
  br label %lduw_kernel.exit

lduw_kernel.exit:                                 ; preds = %165, %.preheader212
  %.sink.in.in.i = phi i64 [ %168, %165 ], [ %147, %.preheader212 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %169 = zext i16 %.sink.i to i32
  %170 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 0
  store i32 %169, i32* %170, align 16
  %171 = add i32 %86, 76
  %172 = lshr i32 %171, 12
  %173 = and i32 %172, 255
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %174, i32 0
  %176 = load i32* %175, align 4
  %177 = and i32 %171, -4095
  %178 = icmp eq i32 %176, %177
  %179 = zext i32 %171 to i64
  br i1 %178, label %1323, label %lduw_kernel.exit.1, !prof !0

; <label>:180                                     ; preds = %lduw_kernel.exit.5
  %181 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1392, i32 3
  %182 = load i64* %181, align 8
  %183 = add i64 %182, %1397
  br label %lduw_kernel.exit120

lduw_kernel.exit120:                              ; preds = %lduw_kernel.exit.5, %180
  %.sink.in.in.i117 = phi i64 [ %183, %180 ], [ %1397, %lduw_kernel.exit.5 ]
  %.sink.in.i118 = inttoptr i64 %.sink.in.in.i117 to i16*
  %.sink.i119 = load i16* %.sink.in.i118, align 2
  br label %263

; <label>:184                                     ; preds = %92
  %185 = add i32 %86, 14
  %186 = lshr i32 %185, 12
  %187 = and i32 %186, 255
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %188, i32 0
  %190 = load i32* %189, align 4
  %191 = and i32 %185, -4095
  %192 = icmp eq i32 %190, %191
  %193 = zext i32 %185 to i64
  br i1 %192, label %194, label %lduw_kernel.exit132, !prof !0

; <label>:194                                     ; preds = %184
  %195 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %188, i32 3
  %196 = load i64* %195, align 8
  %197 = add i64 %196, %193
  br label %lduw_kernel.exit132

lduw_kernel.exit132:                              ; preds = %194, %184
  %.sink.in.in.i129 = phi i64 [ %197, %194 ], [ %193, %184 ]
  %.sink.in.i130 = inttoptr i64 %.sink.in.in.i129 to i16*
  %.sink.i131 = load i16* %.sink.in.i130, align 2
  %198 = zext i16 %.sink.i131 to i32
  %199 = add i32 %86, 16
  %200 = lshr i32 %199, 12
  %201 = and i32 %200, 255
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %202, i32 0
  %204 = load i32* %203, align 4
  %205 = and i32 %199, -4095
  %206 = icmp eq i32 %204, %205
  %207 = zext i32 %199 to i64
  br i1 %206, label %208, label %lduw_kernel.exit136, !prof !0

; <label>:208                                     ; preds = %lduw_kernel.exit132
  %209 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %202, i32 3
  %210 = load i64* %209, align 8
  %211 = add i64 %210, %207
  br label %lduw_kernel.exit136

lduw_kernel.exit136:                              ; preds = %208, %lduw_kernel.exit132
  %.sink.in.in.i133 = phi i64 [ %211, %208 ], [ %207, %lduw_kernel.exit132 ]
  %.sink.in.i134 = inttoptr i64 %.sink.in.in.i133 to i16*
  %.sink.i135 = load i16* %.sink.in.i134, align 2
  %212 = add i32 %86, 18
  br label %223

.preheader215:                                    ; preds = %lduw_kernel.exit166
  %213 = zext i16 %.sink.i135 to i32
  %214 = add i32 %86, 34
  %215 = lshr i32 %214, 12
  %216 = and i32 %215, 255
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %217, i32 0
  %219 = load i32* %218, align 4
  %220 = and i32 %214, -4095
  %221 = icmp eq i32 %219, %220
  %222 = zext i32 %214 to i64
  br i1 %221, label %242, label %lduw_kernel.exit187, !prof !0

; <label>:223                                     ; preds = %lduw_kernel.exit166, %lduw_kernel.exit136
  %indvars.iv243 = phi i64 [ 0, %lduw_kernel.exit136 ], [ %indvars.iv.next244, %lduw_kernel.exit166 ]
  %224 = shl i64 %indvars.iv243, 1
  %225 = trunc i64 %224 to i32
  %226 = add i32 %212, %225
  %227 = lshr i32 %226, 12
  %228 = and i32 %227, 255
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %229, i32 0
  %231 = load i32* %230, align 4
  %232 = and i32 %226, -4095
  %233 = icmp eq i32 %231, %232
  %234 = zext i32 %226 to i64
  br i1 %233, label %235, label %lduw_kernel.exit166, !prof !0

; <label>:235                                     ; preds = %223
  %236 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %229, i32 3
  %237 = load i64* %236, align 8
  %238 = add i64 %237, %234
  br label %lduw_kernel.exit166

lduw_kernel.exit166:                              ; preds = %235, %223
  %.sink.in.in.i163 = phi i64 [ %238, %235 ], [ %234, %223 ]
  %.sink.in.i164 = inttoptr i64 %.sink.in.in.i163 to i16*
  %.sink.i165 = load i16* %.sink.in.i164, align 2
  %239 = zext i16 %.sink.i165 to i32
  %240 = or i32 %239, -65536
  %241 = getelementptr inbounds [8 x i32]* %tmpcast, i64 0, i64 %indvars.iv243
  store i32 %240, i32* %241, align 4
  %indvars.iv.next244 = add i64 %indvars.iv243, 1
  %lftr.wideiv245 = trunc i64 %indvars.iv.next244 to i32
  %exitcond246 = icmp eq i32 %lftr.wideiv245, 8
  br i1 %exitcond246, label %.preheader215, label %223

; <label>:242                                     ; preds = %.preheader215
  %243 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %217, i32 3
  %244 = load i64* %243, align 8
  %245 = add i64 %244, %222
  br label %lduw_kernel.exit187

lduw_kernel.exit187:                              ; preds = %242, %.preheader215
  %.sink.in.in.i184 = phi i64 [ %245, %242 ], [ %222, %.preheader215 ]
  %.sink.in.i185 = inttoptr i64 %.sink.in.in.i184 to i16*
  %.sink.i186 = load i16* %.sink.in.i185, align 2
  %246 = zext i16 %.sink.i186 to i32
  %247 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 0
  store i32 %246, i32* %247, align 16
  %248 = add i32 %86, 38
  %249 = lshr i32 %248, 12
  %250 = and i32 %249, 255
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %251, i32 0
  %253 = load i32* %252, align 4
  %254 = and i32 %248, -4095
  %255 = icmp eq i32 %253, %254
  %256 = zext i32 %248 to i64
  br i1 %255, label %1398, label %lduw_kernel.exit187.1, !prof !0

; <label>:257                                     ; preds = %lduw_kernel.exit187.3
  %258 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1437, i32 3
  %259 = load i64* %258, align 8
  %260 = add i64 %259, %1442
  br label %lduw_kernel.exit183

lduw_kernel.exit183:                              ; preds = %lduw_kernel.exit187.3, %257
  %.sink.in.in.i180 = phi i64 [ %260, %257 ], [ %1442, %lduw_kernel.exit187.3 ]
  %.sink.in.i181 = inttoptr i64 %.sink.in.in.i180 to i16*
  %.sink.i182 = load i16* %.sink.in.i181, align 2
  %261 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 4
  store i32 0, i32* %261, align 16
  %262 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 5
  store i32 0, i32* %262, align 4
  br label %263

; <label>:263                                     ; preds = %lduw_kernel.exit183, %lduw_kernel.exit120
  %new_cr3.0 = phi i32 [ %res.0.i, %lduw_kernel.exit120 ], [ 0, %lduw_kernel.exit183 ]
  %new_ldt.0.in = phi i16 [ %.sink.i119, %lduw_kernel.exit120 ], [ %.sink.i182, %lduw_kernel.exit183 ]
  %new_eip.0 = phi i32 [ %res.0.i107, %lduw_kernel.exit120 ], [ %198, %lduw_kernel.exit183 ]
  %new_eflags.0 = phi i32 [ %res.0.i111, %lduw_kernel.exit120 ], [ %213, %lduw_kernel.exit183 ]
  %new_ldt.0 = zext i16 %new_ldt.0.in to i32
  %264 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 11, i32 1
  %265 = load i32* %264, align 4
  %266 = lshr i32 %265, 12
  %267 = and i32 %266, 255
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %268, i32 0
  %270 = load i32* %269, align 4
  %271 = and i32 %265, -4096
  %272 = icmp eq i32 %270, %271
  %273 = zext i32 %265 to i64
  br i1 %272, label %274, label %ldub_kernel.exit179, !prof !0

; <label>:274                                     ; preds = %263
  %275 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %268, i32 3
  %276 = load i64* %275, align 8
  %277 = add i64 %276, %273
  br label %ldub_kernel.exit179

ldub_kernel.exit179:                              ; preds = %274, %263
  %.sink.in.in.i176 = phi i64 [ %277, %274 ], [ %273, %263 ]
  %.sink.in.i177 = inttoptr i64 %.sink.in.in.i176 to i8*
  %.sink.i178 = load i8* %.sink.in.i177, align 1
  %278 = add i32 %265, %.100
  %279 = lshr i32 %278, 12
  %280 = and i32 %279, 255
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %281, i32 0
  %283 = load i32* %282, align 4
  %284 = and i32 %278, -4096
  %285 = icmp eq i32 %283, %284
  %286 = zext i32 %278 to i64
  br i1 %285, label %287, label %ldub_kernel.exit, !prof !0

; <label>:287                                     ; preds = %ldub_kernel.exit179
  %288 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %281, i32 3
  %289 = load i64* %288, align 8
  %290 = add i64 %289, %286
  br label %ldub_kernel.exit

ldub_kernel.exit:                                 ; preds = %287, %ldub_kernel.exit179
  %.sink.in.in.i173 = phi i64 [ %290, %287 ], [ %286, %ldub_kernel.exit179 ]
  %.sink.in.i174 = inttoptr i64 %.sink.in.in.i173 to i8*
  %.sink.i175 = load i8* %.sink.in.i174, align 1
  %291 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %268, i32 1
  %292 = load i32* %291, align 4
  %293 = icmp eq i32 %292, %271
  br i1 %293, label %296, label %294, !prof !0

; <label>:294                                     ; preds = %ldub_kernel.exit
  %295 = inttoptr i64 %273 to i8*
  store i8 %.sink.i178, i8* %295, align 1
  br label %stb_kernel.exit172

; <label>:296                                     ; preds = %ldub_kernel.exit
  %297 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %268, i32 3
  %298 = load i64* %297, align 8
  %299 = add i64 %298, %273
  %300 = inttoptr i64 %299 to i8*
  store i8 %.sink.i178, i8* %300, align 1
  br label %stb_kernel.exit172

stb_kernel.exit172:                               ; preds = %296, %294
  %301 = load %struct.CPUX86State** @env, align 8
  %302 = getelementptr inbounds %struct.CPUX86State* %301, i64 0, i32 11, i32 1
  %303 = load i32* %302, align 4
  %304 = add i32 %303, %.100
  %305 = lshr i32 %304, 12
  %306 = and i32 %305, 255
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds %struct.CPUX86State* %301, i64 0, i32 71, i64 0, i64 %307, i32 1
  %309 = load i32* %308, align 4
  %310 = and i32 %304, -4096
  %311 = icmp eq i32 %309, %310
  %312 = zext i32 %304 to i64
  br i1 %311, label %315, label %313, !prof !0

; <label>:313                                     ; preds = %stb_kernel.exit172
  %314 = inttoptr i64 %312 to i8*
  store i8 %.sink.i175, i8* %314, align 1
  br label %stb_kernel.exit

; <label>:315                                     ; preds = %stb_kernel.exit172
  %316 = getelementptr inbounds %struct.CPUX86State* %301, i64 0, i32 71, i64 0, i64 %307, i32 3
  %317 = load i64* %316, align 8
  %318 = add i64 %317, %312
  %319 = inttoptr i64 %318 to i8*
  store i8 %.sink.i175, i8* %319, align 1
  br label %stb_kernel.exit

stb_kernel.exit:                                  ; preds = %315, %313
  %320 = icmp eq i32 %source, 1
  %321 = icmp ult i32 %source, 2
  br i1 %321, label %322, label %stl_kernel.exit167

; <label>:322                                     ; preds = %stb_kernel.exit
  %323 = load %struct.CPUX86State** @env, align 8
  %324 = getelementptr inbounds %struct.CPUX86State* %323, i64 0, i32 12, i32 1
  %325 = load i32* %324, align 4
  %326 = getelementptr inbounds %struct.CPUX86State* %323, i64 0, i32 11, i32 0
  %327 = load i32* %326, align 4
  %328 = and i32 %327, -8
  %329 = add i32 %325, 4
  %330 = add i32 %329, %328
  %331 = lshr i32 %330, 12
  %332 = and i32 %331, 255
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds %struct.CPUX86State* %323, i64 0, i32 71, i64 0, i64 %333, i32 0
  %335 = load i32* %334, align 4
  %336 = and i32 %330, -4093
  %337 = icmp eq i32 %335, %336
  %338 = zext i32 %330 to i64
  br i1 %337, label %339, label %ldl_kernel.exit171, !prof !0

; <label>:339                                     ; preds = %322
  %340 = getelementptr inbounds %struct.CPUX86State* %323, i64 0, i32 71, i64 0, i64 %333, i32 3
  %341 = load i64* %340, align 8
  %342 = add i64 %341, %338
  br label %ldl_kernel.exit171

ldl_kernel.exit171:                               ; preds = %339, %322
  %res.0.in.in.i168 = phi i64 [ %342, %339 ], [ %338, %322 ]
  %res.0.in.i169 = inttoptr i64 %res.0.in.in.i168 to i32*
  %res.0.i170 = load i32* %res.0.in.i169, align 4
  %343 = and i32 %res.0.i170, -513
  %344 = getelementptr inbounds %struct.CPUX86State* %323, i64 0, i32 71, i64 0, i64 %333, i32 1
  %345 = load i32* %344, align 4
  %346 = icmp eq i32 %345, %336
  br i1 %346, label %349, label %347, !prof !0

; <label>:347                                     ; preds = %ldl_kernel.exit171
  %348 = inttoptr i64 %338 to i32*
  store i32 %343, i32* %348, align 4
  br label %stl_kernel.exit167

; <label>:349                                     ; preds = %ldl_kernel.exit171
  %350 = getelementptr inbounds %struct.CPUX86State* %323, i64 0, i32 71, i64 0, i64 %333, i32 3
  %351 = load i64* %350, align 8
  %352 = add i64 %351, %338
  %353 = inttoptr i64 %352 to i32*
  store i32 %343, i32* %353, align 4
  br label %stl_kernel.exit167

stl_kernel.exit167:                               ; preds = %349, %347, %stb_kernel.exit
  %354 = load %struct.CPUX86State** @env, align 8
  %355 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 2
  %356 = load i32* %355, align 4
  %357 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 5
  %358 = load i32* %357, align 4
  %359 = call i32 @helper_cc_compute_all(i32 %358) nounwind
  %360 = or i32 %359, %356
  %361 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 6
  %362 = load i32* %361, align 4
  %363 = and i32 %362, 1024
  %364 = or i32 %360, %363
  %365 = and i32 %364, -16385
  %.101 = select i1 %320, i32 %365, i32 %364
  %366 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 11, i32 1
  %367 = load i32* %366, align 4
  br i1 %72, label %368, label %599

; <label>:368                                     ; preds = %stl_kernel.exit167
  %369 = add i32 %367, 32
  %370 = lshr i32 %369, 12
  %371 = and i32 %370, 255
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 71, i64 0, i64 %372, i32 1
  %374 = load i32* %373, align 4
  %375 = and i32 %369, -4093
  %376 = icmp eq i32 %374, %375
  %377 = zext i32 %369 to i64
  br i1 %376, label %380, label %378, !prof !0

; <label>:378                                     ; preds = %368
  %379 = inttoptr i64 %377 to i32*
  store i32 %next_eip, i32* %379, align 4
  br label %stl_kernel.exit162

; <label>:380                                     ; preds = %368
  %381 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 71, i64 0, i64 %372, i32 3
  %382 = load i64* %381, align 8
  %383 = add i64 %382, %377
  %384 = inttoptr i64 %383 to i32*
  store i32 %next_eip, i32* %384, align 4
  br label %stl_kernel.exit162

stl_kernel.exit162:                               ; preds = %380, %378
  %385 = load %struct.CPUX86State** @env, align 8
  %386 = getelementptr inbounds %struct.CPUX86State* %385, i64 0, i32 11, i32 1
  %387 = load i32* %386, align 4
  %388 = add i32 %387, 36
  %389 = lshr i32 %388, 12
  %390 = and i32 %389, 255
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds %struct.CPUX86State* %385, i64 0, i32 71, i64 0, i64 %391, i32 1
  %393 = load i32* %392, align 4
  %394 = and i32 %388, -4093
  %395 = icmp eq i32 %393, %394
  %396 = zext i32 %388 to i64
  br i1 %395, label %399, label %397, !prof !0

; <label>:397                                     ; preds = %stl_kernel.exit162
  %398 = inttoptr i64 %396 to i32*
  store i32 %.101, i32* %398, align 4
  br label %stl_kernel.exit161

; <label>:399                                     ; preds = %stl_kernel.exit162
  %400 = getelementptr inbounds %struct.CPUX86State* %385, i64 0, i32 71, i64 0, i64 %391, i32 3
  %401 = load i64* %400, align 8
  %402 = add i64 %401, %396
  %403 = inttoptr i64 %402 to i32*
  store i32 %.101, i32* %403, align 4
  br label %stl_kernel.exit161

stl_kernel.exit161:                               ; preds = %399, %397
  %404 = load %struct.CPUX86State** @env, align 8
  %405 = getelementptr inbounds %struct.CPUX86State* %404, i64 0, i32 11, i32 1
  %406 = load i32* %405, align 4
  %407 = add i32 %406, 40
  %408 = getelementptr inbounds %struct.CPUX86State* %404, i64 0, i32 0, i64 0
  %409 = load i32* %408, align 4
  %410 = lshr i32 %407, 12
  %411 = and i32 %410, 255
  %412 = zext i32 %411 to i64
  %413 = getelementptr inbounds %struct.CPUX86State* %404, i64 0, i32 71, i64 0, i64 %412, i32 1
  %414 = load i32* %413, align 4
  %415 = and i32 %407, -4093
  %416 = icmp eq i32 %414, %415
  %417 = zext i32 %407 to i64
  br i1 %416, label %420, label %418, !prof !0

; <label>:418                                     ; preds = %stl_kernel.exit161
  %419 = inttoptr i64 %417 to i32*
  store i32 %409, i32* %419, align 4
  br label %stl_kernel.exit160

; <label>:420                                     ; preds = %stl_kernel.exit161
  %421 = getelementptr inbounds %struct.CPUX86State* %404, i64 0, i32 71, i64 0, i64 %412, i32 3
  %422 = load i64* %421, align 8
  %423 = add i64 %422, %417
  %424 = inttoptr i64 %423 to i32*
  store i32 %409, i32* %424, align 4
  br label %stl_kernel.exit160

stl_kernel.exit160:                               ; preds = %420, %418
  %425 = load %struct.CPUX86State** @env, align 8
  %426 = getelementptr inbounds %struct.CPUX86State* %425, i64 0, i32 11, i32 1
  %427 = load i32* %426, align 4
  %428 = add i32 %427, 44
  %429 = getelementptr inbounds %struct.CPUX86State* %425, i64 0, i32 0, i64 1
  %430 = load i32* %429, align 4
  %431 = lshr i32 %428, 12
  %432 = and i32 %431, 255
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CPUX86State* %425, i64 0, i32 71, i64 0, i64 %433, i32 1
  %435 = load i32* %434, align 4
  %436 = and i32 %428, -4093
  %437 = icmp eq i32 %435, %436
  %438 = zext i32 %428 to i64
  br i1 %437, label %441, label %439, !prof !0

; <label>:439                                     ; preds = %stl_kernel.exit160
  %440 = inttoptr i64 %438 to i32*
  store i32 %430, i32* %440, align 4
  br label %stl_kernel.exit159

; <label>:441                                     ; preds = %stl_kernel.exit160
  %442 = getelementptr inbounds %struct.CPUX86State* %425, i64 0, i32 71, i64 0, i64 %433, i32 3
  %443 = load i64* %442, align 8
  %444 = add i64 %443, %438
  %445 = inttoptr i64 %444 to i32*
  store i32 %430, i32* %445, align 4
  br label %stl_kernel.exit159

stl_kernel.exit159:                               ; preds = %441, %439
  %446 = load %struct.CPUX86State** @env, align 8
  %447 = getelementptr inbounds %struct.CPUX86State* %446, i64 0, i32 11, i32 1
  %448 = load i32* %447, align 4
  %449 = add i32 %448, 48
  %450 = getelementptr inbounds %struct.CPUX86State* %446, i64 0, i32 0, i64 2
  %451 = load i32* %450, align 4
  %452 = lshr i32 %449, 12
  %453 = and i32 %452, 255
  %454 = zext i32 %453 to i64
  %455 = getelementptr inbounds %struct.CPUX86State* %446, i64 0, i32 71, i64 0, i64 %454, i32 1
  %456 = load i32* %455, align 4
  %457 = and i32 %449, -4093
  %458 = icmp eq i32 %456, %457
  %459 = zext i32 %449 to i64
  br i1 %458, label %462, label %460, !prof !0

; <label>:460                                     ; preds = %stl_kernel.exit159
  %461 = inttoptr i64 %459 to i32*
  store i32 %451, i32* %461, align 4
  br label %stl_kernel.exit158

; <label>:462                                     ; preds = %stl_kernel.exit159
  %463 = getelementptr inbounds %struct.CPUX86State* %446, i64 0, i32 71, i64 0, i64 %454, i32 3
  %464 = load i64* %463, align 8
  %465 = add i64 %464, %459
  %466 = inttoptr i64 %465 to i32*
  store i32 %451, i32* %466, align 4
  br label %stl_kernel.exit158

stl_kernel.exit158:                               ; preds = %462, %460
  %467 = load %struct.CPUX86State** @env, align 8
  %468 = getelementptr inbounds %struct.CPUX86State* %467, i64 0, i32 11, i32 1
  %469 = load i32* %468, align 4
  %470 = add i32 %469, 52
  %471 = getelementptr inbounds %struct.CPUX86State* %467, i64 0, i32 0, i64 3
  %472 = load i32* %471, align 4
  %473 = lshr i32 %470, 12
  %474 = and i32 %473, 255
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds %struct.CPUX86State* %467, i64 0, i32 71, i64 0, i64 %475, i32 1
  %477 = load i32* %476, align 4
  %478 = and i32 %470, -4093
  %479 = icmp eq i32 %477, %478
  %480 = zext i32 %470 to i64
  br i1 %479, label %483, label %481, !prof !0

; <label>:481                                     ; preds = %stl_kernel.exit158
  %482 = inttoptr i64 %480 to i32*
  store i32 %472, i32* %482, align 4
  br label %stl_kernel.exit157

; <label>:483                                     ; preds = %stl_kernel.exit158
  %484 = getelementptr inbounds %struct.CPUX86State* %467, i64 0, i32 71, i64 0, i64 %475, i32 3
  %485 = load i64* %484, align 8
  %486 = add i64 %485, %480
  %487 = inttoptr i64 %486 to i32*
  store i32 %472, i32* %487, align 4
  br label %stl_kernel.exit157

stl_kernel.exit157:                               ; preds = %483, %481
  %488 = load %struct.CPUX86State** @env, align 8
  %489 = getelementptr inbounds %struct.CPUX86State* %488, i64 0, i32 11, i32 1
  %490 = load i32* %489, align 4
  %491 = add i32 %490, 56
  %492 = getelementptr inbounds %struct.CPUX86State* %488, i64 0, i32 0, i64 4
  %493 = load i32* %492, align 4
  %494 = lshr i32 %491, 12
  %495 = and i32 %494, 255
  %496 = zext i32 %495 to i64
  %497 = getelementptr inbounds %struct.CPUX86State* %488, i64 0, i32 71, i64 0, i64 %496, i32 1
  %498 = load i32* %497, align 4
  %499 = and i32 %491, -4093
  %500 = icmp eq i32 %498, %499
  %501 = zext i32 %491 to i64
  br i1 %500, label %504, label %502, !prof !0

; <label>:502                                     ; preds = %stl_kernel.exit157
  %503 = inttoptr i64 %501 to i32*
  store i32 %493, i32* %503, align 4
  br label %stl_kernel.exit156

; <label>:504                                     ; preds = %stl_kernel.exit157
  %505 = getelementptr inbounds %struct.CPUX86State* %488, i64 0, i32 71, i64 0, i64 %496, i32 3
  %506 = load i64* %505, align 8
  %507 = add i64 %506, %501
  %508 = inttoptr i64 %507 to i32*
  store i32 %493, i32* %508, align 4
  br label %stl_kernel.exit156

stl_kernel.exit156:                               ; preds = %504, %502
  %509 = load %struct.CPUX86State** @env, align 8
  %510 = getelementptr inbounds %struct.CPUX86State* %509, i64 0, i32 11, i32 1
  %511 = load i32* %510, align 4
  %512 = add i32 %511, 60
  %513 = getelementptr inbounds %struct.CPUX86State* %509, i64 0, i32 0, i64 5
  %514 = load i32* %513, align 4
  %515 = lshr i32 %512, 12
  %516 = and i32 %515, 255
  %517 = zext i32 %516 to i64
  %518 = getelementptr inbounds %struct.CPUX86State* %509, i64 0, i32 71, i64 0, i64 %517, i32 1
  %519 = load i32* %518, align 4
  %520 = and i32 %512, -4093
  %521 = icmp eq i32 %519, %520
  %522 = zext i32 %512 to i64
  br i1 %521, label %525, label %523, !prof !0

; <label>:523                                     ; preds = %stl_kernel.exit156
  %524 = inttoptr i64 %522 to i32*
  store i32 %514, i32* %524, align 4
  br label %stl_kernel.exit155

; <label>:525                                     ; preds = %stl_kernel.exit156
  %526 = getelementptr inbounds %struct.CPUX86State* %509, i64 0, i32 71, i64 0, i64 %517, i32 3
  %527 = load i64* %526, align 8
  %528 = add i64 %527, %522
  %529 = inttoptr i64 %528 to i32*
  store i32 %514, i32* %529, align 4
  br label %stl_kernel.exit155

stl_kernel.exit155:                               ; preds = %525, %523
  %530 = load %struct.CPUX86State** @env, align 8
  %531 = getelementptr inbounds %struct.CPUX86State* %530, i64 0, i32 11, i32 1
  %532 = load i32* %531, align 4
  %533 = add i32 %532, 64
  %534 = getelementptr inbounds %struct.CPUX86State* %530, i64 0, i32 0, i64 6
  %535 = load i32* %534, align 4
  %536 = lshr i32 %533, 12
  %537 = and i32 %536, 255
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds %struct.CPUX86State* %530, i64 0, i32 71, i64 0, i64 %538, i32 1
  %540 = load i32* %539, align 4
  %541 = and i32 %533, -4093
  %542 = icmp eq i32 %540, %541
  %543 = zext i32 %533 to i64
  br i1 %542, label %546, label %544, !prof !0

; <label>:544                                     ; preds = %stl_kernel.exit155
  %545 = inttoptr i64 %543 to i32*
  store i32 %535, i32* %545, align 4
  br label %stl_kernel.exit154

; <label>:546                                     ; preds = %stl_kernel.exit155
  %547 = getelementptr inbounds %struct.CPUX86State* %530, i64 0, i32 71, i64 0, i64 %538, i32 3
  %548 = load i64* %547, align 8
  %549 = add i64 %548, %543
  %550 = inttoptr i64 %549 to i32*
  store i32 %535, i32* %550, align 4
  br label %stl_kernel.exit154

stl_kernel.exit154:                               ; preds = %546, %544
  %551 = load %struct.CPUX86State** @env, align 8
  %552 = getelementptr inbounds %struct.CPUX86State* %551, i64 0, i32 11, i32 1
  %553 = load i32* %552, align 4
  %554 = add i32 %553, 68
  %555 = getelementptr inbounds %struct.CPUX86State* %551, i64 0, i32 0, i64 7
  %556 = load i32* %555, align 4
  %557 = lshr i32 %554, 12
  %558 = and i32 %557, 255
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds %struct.CPUX86State* %551, i64 0, i32 71, i64 0, i64 %559, i32 1
  %561 = load i32* %560, align 4
  %562 = and i32 %554, -4093
  %563 = icmp eq i32 %561, %562
  %564 = zext i32 %554 to i64
  br i1 %563, label %567, label %565, !prof !0

; <label>:565                                     ; preds = %stl_kernel.exit154
  %566 = inttoptr i64 %564 to i32*
  store i32 %556, i32* %566, align 4
  br label %stl_kernel.exit153.preheader

; <label>:567                                     ; preds = %stl_kernel.exit154
  %568 = getelementptr inbounds %struct.CPUX86State* %551, i64 0, i32 71, i64 0, i64 %559, i32 3
  %569 = load i64* %568, align 8
  %570 = add i64 %569, %564
  %571 = inttoptr i64 %570 to i32*
  store i32 %556, i32* %571, align 4
  br label %stl_kernel.exit153.preheader

stl_kernel.exit153.preheader:                     ; preds = %stw_kernel.exit152, %567, %565
  %indvars.iv223 = phi i64 [ %indvars.iv.next224, %stw_kernel.exit152 ], [ 0, %565 ], [ 0, %567 ]
  %572 = load %struct.CPUX86State** @env, align 8
  %573 = getelementptr inbounds %struct.CPUX86State* %572, i64 0, i32 11, i32 1
  %574 = load i32* %573, align 4
  %575 = shl i64 %indvars.iv223, 2
  %576 = add nsw i64 %575, 72
  %577 = trunc i64 %576 to i32
  %578 = add i32 %577, %574
  %579 = getelementptr inbounds %struct.CPUX86State* %572, i64 0, i32 9, i64 %indvars.iv223, i32 0
  %580 = load i32* %579, align 4
  %581 = lshr i32 %578, 12
  %582 = and i32 %581, 255
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds %struct.CPUX86State* %572, i64 0, i32 71, i64 0, i64 %583, i32 1
  %585 = load i32* %584, align 4
  %586 = and i32 %578, -4095
  %587 = icmp eq i32 %585, %586
  br i1 %587, label %592, label %588, !prof !0

; <label>:588                                     ; preds = %stl_kernel.exit153.preheader
  %589 = trunc i32 %580 to i16
  %590 = zext i32 %578 to i64
  %591 = inttoptr i64 %590 to i16*
  store i16 %589, i16* %591, align 2
  br label %stw_kernel.exit152

; <label>:592                                     ; preds = %stl_kernel.exit153.preheader
  %593 = zext i32 %578 to i64
  %594 = getelementptr inbounds %struct.CPUX86State* %572, i64 0, i32 71, i64 0, i64 %583, i32 3
  %595 = load i64* %594, align 8
  %596 = add i64 %595, %593
  %597 = trunc i32 %580 to i16
  %598 = inttoptr i64 %596 to i16*
  store i16 %597, i16* %598, align 2
  br label %stw_kernel.exit152

stw_kernel.exit152:                               ; preds = %592, %588
  %indvars.iv.next224 = add i64 %indvars.iv223, 1
  %lftr.wideiv225 = trunc i64 %indvars.iv.next224 to i32
  %exitcond226 = icmp eq i32 %lftr.wideiv225, 6
  br i1 %exitcond226, label %.loopexit208, label %stl_kernel.exit153.preheader

; <label>:599                                     ; preds = %stl_kernel.exit167
  %600 = add i32 %367, 14
  %601 = lshr i32 %600, 12
  %602 = and i32 %601, 255
  %603 = zext i32 %602 to i64
  %604 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 71, i64 0, i64 %603, i32 1
  %605 = load i32* %604, align 4
  %606 = and i32 %600, -4095
  %607 = icmp eq i32 %605, %606
  br i1 %607, label %612, label %608, !prof !0

; <label>:608                                     ; preds = %599
  %609 = trunc i32 %next_eip to i16
  %610 = zext i32 %600 to i64
  %611 = inttoptr i64 %610 to i16*
  store i16 %609, i16* %611, align 2
  br label %stw_kernel.exit151

; <label>:612                                     ; preds = %599
  %613 = zext i32 %600 to i64
  %614 = getelementptr inbounds %struct.CPUX86State* %354, i64 0, i32 71, i64 0, i64 %603, i32 3
  %615 = load i64* %614, align 8
  %616 = add i64 %615, %613
  %617 = trunc i32 %next_eip to i16
  %618 = inttoptr i64 %616 to i16*
  store i16 %617, i16* %618, align 2
  br label %stw_kernel.exit151

stw_kernel.exit151:                               ; preds = %612, %608
  %619 = load %struct.CPUX86State** @env, align 8
  %620 = getelementptr inbounds %struct.CPUX86State* %619, i64 0, i32 11, i32 1
  %621 = load i32* %620, align 4
  %622 = add i32 %621, 16
  %623 = lshr i32 %622, 12
  %624 = and i32 %623, 255
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds %struct.CPUX86State* %619, i64 0, i32 71, i64 0, i64 %625, i32 1
  %627 = load i32* %626, align 4
  %628 = and i32 %622, -4095
  %629 = icmp eq i32 %627, %628
  br i1 %629, label %634, label %630, !prof !0

; <label>:630                                     ; preds = %stw_kernel.exit151
  %631 = trunc i32 %.101 to i16
  %632 = zext i32 %622 to i64
  %633 = inttoptr i64 %632 to i16*
  store i16 %631, i16* %633, align 2
  br label %stw_kernel.exit150

; <label>:634                                     ; preds = %stw_kernel.exit151
  %635 = zext i32 %622 to i64
  %636 = getelementptr inbounds %struct.CPUX86State* %619, i64 0, i32 71, i64 0, i64 %625, i32 3
  %637 = load i64* %636, align 8
  %638 = add i64 %637, %635
  %639 = trunc i32 %.101 to i16
  %640 = inttoptr i64 %638 to i16*
  store i16 %639, i16* %640, align 2
  br label %stw_kernel.exit150

stw_kernel.exit150:                               ; preds = %634, %630
  %641 = load %struct.CPUX86State** @env, align 8
  %642 = getelementptr inbounds %struct.CPUX86State* %641, i64 0, i32 11, i32 1
  %643 = load i32* %642, align 4
  %644 = add i32 %643, 18
  %645 = getelementptr inbounds %struct.CPUX86State* %641, i64 0, i32 0, i64 0
  %646 = load i32* %645, align 4
  %647 = lshr i32 %644, 12
  %648 = and i32 %647, 255
  %649 = zext i32 %648 to i64
  %650 = getelementptr inbounds %struct.CPUX86State* %641, i64 0, i32 71, i64 0, i64 %649, i32 1
  %651 = load i32* %650, align 4
  %652 = and i32 %644, -4095
  %653 = icmp eq i32 %651, %652
  br i1 %653, label %658, label %654, !prof !0

; <label>:654                                     ; preds = %stw_kernel.exit150
  %655 = trunc i32 %646 to i16
  %656 = zext i32 %644 to i64
  %657 = inttoptr i64 %656 to i16*
  store i16 %655, i16* %657, align 2
  br label %stw_kernel.exit149

; <label>:658                                     ; preds = %stw_kernel.exit150
  %659 = zext i32 %644 to i64
  %660 = getelementptr inbounds %struct.CPUX86State* %641, i64 0, i32 71, i64 0, i64 %649, i32 3
  %661 = load i64* %660, align 8
  %662 = add i64 %661, %659
  %663 = trunc i32 %646 to i16
  %664 = inttoptr i64 %662 to i16*
  store i16 %663, i16* %664, align 2
  br label %stw_kernel.exit149

stw_kernel.exit149:                               ; preds = %658, %654
  %665 = load %struct.CPUX86State** @env, align 8
  %666 = getelementptr inbounds %struct.CPUX86State* %665, i64 0, i32 11, i32 1
  %667 = load i32* %666, align 4
  %668 = add i32 %667, 20
  %669 = getelementptr inbounds %struct.CPUX86State* %665, i64 0, i32 0, i64 1
  %670 = load i32* %669, align 4
  %671 = lshr i32 %668, 12
  %672 = and i32 %671, 255
  %673 = zext i32 %672 to i64
  %674 = getelementptr inbounds %struct.CPUX86State* %665, i64 0, i32 71, i64 0, i64 %673, i32 1
  %675 = load i32* %674, align 4
  %676 = and i32 %668, -4095
  %677 = icmp eq i32 %675, %676
  br i1 %677, label %682, label %678, !prof !0

; <label>:678                                     ; preds = %stw_kernel.exit149
  %679 = trunc i32 %670 to i16
  %680 = zext i32 %668 to i64
  %681 = inttoptr i64 %680 to i16*
  store i16 %679, i16* %681, align 2
  br label %stw_kernel.exit148

; <label>:682                                     ; preds = %stw_kernel.exit149
  %683 = zext i32 %668 to i64
  %684 = getelementptr inbounds %struct.CPUX86State* %665, i64 0, i32 71, i64 0, i64 %673, i32 3
  %685 = load i64* %684, align 8
  %686 = add i64 %685, %683
  %687 = trunc i32 %670 to i16
  %688 = inttoptr i64 %686 to i16*
  store i16 %687, i16* %688, align 2
  br label %stw_kernel.exit148

stw_kernel.exit148:                               ; preds = %682, %678
  %689 = load %struct.CPUX86State** @env, align 8
  %690 = getelementptr inbounds %struct.CPUX86State* %689, i64 0, i32 11, i32 1
  %691 = load i32* %690, align 4
  %692 = add i32 %691, 22
  %693 = getelementptr inbounds %struct.CPUX86State* %689, i64 0, i32 0, i64 2
  %694 = load i32* %693, align 4
  %695 = lshr i32 %692, 12
  %696 = and i32 %695, 255
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds %struct.CPUX86State* %689, i64 0, i32 71, i64 0, i64 %697, i32 1
  %699 = load i32* %698, align 4
  %700 = and i32 %692, -4095
  %701 = icmp eq i32 %699, %700
  br i1 %701, label %706, label %702, !prof !0

; <label>:702                                     ; preds = %stw_kernel.exit148
  %703 = trunc i32 %694 to i16
  %704 = zext i32 %692 to i64
  %705 = inttoptr i64 %704 to i16*
  store i16 %703, i16* %705, align 2
  br label %stw_kernel.exit147

; <label>:706                                     ; preds = %stw_kernel.exit148
  %707 = zext i32 %692 to i64
  %708 = getelementptr inbounds %struct.CPUX86State* %689, i64 0, i32 71, i64 0, i64 %697, i32 3
  %709 = load i64* %708, align 8
  %710 = add i64 %709, %707
  %711 = trunc i32 %694 to i16
  %712 = inttoptr i64 %710 to i16*
  store i16 %711, i16* %712, align 2
  br label %stw_kernel.exit147

stw_kernel.exit147:                               ; preds = %706, %702
  %713 = load %struct.CPUX86State** @env, align 8
  %714 = getelementptr inbounds %struct.CPUX86State* %713, i64 0, i32 11, i32 1
  %715 = load i32* %714, align 4
  %716 = add i32 %715, 24
  %717 = getelementptr inbounds %struct.CPUX86State* %713, i64 0, i32 0, i64 3
  %718 = load i32* %717, align 4
  %719 = lshr i32 %716, 12
  %720 = and i32 %719, 255
  %721 = zext i32 %720 to i64
  %722 = getelementptr inbounds %struct.CPUX86State* %713, i64 0, i32 71, i64 0, i64 %721, i32 1
  %723 = load i32* %722, align 4
  %724 = and i32 %716, -4095
  %725 = icmp eq i32 %723, %724
  br i1 %725, label %730, label %726, !prof !0

; <label>:726                                     ; preds = %stw_kernel.exit147
  %727 = trunc i32 %718 to i16
  %728 = zext i32 %716 to i64
  %729 = inttoptr i64 %728 to i16*
  store i16 %727, i16* %729, align 2
  br label %stw_kernel.exit146

; <label>:730                                     ; preds = %stw_kernel.exit147
  %731 = zext i32 %716 to i64
  %732 = getelementptr inbounds %struct.CPUX86State* %713, i64 0, i32 71, i64 0, i64 %721, i32 3
  %733 = load i64* %732, align 8
  %734 = add i64 %733, %731
  %735 = trunc i32 %718 to i16
  %736 = inttoptr i64 %734 to i16*
  store i16 %735, i16* %736, align 2
  br label %stw_kernel.exit146

stw_kernel.exit146:                               ; preds = %730, %726
  %737 = load %struct.CPUX86State** @env, align 8
  %738 = getelementptr inbounds %struct.CPUX86State* %737, i64 0, i32 11, i32 1
  %739 = load i32* %738, align 4
  %740 = add i32 %739, 26
  %741 = getelementptr inbounds %struct.CPUX86State* %737, i64 0, i32 0, i64 4
  %742 = load i32* %741, align 4
  %743 = lshr i32 %740, 12
  %744 = and i32 %743, 255
  %745 = zext i32 %744 to i64
  %746 = getelementptr inbounds %struct.CPUX86State* %737, i64 0, i32 71, i64 0, i64 %745, i32 1
  %747 = load i32* %746, align 4
  %748 = and i32 %740, -4095
  %749 = icmp eq i32 %747, %748
  br i1 %749, label %754, label %750, !prof !0

; <label>:750                                     ; preds = %stw_kernel.exit146
  %751 = trunc i32 %742 to i16
  %752 = zext i32 %740 to i64
  %753 = inttoptr i64 %752 to i16*
  store i16 %751, i16* %753, align 2
  br label %stw_kernel.exit145

; <label>:754                                     ; preds = %stw_kernel.exit146
  %755 = zext i32 %740 to i64
  %756 = getelementptr inbounds %struct.CPUX86State* %737, i64 0, i32 71, i64 0, i64 %745, i32 3
  %757 = load i64* %756, align 8
  %758 = add i64 %757, %755
  %759 = trunc i32 %742 to i16
  %760 = inttoptr i64 %758 to i16*
  store i16 %759, i16* %760, align 2
  br label %stw_kernel.exit145

stw_kernel.exit145:                               ; preds = %754, %750
  %761 = load %struct.CPUX86State** @env, align 8
  %762 = getelementptr inbounds %struct.CPUX86State* %761, i64 0, i32 11, i32 1
  %763 = load i32* %762, align 4
  %764 = add i32 %763, 28
  %765 = getelementptr inbounds %struct.CPUX86State* %761, i64 0, i32 0, i64 5
  %766 = load i32* %765, align 4
  %767 = lshr i32 %764, 12
  %768 = and i32 %767, 255
  %769 = zext i32 %768 to i64
  %770 = getelementptr inbounds %struct.CPUX86State* %761, i64 0, i32 71, i64 0, i64 %769, i32 1
  %771 = load i32* %770, align 4
  %772 = and i32 %764, -4095
  %773 = icmp eq i32 %771, %772
  br i1 %773, label %778, label %774, !prof !0

; <label>:774                                     ; preds = %stw_kernel.exit145
  %775 = trunc i32 %766 to i16
  %776 = zext i32 %764 to i64
  %777 = inttoptr i64 %776 to i16*
  store i16 %775, i16* %777, align 2
  br label %stw_kernel.exit144

; <label>:778                                     ; preds = %stw_kernel.exit145
  %779 = zext i32 %764 to i64
  %780 = getelementptr inbounds %struct.CPUX86State* %761, i64 0, i32 71, i64 0, i64 %769, i32 3
  %781 = load i64* %780, align 8
  %782 = add i64 %781, %779
  %783 = trunc i32 %766 to i16
  %784 = inttoptr i64 %782 to i16*
  store i16 %783, i16* %784, align 2
  br label %stw_kernel.exit144

stw_kernel.exit144:                               ; preds = %778, %774
  %785 = load %struct.CPUX86State** @env, align 8
  %786 = getelementptr inbounds %struct.CPUX86State* %785, i64 0, i32 11, i32 1
  %787 = load i32* %786, align 4
  %788 = add i32 %787, 30
  %789 = getelementptr inbounds %struct.CPUX86State* %785, i64 0, i32 0, i64 6
  %790 = load i32* %789, align 4
  %791 = lshr i32 %788, 12
  %792 = and i32 %791, 255
  %793 = zext i32 %792 to i64
  %794 = getelementptr inbounds %struct.CPUX86State* %785, i64 0, i32 71, i64 0, i64 %793, i32 1
  %795 = load i32* %794, align 4
  %796 = and i32 %788, -4095
  %797 = icmp eq i32 %795, %796
  br i1 %797, label %802, label %798, !prof !0

; <label>:798                                     ; preds = %stw_kernel.exit144
  %799 = trunc i32 %790 to i16
  %800 = zext i32 %788 to i64
  %801 = inttoptr i64 %800 to i16*
  store i16 %799, i16* %801, align 2
  br label %stw_kernel.exit143

; <label>:802                                     ; preds = %stw_kernel.exit144
  %803 = zext i32 %788 to i64
  %804 = getelementptr inbounds %struct.CPUX86State* %785, i64 0, i32 71, i64 0, i64 %793, i32 3
  %805 = load i64* %804, align 8
  %806 = add i64 %805, %803
  %807 = trunc i32 %790 to i16
  %808 = inttoptr i64 %806 to i16*
  store i16 %807, i16* %808, align 2
  br label %stw_kernel.exit143

stw_kernel.exit143:                               ; preds = %802, %798
  %809 = load %struct.CPUX86State** @env, align 8
  %810 = getelementptr inbounds %struct.CPUX86State* %809, i64 0, i32 11, i32 1
  %811 = load i32* %810, align 4
  %812 = add i32 %811, 32
  %813 = getelementptr inbounds %struct.CPUX86State* %809, i64 0, i32 0, i64 7
  %814 = load i32* %813, align 4
  %815 = lshr i32 %812, 12
  %816 = and i32 %815, 255
  %817 = zext i32 %816 to i64
  %818 = getelementptr inbounds %struct.CPUX86State* %809, i64 0, i32 71, i64 0, i64 %817, i32 1
  %819 = load i32* %818, align 4
  %820 = and i32 %812, -4095
  %821 = icmp eq i32 %819, %820
  br i1 %821, label %826, label %822, !prof !0

; <label>:822                                     ; preds = %stw_kernel.exit143
  %823 = trunc i32 %814 to i16
  %824 = zext i32 %812 to i64
  %825 = inttoptr i64 %824 to i16*
  store i16 %823, i16* %825, align 2
  br label %stw_kernel.exit142.preheader

; <label>:826                                     ; preds = %stw_kernel.exit143
  %827 = zext i32 %812 to i64
  %828 = getelementptr inbounds %struct.CPUX86State* %809, i64 0, i32 71, i64 0, i64 %817, i32 3
  %829 = load i64* %828, align 8
  %830 = add i64 %829, %827
  %831 = trunc i32 %814 to i16
  %832 = inttoptr i64 %830 to i16*
  store i16 %831, i16* %832, align 2
  br label %stw_kernel.exit142.preheader

stw_kernel.exit142.preheader:                     ; preds = %826, %822
  %833 = load %struct.CPUX86State** @env, align 8
  %834 = getelementptr inbounds %struct.CPUX86State* %833, i64 0, i32 11, i32 1
  %835 = load i32* %834, align 4
  %836 = add i32 %835, 34
  %837 = getelementptr inbounds %struct.CPUX86State* %833, i64 0, i32 9, i64 0, i32 0
  %838 = load i32* %837, align 4
  %839 = lshr i32 %836, 12
  %840 = and i32 %839, 255
  %841 = zext i32 %840 to i64
  %842 = getelementptr inbounds %struct.CPUX86State* %833, i64 0, i32 71, i64 0, i64 %841, i32 1
  %843 = load i32* %842, align 4
  %844 = and i32 %836, -4095
  %845 = icmp eq i32 %843, %844
  br i1 %845, label %850, label %846, !prof !0

; <label>:846                                     ; preds = %stw_kernel.exit142.preheader
  %847 = trunc i32 %838 to i16
  %848 = zext i32 %836 to i64
  %849 = inttoptr i64 %848 to i16*
  store i16 %847, i16* %849, align 2
  br label %stw_kernel.exit141

; <label>:850                                     ; preds = %stw_kernel.exit142.preheader
  %851 = zext i32 %836 to i64
  %852 = getelementptr inbounds %struct.CPUX86State* %833, i64 0, i32 71, i64 0, i64 %841, i32 3
  %853 = load i64* %852, align 8
  %854 = add i64 %853, %851
  %855 = trunc i32 %838 to i16
  %856 = inttoptr i64 %854 to i16*
  store i16 %855, i16* %856, align 2
  br label %stw_kernel.exit141

stw_kernel.exit141:                               ; preds = %850, %846
  %857 = load %struct.CPUX86State** @env, align 8
  %858 = getelementptr inbounds %struct.CPUX86State* %857, i64 0, i32 11, i32 1
  %859 = load i32* %858, align 4
  %860 = add i32 %859, 38
  %861 = getelementptr inbounds %struct.CPUX86State* %857, i64 0, i32 9, i64 1, i32 0
  %862 = load i32* %861, align 4
  %863 = lshr i32 %860, 12
  %864 = and i32 %863, 255
  %865 = zext i32 %864 to i64
  %866 = getelementptr inbounds %struct.CPUX86State* %857, i64 0, i32 71, i64 0, i64 %865, i32 1
  %867 = load i32* %866, align 4
  %868 = and i32 %860, -4095
  %869 = icmp eq i32 %867, %868
  br i1 %869, label %1268, label %1264, !prof !0

.loopexit208:                                     ; preds = %1316, %1312, %stw_kernel.exit152
  %870 = icmp eq i32 %source, 2
  br i1 %870, label %871, label %894

; <label>:871                                     ; preds = %.loopexit208
  %872 = load %struct.CPUX86State** @env, align 8
  %873 = getelementptr inbounds %struct.CPUX86State* %872, i64 0, i32 11, i32 0
  %874 = load i32* %873, align 4
  %875 = lshr i32 %86, 12
  %876 = and i32 %875, 255
  %877 = zext i32 %876 to i64
  %878 = getelementptr inbounds %struct.CPUX86State* %872, i64 0, i32 71, i64 0, i64 %877, i32 1
  %879 = load i32* %878, align 4
  %880 = and i32 %86, -4095
  %881 = icmp eq i32 %879, %880
  br i1 %881, label %886, label %882, !prof !0

; <label>:882                                     ; preds = %871
  %883 = trunc i32 %874 to i16
  %884 = zext i32 %86 to i64
  %885 = inttoptr i64 %884 to i16*
  store i16 %883, i16* %885, align 2
  br label %stw_kernel.exit

; <label>:886                                     ; preds = %871
  %887 = zext i32 %86 to i64
  %888 = getelementptr inbounds %struct.CPUX86State* %872, i64 0, i32 71, i64 0, i64 %877, i32 3
  %889 = load i64* %888, align 8
  %890 = add i64 %889, %887
  %891 = trunc i32 %874 to i16
  %892 = inttoptr i64 %890 to i16*
  store i16 %891, i16* %892, align 2
  br label %stw_kernel.exit

stw_kernel.exit:                                  ; preds = %886, %882
  %893 = or i32 %new_eflags.0, 16384
  br label %894

; <label>:894                                     ; preds = %stw_kernel.exit, %.loopexit208
  %new_eflags.1 = phi i32 [ %893, %stw_kernel.exit ], [ %new_eflags.0, %.loopexit208 ]
  switch i32 %source, label %stl_kernel.exit [
    i32 2, label %895
    i32 0, label %895
  ]

; <label>:895                                     ; preds = %894, %894
  %896 = load %struct.CPUX86State** @env, align 8
  %897 = getelementptr inbounds %struct.CPUX86State* %896, i64 0, i32 12, i32 1
  %898 = load i32* %897, align 4
  %899 = and i32 %.0, -8
  %900 = or i32 %899, 4
  %901 = add i32 %900, %898
  %902 = lshr i32 %901, 12
  %903 = and i32 %902, 255
  %904 = zext i32 %903 to i64
  %905 = getelementptr inbounds %struct.CPUX86State* %896, i64 0, i32 71, i64 0, i64 %904, i32 0
  %906 = load i32* %905, align 4
  %907 = and i32 %901, -4093
  %908 = icmp eq i32 %906, %907
  %909 = zext i32 %901 to i64
  br i1 %908, label %910, label %ldl_kernel.exit140, !prof !0

; <label>:910                                     ; preds = %895
  %911 = getelementptr inbounds %struct.CPUX86State* %896, i64 0, i32 71, i64 0, i64 %904, i32 3
  %912 = load i64* %911, align 8
  %913 = add i64 %912, %909
  br label %ldl_kernel.exit140

ldl_kernel.exit140:                               ; preds = %910, %895
  %res.0.in.in.i137 = phi i64 [ %913, %910 ], [ %909, %895 ]
  %res.0.in.i138 = inttoptr i64 %res.0.in.in.i137 to i32*
  %res.0.i139 = load i32* %res.0.in.i138, align 4
  %914 = or i32 %res.0.i139, 512
  %915 = getelementptr inbounds %struct.CPUX86State* %896, i64 0, i32 71, i64 0, i64 %904, i32 1
  %916 = load i32* %915, align 4
  %917 = icmp eq i32 %916, %907
  br i1 %917, label %920, label %918, !prof !0

; <label>:918                                     ; preds = %ldl_kernel.exit140
  %919 = inttoptr i64 %909 to i32*
  store i32 %914, i32* %919, align 4
  br label %stl_kernel.exit

; <label>:920                                     ; preds = %ldl_kernel.exit140
  %921 = getelementptr inbounds %struct.CPUX86State* %896, i64 0, i32 71, i64 0, i64 %904, i32 3
  %922 = load i64* %921, align 8
  %923 = add i64 %922, %909
  %924 = inttoptr i64 %923 to i32*
  store i32 %914, i32* %924, align 4
  br label %stl_kernel.exit

stl_kernel.exit:                                  ; preds = %920, %918, %894
  %925 = load %struct.CPUX86State** @env, align 8
  %926 = getelementptr inbounds %struct.CPUX86State* %925, i64 0, i32 14, i64 0
  %927 = load i32* %926, align 4
  %928 = or i32 %927, 8
  store i32 %928, i32* %926, align 4
  %929 = load %struct.CPUX86State** @env, align 8
  %930 = getelementptr inbounds %struct.CPUX86State* %929, i64 0, i32 7
  %931 = load i32* %930, align 4
  %932 = or i32 %931, 2048
  store i32 %932, i32* %930, align 4
  %933 = load %struct.CPUX86State** @env, align 8
  %934 = getelementptr inbounds %struct.CPUX86State* %933, i64 0, i32 11, i32 0
  store i32 %.0, i32* %934, align 4
  %935 = load %struct.CPUX86State** @env, align 8
  %936 = getelementptr inbounds %struct.CPUX86State* %935, i64 0, i32 11, i32 1
  store i32 %86, i32* %936, align 4
  %937 = load %struct.CPUX86State** @env, align 8
  %938 = getelementptr inbounds %struct.CPUX86State* %937, i64 0, i32 11, i32 2
  store i32 %limit.0.i, i32* %938, align 4
  %939 = and i32 %e2197, -513
  %940 = load %struct.CPUX86State** @env, align 8
  %941 = getelementptr inbounds %struct.CPUX86State* %940, i64 0, i32 11, i32 3
  store i32 %939, i32* %941, align 4
  br i1 %72, label %942, label %stl_kernel.exit._crit_edge

; <label>:942                                     ; preds = %stl_kernel.exit
  %943 = load %struct.CPUX86State** @env, align 8
  %944 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 14, i64 0
  %945 = load i32* %944, align 4
  %946 = icmp slt i32 %945, 0
  br i1 %946, label %947, label %stl_kernel.exit._crit_edge

; <label>:947                                     ; preds = %942
  call void @cpu_x86_update_cr3(%struct.CPUX86State* %943, i32 %new_cr3.0) nounwind
  br label %stl_kernel.exit._crit_edge

stl_kernel.exit._crit_edge:                       ; preds = %947, %942, %stl_kernel.exit
  %948 = load %struct.CPUX86State** @env, align 8
  %949 = getelementptr inbounds %struct.CPUX86State* %948, i64 0, i32 1
  store i32 %new_eip.0, i32* %949, align 4
  %.102 = select i1 %72, i32 2585344, i32 29440
  %950 = and i32 %new_eflags.1, 2261
  %951 = load %struct.CPUX86State** @env, align 8
  %952 = getelementptr inbounds %struct.CPUX86State* %951, i64 0, i32 3
  store i32 %950, i32* %952, align 4
  %953 = lshr i32 %new_eflags.1, 10
  %954 = shl nuw nsw i32 %953, 1
  %955 = and i32 %954, 2
  %956 = sub nsw i32 1, %955
  %957 = load %struct.CPUX86State** @env, align 8
  %958 = getelementptr inbounds %struct.CPUX86State* %957, i64 0, i32 6
  store i32 %956, i32* %958, align 4
  %959 = load %struct.CPUX86State** @env, align 8
  %960 = getelementptr inbounds %struct.CPUX86State* %959, i64 0, i32 2
  %961 = load i32* %960, align 4
  %962 = xor i32 %.102, -3
  %963 = and i32 %961, %962
  %964 = and i32 %new_eflags.1, %.102
  %965 = or i32 %964, %963
  %966 = or i32 %965, 2
  store i32 %966, i32* %960, align 4
  %967 = load i64* %new_regs257.sub, align 16
  %968 = trunc i64 %967 to i32
  %969 = load %struct.CPUX86State** @env, align 8
  %970 = getelementptr inbounds %struct.CPUX86State* %969, i64 0, i32 0, i64 0
  store i32 %968, i32* %970, align 4
  %971 = lshr i64 %967, 32
  %972 = trunc i64 %971 to i32
  %973 = load %struct.CPUX86State** @env, align 8
  %974 = getelementptr inbounds %struct.CPUX86State* %973, i64 0, i32 0, i64 1
  store i32 %972, i32* %974, align 4
  %975 = getelementptr inbounds [4 x i64]* %new_regs257, i64 0, i64 1
  %976 = load i64* %975, align 8
  %977 = trunc i64 %976 to i32
  %978 = load %struct.CPUX86State** @env, align 8
  %979 = getelementptr inbounds %struct.CPUX86State* %978, i64 0, i32 0, i64 2
  store i32 %977, i32* %979, align 4
  %980 = lshr i64 %976, 32
  %981 = trunc i64 %980 to i32
  %982 = load %struct.CPUX86State** @env, align 8
  %983 = getelementptr inbounds %struct.CPUX86State* %982, i64 0, i32 0, i64 3
  store i32 %981, i32* %983, align 4
  %984 = getelementptr inbounds [4 x i64]* %new_regs257, i64 0, i64 2
  %985 = load i64* %984, align 16
  %986 = trunc i64 %985 to i32
  %987 = load %struct.CPUX86State** @env, align 8
  %988 = getelementptr inbounds %struct.CPUX86State* %987, i64 0, i32 0, i64 4
  store i32 %986, i32* %988, align 4
  %989 = lshr i64 %985, 32
  %990 = trunc i64 %989 to i32
  %991 = load %struct.CPUX86State** @env, align 8
  %992 = getelementptr inbounds %struct.CPUX86State* %991, i64 0, i32 0, i64 5
  store i32 %990, i32* %992, align 4
  %993 = getelementptr inbounds [4 x i64]* %new_regs257, i64 0, i64 3
  %994 = load i64* %993, align 8
  %995 = trunc i64 %994 to i32
  %996 = load %struct.CPUX86State** @env, align 8
  %997 = getelementptr inbounds %struct.CPUX86State* %996, i64 0, i32 0, i64 6
  store i32 %995, i32* %997, align 4
  %998 = lshr i64 %994, 32
  %999 = trunc i64 %998 to i32
  %1000 = load %struct.CPUX86State** @env, align 8
  %1001 = getelementptr inbounds %struct.CPUX86State* %1000, i64 0, i32 0, i64 7
  store i32 %999, i32* %1001, align 4
  %1002 = and i32 %new_eflags.1, 131072
  %1003 = icmp ne i32 %1002, 0
  br i1 %1003, label %.preheader205, label %1068

.preheader205:                                    ; preds = %load_seg_vm.exit, %stl_kernel.exit._crit_edge
  %indvars.iv = phi i64 [ %indvars.iv.next, %load_seg_vm.exit ], [ 0, %stl_kernel.exit._crit_edge ]
  %1004 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 %indvars.iv
  %1005 = load i32* %1004, align 4
  %1006 = and i32 %1005, 65535
  %1007 = load %struct.CPUX86State** @env, align 8
  %1008 = shl nuw nsw i32 %1006, 4
  %1009 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 %indvars.iv, i32 0
  store i32 %1006, i32* %1009, align 4
  %1010 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 %indvars.iv, i32 1
  store i32 %1008, i32* %1010, align 4
  %1011 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 %indvars.iv, i32 2
  store i32 65535, i32* %1011, align 4
  %1012 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 %indvars.iv, i32 3
  store i32 0, i32* %1012, align 4
  %1013 = trunc i64 %indvars.iv to i32
  %1014 = icmp eq i32 %1013, 1
  br i1 %1014, label %1015, label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %.preheader205
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 7
  %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4
  br label %1024

; <label>:1015                                    ; preds = %.preheader205
  %1016 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 1, i32 3
  %1017 = load i32* %1016, align 4
  %1018 = lshr i32 %1017, 18
  %1019 = and i32 %1018, 16
  %1020 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 7
  %1021 = load i32* %1020, align 4
  %1022 = and i32 %1021, -32785
  %1023 = or i32 %1022, %1019
  store i32 %1023, i32* %1020, align 4
  br label %1024

; <label>:1024                                    ; preds = %1015, %._crit_edge.i.i
  %1025 = phi i32 [ %.pre.i.i, %._crit_edge.i.i ], [ %1023, %1015 ]
  %1026 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 2, i32 3
  %1027 = load i32* %1026, align 4
  %1028 = lshr i32 %1027, 17
  %1029 = and i32 %1028, 32
  %1030 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 7
  %1031 = and i32 %1025, 32768
  %1032 = icmp eq i32 %1031, 0
  br i1 %1032, label %1033, label %load_seg_vm.exit

; <label>:1033                                    ; preds = %1024
  %1034 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 14, i64 0
  %1035 = load i32* %1034, align 4
  %1036 = and i32 %1035, 1
  %1037 = icmp eq i32 %1036, 0
  br i1 %1037, label %1046, label %1038

; <label>:1038                                    ; preds = %1033
  %1039 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 2
  %1040 = load i32* %1039, align 4
  %1041 = and i32 %1040, 131072
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %1043, label %1046

; <label>:1043                                    ; preds = %1038
  %1044 = and i32 %1025, 16
  %1045 = icmp eq i32 %1044, 0
  br i1 %1045, label %1046, label %1048

; <label>:1046                                    ; preds = %1043, %1038, %1033
  %1047 = or i32 %1029, 64
  br label %load_seg_vm.exit

; <label>:1048                                    ; preds = %1043
  %1049 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 3, i32 1
  %1050 = load i32* %1049, align 4
  %1051 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 0, i32 1
  %1052 = load i32* %1051, align 4
  %1053 = or i32 %1052, %1050
  %1054 = getelementptr inbounds %struct.CPUX86State* %1007, i64 0, i32 9, i64 2, i32 1
  %1055 = load i32* %1054, align 4
  %1056 = or i32 %1053, %1055
  %1057 = icmp ne i32 %1056, 0
  %1058 = zext i1 %1057 to i32
  %1059 = shl nuw nsw i32 %1058, 6
  %1060 = or i32 %1059, %1029
  br label %load_seg_vm.exit

load_seg_vm.exit:                                 ; preds = %1048, %1046, %1024
  %new_hflags.0.i.i = phi i32 [ %1029, %1024 ], [ %1047, %1046 ], [ %1060, %1048 ]
  %1061 = and i32 %1025, -97
  %1062 = or i32 %new_hflags.0.i.i, %1061
  store i32 %1062, i32* %1030, align 4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 6
  br i1 %exitcond, label %1063, label %.preheader205

; <label>:1063                                    ; preds = %load_seg_vm.exit
  %1064 = load %struct.CPUX86State** @env, align 8
  %1065 = getelementptr inbounds %struct.CPUX86State* %1064, i64 0, i32 7
  %1066 = load i32* %1065, align 4
  %1067 = or i32 %1066, 3
  store i32 %1067, i32* %1065, align 4
  br label %.loopexit

; <label>:1068                                    ; preds = %stl_kernel.exit._crit_edge
  %1069 = load %struct.CPUX86State** @env, align 8
  %1070 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 1
  %1071 = load i32* %1070, align 4
  %1072 = and i32 %1071, 3
  %1073 = getelementptr inbounds %struct.CPUX86State* %1069, i64 0, i32 7
  %1074 = load i32* %1073, align 4
  %1075 = and i32 %1074, -4
  %1076 = or i32 %1075, %1072
  store i32 %1076, i32* %1073, align 4
  br label %1077

; <label>:1077                                    ; preds = %cpu_x86_load_seg_cache.exit, %1068
  %indvars.iv219 = phi i64 [ 0, %1068 ], [ %indvars.iv.next220, %cpu_x86_load_seg_cache.exit ]
  %1078 = load %struct.CPUX86State** @env, align 8
  %1079 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 %indvars.iv219
  %1080 = load i32* %1079, align 4
  %1081 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 %indvars.iv219, i32 0
  store i32 %1080, i32* %1081, align 4
  %1082 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 %indvars.iv219, i32 1
  store i32 0, i32* %1082, align 4
  %1083 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 %indvars.iv219, i32 2
  store i32 0, i32* %1083, align 4
  %1084 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 %indvars.iv219, i32 3
  store i32 0, i32* %1084, align 4
  %1085 = trunc i64 %indvars.iv219 to i32
  %1086 = icmp eq i32 %1085, 1
  br i1 %1086, label %1087, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %1077
  %.phi.trans.insert.i = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 7
  %.pre.i = load i32* %.phi.trans.insert.i, align 4
  br label %1096

; <label>:1087                                    ; preds = %1077
  %1088 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 1, i32 3
  %1089 = load i32* %1088, align 4
  %1090 = lshr i32 %1089, 18
  %1091 = and i32 %1090, 16
  %1092 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 7
  %1093 = load i32* %1092, align 4
  %1094 = and i32 %1093, -32785
  %1095 = or i32 %1094, %1091
  store i32 %1095, i32* %1092, align 4
  br label %1096

; <label>:1096                                    ; preds = %1087, %._crit_edge.i
  %1097 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %1095, %1087 ]
  %1098 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 2, i32 3
  %1099 = load i32* %1098, align 4
  %1100 = lshr i32 %1099, 17
  %1101 = and i32 %1100, 32
  %1102 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 7
  %1103 = and i32 %1097, 32768
  %1104 = icmp eq i32 %1103, 0
  br i1 %1104, label %1105, label %cpu_x86_load_seg_cache.exit

; <label>:1105                                    ; preds = %1096
  %1106 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 14, i64 0
  %1107 = load i32* %1106, align 4
  %1108 = and i32 %1107, 1
  %1109 = icmp eq i32 %1108, 0
  br i1 %1109, label %1118, label %1110

; <label>:1110                                    ; preds = %1105
  %1111 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 2
  %1112 = load i32* %1111, align 4
  %1113 = and i32 %1112, 131072
  %1114 = icmp eq i32 %1113, 0
  br i1 %1114, label %1115, label %1118

; <label>:1115                                    ; preds = %1110
  %1116 = and i32 %1097, 16
  %1117 = icmp eq i32 %1116, 0
  br i1 %1117, label %1118, label %1120

; <label>:1118                                    ; preds = %1115, %1110, %1105
  %1119 = or i32 %1101, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:1120                                    ; preds = %1115
  %1121 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 3, i32 1
  %1122 = load i32* %1121, align 4
  %1123 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 0, i32 1
  %1124 = load i32* %1123, align 4
  %1125 = or i32 %1124, %1122
  %1126 = getelementptr inbounds %struct.CPUX86State* %1078, i64 0, i32 9, i64 2, i32 1
  %1127 = load i32* %1126, align 4
  %1128 = or i32 %1125, %1127
  %1129 = icmp ne i32 %1128, 0
  %1130 = zext i1 %1129 to i32
  %1131 = shl nuw nsw i32 %1130, 6
  %1132 = or i32 %1131, %1101
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %1120, %1118, %1096
  %new_hflags.0.i = phi i32 [ %1101, %1096 ], [ %1119, %1118 ], [ %1132, %1120 ]
  %1133 = and i32 %1097, -97
  %1134 = or i32 %new_hflags.0.i, %1133
  store i32 %1134, i32* %1102, align 4
  %indvars.iv.next220 = add i64 %indvars.iv219, 1
  %lftr.wideiv221 = trunc i64 %indvars.iv.next220 to i32
  %exitcond222 = icmp eq i32 %lftr.wideiv221, 6
  br i1 %exitcond222, label %.loopexit, label %1077

.loopexit:                                        ; preds = %cpu_x86_load_seg_cache.exit, %1063
  %1135 = and i32 %new_ldt.0, 65531
  %1136 = load %struct.CPUX86State** @env, align 8
  %1137 = getelementptr inbounds %struct.CPUX86State* %1136, i64 0, i32 10, i32 0
  store i32 %1135, i32* %1137, align 4
  %1138 = load %struct.CPUX86State** @env, align 8
  %1139 = getelementptr inbounds %struct.CPUX86State* %1138, i64 0, i32 10, i32 1
  store i32 0, i32* %1139, align 4
  %1140 = load %struct.CPUX86State** @env, align 8
  %1141 = getelementptr inbounds %struct.CPUX86State* %1140, i64 0, i32 10, i32 2
  store i32 0, i32* %1141, align 4
  %1142 = load %struct.CPUX86State** @env, align 8
  %1143 = getelementptr inbounds %struct.CPUX86State* %1142, i64 0, i32 10, i32 3
  store i32 0, i32* %1143, align 4
  %1144 = and i32 %new_ldt.0, 4
  %1145 = icmp eq i32 %1144, 0
  %1146 = and i32 %new_ldt.0, 65532
  br i1 %1145, label %1148, label %1147

; <label>:1147                                    ; preds = %.loopexit
  call fastcc void @raise_exception_err(i32 10, i32 %1146) noreturn
  unreachable

; <label>:1148                                    ; preds = %.loopexit
  %1149 = icmp eq i32 %1146, 0
  br i1 %1149, label %1212, label %1150

; <label>:1150                                    ; preds = %1148
  %1151 = load %struct.CPUX86State** @env, align 8
  %1152 = or i32 %new_ldt.0, 7
  %1153 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 12, i32 2
  %1154 = load i32* %1153, align 4
  %1155 = icmp ugt i32 %1152, %1154
  br i1 %1155, label %1156, label %1157

; <label>:1156                                    ; preds = %1150
  call fastcc void @raise_exception_err(i32 10, i32 %1146) noreturn
  unreachable

; <label>:1157                                    ; preds = %1150
  %1158 = and i32 %new_ldt.0, 65528
  %1159 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 12, i32 1
  %1160 = load i32* %1159, align 4
  %1161 = add i32 %1160, %1158
  %1162 = lshr i32 %1161, 12
  %1163 = and i32 %1162, 255
  %1164 = zext i32 %1163 to i64
  %1165 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 71, i64 0, i64 %1164, i32 0
  %1166 = load i32* %1165, align 4
  %1167 = and i32 %1161, -4093
  %1168 = icmp eq i32 %1166, %1167
  %1169 = zext i32 %1161 to i64
  br i1 %1168, label %1170, label %ldl_kernel.exit128, !prof !0

; <label>:1170                                    ; preds = %1157
  %1171 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 71, i64 0, i64 %1164, i32 3
  %1172 = load i64* %1171, align 8
  %1173 = add i64 %1172, %1169
  br label %ldl_kernel.exit128

ldl_kernel.exit128:                               ; preds = %1170, %1157
  %res.0.in.in.i125 = phi i64 [ %1173, %1170 ], [ %1169, %1157 ]
  %res.0.in.i126 = inttoptr i64 %res.0.in.in.i125 to i32*
  %res.0.i127 = load i32* %res.0.in.i126, align 4
  %1174 = add i32 %1161, 4
  %1175 = lshr i32 %1174, 12
  %1176 = and i32 %1175, 255
  %1177 = zext i32 %1176 to i64
  %1178 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 71, i64 0, i64 %1177, i32 0
  %1179 = load i32* %1178, align 4
  %1180 = and i32 %1174, -4093
  %1181 = icmp eq i32 %1179, %1180
  %1182 = zext i32 %1174 to i64
  br i1 %1181, label %1183, label %ldl_kernel.exit124, !prof !0

; <label>:1183                                    ; preds = %ldl_kernel.exit128
  %1184 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 71, i64 0, i64 %1177, i32 3
  %1185 = load i64* %1184, align 8
  %1186 = add i64 %1185, %1182
  br label %ldl_kernel.exit124

ldl_kernel.exit124:                               ; preds = %1183, %ldl_kernel.exit128
  %res.0.in.in.i121 = phi i64 [ %1186, %1183 ], [ %1182, %ldl_kernel.exit128 ]
  %res.0.in.i122 = inttoptr i64 %res.0.in.in.i121 to i32*
  %res.0.i123 = load i32* %res.0.in.i122, align 4
  %1187 = and i32 %res.0.i123, 7936
  %1188 = icmp eq i32 %1187, 512
  br i1 %1188, label %1190, label %1189

; <label>:1189                                    ; preds = %ldl_kernel.exit124
  call fastcc void @raise_exception_err(i32 10, i32 %1146) noreturn
  unreachable

; <label>:1190                                    ; preds = %ldl_kernel.exit124
  %1191 = and i32 %res.0.i123, 32768
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1193, label %1194

; <label>:1193                                    ; preds = %1190
  call fastcc void @raise_exception_err(i32 10, i32 %1146) noreturn
  unreachable

; <label>:1194                                    ; preds = %1190
  %1195 = lshr i32 %res.0.i127, 16
  %1196 = shl i32 %res.0.i123, 16
  %1197 = and i32 %1196, 16711680
  %1198 = and i32 %res.0.i123, -16777216
  %1199 = or i32 %1198, %1195
  %1200 = or i32 %1199, %1197
  %1201 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 10, i32 1
  store i32 %1200, i32* %1201, align 4
  %1202 = and i32 %res.0.i127, 65535
  %1203 = and i32 %res.0.i123, 983040
  %1204 = or i32 %1203, %1202
  %1205 = and i32 %res.0.i123, 8388608
  %1206 = icmp eq i32 %1205, 0
  br i1 %1206, label %load_seg_cache_raw_dt.exit, label %1207

; <label>:1207                                    ; preds = %1194
  %1208 = shl nuw i32 %1204, 12
  %1209 = or i32 %1208, 4095
  br label %load_seg_cache_raw_dt.exit

load_seg_cache_raw_dt.exit:                       ; preds = %1207, %1194
  %limit.0.i.i = phi i32 [ %1209, %1207 ], [ %1204, %1194 ]
  %1210 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 10, i32 2
  store i32 %limit.0.i.i, i32* %1210, align 4
  %1211 = getelementptr inbounds %struct.CPUX86State* %1151, i64 0, i32 10, i32 3
  store i32 %res.0.i123, i32* %1211, align 4
  br label %1212

; <label>:1212                                    ; preds = %load_seg_cache_raw_dt.exit, %1148
  br i1 %1003, label %1226, label %1213

; <label>:1213                                    ; preds = %1212
  %1214 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 1
  %1215 = load i32* %1214, align 4
  call fastcc void @tss_load_seg(i32 1, i32 %1215)
  %1216 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 2
  %1217 = load i32* %1216, align 8
  call fastcc void @tss_load_seg(i32 2, i32 %1217)
  %1218 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 0
  %1219 = load i32* %1218, align 16
  call fastcc void @tss_load_seg(i32 0, i32 %1219)
  %1220 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 3
  %1221 = load i32* %1220, align 4
  call fastcc void @tss_load_seg(i32 3, i32 %1221)
  %1222 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 4
  %1223 = load i32* %1222, align 16
  call fastcc void @tss_load_seg(i32 4, i32 %1223)
  %1224 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 5
  %1225 = load i32* %1224, align 4
  call fastcc void @tss_load_seg(i32 5, i32 %1225)
  br label %1226

; <label>:1226                                    ; preds = %1213, %1212
  %1227 = load %struct.CPUX86State** @env, align 8
  %1228 = getelementptr inbounds %struct.CPUX86State* %1227, i64 0, i32 9, i64 1, i32 2
  %1229 = load i32* %1228, align 4
  %1230 = icmp ugt i32 %new_eip.0, %1229
  br i1 %1230, label %1231, label %1232

; <label>:1231                                    ; preds = %1226
  call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:1232                                    ; preds = %1226
  %1233 = getelementptr inbounds %struct.CPUX86State* %1227, i64 0, i32 59, i64 7
  %1234 = load i32* %1233, align 4
  %1235 = and i32 %1234, 85
  %1236 = icmp eq i32 %1235, 0
  br i1 %1236, label %1245, label %.preheader

.preheader:                                       ; preds = %1232
  %1237 = and i32 %1234, 3
  %1238 = icmp eq i32 %1237, 1
  br i1 %1238, label %1239, label %1240

; <label>:1239                                    ; preds = %.preheader
  call void @hw_breakpoint_remove(%struct.CPUX86State* %1227, i32 0) nounwind
  %.pre = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert = getelementptr inbounds %struct.CPUX86State* %.pre, i64 0, i32 59, i64 7
  %.pre247 = load i32* %.phi.trans.insert, align 4
  br label %1240

; <label>:1240                                    ; preds = %1239, %.preheader
  %1241 = phi i32 [ %1234, %.preheader ], [ %.pre247, %1239 ]
  %1242 = phi %struct.CPUX86State* [ %1227, %.preheader ], [ %.pre, %1239 ]
  %1243 = and i32 %1241, 12
  %1244 = icmp eq i32 %1243, 4
  br i1 %1244, label %1246, label %1247

; <label>:1245                                    ; preds = %1259, %1232
  ret void

; <label>:1246                                    ; preds = %1240
  call void @hw_breakpoint_remove(%struct.CPUX86State* %1242, i32 1) nounwind
  %.pre248 = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert249 = getelementptr inbounds %struct.CPUX86State* %.pre248, i64 0, i32 59, i64 7
  %.pre250 = load i32* %.phi.trans.insert249, align 4
  br label %1247

; <label>:1247                                    ; preds = %1246, %1240
  %1248 = phi i32 [ %.pre250, %1246 ], [ %1241, %1240 ]
  %1249 = phi %struct.CPUX86State* [ %.pre248, %1246 ], [ %1242, %1240 ]
  %1250 = and i32 %1248, 48
  %1251 = icmp eq i32 %1250, 16
  br i1 %1251, label %1252, label %1253

; <label>:1252                                    ; preds = %1247
  call void @hw_breakpoint_remove(%struct.CPUX86State* %1249, i32 2) nounwind
  %.pre251 = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert252 = getelementptr inbounds %struct.CPUX86State* %.pre251, i64 0, i32 59, i64 7
  %.pre253 = load i32* %.phi.trans.insert252, align 4
  br label %1253

; <label>:1253                                    ; preds = %1252, %1247
  %1254 = phi i32 [ %.pre253, %1252 ], [ %1248, %1247 ]
  %1255 = phi %struct.CPUX86State* [ %.pre251, %1252 ], [ %1249, %1247 ]
  %1256 = and i32 %1254, 192
  %1257 = icmp eq i32 %1256, 64
  br i1 %1257, label %1258, label %1259

; <label>:1258                                    ; preds = %1253
  call void @hw_breakpoint_remove(%struct.CPUX86State* %1255, i32 3) nounwind
  %.pre254 = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert255 = getelementptr inbounds %struct.CPUX86State* %.pre254, i64 0, i32 59, i64 7
  %.pre256 = load i32* %.phi.trans.insert255, align 4
  br label %1259

; <label>:1259                                    ; preds = %1258, %1253
  %1260 = phi i32 [ %.pre256, %1258 ], [ %1254, %1253 ]
  %1261 = phi %struct.CPUX86State* [ %.pre254, %1258 ], [ %1255, %1253 ]
  %1262 = getelementptr inbounds %struct.CPUX86State* %1261, i64 0, i32 59, i64 7
  %1263 = and i32 %1260, -86
  store i32 %1263, i32* %1262, align 4
  br label %1245

; <label>:1264                                    ; preds = %stw_kernel.exit141
  %1265 = trunc i32 %862 to i16
  %1266 = zext i32 %860 to i64
  %1267 = inttoptr i64 %1266 to i16*
  store i16 %1265, i16* %1267, align 2
  br label %stw_kernel.exit141.1

; <label>:1268                                    ; preds = %stw_kernel.exit141
  %1269 = zext i32 %860 to i64
  %1270 = getelementptr inbounds %struct.CPUX86State* %857, i64 0, i32 71, i64 0, i64 %865, i32 3
  %1271 = load i64* %1270, align 8
  %1272 = add i64 %1271, %1269
  %1273 = trunc i32 %862 to i16
  %1274 = inttoptr i64 %1272 to i16*
  store i16 %1273, i16* %1274, align 2
  br label %stw_kernel.exit141.1

stw_kernel.exit141.1:                             ; preds = %1268, %1264
  %1275 = load %struct.CPUX86State** @env, align 8
  %1276 = getelementptr inbounds %struct.CPUX86State* %1275, i64 0, i32 11, i32 1
  %1277 = load i32* %1276, align 4
  %1278 = add i32 %1277, 42
  %1279 = getelementptr inbounds %struct.CPUX86State* %1275, i64 0, i32 9, i64 2, i32 0
  %1280 = load i32* %1279, align 4
  %1281 = lshr i32 %1278, 12
  %1282 = and i32 %1281, 255
  %1283 = zext i32 %1282 to i64
  %1284 = getelementptr inbounds %struct.CPUX86State* %1275, i64 0, i32 71, i64 0, i64 %1283, i32 1
  %1285 = load i32* %1284, align 4
  %1286 = and i32 %1278, -4095
  %1287 = icmp eq i32 %1285, %1286
  br i1 %1287, label %1292, label %1288, !prof !0

; <label>:1288                                    ; preds = %stw_kernel.exit141.1
  %1289 = trunc i32 %1280 to i16
  %1290 = zext i32 %1278 to i64
  %1291 = inttoptr i64 %1290 to i16*
  store i16 %1289, i16* %1291, align 2
  br label %stw_kernel.exit141.2

; <label>:1292                                    ; preds = %stw_kernel.exit141.1
  %1293 = zext i32 %1278 to i64
  %1294 = getelementptr inbounds %struct.CPUX86State* %1275, i64 0, i32 71, i64 0, i64 %1283, i32 3
  %1295 = load i64* %1294, align 8
  %1296 = add i64 %1295, %1293
  %1297 = trunc i32 %1280 to i16
  %1298 = inttoptr i64 %1296 to i16*
  store i16 %1297, i16* %1298, align 2
  br label %stw_kernel.exit141.2

stw_kernel.exit141.2:                             ; preds = %1292, %1288
  %1299 = load %struct.CPUX86State** @env, align 8
  %1300 = getelementptr inbounds %struct.CPUX86State* %1299, i64 0, i32 11, i32 1
  %1301 = load i32* %1300, align 4
  %1302 = add i32 %1301, 46
  %1303 = getelementptr inbounds %struct.CPUX86State* %1299, i64 0, i32 9, i64 3, i32 0
  %1304 = load i32* %1303, align 4
  %1305 = lshr i32 %1302, 12
  %1306 = and i32 %1305, 255
  %1307 = zext i32 %1306 to i64
  %1308 = getelementptr inbounds %struct.CPUX86State* %1299, i64 0, i32 71, i64 0, i64 %1307, i32 1
  %1309 = load i32* %1308, align 4
  %1310 = and i32 %1302, -4095
  %1311 = icmp eq i32 %1309, %1310
  br i1 %1311, label %1316, label %1312, !prof !0

; <label>:1312                                    ; preds = %stw_kernel.exit141.2
  %1313 = trunc i32 %1304 to i16
  %1314 = zext i32 %1302 to i64
  %1315 = inttoptr i64 %1314 to i16*
  store i16 %1313, i16* %1315, align 2
  br label %.loopexit208

; <label>:1316                                    ; preds = %stw_kernel.exit141.2
  %1317 = zext i32 %1302 to i64
  %1318 = getelementptr inbounds %struct.CPUX86State* %1299, i64 0, i32 71, i64 0, i64 %1307, i32 3
  %1319 = load i64* %1318, align 8
  %1320 = add i64 %1319, %1317
  %1321 = trunc i32 %1304 to i16
  %1322 = inttoptr i64 %1320 to i16*
  store i16 %1321, i16* %1322, align 2
  br label %.loopexit208

; <label>:1323                                    ; preds = %lduw_kernel.exit
  %1324 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %174, i32 3
  %1325 = load i64* %1324, align 8
  %1326 = add i64 %1325, %179
  br label %lduw_kernel.exit.1

lduw_kernel.exit.1:                               ; preds = %1323, %lduw_kernel.exit
  %.sink.in.in.i.1 = phi i64 [ %1326, %1323 ], [ %179, %lduw_kernel.exit ]
  %.sink.in.i.1 = inttoptr i64 %.sink.in.in.i.1 to i16*
  %.sink.i.1 = load i16* %.sink.in.i.1, align 2
  %1327 = zext i16 %.sink.i.1 to i32
  %1328 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 1
  store i32 %1327, i32* %1328, align 4
  %1329 = add i32 %86, 80
  %1330 = lshr i32 %1329, 12
  %1331 = and i32 %1330, 255
  %1332 = zext i32 %1331 to i64
  %1333 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1332, i32 0
  %1334 = load i32* %1333, align 4
  %1335 = and i32 %1329, -4095
  %1336 = icmp eq i32 %1334, %1335
  %1337 = zext i32 %1329 to i64
  br i1 %1336, label %1338, label %lduw_kernel.exit.2, !prof !0

; <label>:1338                                    ; preds = %lduw_kernel.exit.1
  %1339 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1332, i32 3
  %1340 = load i64* %1339, align 8
  %1341 = add i64 %1340, %1337
  br label %lduw_kernel.exit.2

lduw_kernel.exit.2:                               ; preds = %1338, %lduw_kernel.exit.1
  %.sink.in.in.i.2 = phi i64 [ %1341, %1338 ], [ %1337, %lduw_kernel.exit.1 ]
  %.sink.in.i.2 = inttoptr i64 %.sink.in.in.i.2 to i16*
  %.sink.i.2 = load i16* %.sink.in.i.2, align 2
  %1342 = zext i16 %.sink.i.2 to i32
  %1343 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 2
  store i32 %1342, i32* %1343, align 8
  %1344 = add i32 %86, 84
  %1345 = lshr i32 %1344, 12
  %1346 = and i32 %1345, 255
  %1347 = zext i32 %1346 to i64
  %1348 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1347, i32 0
  %1349 = load i32* %1348, align 4
  %1350 = and i32 %1344, -4095
  %1351 = icmp eq i32 %1349, %1350
  %1352 = zext i32 %1344 to i64
  br i1 %1351, label %1353, label %lduw_kernel.exit.3, !prof !0

; <label>:1353                                    ; preds = %lduw_kernel.exit.2
  %1354 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1347, i32 3
  %1355 = load i64* %1354, align 8
  %1356 = add i64 %1355, %1352
  br label %lduw_kernel.exit.3

lduw_kernel.exit.3:                               ; preds = %1353, %lduw_kernel.exit.2
  %.sink.in.in.i.3 = phi i64 [ %1356, %1353 ], [ %1352, %lduw_kernel.exit.2 ]
  %.sink.in.i.3 = inttoptr i64 %.sink.in.in.i.3 to i16*
  %.sink.i.3 = load i16* %.sink.in.i.3, align 2
  %1357 = zext i16 %.sink.i.3 to i32
  %1358 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 3
  store i32 %1357, i32* %1358, align 4
  %1359 = add i32 %86, 88
  %1360 = lshr i32 %1359, 12
  %1361 = and i32 %1360, 255
  %1362 = zext i32 %1361 to i64
  %1363 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1362, i32 0
  %1364 = load i32* %1363, align 4
  %1365 = and i32 %1359, -4095
  %1366 = icmp eq i32 %1364, %1365
  %1367 = zext i32 %1359 to i64
  br i1 %1366, label %1368, label %lduw_kernel.exit.4, !prof !0

; <label>:1368                                    ; preds = %lduw_kernel.exit.3
  %1369 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1362, i32 3
  %1370 = load i64* %1369, align 8
  %1371 = add i64 %1370, %1367
  br label %lduw_kernel.exit.4

lduw_kernel.exit.4:                               ; preds = %1368, %lduw_kernel.exit.3
  %.sink.in.in.i.4 = phi i64 [ %1371, %1368 ], [ %1367, %lduw_kernel.exit.3 ]
  %.sink.in.i.4 = inttoptr i64 %.sink.in.in.i.4 to i16*
  %.sink.i.4 = load i16* %.sink.in.i.4, align 2
  %1372 = zext i16 %.sink.i.4 to i32
  %1373 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 4
  store i32 %1372, i32* %1373, align 16
  %1374 = add i32 %86, 92
  %1375 = lshr i32 %1374, 12
  %1376 = and i32 %1375, 255
  %1377 = zext i32 %1376 to i64
  %1378 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1377, i32 0
  %1379 = load i32* %1378, align 4
  %1380 = and i32 %1374, -4095
  %1381 = icmp eq i32 %1379, %1380
  %1382 = zext i32 %1374 to i64
  br i1 %1381, label %1383, label %lduw_kernel.exit.5, !prof !0

; <label>:1383                                    ; preds = %lduw_kernel.exit.4
  %1384 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1377, i32 3
  %1385 = load i64* %1384, align 8
  %1386 = add i64 %1385, %1382
  br label %lduw_kernel.exit.5

lduw_kernel.exit.5:                               ; preds = %1383, %lduw_kernel.exit.4
  %.sink.in.in.i.5 = phi i64 [ %1386, %1383 ], [ %1382, %lduw_kernel.exit.4 ]
  %.sink.in.i.5 = inttoptr i64 %.sink.in.in.i.5 to i16*
  %.sink.i.5 = load i16* %.sink.in.i.5, align 2
  %1387 = zext i16 %.sink.i.5 to i32
  %1388 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 5
  store i32 %1387, i32* %1388, align 4
  %1389 = add i32 %86, 96
  %1390 = lshr i32 %1389, 12
  %1391 = and i32 %1390, 255
  %1392 = zext i32 %1391 to i64
  %1393 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1392, i32 0
  %1394 = load i32* %1393, align 4
  %1395 = and i32 %1389, -4095
  %1396 = icmp eq i32 %1394, %1395
  %1397 = zext i32 %1389 to i64
  br i1 %1396, label %180, label %lduw_kernel.exit120, !prof !0

; <label>:1398                                    ; preds = %lduw_kernel.exit187
  %1399 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %251, i32 3
  %1400 = load i64* %1399, align 8
  %1401 = add i64 %1400, %256
  br label %lduw_kernel.exit187.1

lduw_kernel.exit187.1:                            ; preds = %1398, %lduw_kernel.exit187
  %.sink.in.in.i184.1 = phi i64 [ %1401, %1398 ], [ %256, %lduw_kernel.exit187 ]
  %.sink.in.i185.1 = inttoptr i64 %.sink.in.in.i184.1 to i16*
  %.sink.i186.1 = load i16* %.sink.in.i185.1, align 2
  %1402 = zext i16 %.sink.i186.1 to i32
  %1403 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 1
  store i32 %1402, i32* %1403, align 4
  %1404 = add i32 %86, 42
  %1405 = lshr i32 %1404, 12
  %1406 = and i32 %1405, 255
  %1407 = zext i32 %1406 to i64
  %1408 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1407, i32 0
  %1409 = load i32* %1408, align 4
  %1410 = and i32 %1404, -4095
  %1411 = icmp eq i32 %1409, %1410
  %1412 = zext i32 %1404 to i64
  br i1 %1411, label %1413, label %lduw_kernel.exit187.2, !prof !0

; <label>:1413                                    ; preds = %lduw_kernel.exit187.1
  %1414 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1407, i32 3
  %1415 = load i64* %1414, align 8
  %1416 = add i64 %1415, %1412
  br label %lduw_kernel.exit187.2

lduw_kernel.exit187.2:                            ; preds = %1413, %lduw_kernel.exit187.1
  %.sink.in.in.i184.2 = phi i64 [ %1416, %1413 ], [ %1412, %lduw_kernel.exit187.1 ]
  %.sink.in.i185.2 = inttoptr i64 %.sink.in.in.i184.2 to i16*
  %.sink.i186.2 = load i16* %.sink.in.i185.2, align 2
  %1417 = zext i16 %.sink.i186.2 to i32
  %1418 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 2
  store i32 %1417, i32* %1418, align 8
  %1419 = add i32 %86, 46
  %1420 = lshr i32 %1419, 12
  %1421 = and i32 %1420, 255
  %1422 = zext i32 %1421 to i64
  %1423 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1422, i32 0
  %1424 = load i32* %1423, align 4
  %1425 = and i32 %1419, -4095
  %1426 = icmp eq i32 %1424, %1425
  %1427 = zext i32 %1419 to i64
  br i1 %1426, label %1428, label %lduw_kernel.exit187.3, !prof !0

; <label>:1428                                    ; preds = %lduw_kernel.exit187.2
  %1429 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1422, i32 3
  %1430 = load i64* %1429, align 8
  %1431 = add i64 %1430, %1427
  br label %lduw_kernel.exit187.3

lduw_kernel.exit187.3:                            ; preds = %1428, %lduw_kernel.exit187.2
  %.sink.in.in.i184.3 = phi i64 [ %1431, %1428 ], [ %1427, %lduw_kernel.exit187.2 ]
  %.sink.in.i185.3 = inttoptr i64 %.sink.in.in.i184.3 to i16*
  %.sink.i186.3 = load i16* %.sink.in.i185.3, align 2
  %1432 = zext i16 %.sink.i186.3 to i32
  %1433 = getelementptr inbounds [6 x i32]* %new_segs, i64 0, i64 3
  store i32 %1432, i32* %1433, align 4
  %1434 = add i32 %86, 42
  %1435 = lshr i32 %1434, 12
  %1436 = and i32 %1435, 255
  %1437 = zext i32 %1436 to i64
  %1438 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 71, i64 0, i64 %1437, i32 0
  %1439 = load i32* %1438, align 4
  %1440 = and i32 %1434, -4095
  %1441 = icmp eq i32 %1439, %1440
  %1442 = zext i32 %1434 to i64
  br i1 %1441, label %257, label %lduw_kernel.exit183, !prof !0
}

define void @helper_lcall_real(i32 %new_cs, i32 %new_eip1, i32 %shift, i32 %next_eip) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %5 = load i32* %4, align 4
  %6 = lshr i32 %5, 6
  %7 = and i32 %6, 65536
  %8 = xor i32 %7, 65536
  %9 = add i32 %8, -1
  %10 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %11 = load i32* %10, align 4
  %12 = icmp eq i32 %shift, 0
  br i1 %12, label %53, label %13

; <label>:13                                      ; preds = %0
  %14 = add i32 %3, -4
  %15 = and i32 %9, %14
  %16 = add i32 %15, %11
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 0
  %18 = load i32* %17, align 4
  %19 = lshr i32 %16, 12
  %20 = and i32 %19, 255
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %21, i32 1
  %23 = load i32* %22, align 4
  %24 = and i32 %16, -4093
  %25 = icmp eq i32 %23, %24
  %26 = zext i32 %16 to i64
  br i1 %25, label %29, label %27, !prof !0

; <label>:27                                      ; preds = %13
  %28 = inttoptr i64 %26 to i32*
  store i32 %18, i32* %28, align 4
  br label %stl_kernel.exit22

; <label>:29                                      ; preds = %13
  %30 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %21, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %26
  %33 = inttoptr i64 %32 to i32*
  store i32 %18, i32* %33, align 4
  br label %stl_kernel.exit22

stl_kernel.exit22:                                ; preds = %29, %27
  %34 = add i32 %3, -8
  %35 = and i32 %9, %34
  %36 = add i32 %35, %11
  %37 = lshr i32 %36, 12
  %38 = and i32 %37, 255
  %39 = zext i32 %38 to i64
  %40 = load %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State* %40, i64 0, i32 71, i64 0, i64 %39, i32 1
  %42 = load i32* %41, align 4
  %43 = and i32 %36, -4093
  %44 = icmp eq i32 %42, %43
  %45 = zext i32 %36 to i64
  br i1 %44, label %48, label %46, !prof !0

; <label>:46                                      ; preds = %stl_kernel.exit22
  %47 = inttoptr i64 %45 to i32*
  store i32 %next_eip, i32* %47, align 4
  br label %stl_kernel.exit

; <label>:48                                      ; preds = %stl_kernel.exit22
  %49 = getelementptr inbounds %struct.CPUX86State* %40, i64 0, i32 71, i64 0, i64 %39, i32 3
  %50 = load i64* %49, align 8
  %51 = add i64 %50, %45
  %52 = inttoptr i64 %51 to i32*
  store i32 %next_eip, i32* %52, align 4
  br label %stl_kernel.exit

; <label>:53                                      ; preds = %0
  %54 = add i32 %3, -2
  %55 = and i32 %9, %54
  %56 = add i32 %55, %11
  %57 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 0
  %58 = load i32* %57, align 4
  %59 = lshr i32 %56, 12
  %60 = and i32 %59, 255
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %61, i32 1
  %63 = load i32* %62, align 4
  %64 = and i32 %56, -4095
  %65 = icmp eq i32 %63, %64
  br i1 %65, label %70, label %66, !prof !0

; <label>:66                                      ; preds = %53
  %67 = trunc i32 %58 to i16
  %68 = zext i32 %56 to i64
  %69 = inttoptr i64 %68 to i16*
  store i16 %67, i16* %69, align 2
  br label %stw_kernel.exit21

; <label>:70                                      ; preds = %53
  %71 = zext i32 %56 to i64
  %72 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %61, i32 3
  %73 = load i64* %72, align 8
  %74 = add i64 %73, %71
  %75 = trunc i32 %58 to i16
  %76 = inttoptr i64 %74 to i16*
  store i16 %75, i16* %76, align 2
  br label %stw_kernel.exit21

stw_kernel.exit21:                                ; preds = %70, %66
  %77 = add i32 %3, -4
  %78 = and i32 %9, %77
  %79 = add i32 %78, %11
  %80 = lshr i32 %79, 12
  %81 = and i32 %80, 255
  %82 = zext i32 %81 to i64
  %83 = load %struct.CPUX86State** @env, align 8
  %84 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 71, i64 0, i64 %82, i32 1
  %85 = load i32* %84, align 4
  %86 = and i32 %79, -4095
  %87 = icmp eq i32 %85, %86
  br i1 %87, label %92, label %88, !prof !0

; <label>:88                                      ; preds = %stw_kernel.exit21
  %89 = trunc i32 %next_eip to i16
  %90 = zext i32 %79 to i64
  %91 = inttoptr i64 %90 to i16*
  store i16 %89, i16* %91, align 2
  br label %stl_kernel.exit

; <label>:92                                      ; preds = %stw_kernel.exit21
  %93 = zext i32 %79 to i64
  %94 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 71, i64 0, i64 %82, i32 3
  %95 = load i64* %94, align 8
  %96 = add i64 %95, %93
  %97 = trunc i32 %next_eip to i16
  %98 = inttoptr i64 %96 to i16*
  store i16 %97, i16* %98, align 2
  br label %stl_kernel.exit

stl_kernel.exit:                                  ; preds = %92, %88, %48, %46
  %esp.0 = phi i32 [ %34, %46 ], [ %34, %48 ], [ %77, %88 ], [ %77, %92 ]
  %99 = load %struct.CPUX86State** @env, align 8
  %100 = getelementptr inbounds %struct.CPUX86State* %99, i64 0, i32 0, i64 4
  %101 = load i32* %100, align 4
  %102 = sub i32 0, %8
  %103 = and i32 %101, %102
  %104 = and i32 %esp.0, %9
  %105 = or i32 %103, %104
  store i32 %105, i32* %100, align 4
  %106 = load %struct.CPUX86State** @env, align 8
  %107 = getelementptr inbounds %struct.CPUX86State* %106, i64 0, i32 1
  store i32 %new_eip1, i32* %107, align 4
  %108 = load %struct.CPUX86State** @env, align 8
  %109 = getelementptr inbounds %struct.CPUX86State* %108, i64 0, i32 9, i64 1, i32 0
  store i32 %new_cs, i32* %109, align 4
  %110 = shl i32 %new_cs, 4
  %111 = load %struct.CPUX86State** @env, align 8
  %112 = getelementptr inbounds %struct.CPUX86State* %111, i64 0, i32 9, i64 1, i32 1
  store i32 %110, i32* %112, align 4
  ret void
}

define void @helper_lcall_protected(i32 %new_cs, i32 %new_eip, i32 %shift, i32 %next_eip_addend) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32* %2, align 4
  %4 = add i32 %3, %next_eip_addend
  %5 = and i32 %new_cs, 65532
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:8                                       ; preds = %0
  %9 = and i32 %new_cs, 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i = select i1 %10, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %13 = or i32 %new_cs, 7
  %14 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %15 = load i32* %14, align 4
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %47, label %17

; <label>:17                                      ; preds = %8
  %18 = and i32 %new_cs, -8
  %19 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %20 = load i32* %19, align 4
  %21 = add i32 %20, %18
  %22 = lshr i32 %21, 12
  %23 = and i32 %22, 255
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %24, i32 0
  %26 = load i32* %25, align 4
  %27 = and i32 %21, -4093
  %28 = icmp eq i32 %26, %27
  %29 = zext i32 %21 to i64
  br i1 %28, label %30, label %ldl_kernel.exit.i, !prof !0

; <label>:30                                      ; preds = %17
  %31 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %24, i32 3
  %32 = load i64* %31, align 8
  %33 = add i64 %32, %29
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %30, %17
  %res.0.in.in.i.i = phi i64 [ %33, %30 ], [ %29, %17 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %34 = add i32 %21, 4
  %35 = lshr i32 %34, 12
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %37, i32 0
  %39 = load i32* %38, align 4
  %40 = and i32 %34, -4093
  %41 = icmp eq i32 %39, %40
  %42 = zext i32 %34 to i64
  br i1 %41, label %43, label %48, !prof !0

; <label>:43                                      ; preds = %ldl_kernel.exit.i
  %44 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %37, i32 3
  %45 = load i64* %44, align 8
  %46 = add i64 %45, %42
  br label %48

; <label>:47                                      ; preds = %8
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:48                                      ; preds = %43, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %46, %43 ], [ %42, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %49 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %50 = load i32* %49, align 4
  %51 = and i32 %50, 3
  %52 = and i32 %res.0.i10.i, 4096
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %245, label %54

; <label>:54                                      ; preds = %48
  %55 = and i32 %res.0.i10.i, 2048
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

; <label>:57                                      ; preds = %54
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:58                                      ; preds = %54
  %59 = lshr i32 %res.0.i10.i, 13
  %60 = and i32 %59, 3
  %61 = and i32 %res.0.i10.i, 1024
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %66, label %63

; <label>:63                                      ; preds = %58
  %64 = icmp ugt i32 %60, %51
  br i1 %64, label %65, label %73

; <label>:65                                      ; preds = %63
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:66                                      ; preds = %58
  %67 = and i32 %new_cs, 3
  %68 = icmp ugt i32 %67, %51
  br i1 %68, label %69, label %70

; <label>:69                                      ; preds = %66
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:70                                      ; preds = %66
  %71 = icmp eq i32 %60, %51
  br i1 %71, label %73, label %72

; <label>:72                                      ; preds = %70
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:73                                      ; preds = %70, %63
  %74 = and i32 %res.0.i10.i, 32768
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

; <label>:76                                      ; preds = %73
  tail call fastcc void @raise_exception_err(i32 11, i32 %5) noreturn
  unreachable

; <label>:77                                      ; preds = %73
  %78 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %79 = load i32* %78, align 4
  %80 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %81 = load i32* %80, align 4
  %82 = lshr i32 %81, 6
  %83 = and i32 %82, 65536
  %84 = xor i32 %83, 65536
  %85 = add i32 %84, -1
  %86 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %87 = load i32* %86, align 4
  %88 = icmp eq i32 %shift, 0
  br i1 %88, label %129, label %89

; <label>:89                                      ; preds = %77
  %90 = add i32 %79, -4
  %91 = and i32 %85, %90
  %92 = add i32 %91, %87
  %93 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 0
  %94 = load i32* %93, align 4
  %95 = lshr i32 %92, 12
  %96 = and i32 %95, 255
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %97, i32 1
  %99 = load i32* %98, align 4
  %100 = and i32 %92, -4093
  %101 = icmp eq i32 %99, %100
  %102 = zext i32 %92 to i64
  br i1 %101, label %105, label %103, !prof !0

; <label>:103                                     ; preds = %89
  %104 = inttoptr i64 %102 to i32*
  store i32 %94, i32* %104, align 4
  br label %stl_kernel.exit118

; <label>:105                                     ; preds = %89
  %106 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %97, i32 3
  %107 = load i64* %106, align 8
  %108 = add i64 %107, %102
  %109 = inttoptr i64 %108 to i32*
  store i32 %94, i32* %109, align 4
  br label %stl_kernel.exit118

stl_kernel.exit118:                               ; preds = %105, %103
  %110 = add i32 %79, -8
  %111 = and i32 %85, %110
  %112 = add i32 %111, %87
  %113 = lshr i32 %112, 12
  %114 = and i32 %113, 255
  %115 = zext i32 %114 to i64
  %116 = load %struct.CPUX86State** @env, align 8
  %117 = getelementptr inbounds %struct.CPUX86State* %116, i64 0, i32 71, i64 0, i64 %115, i32 1
  %118 = load i32* %117, align 4
  %119 = and i32 %112, -4093
  %120 = icmp eq i32 %118, %119
  %121 = zext i32 %112 to i64
  br i1 %120, label %124, label %122, !prof !0

; <label>:122                                     ; preds = %stl_kernel.exit118
  %123 = inttoptr i64 %121 to i32*
  store i32 %4, i32* %123, align 4
  br label %stl_kernel.exit119

; <label>:124                                     ; preds = %stl_kernel.exit118
  %125 = getelementptr inbounds %struct.CPUX86State* %116, i64 0, i32 71, i64 0, i64 %115, i32 3
  %126 = load i64* %125, align 8
  %127 = add i64 %126, %121
  %128 = inttoptr i64 %127 to i32*
  store i32 %4, i32* %128, align 4
  br label %stl_kernel.exit119

; <label>:129                                     ; preds = %77
  %130 = add i32 %79, -2
  %131 = and i32 %85, %130
  %132 = add i32 %131, %87
  %133 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 0
  %134 = load i32* %133, align 4
  %135 = lshr i32 %132, 12
  %136 = and i32 %135, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %137, i32 1
  %139 = load i32* %138, align 4
  %140 = and i32 %132, -4095
  %141 = icmp eq i32 %139, %140
  br i1 %141, label %146, label %142, !prof !0

; <label>:142                                     ; preds = %129
  %143 = trunc i32 %134 to i16
  %144 = zext i32 %132 to i64
  %145 = inttoptr i64 %144 to i16*
  store i16 %143, i16* %145, align 2
  br label %stw_kernel.exit120

; <label>:146                                     ; preds = %129
  %147 = zext i32 %132 to i64
  %148 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %137, i32 3
  %149 = load i64* %148, align 8
  %150 = add i64 %149, %147
  %151 = trunc i32 %134 to i16
  %152 = inttoptr i64 %150 to i16*
  store i16 %151, i16* %152, align 2
  br label %stw_kernel.exit120

stw_kernel.exit120:                               ; preds = %146, %142
  %153 = add i32 %79, -4
  %154 = and i32 %85, %153
  %155 = add i32 %154, %87
  %156 = lshr i32 %155, 12
  %157 = and i32 %156, 255
  %158 = zext i32 %157 to i64
  %159 = load %struct.CPUX86State** @env, align 8
  %160 = getelementptr inbounds %struct.CPUX86State* %159, i64 0, i32 71, i64 0, i64 %158, i32 1
  %161 = load i32* %160, align 4
  %162 = and i32 %155, -4095
  %163 = icmp eq i32 %161, %162
  br i1 %163, label %168, label %164, !prof !0

; <label>:164                                     ; preds = %stw_kernel.exit120
  %165 = trunc i32 %4 to i16
  %166 = zext i32 %155 to i64
  %167 = inttoptr i64 %166 to i16*
  store i16 %165, i16* %167, align 2
  br label %stl_kernel.exit119

; <label>:168                                     ; preds = %stw_kernel.exit120
  %169 = zext i32 %155 to i64
  %170 = getelementptr inbounds %struct.CPUX86State* %159, i64 0, i32 71, i64 0, i64 %158, i32 3
  %171 = load i64* %170, align 8
  %172 = add i64 %171, %169
  %173 = trunc i32 %4 to i16
  %174 = inttoptr i64 %172 to i16*
  store i16 %173, i16* %174, align 2
  br label %stl_kernel.exit119

stl_kernel.exit119:                               ; preds = %168, %164, %124, %122
  %175 = phi i32 [ %110, %122 ], [ %110, %124 ], [ %153, %164 ], [ %153, %168 ]
  %176 = and i32 %res.0.i.i, 65535
  %177 = and i32 %res.0.i10.i, 983040
  %178 = or i32 %177, %176
  %179 = and i32 %res.0.i10.i, 8388608
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %get_seg_limit.exit134, label %181

; <label>:181                                     ; preds = %stl_kernel.exit119
  %182 = shl nuw i32 %178, 12
  %183 = or i32 %182, 4095
  br label %get_seg_limit.exit134

get_seg_limit.exit134:                            ; preds = %181, %stl_kernel.exit119
  %limit.0.i133 = phi i32 [ %183, %181 ], [ %178, %stl_kernel.exit119 ]
  %184 = icmp ult i32 %limit.0.i133, %new_eip
  br i1 %184, label %185, label %186

; <label>:185                                     ; preds = %get_seg_limit.exit134
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:186                                     ; preds = %get_seg_limit.exit134
  %187 = load %struct.CPUX86State** @env, align 8
  %188 = getelementptr inbounds %struct.CPUX86State* %187, i64 0, i32 0, i64 4
  %189 = load i32* %188, align 4
  %190 = sub i32 0, %84
  %191 = and i32 %189, %190
  %192 = and i32 %175, %85
  %193 = or i32 %191, %192
  store i32 %193, i32* %188, align 4
  %194 = load %struct.CPUX86State** @env, align 8
  %195 = or i32 %51, %5
  %196 = lshr i32 %res.0.i.i, 16
  %197 = shl i32 %res.0.i10.i, 16
  %198 = and i32 %197, 16711680
  %199 = and i32 %res.0.i10.i, -16777216
  %200 = or i32 %199, %196
  %201 = or i32 %200, %198
  %202 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 1, i32 0
  store i32 %195, i32* %202, align 4
  %203 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 1, i32 1
  store i32 %201, i32* %203, align 4
  %204 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i133, i32* %204, align 4
  %205 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i, i32* %205, align 4
  %206 = lshr i32 %res.0.i10.i, 18
  %207 = and i32 %206, 16
  %208 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 7
  %209 = load i32* %208, align 4
  %210 = and i32 %209, -32785
  %211 = or i32 %210, %207
  store i32 %211, i32* %208, align 4
  %212 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 2, i32 3
  %213 = load i32* %212, align 4
  %214 = lshr i32 %213, 17
  %215 = and i32 %214, 32
  %216 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 14, i64 0
  %217 = load i32* %216, align 4
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %226, label %220

; <label>:220                                     ; preds = %186
  %221 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 2
  %222 = load i32* %221, align 4
  %223 = and i32 %222, 131072
  %224 = icmp ne i32 %223, 0
  %225 = icmp eq i32 %207, 0
  %or.cond200 = or i1 %224, %225
  br i1 %or.cond200, label %226, label %228

; <label>:226                                     ; preds = %220, %186
  %227 = or i32 %215, 64
  br label %cpu_x86_load_seg_cache.exit140

; <label>:228                                     ; preds = %220
  %229 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 3, i32 1
  %230 = load i32* %229, align 4
  %231 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 0, i32 1
  %232 = load i32* %231, align 4
  %233 = or i32 %232, %230
  %234 = getelementptr inbounds %struct.CPUX86State* %194, i64 0, i32 9, i64 2, i32 1
  %235 = load i32* %234, align 4
  %236 = or i32 %233, %235
  %237 = icmp ne i32 %236, 0
  %238 = zext i1 %237 to i32
  %239 = shl nuw nsw i32 %238, 6
  %240 = or i32 %239, %215
  br label %cpu_x86_load_seg_cache.exit140

cpu_x86_load_seg_cache.exit140:                   ; preds = %228, %226
  %new_hflags.0.i139 = phi i32 [ %227, %226 ], [ %240, %228 ]
  %241 = and i32 %211, -32865
  %242 = or i32 %new_hflags.0.i139, %241
  store i32 %242, i32* %208, align 4
  %243 = load %struct.CPUX86State** @env, align 8
  %244 = getelementptr inbounds %struct.CPUX86State* %243, i64 0, i32 1
  store i32 %new_eip, i32* %244, align 4
  br label %898

; <label>:245                                     ; preds = %48
  %246 = lshr i32 %res.0.i10.i, 8
  %247 = and i32 %246, 31
  %248 = lshr i32 %res.0.i10.i, 13
  %249 = and i32 %248, 3
  %250 = and i32 %new_cs, 3
  switch i32 %247, label %258 [
    i32 1, label %251
    i32 9, label %251
    i32 5, label %251
    i32 4, label %259
    i32 12, label %259
  ]

; <label>:251                                     ; preds = %245, %245, %245
  %252 = icmp ult i32 %249, %51
  %253 = icmp ult i32 %249, %250
  %or.cond = or i1 %252, %253
  br i1 %or.cond, label %254, label %255

; <label>:254                                     ; preds = %251
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:255                                     ; preds = %251
  tail call fastcc void @switch_tss(i32 %new_cs, i32 %res.0.i.i, i32 %res.0.i10.i, i32 2, i32 %4)
  %256 = load %struct.CPUX86State** @env, align 8
  %257 = getelementptr inbounds %struct.CPUX86State* %256, i64 0, i32 5
  store i32 1, i32* %257, align 4
  br label %898

; <label>:258                                     ; preds = %245
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:259                                     ; preds = %245, %245
  %260 = lshr i32 %247, 3
  %261 = icmp ult i32 %249, %51
  %262 = icmp ult i32 %249, %250
  %or.cond98 = or i1 %261, %262
  br i1 %or.cond98, label %263, label %264

; <label>:263                                     ; preds = %259
  tail call fastcc void @raise_exception_err(i32 13, i32 %5) noreturn
  unreachable

; <label>:264                                     ; preds = %259
  %265 = and i32 %res.0.i10.i, 32768
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %268

; <label>:267                                     ; preds = %264
  tail call fastcc void @raise_exception_err(i32 11, i32 %5) noreturn
  unreachable

; <label>:268                                     ; preds = %264
  %269 = lshr i32 %res.0.i.i, 16
  %270 = and i32 %res.0.i10.i, -65536
  %271 = and i32 %res.0.i.i, 65535
  %272 = or i32 %270, %271
  %273 = and i32 %res.0.i10.i, 31
  %274 = and i32 %269, 65532
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %277

; <label>:276                                     ; preds = %268
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:277                                     ; preds = %268
  %278 = and i32 %269, 4
  %279 = icmp eq i32 %278, 0
  %dt.0.i141 = select i1 %279, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %280 = or i32 %269, 7
  %281 = getelementptr inbounds %struct.SegmentCache* %dt.0.i141, i64 0, i32 2
  %282 = load i32* %281, align 4
  %283 = icmp ugt i32 %280, %282
  br i1 %283, label %314, label %284

; <label>:284                                     ; preds = %277
  %285 = and i32 %269, 65528
  %286 = getelementptr inbounds %struct.SegmentCache* %dt.0.i141, i64 0, i32 1
  %287 = load i32* %286, align 4
  %288 = add i32 %287, %285
  %289 = lshr i32 %288, 12
  %290 = and i32 %289, 255
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %291, i32 0
  %293 = load i32* %292, align 4
  %294 = and i32 %288, -4093
  %295 = icmp eq i32 %293, %294
  %296 = zext i32 %288 to i64
  br i1 %295, label %297, label %ldl_kernel.exit.i145, !prof !0

; <label>:297                                     ; preds = %284
  %298 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %291, i32 3
  %299 = load i64* %298, align 8
  %300 = add i64 %299, %296
  br label %ldl_kernel.exit.i145

ldl_kernel.exit.i145:                             ; preds = %297, %284
  %res.0.in.in.i.i142 = phi i64 [ %300, %297 ], [ %296, %284 ]
  %res.0.in.i.i143 = inttoptr i64 %res.0.in.in.i.i142 to i32*
  %res.0.i.i144 = load i32* %res.0.in.i.i143, align 4
  %301 = add i32 %288, 4
  %302 = lshr i32 %301, 12
  %303 = and i32 %302, 255
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %304, i32 0
  %306 = load i32* %305, align 4
  %307 = and i32 %301, -4093
  %308 = icmp eq i32 %306, %307
  %309 = zext i32 %301 to i64
  br i1 %308, label %310, label %315, !prof !0

; <label>:310                                     ; preds = %ldl_kernel.exit.i145
  %311 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %304, i32 3
  %312 = load i64* %311, align 8
  %313 = add i64 %312, %309
  br label %315

; <label>:314                                     ; preds = %277
  tail call fastcc void @raise_exception_err(i32 13, i32 %274) noreturn
  unreachable

; <label>:315                                     ; preds = %310, %ldl_kernel.exit.i145
  %res.0.in.in.i8.i146 = phi i64 [ %313, %310 ], [ %309, %ldl_kernel.exit.i145 ]
  %res.0.in.i9.i147 = inttoptr i64 %res.0.in.in.i8.i146 to i32*
  %res.0.i10.i148 = load i32* %res.0.in.i9.i147, align 4
  %316 = and i32 %res.0.i10.i148, 6144
  %317 = icmp eq i32 %316, 6144
  br i1 %317, label %319, label %318

; <label>:318                                     ; preds = %315
  tail call fastcc void @raise_exception_err(i32 13, i32 %274) noreturn
  unreachable

; <label>:319                                     ; preds = %315
  %320 = lshr i32 %res.0.i10.i148, 13
  %321 = and i32 %320, 3
  %322 = icmp ugt i32 %321, %51
  br i1 %322, label %323, label %324

; <label>:323                                     ; preds = %319
  tail call fastcc void @raise_exception_err(i32 13, i32 %274) noreturn
  unreachable

; <label>:324                                     ; preds = %319
  %325 = and i32 %res.0.i10.i148, 32768
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %328

; <label>:327                                     ; preds = %324
  tail call fastcc void @raise_exception_err(i32 11, i32 %274) noreturn
  unreachable

; <label>:328                                     ; preds = %324
  %329 = and i32 %res.0.i10.i148, 1024
  %330 = icmp eq i32 %329, 0
  %331 = icmp ult i32 %321, %51
  %or.cond101 = and i1 %330, %331
  br i1 %or.cond101, label %332, label %669

; <label>:332                                     ; preds = %328
  %333 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 3
  %334 = load i32* %333, align 4
  %335 = and i32 %334, 32768
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %338

; <label>:337                                     ; preds = %332
  tail call void (%struct.CPUX86State*, i8*, ...)* @cpu_abort(%struct.CPUX86State* %1, i8* getelementptr inbounds ([12 x i8]* @.str15, i64 0, i64 0)) noreturn nounwind
  unreachable

; <label>:338                                     ; preds = %332
  %339 = and i32 %334, 1792
  %340 = icmp eq i32 %339, 256
  br i1 %340, label %342, label %341

; <label>:341                                     ; preds = %338
  tail call void (%struct.CPUX86State*, i8*, ...)* @cpu_abort(%struct.CPUX86State* %1, i8* getelementptr inbounds ([17 x i8]* @.str16, i64 0, i64 0)) noreturn nounwind
  unreachable

; <label>:342                                     ; preds = %338
  %343 = lshr i32 %334, 11
  %344 = and i32 %343, 1
  %345 = shl nuw nsw i32 %321, 2
  %346 = or i32 %345, 2
  %347 = shl i32 %346, %344
  %348 = shl i32 4, %344
  %349 = add i32 %348, -1
  %350 = add i32 %349, %347
  %351 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 2
  %352 = load i32* %351, align 4
  %353 = icmp ugt i32 %350, %352
  br i1 %353, label %354, label %358

; <label>:354                                     ; preds = %342
  %355 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %356 = load i32* %355, align 4
  %357 = and i32 %356, 65532
  tail call fastcc void @raise_exception_err(i32 10, i32 %357) noreturn nounwind
  unreachable

; <label>:358                                     ; preds = %342
  %359 = icmp eq i32 %344, 0
  %360 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %361 = load i32* %360, align 4
  %362 = add i32 %361, %347
  %363 = lshr i32 %362, 12
  %364 = and i32 %363, 255
  %365 = zext i32 %364 to i64
  %366 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %365, i32 0
  %367 = load i32* %366, align 4
  br i1 %359, label %368, label %391

; <label>:368                                     ; preds = %358
  %369 = and i32 %362, -4095
  %370 = icmp eq i32 %367, %369
  %371 = zext i32 %362 to i64
  br i1 %370, label %372, label %lduw_kernel.exit.i, !prof !0

; <label>:372                                     ; preds = %368
  %373 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %365, i32 3
  %374 = load i64* %373, align 8
  %375 = add i64 %374, %371
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %372, %368
  %.sink.in.in.i.i = phi i64 [ %375, %372 ], [ %371, %368 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %376 = zext i16 %.sink.i.i to i32
  %377 = add i32 %347, 2
  %378 = add i32 %377, %361
  %379 = lshr i32 %378, 12
  %380 = and i32 %379, 255
  %381 = zext i32 %380 to i64
  %382 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %381, i32 0
  %383 = load i32* %382, align 4
  %384 = and i32 %378, -4095
  %385 = icmp eq i32 %383, %384
  %386 = zext i32 %378 to i64
  br i1 %385, label %387, label %get_ss_esp_from_tss.exit, !prof !0

; <label>:387                                     ; preds = %lduw_kernel.exit.i
  %388 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %381, i32 3
  %389 = load i64* %388, align 8
  %390 = add i64 %389, %386
  br label %get_ss_esp_from_tss.exit

; <label>:391                                     ; preds = %358
  %392 = and i32 %362, -4093
  %393 = icmp eq i32 %367, %392
  %394 = zext i32 %362 to i64
  br i1 %393, label %395, label %ldl_kernel.exit.i138, !prof !0

; <label>:395                                     ; preds = %391
  %396 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %365, i32 3
  %397 = load i64* %396, align 8
  %398 = add i64 %397, %394
  br label %ldl_kernel.exit.i138

ldl_kernel.exit.i138:                             ; preds = %395, %391
  %res.0.in.in.i.i135 = phi i64 [ %398, %395 ], [ %394, %391 ]
  %res.0.in.i.i136 = inttoptr i64 %res.0.in.in.i.i135 to i32*
  %res.0.i.i137 = load i32* %res.0.in.i.i136, align 4
  %399 = add i32 %347, 4
  %400 = add i32 %399, %361
  %401 = lshr i32 %400, 12
  %402 = and i32 %401, 255
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %403, i32 0
  %405 = load i32* %404, align 4
  %406 = and i32 %400, -4095
  %407 = icmp eq i32 %405, %406
  %408 = zext i32 %400 to i64
  br i1 %407, label %409, label %get_ss_esp_from_tss.exit, !prof !0

; <label>:409                                     ; preds = %ldl_kernel.exit.i138
  %410 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %403, i32 3
  %411 = load i64* %410, align 8
  %412 = add i64 %411, %408
  br label %get_ss_esp_from_tss.exit

get_ss_esp_from_tss.exit:                         ; preds = %409, %ldl_kernel.exit.i138, %387, %lduw_kernel.exit.i
  %413 = phi i32 [ %376, %387 ], [ %376, %lduw_kernel.exit.i ], [ %res.0.i.i137, %409 ], [ %res.0.i.i137, %ldl_kernel.exit.i138 ]
  %.sink.i17.sink.in.in.i = phi i64 [ %390, %387 ], [ %386, %lduw_kernel.exit.i ], [ %412, %409 ], [ %408, %ldl_kernel.exit.i138 ]
  %.sink.i17.sink.in.i = inttoptr i64 %.sink.i17.sink.in.in.i to i16*
  %.sink.i17.sink.i = load i16* %.sink.i17.sink.in.i, align 2
  %414 = zext i16 %.sink.i17.sink.i to i32
  %415 = and i32 %414, 65532
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %417, label %418

; <label>:417                                     ; preds = %get_ss_esp_from_tss.exit
  tail call fastcc void @raise_exception_err(i32 10, i32 0) noreturn
  unreachable

; <label>:418                                     ; preds = %get_ss_esp_from_tss.exit
  %419 = and i32 %414, 3
  %420 = icmp eq i32 %419, %321
  br i1 %420, label %422, label %421

; <label>:421                                     ; preds = %418
  tail call fastcc void @raise_exception_err(i32 10, i32 %415) noreturn
  unreachable

; <label>:422                                     ; preds = %418
  %423 = and i32 %414, 4
  %424 = icmp eq i32 %423, 0
  %dt.0.i121 = select i1 %424, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %425 = or i32 %414, 7
  %426 = getelementptr inbounds %struct.SegmentCache* %dt.0.i121, i64 0, i32 2
  %427 = load i32* %426, align 4
  %428 = icmp ugt i32 %425, %427
  br i1 %428, label %459, label %429

; <label>:429                                     ; preds = %422
  %430 = and i32 %414, 65528
  %431 = getelementptr inbounds %struct.SegmentCache* %dt.0.i121, i64 0, i32 1
  %432 = load i32* %431, align 4
  %433 = add i32 %432, %430
  %434 = lshr i32 %433, 12
  %435 = and i32 %434, 255
  %436 = zext i32 %435 to i64
  %437 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %436, i32 0
  %438 = load i32* %437, align 4
  %439 = and i32 %433, -4093
  %440 = icmp eq i32 %438, %439
  %441 = zext i32 %433 to i64
  br i1 %440, label %442, label %ldl_kernel.exit.i125, !prof !0

; <label>:442                                     ; preds = %429
  %443 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %436, i32 3
  %444 = load i64* %443, align 8
  %445 = add i64 %444, %441
  br label %ldl_kernel.exit.i125

ldl_kernel.exit.i125:                             ; preds = %442, %429
  %res.0.in.in.i.i122 = phi i64 [ %445, %442 ], [ %441, %429 ]
  %res.0.in.i.i123 = inttoptr i64 %res.0.in.in.i.i122 to i32*
  %res.0.i.i124 = load i32* %res.0.in.i.i123, align 4
  %446 = add i32 %433, 4
  %447 = lshr i32 %446, 12
  %448 = and i32 %447, 255
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %449, i32 0
  %451 = load i32* %450, align 4
  %452 = and i32 %446, -4093
  %453 = icmp eq i32 %451, %452
  %454 = zext i32 %446 to i64
  br i1 %453, label %455, label %460, !prof !0

; <label>:455                                     ; preds = %ldl_kernel.exit.i125
  %456 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %449, i32 3
  %457 = load i64* %456, align 8
  %458 = add i64 %457, %454
  br label %460

; <label>:459                                     ; preds = %422
  tail call fastcc void @raise_exception_err(i32 10, i32 %415) noreturn
  unreachable

; <label>:460                                     ; preds = %455, %ldl_kernel.exit.i125
  %res.0.in.in.i8.i126 = phi i64 [ %458, %455 ], [ %454, %ldl_kernel.exit.i125 ]
  %res.0.in.i9.i127 = inttoptr i64 %res.0.in.in.i8.i126 to i32*
  %res.0.i10.i128 = load i32* %res.0.in.i9.i127, align 4
  %461 = lshr i32 %res.0.i10.i128, 13
  %462 = and i32 %461, 3
  %463 = icmp eq i32 %462, %321
  br i1 %463, label %465, label %464

; <label>:464                                     ; preds = %460
  tail call fastcc void @raise_exception_err(i32 10, i32 %415) noreturn
  unreachable

; <label>:465                                     ; preds = %460
  %466 = and i32 %res.0.i10.i128, 6656
  %467 = icmp eq i32 %466, 4608
  br i1 %467, label %469, label %468

; <label>:468                                     ; preds = %465
  tail call fastcc void @raise_exception_err(i32 10, i32 %415) noreturn
  unreachable

; <label>:469                                     ; preds = %465
  %470 = and i32 %res.0.i10.i128, 32768
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %473

; <label>:472                                     ; preds = %469
  tail call fastcc void @raise_exception_err(i32 10, i32 %415) noreturn
  unreachable

; <label>:473                                     ; preds = %469
  %474 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %475 = load i32* %474, align 4
  %476 = lshr i32 %475, 6
  %477 = and i32 %476, 65536
  %478 = xor i32 %477, 65536
  %479 = add i32 %478, -1
  %480 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %481 = load i32* %480, align 4
  %482 = lshr i32 %res.0.i10.i128, 6
  %483 = and i32 %482, 65536
  %484 = xor i32 %483, 65536
  %485 = add i32 %484, -1
  %486 = lshr i32 %res.0.i.i124, 16
  %487 = shl i32 %res.0.i10.i128, 16
  %488 = and i32 %487, 16711680
  %489 = and i32 %res.0.i10.i128, -16777216
  %490 = or i32 %489, %486
  %491 = or i32 %490, %488
  %492 = icmp eq i32 %260, 0
  br i1 %492, label %578, label %493

; <label>:493                                     ; preds = %473
  %494 = add i32 %413, -4
  %495 = and i32 %485, %494
  %496 = add i32 %495, %491
  %497 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 0
  %498 = load i32* %497, align 4
  %499 = lshr i32 %496, 12
  %500 = and i32 %499, 255
  %501 = zext i32 %500 to i64
  %502 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %501, i32 1
  %503 = load i32* %502, align 4
  %504 = and i32 %496, -4093
  %505 = icmp eq i32 %503, %504
  %506 = zext i32 %496 to i64
  br i1 %505, label %509, label %507, !prof !0

; <label>:507                                     ; preds = %493
  %508 = inttoptr i64 %506 to i32*
  store i32 %498, i32* %508, align 4
  br label %stl_kernel.exit117

; <label>:509                                     ; preds = %493
  %510 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %501, i32 3
  %511 = load i64* %510, align 8
  %512 = add i64 %511, %506
  %513 = inttoptr i64 %512 to i32*
  store i32 %498, i32* %513, align 4
  br label %stl_kernel.exit117

stl_kernel.exit117:                               ; preds = %509, %507
  %514 = add i32 %413, -8
  %515 = and i32 %485, %514
  %516 = add i32 %515, %491
  %517 = load %struct.CPUX86State** @env, align 8
  %518 = getelementptr inbounds %struct.CPUX86State* %517, i64 0, i32 0, i64 4
  %519 = load i32* %518, align 4
  %520 = lshr i32 %516, 12
  %521 = and i32 %520, 255
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds %struct.CPUX86State* %517, i64 0, i32 71, i64 0, i64 %522, i32 1
  %524 = load i32* %523, align 4
  %525 = and i32 %516, -4093
  %526 = icmp eq i32 %524, %525
  %527 = zext i32 %516 to i64
  br i1 %526, label %530, label %528, !prof !0

; <label>:528                                     ; preds = %stl_kernel.exit117
  %529 = inttoptr i64 %527 to i32*
  store i32 %519, i32* %529, align 4
  br label %stl_kernel.exit116.preheader

; <label>:530                                     ; preds = %stl_kernel.exit117
  %531 = getelementptr inbounds %struct.CPUX86State* %517, i64 0, i32 71, i64 0, i64 %522, i32 3
  %532 = load i64* %531, align 8
  %533 = add i64 %532, %527
  %534 = inttoptr i64 %533 to i32*
  store i32 %519, i32* %534, align 4
  br label %stl_kernel.exit116.preheader

stl_kernel.exit116.preheader:                     ; preds = %530, %528
  %i.0206 = add i32 %273, -1
  %535 = icmp sgt i32 %i.0206, -1
  br i1 %535, label %.lr.ph208, label %.loopexit

.lr.ph208:                                        ; preds = %stl_kernel.exit116.preheader
  %536 = shl i32 %res.0.i10.i, 2
  %537 = and i32 %536, 124
  br label %538

; <label>:538                                     ; preds = %stl_kernel.exit116.backedge, %.lr.ph208
  %i.0207 = phi i32 [ %i.0206, %.lr.ph208 ], [ %i.0, %stl_kernel.exit116.backedge ]
  %539 = phi i32 [ %514, %.lr.ph208 ], [ %559, %stl_kernel.exit116.backedge ]
  %540 = load %struct.CPUX86State** @env, align 8
  %541 = getelementptr inbounds %struct.CPUX86State* %540, i64 0, i32 0, i64 4
  %542 = load i32* %541, align 4
  %543 = shl i32 %i.0207, 2
  %544 = add i32 %542, %543
  %545 = and i32 %544, %479
  %546 = add i32 %545, %481
  %547 = lshr i32 %546, 12
  %548 = and i32 %547, 255
  %549 = zext i32 %548 to i64
  %550 = getelementptr inbounds %struct.CPUX86State* %540, i64 0, i32 71, i64 0, i64 %549, i32 0
  %551 = load i32* %550, align 4
  %552 = and i32 %546, -4093
  %553 = icmp eq i32 %551, %552
  %554 = zext i32 %546 to i64
  br i1 %553, label %555, label %ldl_kernel.exit, !prof !0

; <label>:555                                     ; preds = %538
  %556 = getelementptr inbounds %struct.CPUX86State* %540, i64 0, i32 71, i64 0, i64 %549, i32 3
  %557 = load i64* %556, align 8
  %558 = add i64 %557, %554
  br label %ldl_kernel.exit

ldl_kernel.exit:                                  ; preds = %555, %538
  %res.0.in.in.i = phi i64 [ %558, %555 ], [ %554, %538 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %559 = add i32 %539, -4
  %560 = and i32 %559, %485
  %561 = add i32 %560, %491
  %562 = lshr i32 %561, 12
  %563 = and i32 %562, 255
  %564 = zext i32 %563 to i64
  %565 = getelementptr inbounds %struct.CPUX86State* %540, i64 0, i32 71, i64 0, i64 %564, i32 1
  %566 = load i32* %565, align 4
  %567 = and i32 %561, -4093
  %568 = icmp eq i32 %566, %567
  %569 = zext i32 %561 to i64
  br i1 %568, label %573, label %570, !prof !0

; <label>:570                                     ; preds = %ldl_kernel.exit
  %571 = inttoptr i64 %569 to i32*
  store i32 %res.0.i, i32* %571, align 4
  br label %stl_kernel.exit116.backedge

stl_kernel.exit116.backedge:                      ; preds = %573, %570
  %i.0 = add i32 %i.0207, -1
  %572 = icmp sgt i32 %i.0, -1
  br i1 %572, label %538, label %stl_kernel.exit116..loopexit204_crit_edge

; <label>:573                                     ; preds = %ldl_kernel.exit
  %574 = getelementptr inbounds %struct.CPUX86State* %540, i64 0, i32 71, i64 0, i64 %564, i32 3
  %575 = load i64* %574, align 8
  %576 = add i64 %575, %569
  %577 = inttoptr i64 %576 to i32*
  store i32 %res.0.i, i32* %577, align 4
  br label %stl_kernel.exit116.backedge

; <label>:578                                     ; preds = %473
  %579 = add i32 %413, -2
  %580 = and i32 %485, %579
  %581 = add i32 %580, %491
  %582 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 0
  %583 = load i32* %582, align 4
  %584 = lshr i32 %581, 12
  %585 = and i32 %584, 255
  %586 = zext i32 %585 to i64
  %587 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %586, i32 1
  %588 = load i32* %587, align 4
  %589 = and i32 %581, -4095
  %590 = icmp eq i32 %588, %589
  br i1 %590, label %595, label %591, !prof !0

; <label>:591                                     ; preds = %578
  %592 = trunc i32 %583 to i16
  %593 = zext i32 %581 to i64
  %594 = inttoptr i64 %593 to i16*
  store i16 %592, i16* %594, align 2
  br label %stw_kernel.exit114

; <label>:595                                     ; preds = %578
  %596 = zext i32 %581 to i64
  %597 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %586, i32 3
  %598 = load i64* %597, align 8
  %599 = add i64 %598, %596
  %600 = trunc i32 %583 to i16
  %601 = inttoptr i64 %599 to i16*
  store i16 %600, i16* %601, align 2
  br label %stw_kernel.exit114

stw_kernel.exit114:                               ; preds = %595, %591
  %602 = add i32 %413, -4
  %603 = and i32 %485, %602
  %604 = add i32 %603, %491
  %605 = load %struct.CPUX86State** @env, align 8
  %606 = getelementptr inbounds %struct.CPUX86State* %605, i64 0, i32 0, i64 4
  %607 = load i32* %606, align 4
  %608 = lshr i32 %604, 12
  %609 = and i32 %608, 255
  %610 = zext i32 %609 to i64
  %611 = getelementptr inbounds %struct.CPUX86State* %605, i64 0, i32 71, i64 0, i64 %610, i32 1
  %612 = load i32* %611, align 4
  %613 = and i32 %604, -4095
  %614 = icmp eq i32 %612, %613
  br i1 %614, label %619, label %615, !prof !0

; <label>:615                                     ; preds = %stw_kernel.exit114
  %616 = trunc i32 %607 to i16
  %617 = zext i32 %604 to i64
  %618 = inttoptr i64 %617 to i16*
  store i16 %616, i16* %618, align 2
  br label %stw_kernel.exit113.preheader

; <label>:619                                     ; preds = %stw_kernel.exit114
  %620 = zext i32 %604 to i64
  %621 = getelementptr inbounds %struct.CPUX86State* %605, i64 0, i32 71, i64 0, i64 %610, i32 3
  %622 = load i64* %621, align 8
  %623 = add i64 %622, %620
  %624 = trunc i32 %607 to i16
  %625 = inttoptr i64 %623 to i16*
  store i16 %624, i16* %625, align 2
  br label %stw_kernel.exit113.preheader

stw_kernel.exit113.preheader:                     ; preds = %619, %615
  %i.1202 = add i32 %273, -1
  %626 = icmp sgt i32 %i.1202, -1
  br i1 %626, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %stw_kernel.exit113.preheader
  %627 = shl i32 %res.0.i10.i, 1
  %628 = and i32 %627, 62
  br label %629

; <label>:629                                     ; preds = %stw_kernel.exit113.backedge, %.lr.ph
  %i.1203 = phi i32 [ %i.1202, %.lr.ph ], [ %i.1, %stw_kernel.exit113.backedge ]
  %630 = phi i32 [ %602, %.lr.ph ], [ %650, %stw_kernel.exit113.backedge ]
  %631 = load %struct.CPUX86State** @env, align 8
  %632 = getelementptr inbounds %struct.CPUX86State* %631, i64 0, i32 0, i64 4
  %633 = load i32* %632, align 4
  %634 = shl i32 %i.1203, 1
  %635 = add i32 %633, %634
  %636 = and i32 %635, %479
  %637 = add i32 %636, %481
  %638 = lshr i32 %637, 12
  %639 = and i32 %638, 255
  %640 = zext i32 %639 to i64
  %641 = getelementptr inbounds %struct.CPUX86State* %631, i64 0, i32 71, i64 0, i64 %640, i32 0
  %642 = load i32* %641, align 4
  %643 = and i32 %637, -4095
  %644 = icmp eq i32 %642, %643
  %645 = zext i32 %637 to i64
  br i1 %644, label %646, label %lduw_kernel.exit, !prof !0

; <label>:646                                     ; preds = %629
  %647 = getelementptr inbounds %struct.CPUX86State* %631, i64 0, i32 71, i64 0, i64 %640, i32 3
  %648 = load i64* %647, align 8
  %649 = add i64 %648, %645
  br label %lduw_kernel.exit

lduw_kernel.exit:                                 ; preds = %646, %629
  %.sink.in.in.i = phi i64 [ %649, %646 ], [ %645, %629 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %650 = add i32 %630, -2
  %651 = and i32 %650, %485
  %652 = add i32 %651, %491
  %653 = lshr i32 %652, 12
  %654 = and i32 %653, 255
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds %struct.CPUX86State* %631, i64 0, i32 71, i64 0, i64 %655, i32 1
  %657 = load i32* %656, align 4
  %658 = and i32 %652, -4095
  %659 = icmp eq i32 %657, %658
  %660 = zext i32 %652 to i64
  br i1 %659, label %664, label %661, !prof !0

; <label>:661                                     ; preds = %lduw_kernel.exit
  %662 = inttoptr i64 %660 to i16*
  store i16 %.sink.i, i16* %662, align 2
  br label %stw_kernel.exit113.backedge

stw_kernel.exit113.backedge:                      ; preds = %664, %661
  %i.1 = add i32 %i.1203, -1
  %663 = icmp sgt i32 %i.1, -1
  br i1 %663, label %629, label %stw_kernel.exit113..loopexit_crit_edge

; <label>:664                                     ; preds = %lduw_kernel.exit
  %665 = getelementptr inbounds %struct.CPUX86State* %631, i64 0, i32 71, i64 0, i64 %655, i32 3
  %666 = load i64* %665, align 8
  %667 = add i64 %666, %660
  %668 = inttoptr i64 %667 to i16*
  store i16 %.sink.i, i16* %668, align 2
  br label %stw_kernel.exit113.backedge

; <label>:669                                     ; preds = %328
  %670 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %671 = load i32* %670, align 4
  %672 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %673 = load i32* %672, align 4
  %674 = lshr i32 %673, 6
  %675 = and i32 %674, 65536
  %676 = xor i32 %675, 65536
  %677 = add i32 %676, -1
  %678 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %679 = load i32* %678, align 4
  br label %.loopexit

stw_kernel.exit113..loopexit_crit_edge:           ; preds = %stw_kernel.exit113.backedge
  %680 = sub i32 %602, %628
  br label %.loopexit

stl_kernel.exit116..loopexit204_crit_edge:        ; preds = %stl_kernel.exit116.backedge
  %681 = sub i32 %514, %537
  br label %.loopexit

.loopexit:                                        ; preds = %stl_kernel.exit116..loopexit204_crit_edge, %stw_kernel.exit113..loopexit_crit_edge, %669, %stw_kernel.exit113.preheader, %stl_kernel.exit116.preheader
  %682 = phi i32 [ 0, %669 ], [ %414, %stw_kernel.exit113..loopexit_crit_edge ], [ %414, %stw_kernel.exit113.preheader ], [ %414, %stl_kernel.exit116..loopexit204_crit_edge ], [ %414, %stl_kernel.exit116.preheader ]
  %683 = phi i32 [ 0, %669 ], [ %res.0.i.i124, %stw_kernel.exit113..loopexit_crit_edge ], [ %res.0.i.i124, %stw_kernel.exit113.preheader ], [ %res.0.i.i124, %stl_kernel.exit116..loopexit204_crit_edge ], [ %res.0.i.i124, %stl_kernel.exit116.preheader ]
  %684 = phi i32 [ 0, %669 ], [ %res.0.i10.i128, %stw_kernel.exit113..loopexit_crit_edge ], [ %res.0.i10.i128, %stw_kernel.exit113.preheader ], [ %res.0.i10.i128, %stl_kernel.exit116..loopexit204_crit_edge ], [ %res.0.i10.i128, %stl_kernel.exit116.preheader ]
  %685 = phi i32 [ %671, %669 ], [ %680, %stw_kernel.exit113..loopexit_crit_edge ], [ %602, %stw_kernel.exit113.preheader ], [ %681, %stl_kernel.exit116..loopexit204_crit_edge ], [ %514, %stl_kernel.exit116.preheader ]
  %sp_mask.0 = phi i32 [ %677, %669 ], [ %485, %stw_kernel.exit113..loopexit_crit_edge ], [ %485, %stw_kernel.exit113.preheader ], [ %485, %stl_kernel.exit116..loopexit204_crit_edge ], [ %485, %stl_kernel.exit116.preheader ]
  %686 = phi i32 [ %679, %669 ], [ %491, %stw_kernel.exit113..loopexit_crit_edge ], [ %491, %stw_kernel.exit113.preheader ], [ %491, %stl_kernel.exit116..loopexit204_crit_edge ], [ %491, %stl_kernel.exit116.preheader ]
  %new_stack.0 = phi i32 [ 0, %669 ], [ 1, %stw_kernel.exit113..loopexit_crit_edge ], [ 1, %stw_kernel.exit113.preheader ], [ 1, %stl_kernel.exit116..loopexit204_crit_edge ], [ 1, %stl_kernel.exit116.preheader ]
  %687 = icmp eq i32 %260, 0
  br i1 %687, label %729, label %688

; <label>:688                                     ; preds = %.loopexit
  %689 = add i32 %685, -4
  %690 = and i32 %689, %sp_mask.0
  %691 = add i32 %686, %690
  %692 = load %struct.CPUX86State** @env, align 8
  %693 = getelementptr inbounds %struct.CPUX86State* %692, i64 0, i32 9, i64 1, i32 0
  %694 = load i32* %693, align 4
  %695 = lshr i32 %691, 12
  %696 = and i32 %695, 255
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds %struct.CPUX86State* %692, i64 0, i32 71, i64 0, i64 %697, i32 1
  %699 = load i32* %698, align 4
  %700 = and i32 %691, -4093
  %701 = icmp eq i32 %699, %700
  %702 = zext i32 %691 to i64
  br i1 %701, label %705, label %703, !prof !0

; <label>:703                                     ; preds = %688
  %704 = inttoptr i64 %702 to i32*
  store i32 %694, i32* %704, align 4
  br label %stl_kernel.exit111

; <label>:705                                     ; preds = %688
  %706 = getelementptr inbounds %struct.CPUX86State* %692, i64 0, i32 71, i64 0, i64 %697, i32 3
  %707 = load i64* %706, align 8
  %708 = add i64 %707, %702
  %709 = inttoptr i64 %708 to i32*
  store i32 %694, i32* %709, align 4
  br label %stl_kernel.exit111

stl_kernel.exit111:                               ; preds = %705, %703
  %710 = add i32 %685, -8
  %711 = and i32 %710, %sp_mask.0
  %712 = add i32 %686, %711
  %713 = lshr i32 %712, 12
  %714 = and i32 %713, 255
  %715 = zext i32 %714 to i64
  %716 = load %struct.CPUX86State** @env, align 8
  %717 = getelementptr inbounds %struct.CPUX86State* %716, i64 0, i32 71, i64 0, i64 %715, i32 1
  %718 = load i32* %717, align 4
  %719 = and i32 %712, -4093
  %720 = icmp eq i32 %718, %719
  %721 = zext i32 %712 to i64
  br i1 %720, label %724, label %722, !prof !0

; <label>:722                                     ; preds = %stl_kernel.exit111
  %723 = inttoptr i64 %721 to i32*
  store i32 %4, i32* %723, align 4
  br label %stl_kernel.exit

; <label>:724                                     ; preds = %stl_kernel.exit111
  %725 = getelementptr inbounds %struct.CPUX86State* %716, i64 0, i32 71, i64 0, i64 %715, i32 3
  %726 = load i64* %725, align 8
  %727 = add i64 %726, %721
  %728 = inttoptr i64 %727 to i32*
  store i32 %4, i32* %728, align 4
  br label %stl_kernel.exit

; <label>:729                                     ; preds = %.loopexit
  %730 = add i32 %685, -2
  %731 = and i32 %730, %sp_mask.0
  %732 = add i32 %686, %731
  %733 = load %struct.CPUX86State** @env, align 8
  %734 = getelementptr inbounds %struct.CPUX86State* %733, i64 0, i32 9, i64 1, i32 0
  %735 = load i32* %734, align 4
  %736 = lshr i32 %732, 12
  %737 = and i32 %736, 255
  %738 = zext i32 %737 to i64
  %739 = getelementptr inbounds %struct.CPUX86State* %733, i64 0, i32 71, i64 0, i64 %738, i32 1
  %740 = load i32* %739, align 4
  %741 = and i32 %732, -4095
  %742 = icmp eq i32 %740, %741
  br i1 %742, label %747, label %743, !prof !0

; <label>:743                                     ; preds = %729
  %744 = trunc i32 %735 to i16
  %745 = zext i32 %732 to i64
  %746 = inttoptr i64 %745 to i16*
  store i16 %744, i16* %746, align 2
  br label %stw_kernel.exit110

; <label>:747                                     ; preds = %729
  %748 = zext i32 %732 to i64
  %749 = getelementptr inbounds %struct.CPUX86State* %733, i64 0, i32 71, i64 0, i64 %738, i32 3
  %750 = load i64* %749, align 8
  %751 = add i64 %750, %748
  %752 = trunc i32 %735 to i16
  %753 = inttoptr i64 %751 to i16*
  store i16 %752, i16* %753, align 2
  br label %stw_kernel.exit110

stw_kernel.exit110:                               ; preds = %747, %743
  %754 = add i32 %685, -4
  %755 = and i32 %754, %sp_mask.0
  %756 = add i32 %686, %755
  %757 = lshr i32 %756, 12
  %758 = and i32 %757, 255
  %759 = zext i32 %758 to i64
  %760 = load %struct.CPUX86State** @env, align 8
  %761 = getelementptr inbounds %struct.CPUX86State* %760, i64 0, i32 71, i64 0, i64 %759, i32 1
  %762 = load i32* %761, align 4
  %763 = and i32 %756, -4095
  %764 = icmp eq i32 %762, %763
  br i1 %764, label %769, label %765, !prof !0

; <label>:765                                     ; preds = %stw_kernel.exit110
  %766 = trunc i32 %4 to i16
  %767 = zext i32 %756 to i64
  %768 = inttoptr i64 %767 to i16*
  store i16 %766, i16* %768, align 2
  br label %stl_kernel.exit

; <label>:769                                     ; preds = %stw_kernel.exit110
  %770 = zext i32 %756 to i64
  %771 = getelementptr inbounds %struct.CPUX86State* %760, i64 0, i32 71, i64 0, i64 %759, i32 3
  %772 = load i64* %771, align 8
  %773 = add i64 %772, %770
  %774 = trunc i32 %4 to i16
  %775 = inttoptr i64 %773 to i16*
  store i16 %774, i16* %775, align 2
  br label %stl_kernel.exit

stl_kernel.exit:                                  ; preds = %769, %765, %724, %722
  %776 = phi i32 [ %710, %722 ], [ %710, %724 ], [ %754, %765 ], [ %754, %769 ]
  %777 = icmp eq i32 %new_stack.0, 0
  br i1 %777, label %826, label %778

; <label>:778                                     ; preds = %stl_kernel.exit
  %779 = and i32 %682, 65532
  %780 = or i32 %779, %321
  %781 = load %struct.CPUX86State** @env, align 8
  %782 = and i32 %683, 65535
  %783 = and i32 %684, 983040
  %784 = or i32 %783, %782
  %785 = and i32 %684, 8388608
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %get_seg_limit.exit109, label %787

; <label>:787                                     ; preds = %778
  %788 = shl nuw i32 %784, 12
  %789 = or i32 %788, 4095
  br label %get_seg_limit.exit109

get_seg_limit.exit109:                            ; preds = %787, %778
  %limit.0.i108 = phi i32 [ %789, %787 ], [ %784, %778 ]
  %790 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 2, i32 0
  store i32 %780, i32* %790, align 4
  %791 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 2, i32 1
  store i32 %686, i32* %791, align 4
  %792 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 2, i32 2
  store i32 %limit.0.i108, i32* %792, align 4
  %793 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 2, i32 3
  store i32 %684, i32* %793, align 4
  %.phi.trans.insert.i = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 7
  %.pre.i = load i32* %.phi.trans.insert.i, align 4
  %794 = lshr i32 %684, 17
  %795 = and i32 %794, 32
  %796 = and i32 %.pre.i, 32768
  %797 = icmp eq i32 %796, 0
  br i1 %797, label %798, label %cpu_x86_load_seg_cache.exit107

; <label>:798                                     ; preds = %get_seg_limit.exit109
  %799 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 14, i64 0
  %800 = load i32* %799, align 4
  %801 = and i32 %800, 1
  %802 = icmp eq i32 %801, 0
  br i1 %802, label %811, label %803

; <label>:803                                     ; preds = %798
  %804 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 2
  %805 = load i32* %804, align 4
  %806 = and i32 %805, 131072
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %808, label %811

; <label>:808                                     ; preds = %803
  %809 = and i32 %.pre.i, 16
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %811, label %813

; <label>:811                                     ; preds = %808, %803, %798
  %812 = or i32 %795, 64
  br label %cpu_x86_load_seg_cache.exit107

; <label>:813                                     ; preds = %808
  %814 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 3, i32 1
  %815 = load i32* %814, align 4
  %816 = getelementptr inbounds %struct.CPUX86State* %781, i64 0, i32 9, i64 0, i32 1
  %817 = load i32* %816, align 4
  %818 = or i32 %817, %815
  %819 = or i32 %818, %686
  %820 = icmp ne i32 %819, 0
  %821 = zext i1 %820 to i32
  %822 = shl nuw nsw i32 %821, 6
  %823 = or i32 %822, %795
  br label %cpu_x86_load_seg_cache.exit107

cpu_x86_load_seg_cache.exit107:                   ; preds = %813, %811, %get_seg_limit.exit109
  %new_hflags.0.i106 = phi i32 [ %795, %get_seg_limit.exit109 ], [ %812, %811 ], [ %823, %813 ]
  %824 = and i32 %.pre.i, -97
  %825 = or i32 %new_hflags.0.i106, %824
  store i32 %825, i32* %.phi.trans.insert.i, align 4
  br label %826

; <label>:826                                     ; preds = %cpu_x86_load_seg_cache.exit107, %stl_kernel.exit
  %827 = or i32 %321, %274
  %828 = load %struct.CPUX86State** @env, align 8
  %829 = lshr i32 %res.0.i.i144, 16
  %830 = shl i32 %res.0.i10.i148, 16
  %831 = and i32 %830, 16711680
  %832 = and i32 %res.0.i10.i148, -16777216
  %833 = or i32 %832, %829
  %834 = or i32 %833, %831
  %835 = and i32 %res.0.i.i144, 65535
  %836 = and i32 %res.0.i10.i148, 983040
  %837 = or i32 %836, %835
  %838 = and i32 %res.0.i10.i148, 8388608
  %839 = icmp eq i32 %838, 0
  br i1 %839, label %get_seg_limit.exit, label %840

; <label>:840                                     ; preds = %826
  %841 = shl nuw i32 %837, 12
  %842 = or i32 %841, 4095
  br label %get_seg_limit.exit

get_seg_limit.exit:                               ; preds = %840, %826
  %limit.0.i = phi i32 [ %842, %840 ], [ %837, %826 ]
  %843 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 1, i32 0
  store i32 %827, i32* %843, align 4
  %844 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 1, i32 1
  store i32 %834, i32* %844, align 4
  %845 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i, i32* %845, align 4
  %846 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i148, i32* %846, align 4
  %847 = lshr i32 %res.0.i10.i148, 18
  %848 = and i32 %847, 16
  %849 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 7
  %850 = load i32* %849, align 4
  %851 = and i32 %850, -32785
  %852 = or i32 %851, %848
  store i32 %852, i32* %849, align 4
  %853 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 2, i32 3
  %854 = load i32* %853, align 4
  %855 = lshr i32 %854, 17
  %856 = and i32 %855, 32
  %857 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 14, i64 0
  %858 = load i32* %857, align 4
  %859 = and i32 %858, 1
  %860 = icmp eq i32 %859, 0
  br i1 %860, label %867, label %861

; <label>:861                                     ; preds = %get_seg_limit.exit
  %862 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 2
  %863 = load i32* %862, align 4
  %864 = and i32 %863, 131072
  %865 = icmp ne i32 %864, 0
  %866 = icmp eq i32 %848, 0
  %or.cond201 = or i1 %865, %866
  br i1 %or.cond201, label %867, label %869

; <label>:867                                     ; preds = %861, %get_seg_limit.exit
  %868 = or i32 %856, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:869                                     ; preds = %861
  %870 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 3, i32 1
  %871 = load i32* %870, align 4
  %872 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 0, i32 1
  %873 = load i32* %872, align 4
  %874 = or i32 %873, %871
  %875 = getelementptr inbounds %struct.CPUX86State* %828, i64 0, i32 9, i64 2, i32 1
  %876 = load i32* %875, align 4
  %877 = or i32 %874, %876
  %878 = icmp ne i32 %877, 0
  %879 = zext i1 %878 to i32
  %880 = shl nuw nsw i32 %879, 6
  %881 = or i32 %880, %856
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %869, %867
  %new_hflags.0.i = phi i32 [ %868, %867 ], [ %881, %869 ]
  %882 = and i32 %852, -32865
  %883 = or i32 %new_hflags.0.i, %882
  store i32 %883, i32* %849, align 4
  %884 = load %struct.CPUX86State** @env, align 8
  %885 = getelementptr inbounds %struct.CPUX86State* %884, i64 0, i32 7
  %886 = load i32* %885, align 4
  %887 = and i32 %886, -4
  %888 = or i32 %887, %321
  store i32 %888, i32* %885, align 4
  %889 = load %struct.CPUX86State** @env, align 8
  %890 = getelementptr inbounds %struct.CPUX86State* %889, i64 0, i32 0, i64 4
  %891 = load i32* %890, align 4
  %892 = xor i32 %sp_mask.0, -1
  %893 = and i32 %891, %892
  %894 = and i32 %776, %sp_mask.0
  %895 = or i32 %893, %894
  store i32 %895, i32* %890, align 4
  %896 = load %struct.CPUX86State** @env, align 8
  %897 = getelementptr inbounds %struct.CPUX86State* %896, i64 0, i32 1
  store i32 %272, i32* %897, align 4
  br label %898

; <label>:898                                     ; preds = %cpu_x86_load_seg_cache.exit, %255, %cpu_x86_load_seg_cache.exit140
  ret void
}

define void @helper_iret_real(i32 %shift) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %5 = load i32* %4, align 4
  %6 = icmp eq i32 %shift, 1
  %7 = and i32 %3, 65535
  %8 = add i32 %5, %7
  %9 = lshr i32 %8, 12
  %10 = and i32 %9, 255
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %11, i32 0
  %13 = load i32* %12, align 4
  br i1 %6, label %14, label %54

; <label>:14                                      ; preds = %0
  %15 = and i32 %8, -4093
  %16 = icmp eq i32 %13, %15
  %17 = zext i32 %8 to i64
  br i1 %16, label %18, label %ldl_kernel.exit, !prof !0

; <label>:18                                      ; preds = %14
  %19 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %11, i32 3
  %20 = load i64* %19, align 8
  %21 = add i64 %20, %17
  br label %ldl_kernel.exit

ldl_kernel.exit:                                  ; preds = %18, %14
  %res.0.in.in.i = phi i64 [ %21, %18 ], [ %17, %14 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %22 = add i32 %3, 4
  %23 = and i32 %22, 65535
  %24 = add i32 %23, %5
  %25 = lshr i32 %24, 12
  %26 = and i32 %25, 255
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %27, i32 0
  %29 = load i32* %28, align 4
  %30 = and i32 %24, -4093
  %31 = icmp eq i32 %29, %30
  %32 = zext i32 %24 to i64
  br i1 %31, label %33, label %ldl_kernel.exit41, !prof !0

; <label>:33                                      ; preds = %ldl_kernel.exit
  %34 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %27, i32 3
  %35 = load i64* %34, align 8
  %36 = add i64 %35, %32
  br label %ldl_kernel.exit41

ldl_kernel.exit41:                                ; preds = %33, %ldl_kernel.exit
  %res.0.in.in.i38 = phi i64 [ %36, %33 ], [ %32, %ldl_kernel.exit ]
  %res.0.in.i39 = inttoptr i64 %res.0.in.in.i38 to i32*
  %res.0.i40 = load i32* %res.0.in.i39, align 4
  %37 = add i32 %3, 8
  %38 = and i32 %res.0.i40, 65535
  %39 = and i32 %37, 65535
  %40 = add i32 %39, %5
  %41 = lshr i32 %40, 12
  %42 = and i32 %41, 255
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %43, i32 0
  %45 = load i32* %44, align 4
  %46 = and i32 %40, -4093
  %47 = icmp eq i32 %45, %46
  %48 = zext i32 %40 to i64
  br i1 %47, label %49, label %ldl_kernel.exit37, !prof !0

; <label>:49                                      ; preds = %ldl_kernel.exit41
  %50 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %43, i32 3
  %51 = load i64* %50, align 8
  %52 = add i64 %51, %48
  br label %ldl_kernel.exit37

ldl_kernel.exit37:                                ; preds = %49, %ldl_kernel.exit41
  %res.0.in.in.i34 = phi i64 [ %52, %49 ], [ %48, %ldl_kernel.exit41 ]
  %res.0.in.i35 = inttoptr i64 %res.0.in.in.i34 to i32*
  %res.0.i36 = load i32* %res.0.in.i35, align 4
  %53 = add i32 %3, 12
  br label %96

; <label>:54                                      ; preds = %0
  %55 = and i32 %8, -4095
  %56 = icmp eq i32 %13, %55
  %57 = zext i32 %8 to i64
  br i1 %56, label %58, label %lduw_kernel.exit33, !prof !0

; <label>:58                                      ; preds = %54
  %59 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %11, i32 3
  %60 = load i64* %59, align 8
  %61 = add i64 %60, %57
  br label %lduw_kernel.exit33

lduw_kernel.exit33:                               ; preds = %58, %54
  %.sink.in.in.i30 = phi i64 [ %61, %58 ], [ %57, %54 ]
  %.sink.in.i31 = inttoptr i64 %.sink.in.in.i30 to i16*
  %.sink.i32 = load i16* %.sink.in.i31, align 2
  %62 = zext i16 %.sink.i32 to i32
  %63 = add i32 %3, 2
  %64 = and i32 %63, 65535
  %65 = add i32 %64, %5
  %66 = lshr i32 %65, 12
  %67 = and i32 %66, 255
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %68, i32 0
  %70 = load i32* %69, align 4
  %71 = and i32 %65, -4095
  %72 = icmp eq i32 %70, %71
  %73 = zext i32 %65 to i64
  br i1 %72, label %74, label %lduw_kernel.exit29, !prof !0

; <label>:74                                      ; preds = %lduw_kernel.exit33
  %75 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %68, i32 3
  %76 = load i64* %75, align 8
  %77 = add i64 %76, %73
  br label %lduw_kernel.exit29

lduw_kernel.exit29:                               ; preds = %74, %lduw_kernel.exit33
  %.sink.in.in.i26 = phi i64 [ %77, %74 ], [ %73, %lduw_kernel.exit33 ]
  %.sink.in.i27 = inttoptr i64 %.sink.in.in.i26 to i16*
  %.sink.i28 = load i16* %.sink.in.i27, align 2
  %78 = zext i16 %.sink.i28 to i32
  %79 = add i32 %3, 4
  %80 = and i32 %79, 65535
  %81 = add i32 %80, %5
  %82 = lshr i32 %81, 12
  %83 = and i32 %82, 255
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %84, i32 0
  %86 = load i32* %85, align 4
  %87 = and i32 %81, -4095
  %88 = icmp eq i32 %86, %87
  %89 = zext i32 %81 to i64
  br i1 %88, label %90, label %lduw_kernel.exit, !prof !0

; <label>:90                                      ; preds = %lduw_kernel.exit29
  %91 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %84, i32 3
  %92 = load i64* %91, align 8
  %93 = add i64 %92, %89
  br label %lduw_kernel.exit

lduw_kernel.exit:                                 ; preds = %90, %lduw_kernel.exit29
  %.sink.in.in.i = phi i64 [ %93, %90 ], [ %89, %lduw_kernel.exit29 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %94 = zext i16 %.sink.i to i32
  %95 = add i32 %3, 6
  br label %96

; <label>:96                                      ; preds = %lduw_kernel.exit, %ldl_kernel.exit37
  %new_eip.0 = phi i32 [ %res.0.i, %ldl_kernel.exit37 ], [ %62, %lduw_kernel.exit ]
  %new_eflags.0 = phi i32 [ %res.0.i36, %ldl_kernel.exit37 ], [ %94, %lduw_kernel.exit ]
  %new_cs.0 = phi i32 [ %38, %ldl_kernel.exit37 ], [ %78, %lduw_kernel.exit ]
  %sp.0 = phi i32 [ %53, %ldl_kernel.exit37 ], [ %95, %lduw_kernel.exit ]
  %97 = and i32 %3, -65536
  %98 = and i32 %sp.0, 65535
  %99 = or i32 %97, %98
  store i32 %99, i32* %2, align 4
  %100 = load %struct.CPUX86State** @env, align 8
  %101 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 9, i64 1, i32 0
  store i32 %new_cs.0, i32* %101, align 4
  %102 = shl nuw nsw i32 %new_cs.0, 4
  %103 = load %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State* %103, i64 0, i32 9, i64 1, i32 1
  store i32 %102, i32* %104, align 4
  %105 = load %struct.CPUX86State** @env, align 8
  %106 = getelementptr inbounds %struct.CPUX86State* %105, i64 0, i32 1
  store i32 %new_eip.0, i32* %106, align 4
  %107 = load %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State* %107, i64 0, i32 2
  %109 = load i32* %108, align 4
  %110 = and i32 %109, 131072
  %111 = icmp eq i32 %110, 0
  %. = select i1 %111, i32 2454272, i32 2441984
  %112 = icmp eq i32 %shift, 0
  %113 = and i32 %., 29440
  %eflags_mask.1 = select i1 %112, i32 %113, i32 %.
  %114 = and i32 %new_eflags.0, 2261
  %115 = getelementptr inbounds %struct.CPUX86State* %107, i64 0, i32 3
  store i32 %114, i32* %115, align 4
  %116 = lshr i32 %new_eflags.0, 10
  %117 = shl nuw nsw i32 %116, 1
  %118 = and i32 %117, 2
  %119 = sub nsw i32 1, %118
  %120 = load %struct.CPUX86State** @env, align 8
  %121 = getelementptr inbounds %struct.CPUX86State* %120, i64 0, i32 6
  store i32 %119, i32* %121, align 4
  %122 = load %struct.CPUX86State** @env, align 8
  %123 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 2
  %124 = load i32* %123, align 4
  %125 = xor i32 %eflags_mask.1, -3
  %126 = and i32 %125, %124
  %127 = and i32 %eflags_mask.1, %new_eflags.0
  %128 = or i32 %127, %126
  %129 = or i32 %128, 2
  store i32 %129, i32* %123, align 4
  %130 = load %struct.CPUX86State** @env, align 8
  %131 = getelementptr inbounds %struct.CPUX86State* %130, i64 0, i32 8
  %132 = load i32* %131, align 4
  %133 = and i32 %132, -5
  store i32 %133, i32* %131, align 4
  ret void
}

define void @helper_iret_protected(i32 %shift, i32 %next_eip) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 16384
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %69, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %8 = load i32* %7, align 4
  %9 = lshr i32 %8, 12
  %10 = and i32 %9, 255
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %11, i32 0
  %13 = load i32* %12, align 4
  %14 = and i32 %8, -4095
  %15 = icmp eq i32 %13, %14
  %16 = zext i32 %8 to i64
  br i1 %15, label %17, label %lduw_kernel.exit, !prof !0

; <label>:17                                      ; preds = %6
  %18 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %11, i32 3
  %19 = load i64* %18, align 8
  %20 = add i64 %19, %16
  br label %lduw_kernel.exit

lduw_kernel.exit:                                 ; preds = %17, %6
  %.sink.in.in.i = phi i64 [ %20, %17 ], [ %16, %6 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %21 = zext i16 %.sink.i to i32
  %22 = and i32 %21, 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

; <label>:24                                      ; preds = %lduw_kernel.exit
  %25 = and i32 %21, 65532
  tail call fastcc void @raise_exception_err(i32 10, i32 %25) noreturn
  unreachable

; <label>:26                                      ; preds = %lduw_kernel.exit
  %27 = or i32 %21, 7
  %28 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12, i32 2
  %29 = load i32* %28, align 4
  %30 = icmp ugt i32 %27, %29
  br i1 %30, label %61, label %31

; <label>:31                                      ; preds = %26
  %32 = and i32 %21, 65528
  %33 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12, i32 1
  %34 = load i32* %33, align 4
  %35 = add i32 %34, %32
  %36 = lshr i32 %35, 12
  %37 = and i32 %36, 255
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %38, i32 0
  %40 = load i32* %39, align 4
  %41 = and i32 %35, -4093
  %42 = icmp eq i32 %40, %41
  %43 = zext i32 %35 to i64
  br i1 %42, label %44, label %ldl_kernel.exit.i8, !prof !0

; <label>:44                                      ; preds = %31
  %45 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %38, i32 3
  %46 = load i64* %45, align 8
  %47 = add i64 %46, %43
  br label %ldl_kernel.exit.i8

ldl_kernel.exit.i8:                               ; preds = %44, %31
  %res.0.in.in.i.i5 = phi i64 [ %47, %44 ], [ %43, %31 ]
  %res.0.in.i.i6 = inttoptr i64 %res.0.in.in.i.i5 to i32*
  %res.0.i.i7 = load i32* %res.0.in.i.i6, align 4
  %48 = add i32 %35, 4
  %49 = lshr i32 %48, 12
  %50 = and i32 %49, 255
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %51, i32 0
  %53 = load i32* %52, align 4
  %54 = and i32 %48, -4093
  %55 = icmp eq i32 %53, %54
  %56 = zext i32 %48 to i64
  br i1 %55, label %57, label %63, !prof !0

; <label>:57                                      ; preds = %ldl_kernel.exit.i8
  %58 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %51, i32 3
  %59 = load i64* %58, align 8
  %60 = add i64 %59, %56
  br label %63

; <label>:61                                      ; preds = %26
  %62 = and i32 %21, 65532
  tail call fastcc void @raise_exception_err(i32 10, i32 %62) noreturn
  unreachable

; <label>:63                                      ; preds = %57, %ldl_kernel.exit.i8
  %res.0.in.in.i8.i = phi i64 [ %60, %57 ], [ %56, %ldl_kernel.exit.i8 ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %64 = and i32 %res.0.i10.i, 5888
  %65 = icmp eq i32 %64, 768
  br i1 %65, label %68, label %66

; <label>:66                                      ; preds = %63
  %67 = and i32 %21, 65532
  tail call fastcc void @raise_exception_err(i32 10, i32 %67) noreturn
  unreachable

; <label>:68                                      ; preds = %63
  tail call fastcc void @switch_tss(i32 %21, i32 %res.0.i.i7, i32 %res.0.i10.i, i32 1, i32 %next_eip)
  br label %helper_ret_protected.exit

; <label>:69                                      ; preds = %0
  %70 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %71 = load i32* %70, align 4
  %72 = lshr i32 %71, 6
  %73 = and i32 %72, 65536
  %74 = xor i32 %73, 65536
  %75 = add i32 %74, -1
  %76 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %77 = load i32* %76, align 4
  %78 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %79 = load i32* %78, align 4
  %80 = icmp eq i32 %shift, 1
  %81 = and i32 %75, %77
  %82 = add i32 %81, %79
  %83 = lshr i32 %82, 12
  %84 = and i32 %83, 255
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %85, i32 0
  %87 = load i32* %86, align 4
  br i1 %80, label %88, label %130

; <label>:88                                      ; preds = %69
  %89 = and i32 %82, -4093
  %90 = icmp eq i32 %87, %89
  %91 = zext i32 %82 to i64
  br i1 %90, label %92, label %ldl_kernel.exit184.i, !prof !0

; <label>:92                                      ; preds = %88
  %93 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %85, i32 3
  %94 = load i64* %93, align 8
  %95 = add i64 %94, %91
  br label %ldl_kernel.exit184.i

ldl_kernel.exit184.i:                             ; preds = %92, %88
  %res.0.in.in.i181.i = phi i64 [ %95, %92 ], [ %91, %88 ]
  %res.0.in.i182.i = inttoptr i64 %res.0.in.in.i181.i to i32*
  %res.0.i183.i = load i32* %res.0.in.i182.i, align 4
  %96 = add i32 %77, 4
  %97 = and i32 %75, %96
  %98 = add i32 %97, %79
  %99 = lshr i32 %98, 12
  %100 = and i32 %99, 255
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %101, i32 0
  %103 = load i32* %102, align 4
  %104 = and i32 %98, -4093
  %105 = icmp eq i32 %103, %104
  %106 = zext i32 %98 to i64
  br i1 %105, label %107, label %ldl_kernel.exit188.i, !prof !0

; <label>:107                                     ; preds = %ldl_kernel.exit184.i
  %108 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %101, i32 3
  %109 = load i64* %108, align 8
  %110 = add i64 %109, %106
  br label %ldl_kernel.exit188.i

ldl_kernel.exit188.i:                             ; preds = %107, %ldl_kernel.exit184.i
  %res.0.in.in.i185.i = phi i64 [ %110, %107 ], [ %106, %ldl_kernel.exit184.i ]
  %res.0.in.i186.i = inttoptr i64 %res.0.in.in.i185.i to i32*
  %res.0.i187.i = load i32* %res.0.in.i186.i, align 4
  %111 = add i32 %77, 8
  %112 = and i32 %res.0.i187.i, 65535
  %113 = and i32 %75, %111
  %114 = add i32 %113, %79
  %115 = lshr i32 %114, 12
  %116 = and i32 %115, 255
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %117, i32 0
  %119 = load i32* %118, align 4
  %120 = and i32 %114, -4093
  %121 = icmp eq i32 %119, %120
  %122 = zext i32 %114 to i64
  br i1 %121, label %123, label %ldl_kernel.exit192.i, !prof !0

; <label>:123                                     ; preds = %ldl_kernel.exit188.i
  %124 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %117, i32 3
  %125 = load i64* %124, align 8
  %126 = add i64 %125, %122
  br label %ldl_kernel.exit192.i

ldl_kernel.exit192.i:                             ; preds = %123, %ldl_kernel.exit188.i
  %res.0.in.in.i189.i = phi i64 [ %126, %123 ], [ %122, %ldl_kernel.exit188.i ]
  %res.0.in.i190.i = inttoptr i64 %res.0.in.in.i189.i to i32*
  %res.0.i191.i = load i32* %res.0.in.i190.i, align 4
  %127 = add i32 %77, 12
  %128 = and i32 %res.0.i191.i, 131072
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %172, label %743

; <label>:130                                     ; preds = %69
  %131 = and i32 %82, -4095
  %132 = icmp eq i32 %87, %131
  %133 = zext i32 %82 to i64
  br i1 %132, label %134, label %lduw_kernel.exit.i, !prof !0

; <label>:134                                     ; preds = %130
  %135 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %85, i32 3
  %136 = load i64* %135, align 8
  %137 = add i64 %136, %133
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %134, %130
  %.sink.in.in.i.i = phi i64 [ %137, %134 ], [ %133, %130 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %138 = zext i16 %.sink.i.i to i32
  %139 = add i32 %77, 2
  %140 = and i32 %75, %139
  %141 = add i32 %140, %79
  %142 = lshr i32 %141, 12
  %143 = and i32 %142, 255
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %144, i32 0
  %146 = load i32* %145, align 4
  %147 = and i32 %141, -4095
  %148 = icmp eq i32 %146, %147
  %149 = zext i32 %141 to i64
  br i1 %148, label %150, label %lduw_kernel.exit196.i, !prof !0

; <label>:150                                     ; preds = %lduw_kernel.exit.i
  %151 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %144, i32 3
  %152 = load i64* %151, align 8
  %153 = add i64 %152, %149
  br label %lduw_kernel.exit196.i

lduw_kernel.exit196.i:                            ; preds = %150, %lduw_kernel.exit.i
  %.sink.in.in.i193.i = phi i64 [ %153, %150 ], [ %149, %lduw_kernel.exit.i ]
  %.sink.in.i194.i = inttoptr i64 %.sink.in.in.i193.i to i16*
  %.sink.i195.i = load i16* %.sink.in.i194.i, align 2
  %154 = zext i16 %.sink.i195.i to i32
  %155 = add i32 %77, 4
  %156 = and i32 %75, %155
  %157 = add i32 %156, %79
  %158 = lshr i32 %157, 12
  %159 = and i32 %158, 255
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %160, i32 0
  %162 = load i32* %161, align 4
  %163 = and i32 %157, -4095
  %164 = icmp eq i32 %162, %163
  %165 = zext i32 %157 to i64
  br i1 %164, label %166, label %lduw_kernel.exit200.i, !prof !0

; <label>:166                                     ; preds = %lduw_kernel.exit196.i
  %167 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %160, i32 3
  %168 = load i64* %167, align 8
  %169 = add i64 %168, %165
  br label %lduw_kernel.exit200.i

lduw_kernel.exit200.i:                            ; preds = %166, %lduw_kernel.exit196.i
  %.sink.in.in.i197.i = phi i64 [ %169, %166 ], [ %165, %lduw_kernel.exit196.i ]
  %.sink.in.i198.i = inttoptr i64 %.sink.in.in.i197.i to i16*
  %.sink.i199.i = load i16* %.sink.in.i198.i, align 2
  %170 = zext i16 %.sink.i199.i to i32
  %171 = add i32 %77, 6
  br label %172

; <label>:172                                     ; preds = %lduw_kernel.exit200.i, %ldl_kernel.exit192.i
  %new_eflags.0.i = phi i32 [ %res.0.i191.i, %ldl_kernel.exit192.i ], [ %170, %lduw_kernel.exit200.i ]
  %new_cs.0.i = phi i32 [ %112, %ldl_kernel.exit192.i ], [ %154, %lduw_kernel.exit200.i ]
  %sp.0.i = phi i32 [ %127, %ldl_kernel.exit192.i ], [ %171, %lduw_kernel.exit200.i ]
  %new_eip.0.i = phi i32 [ %res.0.i183.i, %ldl_kernel.exit192.i ], [ %138, %lduw_kernel.exit200.i ]
  %173 = and i32 %new_cs.0.i, 65532
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

; <label>:175                                     ; preds = %172
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

; <label>:176                                     ; preds = %172
  %177 = and i32 %new_cs.0.i, 4
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %180 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i221.i = select i1 %178, %struct.SegmentCache* %180, %struct.SegmentCache* %179
  %181 = or i32 %new_cs.0.i, 7
  %182 = getelementptr inbounds %struct.SegmentCache* %dt.0.i221.i, i64 0, i32 2
  %183 = load i32* %182, align 4
  %184 = icmp ugt i32 %181, %183
  br i1 %184, label %215, label %185

; <label>:185                                     ; preds = %176
  %186 = and i32 %new_cs.0.i, 65528
  %187 = getelementptr inbounds %struct.SegmentCache* %dt.0.i221.i, i64 0, i32 1
  %188 = load i32* %187, align 4
  %189 = add i32 %188, %186
  %190 = lshr i32 %189, 12
  %191 = and i32 %190, 255
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %192, i32 0
  %194 = load i32* %193, align 4
  %195 = and i32 %189, -4093
  %196 = icmp eq i32 %194, %195
  %197 = zext i32 %189 to i64
  br i1 %196, label %198, label %ldl_kernel.exit.i225.i, !prof !0

; <label>:198                                     ; preds = %185
  %199 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %192, i32 3
  %200 = load i64* %199, align 8
  %201 = add i64 %200, %197
  br label %ldl_kernel.exit.i225.i

ldl_kernel.exit.i225.i:                           ; preds = %198, %185
  %res.0.in.in.i.i222.i = phi i64 [ %201, %198 ], [ %197, %185 ]
  %res.0.in.i.i223.i = inttoptr i64 %res.0.in.in.i.i222.i to i32*
  %res.0.i.i224.i = load i32* %res.0.in.i.i223.i, align 4
  %202 = add i32 %189, 4
  %203 = lshr i32 %202, 12
  %204 = and i32 %203, 255
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %205, i32 0
  %207 = load i32* %206, align 4
  %208 = and i32 %202, -4093
  %209 = icmp eq i32 %207, %208
  %210 = zext i32 %202 to i64
  br i1 %209, label %211, label %216, !prof !0

; <label>:211                                     ; preds = %ldl_kernel.exit.i225.i
  %212 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %205, i32 3
  %213 = load i64* %212, align 8
  %214 = add i64 %213, %210
  br label %216

; <label>:215                                     ; preds = %176
  tail call fastcc void @raise_exception_err(i32 13, i32 %173) noreturn nounwind
  unreachable

; <label>:216                                     ; preds = %211, %ldl_kernel.exit.i225.i
  %res.0.in.in.i8.i226.i = phi i64 [ %214, %211 ], [ %210, %ldl_kernel.exit.i225.i ]
  %res.0.in.i9.i227.i = inttoptr i64 %res.0.in.in.i8.i226.i to i32*
  %res.0.i10.i228.i = load i32* %res.0.in.i9.i227.i, align 4
  %217 = and i32 %res.0.i10.i228.i, 6144
  %218 = icmp eq i32 %217, 6144
  br i1 %218, label %220, label %219

; <label>:219                                     ; preds = %216
  tail call fastcc void @raise_exception_err(i32 13, i32 %173) noreturn nounwind
  unreachable

; <label>:220                                     ; preds = %216
  %221 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %222 = load i32* %221, align 4
  %223 = and i32 %222, 3
  %224 = and i32 %new_cs.0.i, 3
  %225 = icmp ult i32 %224, %223
  br i1 %225, label %226, label %227

; <label>:226                                     ; preds = %220
  tail call fastcc void @raise_exception_err(i32 13, i32 %173) noreturn nounwind
  unreachable

; <label>:227                                     ; preds = %220
  %228 = lshr i32 %res.0.i10.i228.i, 13
  %229 = and i32 %228, 3
  %230 = and i32 %res.0.i10.i228.i, 1024
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %235, label %232

; <label>:232                                     ; preds = %227
  %233 = icmp ugt i32 %229, %224
  br i1 %233, label %234, label %238

; <label>:234                                     ; preds = %232
  tail call fastcc void @raise_exception_err(i32 13, i32 %173) noreturn nounwind
  unreachable

; <label>:235                                     ; preds = %227
  %236 = icmp eq i32 %229, %224
  br i1 %236, label %238, label %237

; <label>:237                                     ; preds = %235
  tail call fastcc void @raise_exception_err(i32 13, i32 %173) noreturn nounwind
  unreachable

; <label>:238                                     ; preds = %235, %232
  %239 = and i32 %res.0.i10.i228.i, 32768
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %242

; <label>:241                                     ; preds = %238
  tail call fastcc void @raise_exception_err(i32 11, i32 %173) noreturn nounwind
  unreachable

; <label>:242                                     ; preds = %238
  %243 = icmp eq i32 %224, %223
  %244 = and i32 %222, 32768
  %245 = icmp eq i32 %244, 0
  %or.cond = and i1 %243, %245
  br i1 %or.cond, label %246, label %294

; <label>:246                                     ; preds = %242
  %247 = lshr i32 %res.0.i.i224.i, 16
  %248 = shl i32 %res.0.i10.i228.i, 16
  %249 = and i32 %248, 16711680
  %250 = and i32 %res.0.i10.i228.i, -16777216
  %251 = or i32 %250, %247
  %252 = or i32 %251, %249
  %253 = and i32 %res.0.i.i224.i, 65535
  %254 = and i32 %res.0.i10.i228.i, 983040
  %255 = or i32 %254, %253
  %256 = and i32 %res.0.i10.i228.i, 8388608
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %get_seg_limit.exit220.i, label %258

; <label>:258                                     ; preds = %246
  %259 = shl nuw i32 %255, 12
  %260 = or i32 %259, 4095
  br label %get_seg_limit.exit220.i

get_seg_limit.exit220.i:                          ; preds = %258, %246
  %limit.0.i219.i = phi i32 [ %260, %258 ], [ %255, %246 ]
  %261 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 0
  store i32 %new_cs.0.i, i32* %261, align 4
  %262 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 1
  store i32 %252, i32* %262, align 4
  %263 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i219.i, i32* %263, align 4
  %264 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i228.i, i32* %264, align 4
  %265 = lshr i32 %res.0.i10.i228.i, 18
  %266 = and i32 %265, 16
  %267 = and i32 %222, -32785
  %268 = or i32 %267, %266
  store i32 %268, i32* %221, align 4
  %269 = lshr i32 %71, 17
  %270 = and i32 %269, 32
  %271 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 0
  %272 = load i32* %271, align 4
  %273 = and i32 %272, 1
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %279, label %275

; <label>:275                                     ; preds = %get_seg_limit.exit220.i
  %276 = and i32 %3, 131072
  %277 = icmp ne i32 %276, 0
  %278 = icmp eq i32 %266, 0
  %or.cond256.i = or i1 %277, %278
  br i1 %or.cond256.i, label %279, label %281

; <label>:279                                     ; preds = %275, %get_seg_limit.exit220.i
  %280 = or i32 %270, 64
  br label %cpu_x86_load_seg_cache.exit218.i

; <label>:281                                     ; preds = %275
  %282 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 3, i32 1
  %283 = load i32* %282, align 4
  %284 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 0, i32 1
  %285 = load i32* %284, align 4
  %286 = or i32 %283, %79
  %287 = or i32 %286, %285
  %288 = icmp ne i32 %287, 0
  %289 = zext i1 %288 to i32
  %290 = shl nuw nsw i32 %289, 6
  %291 = or i32 %290, %270
  br label %cpu_x86_load_seg_cache.exit218.i

cpu_x86_load_seg_cache.exit218.i:                 ; preds = %281, %279
  %new_hflags.0.i217.i = phi i32 [ %280, %279 ], [ %291, %281 ]
  %292 = and i32 %268, -32865
  %293 = or i32 %new_hflags.0.i217.i, %292
  store i32 %293, i32* %221, align 4
  br label %validate_seg.exit.i

; <label>:294                                     ; preds = %242
  %295 = and i32 %sp.0.i, %75
  %296 = add i32 %295, %79
  %297 = lshr i32 %296, 12
  %298 = and i32 %297, 255
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %299, i32 0
  %301 = load i32* %300, align 4
  br i1 %80, label %302, label %326

; <label>:302                                     ; preds = %294
  %303 = and i32 %296, -4093
  %304 = icmp eq i32 %301, %303
  %305 = zext i32 %296 to i64
  br i1 %304, label %306, label %ldl_kernel.exit216.i, !prof !0

; <label>:306                                     ; preds = %302
  %307 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %299, i32 3
  %308 = load i64* %307, align 8
  %309 = add i64 %308, %305
  br label %ldl_kernel.exit216.i

ldl_kernel.exit216.i:                             ; preds = %306, %302
  %res.0.in.in.i213.i = phi i64 [ %309, %306 ], [ %305, %302 ]
  %res.0.in.i214.i = inttoptr i64 %res.0.in.in.i213.i to i32*
  %res.0.i215.i = load i32* %res.0.in.i214.i, align 4
  %310 = add i32 %sp.0.i, 4
  %311 = and i32 %310, %75
  %312 = add i32 %311, %79
  %313 = lshr i32 %312, 12
  %314 = and i32 %313, 255
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %315, i32 0
  %317 = load i32* %316, align 4
  %318 = and i32 %312, -4093
  %319 = icmp eq i32 %317, %318
  %320 = zext i32 %312 to i64
  br i1 %319, label %321, label %ldl_kernel.exit212.i, !prof !0

; <label>:321                                     ; preds = %ldl_kernel.exit216.i
  %322 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %315, i32 3
  %323 = load i64* %322, align 8
  %324 = add i64 %323, %320
  br label %ldl_kernel.exit212.i

ldl_kernel.exit212.i:                             ; preds = %321, %ldl_kernel.exit216.i
  %res.0.in.in.i209.i = phi i64 [ %324, %321 ], [ %320, %ldl_kernel.exit216.i ]
  %res.0.in.i210.i = inttoptr i64 %res.0.in.in.i209.i to i32*
  %res.0.i211.i = load i32* %res.0.in.i210.i, align 4
  %325 = and i32 %res.0.i211.i, 65535
  br label %351

; <label>:326                                     ; preds = %294
  %327 = and i32 %296, -4095
  %328 = icmp eq i32 %301, %327
  %329 = zext i32 %296 to i64
  br i1 %328, label %330, label %lduw_kernel.exit208.i, !prof !0

; <label>:330                                     ; preds = %326
  %331 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %299, i32 3
  %332 = load i64* %331, align 8
  %333 = add i64 %332, %329
  br label %lduw_kernel.exit208.i

lduw_kernel.exit208.i:                            ; preds = %330, %326
  %.sink.in.in.i205.i = phi i64 [ %333, %330 ], [ %329, %326 ]
  %.sink.in.i206.i = inttoptr i64 %.sink.in.in.i205.i to i16*
  %.sink.i207.i = load i16* %.sink.in.i206.i, align 2
  %334 = zext i16 %.sink.i207.i to i32
  %335 = add i32 %sp.0.i, 2
  %336 = and i32 %335, %75
  %337 = add i32 %336, %79
  %338 = lshr i32 %337, 12
  %339 = and i32 %338, 255
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %340, i32 0
  %342 = load i32* %341, align 4
  %343 = and i32 %337, -4095
  %344 = icmp eq i32 %342, %343
  %345 = zext i32 %337 to i64
  br i1 %344, label %346, label %lduw_kernel.exit204.i, !prof !0

; <label>:346                                     ; preds = %lduw_kernel.exit208.i
  %347 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %340, i32 3
  %348 = load i64* %347, align 8
  %349 = add i64 %348, %345
  br label %lduw_kernel.exit204.i

lduw_kernel.exit204.i:                            ; preds = %346, %lduw_kernel.exit208.i
  %.sink.in.in.i201.i = phi i64 [ %349, %346 ], [ %345, %lduw_kernel.exit208.i ]
  %.sink.in.i202.i = inttoptr i64 %.sink.in.in.i201.i to i16*
  %.sink.i203.i = load i16* %.sink.in.i202.i, align 2
  %350 = zext i16 %.sink.i203.i to i32
  br label %351

; <label>:351                                     ; preds = %lduw_kernel.exit204.i, %ldl_kernel.exit212.i
  %new_ss.0.i = phi i32 [ %325, %ldl_kernel.exit212.i ], [ %350, %lduw_kernel.exit204.i ]
  %new_esp.0.i = phi i32 [ %res.0.i215.i, %ldl_kernel.exit212.i ], [ %334, %lduw_kernel.exit204.i ]
  %352 = and i32 %new_ss.0.i, 65532
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %355

; <label>:354                                     ; preds = %351
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

; <label>:355                                     ; preds = %351
  %356 = and i32 %new_ss.0.i, 3
  %357 = icmp eq i32 %356, %224
  br i1 %357, label %359, label %358

; <label>:358                                     ; preds = %355
  tail call fastcc void @raise_exception_err(i32 13, i32 %352) noreturn nounwind
  unreachable

; <label>:359                                     ; preds = %355
  %360 = and i32 %new_ss.0.i, 4
  %361 = icmp eq i32 %360, 0
  %dt.0.i.i = select i1 %361, %struct.SegmentCache* %180, %struct.SegmentCache* %179
  %362 = or i32 %new_ss.0.i, 7
  %363 = getelementptr inbounds %struct.SegmentCache* %dt.0.i.i, i64 0, i32 2
  %364 = load i32* %363, align 4
  %365 = icmp ugt i32 %362, %364
  br i1 %365, label %396, label %366

; <label>:366                                     ; preds = %359
  %367 = and i32 %new_ss.0.i, 65528
  %368 = getelementptr inbounds %struct.SegmentCache* %dt.0.i.i, i64 0, i32 1
  %369 = load i32* %368, align 4
  %370 = add i32 %369, %367
  %371 = lshr i32 %370, 12
  %372 = and i32 %371, 255
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %373, i32 0
  %375 = load i32* %374, align 4
  %376 = and i32 %370, -4093
  %377 = icmp eq i32 %375, %376
  %378 = zext i32 %370 to i64
  br i1 %377, label %379, label %ldl_kernel.exit.i.i, !prof !0

; <label>:379                                     ; preds = %366
  %380 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %373, i32 3
  %381 = load i64* %380, align 8
  %382 = add i64 %381, %378
  br label %ldl_kernel.exit.i.i

ldl_kernel.exit.i.i:                              ; preds = %379, %366
  %res.0.in.in.i.i.i = phi i64 [ %382, %379 ], [ %378, %366 ]
  %res.0.in.i.i.i = inttoptr i64 %res.0.in.in.i.i.i to i32*
  %res.0.i.i.i = load i32* %res.0.in.i.i.i, align 4
  %383 = add i32 %370, 4
  %384 = lshr i32 %383, 12
  %385 = and i32 %384, 255
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %386, i32 0
  %388 = load i32* %387, align 4
  %389 = and i32 %383, -4093
  %390 = icmp eq i32 %388, %389
  %391 = zext i32 %383 to i64
  br i1 %390, label %392, label %397, !prof !0

; <label>:392                                     ; preds = %ldl_kernel.exit.i.i
  %393 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %386, i32 3
  %394 = load i64* %393, align 8
  %395 = add i64 %394, %391
  br label %397

; <label>:396                                     ; preds = %359
  tail call fastcc void @raise_exception_err(i32 13, i32 %352) noreturn nounwind
  unreachable

; <label>:397                                     ; preds = %392, %ldl_kernel.exit.i.i
  %res.0.in.in.i8.i.i = phi i64 [ %395, %392 ], [ %391, %ldl_kernel.exit.i.i ]
  %res.0.in.i9.i.i = inttoptr i64 %res.0.in.in.i8.i.i to i32*
  %res.0.i10.i.i = load i32* %res.0.in.i9.i.i, align 4
  %398 = and i32 %res.0.i10.i.i, 6656
  %399 = icmp eq i32 %398, 4608
  br i1 %399, label %401, label %400

; <label>:400                                     ; preds = %397
  tail call fastcc void @raise_exception_err(i32 13, i32 %352) noreturn nounwind
  unreachable

; <label>:401                                     ; preds = %397
  %402 = lshr i32 %res.0.i10.i.i, 13
  %403 = and i32 %402, 3
  %404 = icmp eq i32 %403, %224
  br i1 %404, label %406, label %405

; <label>:405                                     ; preds = %401
  tail call fastcc void @raise_exception_err(i32 13, i32 %352) noreturn nounwind
  unreachable

; <label>:406                                     ; preds = %401
  %407 = and i32 %res.0.i10.i.i, 32768
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %410

; <label>:409                                     ; preds = %406
  tail call fastcc void @raise_exception_err(i32 11, i32 %352) noreturn nounwind
  unreachable

; <label>:410                                     ; preds = %406
  %411 = lshr i32 %res.0.i.i.i, 16
  %412 = shl i32 %res.0.i10.i.i, 16
  %413 = and i32 %412, 16711680
  %414 = and i32 %res.0.i10.i.i, -16777216
  %415 = or i32 %414, %411
  %416 = or i32 %415, %413
  %417 = and i32 %res.0.i.i.i, 65535
  %418 = and i32 %res.0.i10.i.i, 983040
  %419 = or i32 %418, %417
  %420 = and i32 %res.0.i10.i.i, 8388608
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %get_seg_limit.exit180.i, label %422

; <label>:422                                     ; preds = %410
  %423 = shl nuw i32 %419, 12
  %424 = or i32 %423, 4095
  br label %get_seg_limit.exit180.i

get_seg_limit.exit180.i:                          ; preds = %422, %410
  %limit.0.i179.i = phi i32 [ %424, %422 ], [ %419, %410 ]
  %425 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 0
  store i32 %new_ss.0.i, i32* %425, align 4
  store i32 %416, i32* %78, align 4
  %426 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 2
  store i32 %limit.0.i179.i, i32* %426, align 4
  store i32 %res.0.i10.i.i, i32* %70, align 4
  %427 = lshr i32 %res.0.i10.i.i, 17
  %428 = and i32 %427, 32
  br i1 %245, label %429, label %cpu_x86_load_seg_cache.exit178.i

; <label>:429                                     ; preds = %get_seg_limit.exit180.i
  %430 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 0
  %431 = load i32* %430, align 4
  %432 = and i32 %431, 1
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %440, label %434

; <label>:434                                     ; preds = %429
  %435 = and i32 %3, 131072
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %440

; <label>:437                                     ; preds = %434
  %438 = and i32 %222, 16
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %442

; <label>:440                                     ; preds = %437, %434, %429
  %441 = or i32 %428, 64
  br label %cpu_x86_load_seg_cache.exit178.i

; <label>:442                                     ; preds = %437
  %443 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 3, i32 1
  %444 = load i32* %443, align 4
  %445 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 0, i32 1
  %446 = load i32* %445, align 4
  %447 = or i32 %444, %416
  %448 = or i32 %447, %446
  %449 = icmp ne i32 %448, 0
  %450 = zext i1 %449 to i32
  %451 = shl nuw nsw i32 %450, 6
  %452 = or i32 %451, %428
  br label %cpu_x86_load_seg_cache.exit178.i

cpu_x86_load_seg_cache.exit178.i:                 ; preds = %442, %440, %get_seg_limit.exit180.i
  %new_hflags.0.i177.i = phi i32 [ %428, %get_seg_limit.exit180.i ], [ %441, %440 ], [ %452, %442 ]
  %453 = and i32 %222, -97
  %454 = or i32 %new_hflags.0.i177.i, %453
  store i32 %454, i32* %221, align 4
  %455 = load %struct.CPUX86State** @env, align 8
  %456 = lshr i32 %res.0.i.i224.i, 16
  %457 = shl i32 %res.0.i10.i228.i, 16
  %458 = and i32 %457, 16711680
  %459 = and i32 %res.0.i10.i228.i, -16777216
  %460 = or i32 %459, %456
  %461 = or i32 %460, %458
  %462 = and i32 %res.0.i.i224.i, 65535
  %463 = and i32 %res.0.i10.i228.i, 983040
  %464 = or i32 %463, %462
  %465 = and i32 %res.0.i10.i228.i, 8388608
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %get_seg_limit.exit.i, label %467

; <label>:467                                     ; preds = %cpu_x86_load_seg_cache.exit178.i
  %468 = shl nuw i32 %464, 12
  %469 = or i32 %468, 4095
  br label %get_seg_limit.exit.i

get_seg_limit.exit.i:                             ; preds = %467, %cpu_x86_load_seg_cache.exit178.i
  %limit.0.i.i = phi i32 [ %469, %467 ], [ %464, %cpu_x86_load_seg_cache.exit178.i ]
  %470 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 1, i32 0
  store i32 %new_cs.0.i, i32* %470, align 4
  %471 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 1, i32 1
  store i32 %461, i32* %471, align 4
  %472 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i.i, i32* %472, align 4
  %473 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i228.i, i32* %473, align 4
  %474 = lshr i32 %res.0.i10.i228.i, 18
  %475 = and i32 %474, 16
  %476 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 7
  %477 = load i32* %476, align 4
  %478 = and i32 %477, -32785
  %479 = or i32 %478, %475
  store i32 %479, i32* %476, align 4
  %480 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 2, i32 3
  %481 = load i32* %480, align 4
  %482 = lshr i32 %481, 17
  %483 = and i32 %482, 32
  %484 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 14, i64 0
  %485 = load i32* %484, align 4
  %486 = and i32 %485, 1
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %494, label %488

; <label>:488                                     ; preds = %get_seg_limit.exit.i
  %489 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 2
  %490 = load i32* %489, align 4
  %491 = and i32 %490, 131072
  %492 = icmp ne i32 %491, 0
  %493 = icmp eq i32 %475, 0
  %or.cond257.i = or i1 %492, %493
  br i1 %or.cond257.i, label %494, label %496

; <label>:494                                     ; preds = %488, %get_seg_limit.exit.i
  %495 = or i32 %483, 64
  br label %cpu_x86_load_seg_cache.exit.i

; <label>:496                                     ; preds = %488
  %497 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 3, i32 1
  %498 = load i32* %497, align 4
  %499 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 0, i32 1
  %500 = load i32* %499, align 4
  %501 = or i32 %500, %498
  %502 = getelementptr inbounds %struct.CPUX86State* %455, i64 0, i32 9, i64 2, i32 1
  %503 = load i32* %502, align 4
  %504 = or i32 %501, %503
  %505 = icmp ne i32 %504, 0
  %506 = zext i1 %505 to i32
  %507 = shl nuw nsw i32 %506, 6
  %508 = or i32 %507, %483
  br label %cpu_x86_load_seg_cache.exit.i

cpu_x86_load_seg_cache.exit.i:                    ; preds = %496, %494
  %new_hflags.0.i.i = phi i32 [ %495, %494 ], [ %508, %496 ]
  %509 = and i32 %479, -32865
  %510 = or i32 %new_hflags.0.i.i, %509
  store i32 %510, i32* %476, align 4
  %511 = load %struct.CPUX86State** @env, align 8
  %512 = getelementptr inbounds %struct.CPUX86State* %511, i64 0, i32 7
  %513 = load i32* %512, align 4
  %514 = and i32 %513, -4
  %515 = or i32 %514, %224
  store i32 %515, i32* %512, align 4
  %516 = lshr i32 %res.0.i10.i.i, 6
  %517 = and i32 %516, 65536
  %518 = xor i32 %517, 65536
  %519 = add i32 %518, -1
  %.pre.i169.i = load %struct.CPUX86State** @env, align 8
  %520 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 0, i32 3
  %521 = load i32* %520, align 4
  %522 = lshr i32 %521, 13
  %523 = and i32 %522, 3
  %524 = and i32 %521, 3072
  %525 = icmp ne i32 %524, 3072
  %526 = icmp ult i32 %523, %224
  %or.cond10.i170.i = and i1 %525, %526
  br i1 %or.cond10.i170.i, label %527, label %validate_seg.exit175.i

; <label>:527                                     ; preds = %cpu_x86_load_seg_cache.exit.i
  %528 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 0, i32 0
  %529 = bitcast i32* %528 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %529, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i171.i = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 7
  %.pre.i.i172.i = load i32* %.phi.trans.insert.i.i171.i, align 4
  %530 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 2, i32 3
  %531 = load i32* %530, align 4
  %532 = lshr i32 %531, 17
  %533 = and i32 %532, 32
  %534 = and i32 %.pre.i.i172.i, 32768
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %536, label %cpu_x86_load_seg_cache.exit.i174.i

; <label>:536                                     ; preds = %527
  %537 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 14, i64 0
  %538 = load i32* %537, align 4
  %539 = and i32 %538, 1
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %549, label %541

; <label>:541                                     ; preds = %536
  %542 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 2
  %543 = load i32* %542, align 4
  %544 = and i32 %543, 131072
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %546, label %549

; <label>:546                                     ; preds = %541
  %547 = and i32 %.pre.i.i172.i, 16
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %549, label %551

; <label>:549                                     ; preds = %546, %541, %536
  %550 = or i32 %533, 64
  br label %cpu_x86_load_seg_cache.exit.i174.i

; <label>:551                                     ; preds = %546
  %552 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 3, i32 1
  %553 = load i32* %552, align 4
  %554 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 2, i32 1
  %555 = load i32* %554, align 4
  %556 = or i32 %555, %553
  %557 = icmp ne i32 %556, 0
  %558 = zext i1 %557 to i32
  %559 = shl nuw nsw i32 %558, 6
  %560 = or i32 %559, %533
  br label %cpu_x86_load_seg_cache.exit.i174.i

cpu_x86_load_seg_cache.exit.i174.i:               ; preds = %551, %549, %527
  %new_hflags.0.i.i173.i = phi i32 [ %533, %527 ], [ %550, %549 ], [ %560, %551 ]
  %561 = and i32 %.pre.i.i172.i, -97
  %562 = or i32 %new_hflags.0.i.i173.i, %561
  store i32 %562, i32* %.phi.trans.insert.i.i171.i, align 4
  %.pre.i.pre.i = load %struct.CPUX86State** @env, align 8
  br label %validate_seg.exit175.i

validate_seg.exit175.i:                           ; preds = %cpu_x86_load_seg_cache.exit.i174.i, %cpu_x86_load_seg_cache.exit.i
  %.pre.i.i = phi %struct.CPUX86State* [ %.pre.i169.i, %cpu_x86_load_seg_cache.exit.i ], [ %.pre.i.pre.i, %cpu_x86_load_seg_cache.exit.i174.i ]
  %563 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 3, i32 3
  %564 = load i32* %563, align 4
  %565 = lshr i32 %564, 13
  %566 = and i32 %565, 3
  %567 = and i32 %564, 3072
  %568 = icmp ne i32 %567, 3072
  %569 = icmp ult i32 %566, %224
  %or.cond10.i163.i = and i1 %568, %569
  br i1 %or.cond10.i163.i, label %570, label %validate_seg.exit168.i

; <label>:570                                     ; preds = %validate_seg.exit175.i
  %571 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 3, i32 0
  %572 = bitcast i32* %571 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %572, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i164.i = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 7
  %.pre.i.i165.i = load i32* %.phi.trans.insert.i.i164.i, align 4
  %573 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 2, i32 3
  %574 = load i32* %573, align 4
  %575 = lshr i32 %574, 17
  %576 = and i32 %575, 32
  %577 = and i32 %.pre.i.i165.i, 32768
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %579, label %cpu_x86_load_seg_cache.exit.i167.i

; <label>:579                                     ; preds = %570
  %580 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 14, i64 0
  %581 = load i32* %580, align 4
  %582 = and i32 %581, 1
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %592, label %584

; <label>:584                                     ; preds = %579
  %585 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 2
  %586 = load i32* %585, align 4
  %587 = and i32 %586, 131072
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %589, label %592

; <label>:589                                     ; preds = %584
  %590 = and i32 %.pre.i.i165.i, 16
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %592, label %594

; <label>:592                                     ; preds = %589, %584, %579
  %593 = or i32 %576, 64
  br label %cpu_x86_load_seg_cache.exit.i167.i

; <label>:594                                     ; preds = %589
  %595 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 0, i32 1
  %596 = load i32* %595, align 4
  %597 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 2, i32 1
  %598 = load i32* %597, align 4
  %599 = or i32 %598, %596
  %600 = icmp ne i32 %599, 0
  %601 = zext i1 %600 to i32
  %602 = shl nuw nsw i32 %601, 6
  %603 = or i32 %602, %576
  br label %cpu_x86_load_seg_cache.exit.i167.i

cpu_x86_load_seg_cache.exit.i167.i:               ; preds = %594, %592, %570
  %new_hflags.0.i.i166.i = phi i32 [ %576, %570 ], [ %593, %592 ], [ %603, %594 ]
  %604 = and i32 %.pre.i.i165.i, -97
  %605 = or i32 %new_hflags.0.i.i166.i, %604
  store i32 %605, i32* %.phi.trans.insert.i.i164.i, align 4
  %.pre.i = load %struct.CPUX86State** @env, align 8
  br label %validate_seg.exit168.i

validate_seg.exit168.i:                           ; preds = %cpu_x86_load_seg_cache.exit.i167.i, %validate_seg.exit175.i
  %606 = phi %struct.CPUX86State* [ %.pre.i.i, %validate_seg.exit175.i ], [ %.pre.i, %cpu_x86_load_seg_cache.exit.i167.i ]
  %607 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 9, i64 4, i32 0
  %608 = load i32* %607, align 4
  %609 = and i32 %608, 65532
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %validate_seg.exit162.i, label %611

; <label>:611                                     ; preds = %validate_seg.exit168.i
  %612 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 9, i64 4, i32 3
  %613 = load i32* %612, align 4
  %614 = lshr i32 %613, 13
  %615 = and i32 %614, 3
  %616 = and i32 %613, 3072
  %617 = icmp ne i32 %616, 3072
  %618 = icmp ult i32 %615, %224
  %or.cond10.i157.i = and i1 %617, %618
  br i1 %or.cond10.i157.i, label %619, label %validate_seg.exit162.i

; <label>:619                                     ; preds = %611
  %620 = bitcast i32* %607 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %620, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i158.i = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 7
  %.pre.i.i159.i = load i32* %.phi.trans.insert.i.i158.i, align 4
  %621 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 9, i64 2, i32 3
  %622 = load i32* %621, align 4
  %623 = lshr i32 %622, 17
  %624 = and i32 %623, 32
  %625 = and i32 %.pre.i.i159.i, 32768
  %626 = icmp eq i32 %625, 0
  br i1 %626, label %627, label %cpu_x86_load_seg_cache.exit.i161.i

; <label>:627                                     ; preds = %619
  %628 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 14, i64 0
  %629 = load i32* %628, align 4
  %630 = and i32 %629, 1
  %631 = icmp eq i32 %630, 0
  br i1 %631, label %640, label %632

; <label>:632                                     ; preds = %627
  %633 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 2
  %634 = load i32* %633, align 4
  %635 = and i32 %634, 131072
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %637, label %640

; <label>:637                                     ; preds = %632
  %638 = and i32 %.pre.i.i159.i, 16
  %639 = icmp eq i32 %638, 0
  br i1 %639, label %640, label %642

; <label>:640                                     ; preds = %637, %632, %627
  %641 = or i32 %624, 64
  br label %cpu_x86_load_seg_cache.exit.i161.i

; <label>:642                                     ; preds = %637
  %643 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 9, i64 3, i32 1
  %644 = load i32* %643, align 4
  %645 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 9, i64 0, i32 1
  %646 = load i32* %645, align 4
  %647 = or i32 %646, %644
  %648 = getelementptr inbounds %struct.CPUX86State* %606, i64 0, i32 9, i64 2, i32 1
  %649 = load i32* %648, align 4
  %650 = or i32 %647, %649
  %651 = icmp ne i32 %650, 0
  %652 = zext i1 %651 to i32
  %653 = shl nuw nsw i32 %652, 6
  %654 = or i32 %653, %624
  br label %cpu_x86_load_seg_cache.exit.i161.i

cpu_x86_load_seg_cache.exit.i161.i:               ; preds = %642, %640, %619
  %new_hflags.0.i.i160.i = phi i32 [ %624, %619 ], [ %641, %640 ], [ %654, %642 ]
  %655 = and i32 %.pre.i.i159.i, -97
  %656 = or i32 %new_hflags.0.i.i160.i, %655
  store i32 %656, i32* %.phi.trans.insert.i.i158.i, align 4
  %.pre259.i = load %struct.CPUX86State** @env, align 8
  br label %validate_seg.exit162.i

validate_seg.exit162.i:                           ; preds = %cpu_x86_load_seg_cache.exit.i161.i, %611, %validate_seg.exit168.i
  %657 = phi %struct.CPUX86State* [ %606, %validate_seg.exit168.i ], [ %606, %611 ], [ %.pre259.i, %cpu_x86_load_seg_cache.exit.i161.i ]
  %658 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 9, i64 5, i32 0
  %659 = load i32* %658, align 4
  %660 = and i32 %659, 65532
  %661 = icmp eq i32 %660, 0
  br i1 %661, label %validate_seg.exit.i, label %662

; <label>:662                                     ; preds = %validate_seg.exit162.i
  %663 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 9, i64 5, i32 3
  %664 = load i32* %663, align 4
  %665 = lshr i32 %664, 13
  %666 = and i32 %665, 3
  %667 = and i32 %664, 3072
  %668 = icmp ne i32 %667, 3072
  %669 = icmp ult i32 %666, %224
  %or.cond10.i.i = and i1 %668, %669
  br i1 %or.cond10.i.i, label %670, label %validate_seg.exit.i

; <label>:670                                     ; preds = %662
  %671 = bitcast i32* %658 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %671, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i154.i = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 7
  %.pre.i.i155.i = load i32* %.phi.trans.insert.i.i154.i, align 4
  %672 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 9, i64 2, i32 3
  %673 = load i32* %672, align 4
  %674 = lshr i32 %673, 17
  %675 = and i32 %674, 32
  %676 = and i32 %.pre.i.i155.i, 32768
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %cpu_x86_load_seg_cache.exit.i.i

; <label>:678                                     ; preds = %670
  %679 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 14, i64 0
  %680 = load i32* %679, align 4
  %681 = and i32 %680, 1
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %691, label %683

; <label>:683                                     ; preds = %678
  %684 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 2
  %685 = load i32* %684, align 4
  %686 = and i32 %685, 131072
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %688, label %691

; <label>:688                                     ; preds = %683
  %689 = and i32 %.pre.i.i155.i, 16
  %690 = icmp eq i32 %689, 0
  br i1 %690, label %691, label %693

; <label>:691                                     ; preds = %688, %683, %678
  %692 = or i32 %675, 64
  br label %cpu_x86_load_seg_cache.exit.i.i

; <label>:693                                     ; preds = %688
  %694 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 9, i64 3, i32 1
  %695 = load i32* %694, align 4
  %696 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 9, i64 0, i32 1
  %697 = load i32* %696, align 4
  %698 = or i32 %697, %695
  %699 = getelementptr inbounds %struct.CPUX86State* %657, i64 0, i32 9, i64 2, i32 1
  %700 = load i32* %699, align 4
  %701 = or i32 %698, %700
  %702 = icmp ne i32 %701, 0
  %703 = zext i1 %702 to i32
  %704 = shl nuw nsw i32 %703, 6
  %705 = or i32 %704, %675
  br label %cpu_x86_load_seg_cache.exit.i.i

cpu_x86_load_seg_cache.exit.i.i:                  ; preds = %693, %691, %670
  %new_hflags.0.i.i156.i = phi i32 [ %675, %670 ], [ %692, %691 ], [ %705, %693 ]
  %706 = and i32 %.pre.i.i155.i, -97
  %707 = or i32 %new_hflags.0.i.i156.i, %706
  store i32 %707, i32* %.phi.trans.insert.i.i154.i, align 4
  br label %validate_seg.exit.i

validate_seg.exit.i:                              ; preds = %cpu_x86_load_seg_cache.exit.i.i, %662, %validate_seg.exit162.i, %cpu_x86_load_seg_cache.exit218.i
  %sp.1.i = phi i32 [ %sp.0.i, %cpu_x86_load_seg_cache.exit218.i ], [ %new_esp.0.i, %cpu_x86_load_seg_cache.exit.i.i ], [ %new_esp.0.i, %662 ], [ %new_esp.0.i, %validate_seg.exit162.i ]
  %sp_mask.0.i = phi i32 [ %75, %cpu_x86_load_seg_cache.exit218.i ], [ %519, %cpu_x86_load_seg_cache.exit.i.i ], [ %519, %662 ], [ %519, %validate_seg.exit162.i ]
  %708 = load %struct.CPUX86State** @env, align 8
  %709 = getelementptr inbounds %struct.CPUX86State* %708, i64 0, i32 0, i64 4
  %710 = load i32* %709, align 4
  %711 = xor i32 %sp_mask.0.i, -1
  %712 = and i32 %710, %711
  %713 = and i32 %sp_mask.0.i, %sp.1.i
  %714 = or i32 %712, %713
  store i32 %714, i32* %709, align 4
  %715 = load %struct.CPUX86State** @env, align 8
  %716 = getelementptr inbounds %struct.CPUX86State* %715, i64 0, i32 1
  store i32 %new_eip.0.i, i32* %716, align 4
  %717 = icmp eq i32 %223, 0
  %..i = select i1 %717, i32 2453760, i32 2441472
  %718 = load %struct.CPUX86State** @env, align 8
  %719 = getelementptr inbounds %struct.CPUX86State* %718, i64 0, i32 2
  %720 = load i32* %719, align 4
  %721 = lshr i32 %720, 12
  %722 = and i32 %721, 3
  %723 = icmp ugt i32 %223, %722
  %724 = or i32 %..i, 512
  %eflags_mask.1.i = select i1 %723, i32 %..i, i32 %724
  %725 = icmp eq i32 %shift, 0
  %726 = and i32 %eflags_mask.1.i, 29440
  %.eflags_mask.1.i = select i1 %725, i32 %726, i32 %eflags_mask.1.i
  %727 = and i32 %new_eflags.0.i, 2261
  %728 = getelementptr inbounds %struct.CPUX86State* %718, i64 0, i32 3
  store i32 %727, i32* %728, align 4
  %729 = lshr i32 %new_eflags.0.i, 10
  %730 = shl nuw nsw i32 %729, 1
  %731 = and i32 %730, 2
  %732 = sub nsw i32 1, %731
  %733 = load %struct.CPUX86State** @env, align 8
  %734 = getelementptr inbounds %struct.CPUX86State* %733, i64 0, i32 6
  store i32 %732, i32* %734, align 4
  %735 = load %struct.CPUX86State** @env, align 8
  %736 = getelementptr inbounds %struct.CPUX86State* %735, i64 0, i32 2
  %737 = load i32* %736, align 4
  %738 = xor i32 %.eflags_mask.1.i, -3
  %739 = and i32 %738, %737
  %740 = and i32 %.eflags_mask.1.i, %new_eflags.0.i
  %741 = or i32 %740, %739
  %742 = or i32 %741, 2
  store i32 %742, i32* %736, align 4
  br label %helper_ret_protected.exit

; <label>:743                                     ; preds = %ldl_kernel.exit192.i
  %744 = and i32 %75, %127
  %745 = add i32 %744, %79
  %746 = lshr i32 %745, 12
  %747 = and i32 %746, 255
  %748 = zext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %748, i32 0
  %750 = load i32* %749, align 4
  %751 = and i32 %745, -4093
  %752 = icmp eq i32 %750, %751
  %753 = zext i32 %745 to i64
  br i1 %752, label %754, label %ldl_kernel.exit153.i, !prof !0

; <label>:754                                     ; preds = %743
  %755 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %748, i32 3
  %756 = load i64* %755, align 8
  %757 = add i64 %756, %753
  br label %ldl_kernel.exit153.i

ldl_kernel.exit153.i:                             ; preds = %754, %743
  %res.0.in.in.i150.i = phi i64 [ %757, %754 ], [ %753, %743 ]
  %res.0.in.i151.i = inttoptr i64 %res.0.in.in.i150.i to i32*
  %res.0.i152.i = load i32* %res.0.in.i151.i, align 4
  %758 = add i32 %77, 16
  %759 = and i32 %75, %758
  %760 = add i32 %759, %79
  %761 = lshr i32 %760, 12
  %762 = and i32 %761, 255
  %763 = zext i32 %762 to i64
  %764 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %763, i32 0
  %765 = load i32* %764, align 4
  %766 = and i32 %760, -4093
  %767 = icmp eq i32 %765, %766
  %768 = zext i32 %760 to i64
  br i1 %767, label %769, label %ldl_kernel.exit149.i, !prof !0

; <label>:769                                     ; preds = %ldl_kernel.exit153.i
  %770 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %763, i32 3
  %771 = load i64* %770, align 8
  %772 = add i64 %771, %768
  br label %ldl_kernel.exit149.i

ldl_kernel.exit149.i:                             ; preds = %769, %ldl_kernel.exit153.i
  %res.0.in.in.i146.i = phi i64 [ %772, %769 ], [ %768, %ldl_kernel.exit153.i ]
  %res.0.in.i147.i = inttoptr i64 %res.0.in.in.i146.i to i32*
  %res.0.i148.i = load i32* %res.0.in.i147.i, align 4
  %773 = add i32 %77, 20
  %774 = and i32 %75, %773
  %775 = add i32 %774, %79
  %776 = lshr i32 %775, 12
  %777 = and i32 %776, 255
  %778 = zext i32 %777 to i64
  %779 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %778, i32 0
  %780 = load i32* %779, align 4
  %781 = and i32 %775, -4093
  %782 = icmp eq i32 %780, %781
  %783 = zext i32 %775 to i64
  br i1 %782, label %784, label %ldl_kernel.exit145.i, !prof !0

; <label>:784                                     ; preds = %ldl_kernel.exit149.i
  %785 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %778, i32 3
  %786 = load i64* %785, align 8
  %787 = add i64 %786, %783
  br label %ldl_kernel.exit145.i

ldl_kernel.exit145.i:                             ; preds = %784, %ldl_kernel.exit149.i
  %res.0.in.in.i142.i = phi i64 [ %787, %784 ], [ %783, %ldl_kernel.exit149.i ]
  %res.0.in.i143.i = inttoptr i64 %res.0.in.in.i142.i to i32*
  %res.0.i144.i = load i32* %res.0.in.i143.i, align 4
  %788 = add i32 %77, 24
  %789 = and i32 %75, %788
  %790 = add i32 %789, %79
  %791 = lshr i32 %790, 12
  %792 = and i32 %791, 255
  %793 = zext i32 %792 to i64
  %794 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %793, i32 0
  %795 = load i32* %794, align 4
  %796 = and i32 %790, -4093
  %797 = icmp eq i32 %795, %796
  %798 = zext i32 %790 to i64
  br i1 %797, label %799, label %ldl_kernel.exit141.i, !prof !0

; <label>:799                                     ; preds = %ldl_kernel.exit145.i
  %800 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %793, i32 3
  %801 = load i64* %800, align 8
  %802 = add i64 %801, %798
  br label %ldl_kernel.exit141.i

ldl_kernel.exit141.i:                             ; preds = %799, %ldl_kernel.exit145.i
  %res.0.in.in.i138.i = phi i64 [ %802, %799 ], [ %798, %ldl_kernel.exit145.i ]
  %res.0.in.i139.i = inttoptr i64 %res.0.in.in.i138.i to i32*
  %res.0.i140.i = load i32* %res.0.in.i139.i, align 4
  %803 = add i32 %77, 28
  %804 = and i32 %75, %803
  %805 = add i32 %804, %79
  %806 = lshr i32 %805, 12
  %807 = and i32 %806, 255
  %808 = zext i32 %807 to i64
  %809 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %808, i32 0
  %810 = load i32* %809, align 4
  %811 = and i32 %805, -4093
  %812 = icmp eq i32 %810, %811
  %813 = zext i32 %805 to i64
  br i1 %812, label %814, label %ldl_kernel.exit137.i, !prof !0

; <label>:814                                     ; preds = %ldl_kernel.exit141.i
  %815 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %808, i32 3
  %816 = load i64* %815, align 8
  %817 = add i64 %816, %813
  br label %ldl_kernel.exit137.i

ldl_kernel.exit137.i:                             ; preds = %814, %ldl_kernel.exit141.i
  %res.0.in.in.i134.i = phi i64 [ %817, %814 ], [ %813, %ldl_kernel.exit141.i ]
  %res.0.in.i135.i = inttoptr i64 %res.0.in.in.i134.i to i32*
  %res.0.i136.i = load i32* %res.0.in.i135.i, align 4
  %818 = add i32 %77, 32
  %819 = and i32 %75, %818
  %820 = add i32 %819, %79
  %821 = lshr i32 %820, 12
  %822 = and i32 %821, 255
  %823 = zext i32 %822 to i64
  %824 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %823, i32 0
  %825 = load i32* %824, align 4
  %826 = and i32 %820, -4093
  %827 = icmp eq i32 %825, %826
  %828 = zext i32 %820 to i64
  br i1 %827, label %829, label %ldl_kernel.exit.i, !prof !0

; <label>:829                                     ; preds = %ldl_kernel.exit137.i
  %830 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %823, i32 3
  %831 = load i64* %830, align 8
  %832 = add i64 %831, %828
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %829, %ldl_kernel.exit137.i
  %res.0.in.in.i.i = phi i64 [ %832, %829 ], [ %828, %ldl_kernel.exit137.i ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %833 = and i32 %res.0.i191.i, 2261
  %834 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %833, i32* %834, align 4
  %835 = lshr i32 %res.0.i191.i, 10
  %836 = shl nuw nsw i32 %835, 1
  %837 = and i32 %836, 2
  %838 = sub nsw i32 1, %837
  %839 = load %struct.CPUX86State** @env, align 8
  %840 = getelementptr inbounds %struct.CPUX86State* %839, i64 0, i32 6
  store i32 %838, i32* %840, align 4
  %841 = load %struct.CPUX86State** @env, align 8
  %842 = getelementptr inbounds %struct.CPUX86State* %841, i64 0, i32 2
  %843 = load i32* %842, align 4
  %844 = and i32 %843, -4092675
  %845 = and i32 %res.0.i191.i, 4092672
  %846 = or i32 %845, %844
  %847 = or i32 %846, 2
  store i32 %847, i32* %842, align 4
  %848 = load %struct.CPUX86State** @env, align 8
  %849 = shl nuw nsw i32 %112, 4
  %850 = getelementptr inbounds %struct.CPUX86State* %848, i64 0, i32 9, i64 1, i32 0
  store i32 %112, i32* %850, align 4
  %851 = getelementptr inbounds %struct.CPUX86State* %848, i64 0, i32 9, i64 1, i32 1
  store i32 %849, i32* %851, align 4
  %852 = getelementptr inbounds %struct.CPUX86State* %848, i64 0, i32 9, i64 1, i32 2
  store i32 65535, i32* %852, align 4
  %853 = getelementptr inbounds %struct.CPUX86State* %848, i64 0, i32 9, i64 1, i32 3
  store i32 0, i32* %853, align 4
  %854 = getelementptr inbounds %struct.CPUX86State* %848, i64 0, i32 7
  %855 = load i32* %854, align 4
  %856 = getelementptr inbounds %struct.CPUX86State* %848, i64 0, i32 9, i64 2, i32 3
  %857 = load i32* %856, align 4
  %858 = lshr i32 %857, 17
  %859 = and i32 %858, 32
  %860 = and i32 %855, -32881
  %861 = or i32 %860, %859
  %862 = or i32 %861, 64
  store i32 %862, i32* %854, align 4
  %863 = load %struct.CPUX86State** @env, align 8
  %864 = getelementptr inbounds %struct.CPUX86State* %863, i64 0, i32 7
  %865 = load i32* %864, align 4
  %866 = or i32 %865, 3
  store i32 %866, i32* %864, align 4
  %867 = and i32 %res.0.i148.i, 65535
  %868 = load %struct.CPUX86State** @env, align 8
  %869 = shl nuw nsw i32 %867, 4
  %870 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 9, i64 2, i32 0
  store i32 %867, i32* %870, align 4
  %871 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 9, i64 2, i32 1
  store i32 %869, i32* %871, align 4
  %872 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 9, i64 2, i32 2
  store i32 65535, i32* %872, align 4
  %873 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 9, i64 2, i32 3
  store i32 0, i32* %873, align 4
  %.phi.trans.insert.i.i128.i = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 7
  %.pre.i.i129.i = load i32* %.phi.trans.insert.i.i128.i, align 4
  %874 = and i32 %.pre.i.i129.i, 32768
  %875 = icmp eq i32 %874, 0
  br i1 %875, label %876, label %load_seg_vm.exit131.i

; <label>:876                                     ; preds = %ldl_kernel.exit.i
  %877 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 14, i64 0
  %878 = load i32* %877, align 4
  %879 = and i32 %878, 1
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %load_seg_vm.exit131.i, label %881

; <label>:881                                     ; preds = %876
  %882 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 2
  %883 = load i32* %882, align 4
  %884 = and i32 %883, 131072
  %885 = icmp eq i32 %884, 0
  br i1 %885, label %886, label %load_seg_vm.exit131.i

; <label>:886                                     ; preds = %881
  %887 = and i32 %.pre.i.i129.i, 16
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %load_seg_vm.exit131.i, label %889

; <label>:889                                     ; preds = %886
  %890 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 9, i64 3, i32 1
  %891 = load i32* %890, align 4
  %892 = getelementptr inbounds %struct.CPUX86State* %868, i64 0, i32 9, i64 0, i32 1
  %893 = load i32* %892, align 4
  %894 = or i32 %891, %869
  %895 = or i32 %894, %893
  %896 = icmp ne i32 %895, 0
  %897 = zext i1 %896 to i32
  %898 = shl nuw nsw i32 %897, 6
  br label %load_seg_vm.exit131.i

load_seg_vm.exit131.i:                            ; preds = %889, %886, %881, %876, %ldl_kernel.exit.i
  %new_hflags.0.i.i130.i = phi i32 [ 0, %ldl_kernel.exit.i ], [ %898, %889 ], [ 64, %886 ], [ 64, %881 ], [ 64, %876 ]
  %899 = and i32 %.pre.i.i129.i, -97
  %900 = or i32 %new_hflags.0.i.i130.i, %899
  store i32 %900, i32* %.phi.trans.insert.i.i128.i, align 4
  %901 = and i32 %res.0.i144.i, 65535
  %902 = load %struct.CPUX86State** @env, align 8
  %903 = shl nuw nsw i32 %901, 4
  %904 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 0, i32 0
  store i32 %901, i32* %904, align 4
  %905 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 0, i32 1
  store i32 %903, i32* %905, align 4
  %906 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 0, i32 2
  store i32 65535, i32* %906, align 4
  %907 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 0, i32 3
  store i32 0, i32* %907, align 4
  %.phi.trans.insert.i.i124.i = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 7
  %.pre.i.i125.i = load i32* %.phi.trans.insert.i.i124.i, align 4
  %908 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 2, i32 3
  %909 = load i32* %908, align 4
  %910 = lshr i32 %909, 17
  %911 = and i32 %910, 32
  %912 = and i32 %.pre.i.i125.i, 32768
  %913 = icmp eq i32 %912, 0
  br i1 %913, label %914, label %load_seg_vm.exit127.i

; <label>:914                                     ; preds = %load_seg_vm.exit131.i
  %915 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 14, i64 0
  %916 = load i32* %915, align 4
  %917 = and i32 %916, 1
  %918 = icmp eq i32 %917, 0
  br i1 %918, label %927, label %919

; <label>:919                                     ; preds = %914
  %920 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 2
  %921 = load i32* %920, align 4
  %922 = and i32 %921, 131072
  %923 = icmp eq i32 %922, 0
  br i1 %923, label %924, label %927

; <label>:924                                     ; preds = %919
  %925 = and i32 %.pre.i.i125.i, 16
  %926 = icmp eq i32 %925, 0
  br i1 %926, label %927, label %929

; <label>:927                                     ; preds = %924, %919, %914
  %928 = or i32 %911, 64
  br label %load_seg_vm.exit127.i

; <label>:929                                     ; preds = %924
  %930 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 3, i32 1
  %931 = load i32* %930, align 4
  %932 = or i32 %931, %903
  %933 = getelementptr inbounds %struct.CPUX86State* %902, i64 0, i32 9, i64 2, i32 1
  %934 = load i32* %933, align 4
  %935 = or i32 %932, %934
  %936 = icmp ne i32 %935, 0
  %937 = zext i1 %936 to i32
  %938 = shl nuw nsw i32 %937, 6
  %939 = or i32 %938, %911
  br label %load_seg_vm.exit127.i

load_seg_vm.exit127.i:                            ; preds = %929, %927, %load_seg_vm.exit131.i
  %new_hflags.0.i.i126.i = phi i32 [ %911, %load_seg_vm.exit131.i ], [ %928, %927 ], [ %939, %929 ]
  %940 = and i32 %.pre.i.i125.i, -97
  %941 = or i32 %new_hflags.0.i.i126.i, %940
  store i32 %941, i32* %.phi.trans.insert.i.i124.i, align 4
  %942 = and i32 %res.0.i140.i, 65535
  %943 = load %struct.CPUX86State** @env, align 8
  %944 = shl nuw nsw i32 %942, 4
  %945 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 3, i32 0
  store i32 %942, i32* %945, align 4
  %946 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 3, i32 1
  store i32 %944, i32* %946, align 4
  %947 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 3, i32 2
  store i32 65535, i32* %947, align 4
  %948 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 3, i32 3
  store i32 0, i32* %948, align 4
  %.phi.trans.insert.i.i120.i = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 7
  %.pre.i.i121.i = load i32* %.phi.trans.insert.i.i120.i, align 4
  %949 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 2, i32 3
  %950 = load i32* %949, align 4
  %951 = lshr i32 %950, 17
  %952 = and i32 %951, 32
  %953 = and i32 %.pre.i.i121.i, 32768
  %954 = icmp eq i32 %953, 0
  br i1 %954, label %955, label %load_seg_vm.exit123.i

; <label>:955                                     ; preds = %load_seg_vm.exit127.i
  %956 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 14, i64 0
  %957 = load i32* %956, align 4
  %958 = and i32 %957, 1
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %968, label %960

; <label>:960                                     ; preds = %955
  %961 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 2
  %962 = load i32* %961, align 4
  %963 = and i32 %962, 131072
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %965, label %968

; <label>:965                                     ; preds = %960
  %966 = and i32 %.pre.i.i121.i, 16
  %967 = icmp eq i32 %966, 0
  br i1 %967, label %968, label %970

; <label>:968                                     ; preds = %965, %960, %955
  %969 = or i32 %952, 64
  br label %load_seg_vm.exit123.i

; <label>:970                                     ; preds = %965
  %971 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 0, i32 1
  %972 = load i32* %971, align 4
  %973 = or i32 %972, %944
  %974 = getelementptr inbounds %struct.CPUX86State* %943, i64 0, i32 9, i64 2, i32 1
  %975 = load i32* %974, align 4
  %976 = or i32 %973, %975
  %977 = icmp ne i32 %976, 0
  %978 = zext i1 %977 to i32
  %979 = shl nuw nsw i32 %978, 6
  %980 = or i32 %979, %952
  br label %load_seg_vm.exit123.i

load_seg_vm.exit123.i:                            ; preds = %970, %968, %load_seg_vm.exit127.i
  %new_hflags.0.i.i122.i = phi i32 [ %952, %load_seg_vm.exit127.i ], [ %969, %968 ], [ %980, %970 ]
  %981 = and i32 %.pre.i.i121.i, -97
  %982 = or i32 %new_hflags.0.i.i122.i, %981
  store i32 %982, i32* %.phi.trans.insert.i.i120.i, align 4
  %983 = and i32 %res.0.i136.i, 65535
  %984 = load %struct.CPUX86State** @env, align 8
  %985 = shl nuw nsw i32 %983, 4
  %986 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 4, i32 0
  store i32 %983, i32* %986, align 4
  %987 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 4, i32 1
  store i32 %985, i32* %987, align 4
  %988 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 4, i32 2
  store i32 65535, i32* %988, align 4
  %989 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 4, i32 3
  store i32 0, i32* %989, align 4
  %.phi.trans.insert.i.i116.i = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 7
  %.pre.i.i117.i = load i32* %.phi.trans.insert.i.i116.i, align 4
  %990 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 2, i32 3
  %991 = load i32* %990, align 4
  %992 = lshr i32 %991, 17
  %993 = and i32 %992, 32
  %994 = and i32 %.pre.i.i117.i, 32768
  %995 = icmp eq i32 %994, 0
  br i1 %995, label %996, label %load_seg_vm.exit119.i

; <label>:996                                     ; preds = %load_seg_vm.exit123.i
  %997 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 14, i64 0
  %998 = load i32* %997, align 4
  %999 = and i32 %998, 1
  %1000 = icmp eq i32 %999, 0
  br i1 %1000, label %1009, label %1001

; <label>:1001                                    ; preds = %996
  %1002 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 2
  %1003 = load i32* %1002, align 4
  %1004 = and i32 %1003, 131072
  %1005 = icmp eq i32 %1004, 0
  br i1 %1005, label %1006, label %1009

; <label>:1006                                    ; preds = %1001
  %1007 = and i32 %.pre.i.i117.i, 16
  %1008 = icmp eq i32 %1007, 0
  br i1 %1008, label %1009, label %1011

; <label>:1009                                    ; preds = %1006, %1001, %996
  %1010 = or i32 %993, 64
  br label %load_seg_vm.exit119.i

; <label>:1011                                    ; preds = %1006
  %1012 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 3, i32 1
  %1013 = load i32* %1012, align 4
  %1014 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 0, i32 1
  %1015 = load i32* %1014, align 4
  %1016 = or i32 %1015, %1013
  %1017 = getelementptr inbounds %struct.CPUX86State* %984, i64 0, i32 9, i64 2, i32 1
  %1018 = load i32* %1017, align 4
  %1019 = or i32 %1016, %1018
  %1020 = icmp ne i32 %1019, 0
  %1021 = zext i1 %1020 to i32
  %1022 = shl nuw nsw i32 %1021, 6
  %1023 = or i32 %1022, %993
  br label %load_seg_vm.exit119.i

load_seg_vm.exit119.i:                            ; preds = %1011, %1009, %load_seg_vm.exit123.i
  %new_hflags.0.i.i118.i = phi i32 [ %993, %load_seg_vm.exit123.i ], [ %1010, %1009 ], [ %1023, %1011 ]
  %1024 = and i32 %.pre.i.i117.i, -97
  %1025 = or i32 %new_hflags.0.i.i118.i, %1024
  store i32 %1025, i32* %.phi.trans.insert.i.i116.i, align 4
  %1026 = and i32 %res.0.i.i, 65535
  %1027 = load %struct.CPUX86State** @env, align 8
  %1028 = shl nuw nsw i32 %1026, 4
  %1029 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 5, i32 0
  store i32 %1026, i32* %1029, align 4
  %1030 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 5, i32 1
  store i32 %1028, i32* %1030, align 4
  %1031 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 5, i32 2
  store i32 65535, i32* %1031, align 4
  %1032 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 5, i32 3
  store i32 0, i32* %1032, align 4
  %.phi.trans.insert.i.i.i = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 7
  %.pre.i.i.i = load i32* %.phi.trans.insert.i.i.i, align 4
  %1033 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 2, i32 3
  %1034 = load i32* %1033, align 4
  %1035 = lshr i32 %1034, 17
  %1036 = and i32 %1035, 32
  %1037 = and i32 %.pre.i.i.i, 32768
  %1038 = icmp eq i32 %1037, 0
  br i1 %1038, label %1039, label %load_seg_vm.exit.i

; <label>:1039                                    ; preds = %load_seg_vm.exit119.i
  %1040 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 14, i64 0
  %1041 = load i32* %1040, align 4
  %1042 = and i32 %1041, 1
  %1043 = icmp eq i32 %1042, 0
  br i1 %1043, label %1052, label %1044

; <label>:1044                                    ; preds = %1039
  %1045 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 2
  %1046 = load i32* %1045, align 4
  %1047 = and i32 %1046, 131072
  %1048 = icmp eq i32 %1047, 0
  br i1 %1048, label %1049, label %1052

; <label>:1049                                    ; preds = %1044
  %1050 = and i32 %.pre.i.i.i, 16
  %1051 = icmp eq i32 %1050, 0
  br i1 %1051, label %1052, label %1054

; <label>:1052                                    ; preds = %1049, %1044, %1039
  %1053 = or i32 %1036, 64
  br label %load_seg_vm.exit.i

; <label>:1054                                    ; preds = %1049
  %1055 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 3, i32 1
  %1056 = load i32* %1055, align 4
  %1057 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 0, i32 1
  %1058 = load i32* %1057, align 4
  %1059 = or i32 %1058, %1056
  %1060 = getelementptr inbounds %struct.CPUX86State* %1027, i64 0, i32 9, i64 2, i32 1
  %1061 = load i32* %1060, align 4
  %1062 = or i32 %1059, %1061
  %1063 = icmp ne i32 %1062, 0
  %1064 = zext i1 %1063 to i32
  %1065 = shl nuw nsw i32 %1064, 6
  %1066 = or i32 %1065, %1036
  br label %load_seg_vm.exit.i

load_seg_vm.exit.i:                               ; preds = %1054, %1052, %load_seg_vm.exit119.i
  %new_hflags.0.i.i.i = phi i32 [ %1036, %load_seg_vm.exit119.i ], [ %1053, %1052 ], [ %1066, %1054 ]
  %1067 = and i32 %.pre.i.i.i, -97
  %1068 = or i32 %new_hflags.0.i.i.i, %1067
  store i32 %1068, i32* %.phi.trans.insert.i.i.i, align 4
  %1069 = and i32 %res.0.i183.i, 65535
  %1070 = load %struct.CPUX86State** @env, align 8
  %1071 = getelementptr inbounds %struct.CPUX86State* %1070, i64 0, i32 1
  store i32 %1069, i32* %1071, align 4
  %1072 = load %struct.CPUX86State** @env, align 8
  %1073 = getelementptr inbounds %struct.CPUX86State* %1072, i64 0, i32 0, i64 4
  store i32 %res.0.i152.i, i32* %1073, align 4
  br label %helper_ret_protected.exit

helper_ret_protected.exit:                        ; preds = %load_seg_vm.exit.i, %validate_seg.exit.i, %68
  %1074 = load %struct.CPUX86State** @env, align 8
  %1075 = getelementptr inbounds %struct.CPUX86State* %1074, i64 0, i32 8
  %1076 = load i32* %1075, align 4
  %1077 = and i32 %1076, -5
  store i32 %1077, i32* %1075, align 4
  ret void
}

define void @helper_lret_protected(i32 %shift, i32 %addend) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 3
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 6
  %5 = and i32 %4, 65536
  %6 = xor i32 %5, 65536
  %7 = add i32 %6, -1
  %8 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 4
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 1
  %11 = load i32* %10, align 4
  %12 = icmp eq i32 %shift, 1
  %13 = and i32 %7, %9
  %14 = add i32 %13, %11
  %15 = lshr i32 %14, 12
  %16 = and i32 %15, 255
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %17, i32 0
  %19 = load i32* %18, align 4
  br i1 %12, label %20, label %45

; <label>:20                                      ; preds = %0
  %21 = and i32 %14, -4093
  %22 = icmp eq i32 %19, %21
  %23 = zext i32 %14 to i64
  br i1 %22, label %24, label %ldl_kernel.exit184.i, !prof !0

; <label>:24                                      ; preds = %20
  %25 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %17, i32 3
  %26 = load i64* %25, align 8
  %27 = add i64 %26, %23
  br label %ldl_kernel.exit184.i

ldl_kernel.exit184.i:                             ; preds = %24, %20
  %res.0.in.in.i181.i = phi i64 [ %27, %24 ], [ %23, %20 ]
  %res.0.in.i182.i = inttoptr i64 %res.0.in.in.i181.i to i32*
  %res.0.i183.i = load i32* %res.0.in.i182.i, align 4
  %28 = add i32 %9, 4
  %29 = and i32 %7, %28
  %30 = add i32 %29, %11
  %31 = lshr i32 %30, 12
  %32 = and i32 %31, 255
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %33, i32 0
  %35 = load i32* %34, align 4
  %36 = and i32 %30, -4093
  %37 = icmp eq i32 %35, %36
  %38 = zext i32 %30 to i64
  br i1 %37, label %39, label %ldl_kernel.exit188.i, !prof !0

; <label>:39                                      ; preds = %ldl_kernel.exit184.i
  %40 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %33, i32 3
  %41 = load i64* %40, align 8
  %42 = add i64 %41, %38
  br label %ldl_kernel.exit188.i

ldl_kernel.exit188.i:                             ; preds = %39, %ldl_kernel.exit184.i
  %res.0.in.in.i185.i = phi i64 [ %42, %39 ], [ %38, %ldl_kernel.exit184.i ]
  %res.0.in.i186.i = inttoptr i64 %res.0.in.in.i185.i to i32*
  %res.0.i187.i = load i32* %res.0.in.i186.i, align 4
  %43 = add i32 %9, 8
  %44 = and i32 %res.0.i187.i, 65535
  br label %71

; <label>:45                                      ; preds = %0
  %46 = and i32 %14, -4095
  %47 = icmp eq i32 %19, %46
  %48 = zext i32 %14 to i64
  br i1 %47, label %49, label %lduw_kernel.exit.i, !prof !0

; <label>:49                                      ; preds = %45
  %50 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %17, i32 3
  %51 = load i64* %50, align 8
  %52 = add i64 %51, %48
  br label %lduw_kernel.exit.i

lduw_kernel.exit.i:                               ; preds = %49, %45
  %.sink.in.in.i.i = phi i64 [ %52, %49 ], [ %48, %45 ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %53 = zext i16 %.sink.i.i to i32
  %54 = add i32 %9, 2
  %55 = and i32 %7, %54
  %56 = add i32 %55, %11
  %57 = lshr i32 %56, 12
  %58 = and i32 %57, 255
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %59, i32 0
  %61 = load i32* %60, align 4
  %62 = and i32 %56, -4095
  %63 = icmp eq i32 %61, %62
  %64 = zext i32 %56 to i64
  br i1 %63, label %65, label %lduw_kernel.exit196.i, !prof !0

; <label>:65                                      ; preds = %lduw_kernel.exit.i
  %66 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %59, i32 3
  %67 = load i64* %66, align 8
  %68 = add i64 %67, %64
  br label %lduw_kernel.exit196.i

lduw_kernel.exit196.i:                            ; preds = %65, %lduw_kernel.exit.i
  %.sink.in.in.i193.i = phi i64 [ %68, %65 ], [ %64, %lduw_kernel.exit.i ]
  %.sink.in.i194.i = inttoptr i64 %.sink.in.in.i193.i to i16*
  %.sink.i195.i = load i16* %.sink.in.i194.i, align 2
  %69 = zext i16 %.sink.i195.i to i32
  %70 = add i32 %9, 4
  br label %71

; <label>:71                                      ; preds = %lduw_kernel.exit196.i, %ldl_kernel.exit188.i
  %new_cs.0.i = phi i32 [ %44, %ldl_kernel.exit188.i ], [ %69, %lduw_kernel.exit196.i ]
  %sp.0.i = phi i32 [ %43, %ldl_kernel.exit188.i ], [ %70, %lduw_kernel.exit196.i ]
  %new_eip.0.i = phi i32 [ %res.0.i183.i, %ldl_kernel.exit188.i ], [ %53, %lduw_kernel.exit196.i ]
  %72 = and i32 %new_cs.0.i, 65532
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %71
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

; <label>:75                                      ; preds = %71
  %76 = and i32 %new_cs.0.i, 4
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %79 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i221.i = select i1 %77, %struct.SegmentCache* %79, %struct.SegmentCache* %78
  %80 = or i32 %new_cs.0.i, 7
  %81 = getelementptr inbounds %struct.SegmentCache* %dt.0.i221.i, i64 0, i32 2
  %82 = load i32* %81, align 4
  %83 = icmp ugt i32 %80, %82
  br i1 %83, label %114, label %84

; <label>:84                                      ; preds = %75
  %85 = and i32 %new_cs.0.i, 65528
  %86 = getelementptr inbounds %struct.SegmentCache* %dt.0.i221.i, i64 0, i32 1
  %87 = load i32* %86, align 4
  %88 = add i32 %87, %85
  %89 = lshr i32 %88, 12
  %90 = and i32 %89, 255
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %91, i32 0
  %93 = load i32* %92, align 4
  %94 = and i32 %88, -4093
  %95 = icmp eq i32 %93, %94
  %96 = zext i32 %88 to i64
  br i1 %95, label %97, label %ldl_kernel.exit.i225.i, !prof !0

; <label>:97                                      ; preds = %84
  %98 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %91, i32 3
  %99 = load i64* %98, align 8
  %100 = add i64 %99, %96
  br label %ldl_kernel.exit.i225.i

ldl_kernel.exit.i225.i:                           ; preds = %97, %84
  %res.0.in.in.i.i222.i = phi i64 [ %100, %97 ], [ %96, %84 ]
  %res.0.in.i.i223.i = inttoptr i64 %res.0.in.in.i.i222.i to i32*
  %res.0.i.i224.i = load i32* %res.0.in.i.i223.i, align 4
  %101 = add i32 %88, 4
  %102 = lshr i32 %101, 12
  %103 = and i32 %102, 255
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %104, i32 0
  %106 = load i32* %105, align 4
  %107 = and i32 %101, -4093
  %108 = icmp eq i32 %106, %107
  %109 = zext i32 %101 to i64
  br i1 %108, label %110, label %115, !prof !0

; <label>:110                                     ; preds = %ldl_kernel.exit.i225.i
  %111 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %104, i32 3
  %112 = load i64* %111, align 8
  %113 = add i64 %112, %109
  br label %115

; <label>:114                                     ; preds = %75
  tail call fastcc void @raise_exception_err(i32 13, i32 %72) noreturn nounwind
  unreachable

; <label>:115                                     ; preds = %110, %ldl_kernel.exit.i225.i
  %res.0.in.in.i8.i226.i = phi i64 [ %113, %110 ], [ %109, %ldl_kernel.exit.i225.i ]
  %res.0.in.i9.i227.i = inttoptr i64 %res.0.in.in.i8.i226.i to i32*
  %res.0.i10.i228.i = load i32* %res.0.in.i9.i227.i, align 4
  %116 = and i32 %res.0.i10.i228.i, 6144
  %117 = icmp eq i32 %116, 6144
  br i1 %117, label %119, label %118

; <label>:118                                     ; preds = %115
  tail call fastcc void @raise_exception_err(i32 13, i32 %72) noreturn nounwind
  unreachable

; <label>:119                                     ; preds = %115
  %120 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %121 = load i32* %120, align 4
  %122 = and i32 %121, 3
  %123 = and i32 %new_cs.0.i, 3
  %124 = icmp ult i32 %123, %122
  br i1 %124, label %125, label %126

; <label>:125                                     ; preds = %119
  tail call fastcc void @raise_exception_err(i32 13, i32 %72) noreturn nounwind
  unreachable

; <label>:126                                     ; preds = %119
  %127 = lshr i32 %res.0.i10.i228.i, 13
  %128 = and i32 %127, 3
  %129 = and i32 %res.0.i10.i228.i, 1024
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %134, label %131

; <label>:131                                     ; preds = %126
  %132 = icmp ugt i32 %128, %123
  br i1 %132, label %133, label %137

; <label>:133                                     ; preds = %131
  tail call fastcc void @raise_exception_err(i32 13, i32 %72) noreturn nounwind
  unreachable

; <label>:134                                     ; preds = %126
  %135 = icmp eq i32 %128, %123
  br i1 %135, label %137, label %136

; <label>:136                                     ; preds = %134
  tail call fastcc void @raise_exception_err(i32 13, i32 %72) noreturn nounwind
  unreachable

; <label>:137                                     ; preds = %134, %131
  %138 = and i32 %res.0.i10.i228.i, 32768
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

; <label>:140                                     ; preds = %137
  tail call fastcc void @raise_exception_err(i32 11, i32 %72) noreturn nounwind
  unreachable

; <label>:141                                     ; preds = %137
  %142 = add i32 %sp.0.i, %addend
  %143 = icmp eq i32 %123, %122
  br i1 %143, label %144, label %194

; <label>:144                                     ; preds = %141
  %145 = lshr i32 %res.0.i.i224.i, 16
  %146 = shl i32 %res.0.i10.i228.i, 16
  %147 = and i32 %146, 16711680
  %148 = and i32 %res.0.i10.i228.i, -16777216
  %149 = or i32 %148, %145
  %150 = or i32 %149, %147
  %151 = and i32 %res.0.i.i224.i, 65535
  %152 = and i32 %res.0.i10.i228.i, 983040
  %153 = or i32 %152, %151
  %154 = and i32 %res.0.i10.i228.i, 8388608
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %get_seg_limit.exit220.i, label %156

; <label>:156                                     ; preds = %144
  %157 = shl nuw i32 %153, 12
  %158 = or i32 %157, 4095
  br label %get_seg_limit.exit220.i

get_seg_limit.exit220.i:                          ; preds = %156, %144
  %limit.0.i219.i = phi i32 [ %158, %156 ], [ %153, %144 ]
  %159 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 0
  store i32 %new_cs.0.i, i32* %159, align 4
  %160 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 1
  store i32 %150, i32* %160, align 4
  %161 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i219.i, i32* %161, align 4
  %162 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i228.i, i32* %162, align 4
  %163 = lshr i32 %res.0.i10.i228.i, 18
  %164 = and i32 %163, 16
  %165 = and i32 %121, -32785
  %166 = or i32 %165, %164
  store i32 %166, i32* %120, align 4
  %167 = lshr i32 %3, 17
  %168 = and i32 %167, 32
  %169 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 0
  %170 = load i32* %169, align 4
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %179, label %173

; <label>:173                                     ; preds = %get_seg_limit.exit220.i
  %174 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %175 = load i32* %174, align 4
  %176 = and i32 %175, 131072
  %177 = icmp ne i32 %176, 0
  %178 = icmp eq i32 %164, 0
  %or.cond256.i = or i1 %177, %178
  br i1 %or.cond256.i, label %179, label %181

; <label>:179                                     ; preds = %173, %get_seg_limit.exit220.i
  %180 = or i32 %168, 64
  br label %cpu_x86_load_seg_cache.exit218.i

; <label>:181                                     ; preds = %173
  %182 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 3, i32 1
  %183 = load i32* %182, align 4
  %184 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 0, i32 1
  %185 = load i32* %184, align 4
  %186 = or i32 %183, %11
  %187 = or i32 %186, %185
  %188 = icmp ne i32 %187, 0
  %189 = zext i1 %188 to i32
  %190 = shl nuw nsw i32 %189, 6
  %191 = or i32 %190, %168
  br label %cpu_x86_load_seg_cache.exit218.i

cpu_x86_load_seg_cache.exit218.i:                 ; preds = %181, %179
  %new_hflags.0.i217.i = phi i32 [ %180, %179 ], [ %191, %181 ]
  %192 = and i32 %166, -32865
  %193 = or i32 %new_hflags.0.i217.i, %192
  store i32 %193, i32* %120, align 4
  br label %helper_ret_protected.exit

; <label>:194                                     ; preds = %141
  %195 = and i32 %142, %7
  %196 = add i32 %195, %11
  %197 = lshr i32 %196, 12
  %198 = and i32 %197, 255
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %199, i32 0
  %201 = load i32* %200, align 4
  br i1 %12, label %202, label %226

; <label>:202                                     ; preds = %194
  %203 = and i32 %196, -4093
  %204 = icmp eq i32 %201, %203
  %205 = zext i32 %196 to i64
  br i1 %204, label %206, label %ldl_kernel.exit216.i, !prof !0

; <label>:206                                     ; preds = %202
  %207 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %199, i32 3
  %208 = load i64* %207, align 8
  %209 = add i64 %208, %205
  br label %ldl_kernel.exit216.i

ldl_kernel.exit216.i:                             ; preds = %206, %202
  %res.0.in.in.i213.i = phi i64 [ %209, %206 ], [ %205, %202 ]
  %res.0.in.i214.i = inttoptr i64 %res.0.in.in.i213.i to i32*
  %res.0.i215.i = load i32* %res.0.in.i214.i, align 4
  %210 = add i32 %142, 4
  %211 = and i32 %210, %7
  %212 = add i32 %211, %11
  %213 = lshr i32 %212, 12
  %214 = and i32 %213, 255
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %215, i32 0
  %217 = load i32* %216, align 4
  %218 = and i32 %212, -4093
  %219 = icmp eq i32 %217, %218
  %220 = zext i32 %212 to i64
  br i1 %219, label %221, label %ldl_kernel.exit212.i, !prof !0

; <label>:221                                     ; preds = %ldl_kernel.exit216.i
  %222 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %215, i32 3
  %223 = load i64* %222, align 8
  %224 = add i64 %223, %220
  br label %ldl_kernel.exit212.i

ldl_kernel.exit212.i:                             ; preds = %221, %ldl_kernel.exit216.i
  %res.0.in.in.i209.i = phi i64 [ %224, %221 ], [ %220, %ldl_kernel.exit216.i ]
  %res.0.in.i210.i = inttoptr i64 %res.0.in.in.i209.i to i32*
  %res.0.i211.i = load i32* %res.0.in.i210.i, align 4
  %225 = and i32 %res.0.i211.i, 65535
  br label %251

; <label>:226                                     ; preds = %194
  %227 = and i32 %196, -4095
  %228 = icmp eq i32 %201, %227
  %229 = zext i32 %196 to i64
  br i1 %228, label %230, label %lduw_kernel.exit208.i, !prof !0

; <label>:230                                     ; preds = %226
  %231 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %199, i32 3
  %232 = load i64* %231, align 8
  %233 = add i64 %232, %229
  br label %lduw_kernel.exit208.i

lduw_kernel.exit208.i:                            ; preds = %230, %226
  %.sink.in.in.i205.i = phi i64 [ %233, %230 ], [ %229, %226 ]
  %.sink.in.i206.i = inttoptr i64 %.sink.in.in.i205.i to i16*
  %.sink.i207.i = load i16* %.sink.in.i206.i, align 2
  %234 = zext i16 %.sink.i207.i to i32
  %235 = add i32 %142, 2
  %236 = and i32 %235, %7
  %237 = add i32 %236, %11
  %238 = lshr i32 %237, 12
  %239 = and i32 %238, 255
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %240, i32 0
  %242 = load i32* %241, align 4
  %243 = and i32 %237, -4095
  %244 = icmp eq i32 %242, %243
  %245 = zext i32 %237 to i64
  br i1 %244, label %246, label %lduw_kernel.exit204.i, !prof !0

; <label>:246                                     ; preds = %lduw_kernel.exit208.i
  %247 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %240, i32 3
  %248 = load i64* %247, align 8
  %249 = add i64 %248, %245
  br label %lduw_kernel.exit204.i

lduw_kernel.exit204.i:                            ; preds = %246, %lduw_kernel.exit208.i
  %.sink.in.in.i201.i = phi i64 [ %249, %246 ], [ %245, %lduw_kernel.exit208.i ]
  %.sink.in.i202.i = inttoptr i64 %.sink.in.in.i201.i to i16*
  %.sink.i203.i = load i16* %.sink.in.i202.i, align 2
  %250 = zext i16 %.sink.i203.i to i32
  br label %251

; <label>:251                                     ; preds = %lduw_kernel.exit204.i, %ldl_kernel.exit212.i
  %new_ss.0.i = phi i32 [ %225, %ldl_kernel.exit212.i ], [ %250, %lduw_kernel.exit204.i ]
  %new_esp.0.i = phi i32 [ %res.0.i215.i, %ldl_kernel.exit212.i ], [ %234, %lduw_kernel.exit204.i ]
  %252 = and i32 %new_ss.0.i, 65532
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %255

; <label>:254                                     ; preds = %251
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn nounwind
  unreachable

; <label>:255                                     ; preds = %251
  %256 = and i32 %new_ss.0.i, 3
  %257 = icmp eq i32 %256, %123
  br i1 %257, label %259, label %258

; <label>:258                                     ; preds = %255
  tail call fastcc void @raise_exception_err(i32 13, i32 %252) noreturn nounwind
  unreachable

; <label>:259                                     ; preds = %255
  %260 = and i32 %new_ss.0.i, 4
  %261 = icmp eq i32 %260, 0
  %dt.0.i.i = select i1 %261, %struct.SegmentCache* %79, %struct.SegmentCache* %78
  %262 = or i32 %new_ss.0.i, 7
  %263 = getelementptr inbounds %struct.SegmentCache* %dt.0.i.i, i64 0, i32 2
  %264 = load i32* %263, align 4
  %265 = icmp ugt i32 %262, %264
  br i1 %265, label %296, label %266

; <label>:266                                     ; preds = %259
  %267 = and i32 %new_ss.0.i, 65528
  %268 = getelementptr inbounds %struct.SegmentCache* %dt.0.i.i, i64 0, i32 1
  %269 = load i32* %268, align 4
  %270 = add i32 %269, %267
  %271 = lshr i32 %270, 12
  %272 = and i32 %271, 255
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %273, i32 0
  %275 = load i32* %274, align 4
  %276 = and i32 %270, -4093
  %277 = icmp eq i32 %275, %276
  %278 = zext i32 %270 to i64
  br i1 %277, label %279, label %ldl_kernel.exit.i.i, !prof !0

; <label>:279                                     ; preds = %266
  %280 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %273, i32 3
  %281 = load i64* %280, align 8
  %282 = add i64 %281, %278
  br label %ldl_kernel.exit.i.i

ldl_kernel.exit.i.i:                              ; preds = %279, %266
  %res.0.in.in.i.i.i = phi i64 [ %282, %279 ], [ %278, %266 ]
  %res.0.in.i.i.i = inttoptr i64 %res.0.in.in.i.i.i to i32*
  %res.0.i.i.i = load i32* %res.0.in.i.i.i, align 4
  %283 = add i32 %270, 4
  %284 = lshr i32 %283, 12
  %285 = and i32 %284, 255
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %286, i32 0
  %288 = load i32* %287, align 4
  %289 = and i32 %283, -4093
  %290 = icmp eq i32 %288, %289
  %291 = zext i32 %283 to i64
  br i1 %290, label %292, label %297, !prof !0

; <label>:292                                     ; preds = %ldl_kernel.exit.i.i
  %293 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %286, i32 3
  %294 = load i64* %293, align 8
  %295 = add i64 %294, %291
  br label %297

; <label>:296                                     ; preds = %259
  tail call fastcc void @raise_exception_err(i32 13, i32 %252) noreturn nounwind
  unreachable

; <label>:297                                     ; preds = %292, %ldl_kernel.exit.i.i
  %res.0.in.in.i8.i.i = phi i64 [ %295, %292 ], [ %291, %ldl_kernel.exit.i.i ]
  %res.0.in.i9.i.i = inttoptr i64 %res.0.in.in.i8.i.i to i32*
  %res.0.i10.i.i = load i32* %res.0.in.i9.i.i, align 4
  %298 = and i32 %res.0.i10.i.i, 6656
  %299 = icmp eq i32 %298, 4608
  br i1 %299, label %301, label %300

; <label>:300                                     ; preds = %297
  tail call fastcc void @raise_exception_err(i32 13, i32 %252) noreturn nounwind
  unreachable

; <label>:301                                     ; preds = %297
  %302 = lshr i32 %res.0.i10.i.i, 13
  %303 = and i32 %302, 3
  %304 = icmp eq i32 %303, %123
  br i1 %304, label %306, label %305

; <label>:305                                     ; preds = %301
  tail call fastcc void @raise_exception_err(i32 13, i32 %252) noreturn nounwind
  unreachable

; <label>:306                                     ; preds = %301
  %307 = and i32 %res.0.i10.i.i, 32768
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %309, label %310

; <label>:309                                     ; preds = %306
  tail call fastcc void @raise_exception_err(i32 11, i32 %252) noreturn nounwind
  unreachable

; <label>:310                                     ; preds = %306
  %311 = lshr i32 %res.0.i.i.i, 16
  %312 = shl i32 %res.0.i10.i.i, 16
  %313 = and i32 %312, 16711680
  %314 = and i32 %res.0.i10.i.i, -16777216
  %315 = or i32 %314, %311
  %316 = or i32 %315, %313
  %317 = and i32 %res.0.i.i.i, 65535
  %318 = and i32 %res.0.i10.i.i, 983040
  %319 = or i32 %318, %317
  %320 = and i32 %res.0.i10.i.i, 8388608
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %get_seg_limit.exit180.i, label %322

; <label>:322                                     ; preds = %310
  %323 = shl nuw i32 %319, 12
  %324 = or i32 %323, 4095
  br label %get_seg_limit.exit180.i

get_seg_limit.exit180.i:                          ; preds = %322, %310
  %limit.0.i179.i = phi i32 [ %324, %322 ], [ %319, %310 ]
  %325 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 0
  store i32 %new_ss.0.i, i32* %325, align 4
  store i32 %316, i32* %10, align 4
  %326 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 2, i32 2
  store i32 %limit.0.i179.i, i32* %326, align 4
  store i32 %res.0.i10.i.i, i32* %2, align 4
  %327 = lshr i32 %res.0.i10.i.i, 17
  %328 = and i32 %327, 32
  %329 = and i32 %121, 32768
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %cpu_x86_load_seg_cache.exit178.i

; <label>:331                                     ; preds = %get_seg_limit.exit180.i
  %332 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 0
  %333 = load i32* %332, align 4
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %344, label %336

; <label>:336                                     ; preds = %331
  %337 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %338 = load i32* %337, align 4
  %339 = and i32 %338, 131072
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %344

; <label>:341                                     ; preds = %336
  %342 = and i32 %121, 16
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %346

; <label>:344                                     ; preds = %341, %336, %331
  %345 = or i32 %328, 64
  br label %cpu_x86_load_seg_cache.exit178.i

; <label>:346                                     ; preds = %341
  %347 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 3, i32 1
  %348 = load i32* %347, align 4
  %349 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 9, i64 0, i32 1
  %350 = load i32* %349, align 4
  %351 = or i32 %348, %316
  %352 = or i32 %351, %350
  %353 = icmp ne i32 %352, 0
  %354 = zext i1 %353 to i32
  %355 = shl nuw nsw i32 %354, 6
  %356 = or i32 %355, %328
  br label %cpu_x86_load_seg_cache.exit178.i

cpu_x86_load_seg_cache.exit178.i:                 ; preds = %346, %344, %get_seg_limit.exit180.i
  %new_hflags.0.i177.i = phi i32 [ %328, %get_seg_limit.exit180.i ], [ %345, %344 ], [ %356, %346 ]
  %357 = and i32 %121, -97
  %358 = or i32 %new_hflags.0.i177.i, %357
  store i32 %358, i32* %120, align 4
  %359 = load %struct.CPUX86State** @env, align 8
  %360 = lshr i32 %res.0.i.i224.i, 16
  %361 = shl i32 %res.0.i10.i228.i, 16
  %362 = and i32 %361, 16711680
  %363 = and i32 %res.0.i10.i228.i, -16777216
  %364 = or i32 %363, %360
  %365 = or i32 %364, %362
  %366 = and i32 %res.0.i.i224.i, 65535
  %367 = and i32 %res.0.i10.i228.i, 983040
  %368 = or i32 %367, %366
  %369 = and i32 %res.0.i10.i228.i, 8388608
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %get_seg_limit.exit.i, label %371

; <label>:371                                     ; preds = %cpu_x86_load_seg_cache.exit178.i
  %372 = shl nuw i32 %368, 12
  %373 = or i32 %372, 4095
  br label %get_seg_limit.exit.i

get_seg_limit.exit.i:                             ; preds = %371, %cpu_x86_load_seg_cache.exit178.i
  %limit.0.i.i = phi i32 [ %373, %371 ], [ %368, %cpu_x86_load_seg_cache.exit178.i ]
  %374 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 1, i32 0
  store i32 %new_cs.0.i, i32* %374, align 4
  %375 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 1, i32 1
  store i32 %365, i32* %375, align 4
  %376 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 1, i32 2
  store i32 %limit.0.i.i, i32* %376, align 4
  %377 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 1, i32 3
  store i32 %res.0.i10.i228.i, i32* %377, align 4
  %378 = lshr i32 %res.0.i10.i228.i, 18
  %379 = and i32 %378, 16
  %380 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 7
  %381 = load i32* %380, align 4
  %382 = and i32 %381, -32785
  %383 = or i32 %382, %379
  store i32 %383, i32* %380, align 4
  %384 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 2, i32 3
  %385 = load i32* %384, align 4
  %386 = lshr i32 %385, 17
  %387 = and i32 %386, 32
  %388 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 14, i64 0
  %389 = load i32* %388, align 4
  %390 = and i32 %389, 1
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %398, label %392

; <label>:392                                     ; preds = %get_seg_limit.exit.i
  %393 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 2
  %394 = load i32* %393, align 4
  %395 = and i32 %394, 131072
  %396 = icmp ne i32 %395, 0
  %397 = icmp eq i32 %379, 0
  %or.cond257.i = or i1 %396, %397
  br i1 %or.cond257.i, label %398, label %400

; <label>:398                                     ; preds = %392, %get_seg_limit.exit.i
  %399 = or i32 %387, 64
  br label %cpu_x86_load_seg_cache.exit.i

; <label>:400                                     ; preds = %392
  %401 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 3, i32 1
  %402 = load i32* %401, align 4
  %403 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 0, i32 1
  %404 = load i32* %403, align 4
  %405 = or i32 %404, %402
  %406 = getelementptr inbounds %struct.CPUX86State* %359, i64 0, i32 9, i64 2, i32 1
  %407 = load i32* %406, align 4
  %408 = or i32 %405, %407
  %409 = icmp ne i32 %408, 0
  %410 = zext i1 %409 to i32
  %411 = shl nuw nsw i32 %410, 6
  %412 = or i32 %411, %387
  br label %cpu_x86_load_seg_cache.exit.i

cpu_x86_load_seg_cache.exit.i:                    ; preds = %400, %398
  %new_hflags.0.i.i = phi i32 [ %399, %398 ], [ %412, %400 ]
  %413 = and i32 %383, -32865
  %414 = or i32 %new_hflags.0.i.i, %413
  store i32 %414, i32* %380, align 4
  %415 = load %struct.CPUX86State** @env, align 8
  %416 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 7
  %417 = load i32* %416, align 4
  %418 = and i32 %417, -4
  %419 = or i32 %418, %123
  store i32 %419, i32* %416, align 4
  %420 = lshr i32 %res.0.i10.i.i, 6
  %421 = and i32 %420, 65536
  %422 = xor i32 %421, 65536
  %423 = add i32 %422, -1
  %.pre.i169.i = load %struct.CPUX86State** @env, align 8
  %424 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 0, i32 3
  %425 = load i32* %424, align 4
  %426 = lshr i32 %425, 13
  %427 = and i32 %426, 3
  %428 = and i32 %425, 3072
  %429 = icmp ne i32 %428, 3072
  %430 = icmp ult i32 %427, %123
  %or.cond10.i170.i = and i1 %429, %430
  br i1 %or.cond10.i170.i, label %431, label %validate_seg.exit175.i

; <label>:431                                     ; preds = %cpu_x86_load_seg_cache.exit.i
  %432 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 0, i32 0
  %433 = bitcast i32* %432 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %433, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i171.i = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 7
  %.pre.i.i172.i = load i32* %.phi.trans.insert.i.i171.i, align 4
  %434 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 2, i32 3
  %435 = load i32* %434, align 4
  %436 = lshr i32 %435, 17
  %437 = and i32 %436, 32
  %438 = and i32 %.pre.i.i172.i, 32768
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %cpu_x86_load_seg_cache.exit.i174.i

; <label>:440                                     ; preds = %431
  %441 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 14, i64 0
  %442 = load i32* %441, align 4
  %443 = and i32 %442, 1
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %453, label %445

; <label>:445                                     ; preds = %440
  %446 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 2
  %447 = load i32* %446, align 4
  %448 = and i32 %447, 131072
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %450, label %453

; <label>:450                                     ; preds = %445
  %451 = and i32 %.pre.i.i172.i, 16
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %453, label %455

; <label>:453                                     ; preds = %450, %445, %440
  %454 = or i32 %437, 64
  br label %cpu_x86_load_seg_cache.exit.i174.i

; <label>:455                                     ; preds = %450
  %456 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 3, i32 1
  %457 = load i32* %456, align 4
  %458 = getelementptr inbounds %struct.CPUX86State* %.pre.i169.i, i64 0, i32 9, i64 2, i32 1
  %459 = load i32* %458, align 4
  %460 = or i32 %459, %457
  %461 = icmp ne i32 %460, 0
  %462 = zext i1 %461 to i32
  %463 = shl nuw nsw i32 %462, 6
  %464 = or i32 %463, %437
  br label %cpu_x86_load_seg_cache.exit.i174.i

cpu_x86_load_seg_cache.exit.i174.i:               ; preds = %455, %453, %431
  %new_hflags.0.i.i173.i = phi i32 [ %437, %431 ], [ %454, %453 ], [ %464, %455 ]
  %465 = and i32 %.pre.i.i172.i, -97
  %466 = or i32 %new_hflags.0.i.i173.i, %465
  store i32 %466, i32* %.phi.trans.insert.i.i171.i, align 4
  %.pre.i.pre.i = load %struct.CPUX86State** @env, align 8
  br label %validate_seg.exit175.i

validate_seg.exit175.i:                           ; preds = %cpu_x86_load_seg_cache.exit.i174.i, %cpu_x86_load_seg_cache.exit.i
  %.pre.i.i = phi %struct.CPUX86State* [ %.pre.i169.i, %cpu_x86_load_seg_cache.exit.i ], [ %.pre.i.pre.i, %cpu_x86_load_seg_cache.exit.i174.i ]
  %467 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 3, i32 3
  %468 = load i32* %467, align 4
  %469 = lshr i32 %468, 13
  %470 = and i32 %469, 3
  %471 = and i32 %468, 3072
  %472 = icmp ne i32 %471, 3072
  %473 = icmp ult i32 %470, %123
  %or.cond10.i163.i = and i1 %472, %473
  br i1 %or.cond10.i163.i, label %474, label %validate_seg.exit168.i

; <label>:474                                     ; preds = %validate_seg.exit175.i
  %475 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 3, i32 0
  %476 = bitcast i32* %475 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %476, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i164.i = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 7
  %.pre.i.i165.i = load i32* %.phi.trans.insert.i.i164.i, align 4
  %477 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 2, i32 3
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 17
  %480 = and i32 %479, 32
  %481 = and i32 %.pre.i.i165.i, 32768
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %cpu_x86_load_seg_cache.exit.i167.i

; <label>:483                                     ; preds = %474
  %484 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 14, i64 0
  %485 = load i32* %484, align 4
  %486 = and i32 %485, 1
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %496, label %488

; <label>:488                                     ; preds = %483
  %489 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 2
  %490 = load i32* %489, align 4
  %491 = and i32 %490, 131072
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %493, label %496

; <label>:493                                     ; preds = %488
  %494 = and i32 %.pre.i.i165.i, 16
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %496, label %498

; <label>:496                                     ; preds = %493, %488, %483
  %497 = or i32 %480, 64
  br label %cpu_x86_load_seg_cache.exit.i167.i

; <label>:498                                     ; preds = %493
  %499 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 0, i32 1
  %500 = load i32* %499, align 4
  %501 = getelementptr inbounds %struct.CPUX86State* %.pre.i.i, i64 0, i32 9, i64 2, i32 1
  %502 = load i32* %501, align 4
  %503 = or i32 %502, %500
  %504 = icmp ne i32 %503, 0
  %505 = zext i1 %504 to i32
  %506 = shl nuw nsw i32 %505, 6
  %507 = or i32 %506, %480
  br label %cpu_x86_load_seg_cache.exit.i167.i

cpu_x86_load_seg_cache.exit.i167.i:               ; preds = %498, %496, %474
  %new_hflags.0.i.i166.i = phi i32 [ %480, %474 ], [ %497, %496 ], [ %507, %498 ]
  %508 = and i32 %.pre.i.i165.i, -97
  %509 = or i32 %new_hflags.0.i.i166.i, %508
  store i32 %509, i32* %.phi.trans.insert.i.i164.i, align 4
  %.pre.i = load %struct.CPUX86State** @env, align 8
  br label %validate_seg.exit168.i

validate_seg.exit168.i:                           ; preds = %cpu_x86_load_seg_cache.exit.i167.i, %validate_seg.exit175.i
  %510 = phi %struct.CPUX86State* [ %.pre.i.i, %validate_seg.exit175.i ], [ %.pre.i, %cpu_x86_load_seg_cache.exit.i167.i ]
  %511 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 9, i64 4, i32 0
  %512 = load i32* %511, align 4
  %513 = and i32 %512, 65532
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %validate_seg.exit162.i, label %515

; <label>:515                                     ; preds = %validate_seg.exit168.i
  %516 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 9, i64 4, i32 3
  %517 = load i32* %516, align 4
  %518 = lshr i32 %517, 13
  %519 = and i32 %518, 3
  %520 = and i32 %517, 3072
  %521 = icmp ne i32 %520, 3072
  %522 = icmp ult i32 %519, %123
  %or.cond10.i157.i = and i1 %521, %522
  br i1 %or.cond10.i157.i, label %523, label %validate_seg.exit162.i

; <label>:523                                     ; preds = %515
  %524 = bitcast i32* %511 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %524, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i158.i = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 7
  %.pre.i.i159.i = load i32* %.phi.trans.insert.i.i158.i, align 4
  %525 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 9, i64 2, i32 3
  %526 = load i32* %525, align 4
  %527 = lshr i32 %526, 17
  %528 = and i32 %527, 32
  %529 = and i32 %.pre.i.i159.i, 32768
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %531, label %cpu_x86_load_seg_cache.exit.i161.i

; <label>:531                                     ; preds = %523
  %532 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 14, i64 0
  %533 = load i32* %532, align 4
  %534 = and i32 %533, 1
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %544, label %536

; <label>:536                                     ; preds = %531
  %537 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 2
  %538 = load i32* %537, align 4
  %539 = and i32 %538, 131072
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %544

; <label>:541                                     ; preds = %536
  %542 = and i32 %.pre.i.i159.i, 16
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %544, label %546

; <label>:544                                     ; preds = %541, %536, %531
  %545 = or i32 %528, 64
  br label %cpu_x86_load_seg_cache.exit.i161.i

; <label>:546                                     ; preds = %541
  %547 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 9, i64 3, i32 1
  %548 = load i32* %547, align 4
  %549 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 9, i64 0, i32 1
  %550 = load i32* %549, align 4
  %551 = or i32 %550, %548
  %552 = getelementptr inbounds %struct.CPUX86State* %510, i64 0, i32 9, i64 2, i32 1
  %553 = load i32* %552, align 4
  %554 = or i32 %551, %553
  %555 = icmp ne i32 %554, 0
  %556 = zext i1 %555 to i32
  %557 = shl nuw nsw i32 %556, 6
  %558 = or i32 %557, %528
  br label %cpu_x86_load_seg_cache.exit.i161.i

cpu_x86_load_seg_cache.exit.i161.i:               ; preds = %546, %544, %523
  %new_hflags.0.i.i160.i = phi i32 [ %528, %523 ], [ %545, %544 ], [ %558, %546 ]
  %559 = and i32 %.pre.i.i159.i, -97
  %560 = or i32 %new_hflags.0.i.i160.i, %559
  store i32 %560, i32* %.phi.trans.insert.i.i158.i, align 4
  %.pre259.i = load %struct.CPUX86State** @env, align 8
  br label %validate_seg.exit162.i

validate_seg.exit162.i:                           ; preds = %cpu_x86_load_seg_cache.exit.i161.i, %515, %validate_seg.exit168.i
  %561 = phi %struct.CPUX86State* [ %510, %validate_seg.exit168.i ], [ %510, %515 ], [ %.pre259.i, %cpu_x86_load_seg_cache.exit.i161.i ]
  %562 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 9, i64 5, i32 0
  %563 = load i32* %562, align 4
  %564 = and i32 %563, 65532
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %validate_seg.exit.i, label %566

; <label>:566                                     ; preds = %validate_seg.exit162.i
  %567 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 9, i64 5, i32 3
  %568 = load i32* %567, align 4
  %569 = lshr i32 %568, 13
  %570 = and i32 %569, 3
  %571 = and i32 %568, 3072
  %572 = icmp ne i32 %571, 3072
  %573 = icmp ult i32 %570, %123
  %or.cond10.i.i = and i1 %572, %573
  br i1 %or.cond10.i.i, label %574, label %validate_seg.exit.i

; <label>:574                                     ; preds = %566
  %575 = bitcast i32* %562 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %575, i8 0, i64 16, i32 4, i1 false) nounwind
  %.phi.trans.insert.i.i154.i = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 7
  %.pre.i.i155.i = load i32* %.phi.trans.insert.i.i154.i, align 4
  %576 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 9, i64 2, i32 3
  %577 = load i32* %576, align 4
  %578 = lshr i32 %577, 17
  %579 = and i32 %578, 32
  %580 = and i32 %.pre.i.i155.i, 32768
  %581 = icmp eq i32 %580, 0
  br i1 %581, label %582, label %cpu_x86_load_seg_cache.exit.i.i

; <label>:582                                     ; preds = %574
  %583 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 14, i64 0
  %584 = load i32* %583, align 4
  %585 = and i32 %584, 1
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %595, label %587

; <label>:587                                     ; preds = %582
  %588 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 2
  %589 = load i32* %588, align 4
  %590 = and i32 %589, 131072
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %592, label %595

; <label>:592                                     ; preds = %587
  %593 = and i32 %.pre.i.i155.i, 16
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %595, label %597

; <label>:595                                     ; preds = %592, %587, %582
  %596 = or i32 %579, 64
  br label %cpu_x86_load_seg_cache.exit.i.i

; <label>:597                                     ; preds = %592
  %598 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 9, i64 3, i32 1
  %599 = load i32* %598, align 4
  %600 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 9, i64 0, i32 1
  %601 = load i32* %600, align 4
  %602 = or i32 %601, %599
  %603 = getelementptr inbounds %struct.CPUX86State* %561, i64 0, i32 9, i64 2, i32 1
  %604 = load i32* %603, align 4
  %605 = or i32 %602, %604
  %606 = icmp ne i32 %605, 0
  %607 = zext i1 %606 to i32
  %608 = shl nuw nsw i32 %607, 6
  %609 = or i32 %608, %579
  br label %cpu_x86_load_seg_cache.exit.i.i

cpu_x86_load_seg_cache.exit.i.i:                  ; preds = %597, %595, %574
  %new_hflags.0.i.i156.i = phi i32 [ %579, %574 ], [ %596, %595 ], [ %609, %597 ]
  %610 = and i32 %.pre.i.i155.i, -97
  %611 = or i32 %new_hflags.0.i.i156.i, %610
  store i32 %611, i32* %.phi.trans.insert.i.i154.i, align 4
  br label %validate_seg.exit.i

validate_seg.exit.i:                              ; preds = %cpu_x86_load_seg_cache.exit.i.i, %566, %validate_seg.exit162.i
  %612 = add i32 %new_esp.0.i, %addend
  br label %helper_ret_protected.exit

helper_ret_protected.exit:                        ; preds = %validate_seg.exit.i, %cpu_x86_load_seg_cache.exit218.i
  %sp.1.i = phi i32 [ %612, %validate_seg.exit.i ], [ %142, %cpu_x86_load_seg_cache.exit218.i ]
  %sp_mask.0.i = phi i32 [ %423, %validate_seg.exit.i ], [ %7, %cpu_x86_load_seg_cache.exit218.i ]
  %613 = load %struct.CPUX86State** @env, align 8
  %614 = getelementptr inbounds %struct.CPUX86State* %613, i64 0, i32 0, i64 4
  %615 = load i32* %614, align 4
  %616 = xor i32 %sp_mask.0.i, -1
  %617 = and i32 %615, %616
  %618 = and i32 %sp_mask.0.i, %sp.1.i
  %619 = or i32 %617, %618
  store i32 %619, i32* %614, align 4
  %620 = load %struct.CPUX86State** @env, align 8
  %621 = getelementptr inbounds %struct.CPUX86State* %620, i64 0, i32 1
  store i32 %new_eip.0.i, i32* %621, align 4
  ret void
}

define void @helper_sysenter() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 34
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %8 = load i32* %7, align 4
  %9 = and i32 %8, -197121
  store i32 %9, i32* %7, align 4
  %10 = load %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State* %10, i64 0, i32 7
  %12 = load i32* %11, align 4
  %13 = and i32 %12, -4
  store i32 %13, i32* %11, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 34
  %16 = load i32* %15, align 4
  %17 = and i32 %16, 65532
  %18 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 1, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 1, i32 1
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 1, i32 2
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 1, i32 3
  store i32 12622592, i32* %21, align 4
  %22 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 7
  %23 = load i32* %22, align 4
  %24 = and i32 %23, -32785
  %25 = or i32 %24, 16
  store i32 %25, i32* %22, align 4
  %26 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 2, i32 3
  %27 = load i32* %26, align 4
  %28 = lshr i32 %27, 17
  %29 = and i32 %28, 32
  %30 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 14, i64 0
  %31 = load i32* %30, align 4
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %39, label %34

; <label>:34                                      ; preds = %6
  %35 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 2
  %36 = load i32* %35, align 4
  %37 = and i32 %36, 131072
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %41, label %39

; <label>:39                                      ; preds = %34, %6
  %40 = or i32 %29, 64
  br label %cpu_x86_load_seg_cache.exit2

; <label>:41                                      ; preds = %34
  %42 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 3, i32 1
  %43 = load i32* %42, align 4
  %44 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 0, i32 1
  %45 = load i32* %44, align 4
  %46 = or i32 %45, %43
  %47 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 9, i64 2, i32 1
  %48 = load i32* %47, align 4
  %49 = or i32 %46, %48
  %50 = icmp ne i32 %49, 0
  %51 = zext i1 %50 to i32
  %52 = shl nuw nsw i32 %51, 6
  %53 = or i32 %52, %29
  br label %cpu_x86_load_seg_cache.exit2

cpu_x86_load_seg_cache.exit2:                     ; preds = %41, %39
  %new_hflags.0.i1 = phi i32 [ %40, %39 ], [ %53, %41 ]
  %54 = and i32 %25, -32865
  %55 = or i32 %new_hflags.0.i1, %54
  store i32 %55, i32* %22, align 4
  %56 = load %struct.CPUX86State** @env, align 8
  %57 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 34
  %58 = load i32* %57, align 4
  %59 = add i32 %58, 8
  %60 = and i32 %59, 65532
  %61 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 9, i64 2, i32 0
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 9, i64 2, i32 1
  store i32 0, i32* %62, align 4
  %63 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 9, i64 2, i32 2
  store i32 -1, i32* %63, align 4
  %64 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 9, i64 2, i32 3
  store i32 12620544, i32* %64, align 4
  %.phi.trans.insert.i = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 7
  %.pre.i = load i32* %.phi.trans.insert.i, align 4
  %65 = and i32 %.pre.i, 32768
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %cpu_x86_load_seg_cache.exit

; <label>:67                                      ; preds = %cpu_x86_load_seg_cache.exit2
  %68 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 14, i64 0
  %69 = load i32* %68, align 4
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %cpu_x86_load_seg_cache.exit, label %72

; <label>:72                                      ; preds = %67
  %73 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 2
  %74 = load i32* %73, align 4
  %75 = and i32 %74, 131072
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %cpu_x86_load_seg_cache.exit

; <label>:77                                      ; preds = %72
  %78 = and i32 %.pre.i, 16
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %cpu_x86_load_seg_cache.exit, label %80

; <label>:80                                      ; preds = %77
  %81 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 9, i64 3, i32 1
  %82 = load i32* %81, align 4
  %83 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 9, i64 0, i32 1
  %84 = load i32* %83, align 4
  %85 = or i32 %84, %82
  %86 = icmp ne i32 %85, 0
  %87 = zext i1 %86 to i32
  %88 = shl nuw nsw i32 %87, 6
  %89 = or i32 %88, 32
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %80, %77, %72, %67, %cpu_x86_load_seg_cache.exit2
  %new_hflags.0.i = phi i32 [ 32, %cpu_x86_load_seg_cache.exit2 ], [ %89, %80 ], [ 96, %77 ], [ 96, %72 ], [ 96, %67 ]
  %90 = and i32 %.pre.i, -97
  %91 = or i32 %new_hflags.0.i, %90
  store i32 %91, i32* %.phi.trans.insert.i, align 4
  %92 = load %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State* %92, i64 0, i32 35
  %94 = load i32* %93, align 4
  %95 = getelementptr inbounds %struct.CPUX86State* %92, i64 0, i32 0, i64 4
  store i32 %94, i32* %95, align 4
  %96 = load %struct.CPUX86State** @env, align 8
  %97 = getelementptr inbounds %struct.CPUX86State* %96, i64 0, i32 36
  %98 = load i32* %97, align 4
  %99 = getelementptr inbounds %struct.CPUX86State* %96, i64 0, i32 1
  store i32 %98, i32* %99, align 4
  ret void
}

define void @helper_sysexit(i32 %dflag) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 34
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %7 = load i32* %6, align 4
  %8 = and i32 %7, 3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

; <label>:10                                      ; preds = %5, %0
  tail call fastcc void @raise_exception_err(i32 13, i32 0) noreturn
  unreachable

; <label>:11                                      ; preds = %5
  %12 = or i32 %7, 3
  store i32 %12, i32* %6, align 4
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 34
  %15 = load i32* %14, align 4
  %16 = add i32 %15, 16
  %17 = and i32 %16, 65532
  %18 = or i32 %17, 3
  %19 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 1, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 1, i32 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 1, i32 2
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 1, i32 3
  store i32 12647168, i32* %22, align 4
  %23 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 7
  %24 = load i32* %23, align 4
  %25 = and i32 %24, -32785
  %26 = or i32 %25, 16
  store i32 %26, i32* %23, align 4
  %27 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 2, i32 3
  %28 = load i32* %27, align 4
  %29 = lshr i32 %28, 17
  %30 = and i32 %29, 32
  %31 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 14, i64 0
  %32 = load i32* %31, align 4
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %40, label %35

; <label>:35                                      ; preds = %11
  %36 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 2
  %37 = load i32* %36, align 4
  %38 = and i32 %37, 131072
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

; <label>:40                                      ; preds = %35, %11
  %41 = or i32 %30, 64
  br label %cpu_x86_load_seg_cache.exit2

; <label>:42                                      ; preds = %35
  %43 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 3, i32 1
  %44 = load i32* %43, align 4
  %45 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 0, i32 1
  %46 = load i32* %45, align 4
  %47 = or i32 %46, %44
  %48 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 9, i64 2, i32 1
  %49 = load i32* %48, align 4
  %50 = or i32 %47, %49
  %51 = icmp ne i32 %50, 0
  %52 = zext i1 %51 to i32
  %53 = shl nuw nsw i32 %52, 6
  %54 = or i32 %53, %30
  br label %cpu_x86_load_seg_cache.exit2

cpu_x86_load_seg_cache.exit2:                     ; preds = %42, %40
  %new_hflags.0.i1 = phi i32 [ %41, %40 ], [ %54, %42 ]
  %55 = and i32 %26, -32865
  %56 = or i32 %new_hflags.0.i1, %55
  store i32 %56, i32* %23, align 4
  %57 = load %struct.CPUX86State** @env, align 8
  %58 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 34
  %59 = load i32* %58, align 4
  %60 = add i32 %59, 24
  %61 = and i32 %60, 65532
  %62 = or i32 %61, 3
  %63 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 9, i64 2, i32 0
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 9, i64 2, i32 1
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 9, i64 2, i32 2
  store i32 -1, i32* %65, align 4
  %66 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 9, i64 2, i32 3
  store i32 12645120, i32* %66, align 4
  %.phi.trans.insert.i = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 7
  %.pre.i = load i32* %.phi.trans.insert.i, align 4
  %67 = and i32 %.pre.i, 32768
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %cpu_x86_load_seg_cache.exit

; <label>:69                                      ; preds = %cpu_x86_load_seg_cache.exit2
  %70 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 14, i64 0
  %71 = load i32* %70, align 4
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %cpu_x86_load_seg_cache.exit, label %74

; <label>:74                                      ; preds = %69
  %75 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 2
  %76 = load i32* %75, align 4
  %77 = and i32 %76, 131072
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %cpu_x86_load_seg_cache.exit

; <label>:79                                      ; preds = %74
  %80 = and i32 %.pre.i, 16
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %cpu_x86_load_seg_cache.exit, label %82

; <label>:82                                      ; preds = %79
  %83 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 9, i64 3, i32 1
  %84 = load i32* %83, align 4
  %85 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 9, i64 0, i32 1
  %86 = load i32* %85, align 4
  %87 = or i32 %86, %84
  %88 = icmp ne i32 %87, 0
  %89 = zext i1 %88 to i32
  %90 = shl nuw nsw i32 %89, 6
  %91 = or i32 %90, 32
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %82, %79, %74, %69, %cpu_x86_load_seg_cache.exit2
  %new_hflags.0.i = phi i32 [ 32, %cpu_x86_load_seg_cache.exit2 ], [ %91, %82 ], [ 96, %79 ], [ 96, %74 ], [ 96, %69 ]
  %92 = and i32 %.pre.i, -97
  %93 = or i32 %new_hflags.0.i, %92
  store i32 %93, i32* %.phi.trans.insert.i, align 4
  %94 = load %struct.CPUX86State** @env, align 8
  %95 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 0, i64 1
  %96 = load i32* %95, align 4
  %97 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 0, i64 4
  store i32 %96, i32* %97, align 4
  %98 = load %struct.CPUX86State** @env, align 8
  %99 = getelementptr inbounds %struct.CPUX86State* %98, i64 0, i32 0, i64 2
  %100 = load i32* %99, align 4
  %101 = getelementptr inbounds %struct.CPUX86State* %98, i64 0, i32 1
  store i32 %100, i32* %101, align 4
  ret void
}

define i32 @helper_read_crN(i32 %reg) nounwind uwtable {
  tail call void @helper_svm_check_intercept_param(i32 %reg, i64 0)
  %cond = icmp eq i32 %reg, 8
  br i1 %cond, label %6, label %1

; <label>:1                                       ; preds = %0
  %2 = sext i32 %reg to i64
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 14, i64 %2
  %5 = load i32* %4, align 4
  br label %21

; <label>:6                                       ; preds = %0
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 8
  %9 = load i32* %8, align 4
  %10 = and i32 %9, 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

; <label>:12                                      ; preds = %6
  %13 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 138
  %14 = load %struct.DeviceState** %13, align 8
  %15 = tail call zeroext i8 @cpu_get_apic_tpr(%struct.DeviceState* %14) nounwind
  %16 = zext i8 %15 to i32
  br label %21

; <label>:17                                      ; preds = %6
  %18 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 48
  %19 = load i8* %18, align 1
  %20 = zext i8 %19 to i32
  br label %21

; <label>:21                                      ; preds = %17, %12, %1
  %val.0 = phi i32 [ %20, %17 ], [ %16, %12 ], [ %5, %1 ]
  ret i32 %val.0
}

declare zeroext i8 @cpu_get_apic_tpr(%struct.DeviceState*)

define void @helper_write_crN(i32 %reg, i32 %t0) nounwind uwtable {
  %1 = add nsw i32 %reg, 16
  tail call void @helper_svm_check_intercept_param(i32 %1, i64 0)
  switch i32 %reg, label %22 [
    i32 0, label %2
    i32 3, label %4
    i32 4, label %6
    i32 8, label %8
  ]

; <label>:2                                       ; preds = %0
  %3 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %3, i32 %t0) nounwind
  br label %26

; <label>:4                                       ; preds = %0
  %5 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %5, i32 %t0) nounwind
  br label %26

; <label>:6                                       ; preds = %0
  %7 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %7, i32 %t0) nounwind
  br label %26

; <label>:8                                       ; preds = %0
  %9 = load %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State* %9, i64 0, i32 8
  %11 = load i32* %10, align 4
  %12 = and i32 %11, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %._crit_edge

._crit_edge:                                      ; preds = %8
  %t0.tr.pre = trunc i32 %t0 to i8
  br label %18

; <label>:14                                      ; preds = %8
  %15 = getelementptr inbounds %struct.CPUX86State* %9, i64 0, i32 138
  %16 = load %struct.DeviceState** %15, align 8
  %17 = trunc i32 %t0 to i8
  tail call void @cpu_set_apic_tpr(%struct.DeviceState* %16, i8 zeroext %17) nounwind
  %.pre = load %struct.CPUX86State** @env, align 8
  br label %18

; <label>:18                                      ; preds = %14, %._crit_edge
  %t0.tr.pre-phi = phi i8 [ %t0.tr.pre, %._crit_edge ], [ %17, %14 ]
  %19 = phi %struct.CPUX86State* [ %9, %._crit_edge ], [ %.pre, %14 ]
  %20 = and i8 %t0.tr.pre-phi, 15
  %21 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 48
  store i8 %20, i8* %21, align 1
  br label %26

; <label>:22                                      ; preds = %0
  %23 = sext i32 %reg to i64
  %24 = load %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 14, i64 %23
  store i32 %t0, i32* %25, align 4
  br label %26

; <label>:26                                      ; preds = %22, %18, %6, %4, %2
  ret void
}

declare void @cpu_set_apic_tpr(%struct.DeviceState*, i8 zeroext)

define void @helper_movl_drN_T0(i32 %reg, i32 %t0) nounwind uwtable {
  %1 = icmp slt i32 %reg, 4
  br i1 %1, label %2, label %8

; <label>:2                                       ; preds = %0
  %3 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %3, i32 %reg) nounwind
  %4 = sext i32 %reg to i64
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 59, i64 %4
  store i32 %t0, i32* %6, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %7, i32 %reg) nounwind
  br label %24

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %reg, 7
  br i1 %9, label %.preheader, label %20

.preheader:                                       ; preds = %8
  %10 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %10, i32 0) nounwind
  %11 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %11, i32 1) nounwind
  %12 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %12, i32 2) nounwind
  %13 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %13, i32 3) nounwind
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 59, i64 7
  store i32 %t0, i32* %15, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %16, i32 0) nounwind
  %17 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %17, i32 1) nounwind
  %18 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %18, i32 2) nounwind
  %19 = load %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %19, i32 3) nounwind
  br label %24

; <label>:20                                      ; preds = %8
  %21 = sext i32 %reg to i64
  %22 = load %struct.CPUX86State** @env, align 8
  %23 = getelementptr inbounds %struct.CPUX86State* %22, i64 0, i32 59, i64 %21
  store i32 %t0, i32* %23, align 4
  br label %24

; <label>:24                                      ; preds = %20, %.preheader, %2
  ret void
}

declare void @hw_breakpoint_remove(%struct.CPUX86State*, i32)

declare void @hw_breakpoint_insert(%struct.CPUX86State*, i32)

define void @helper_lmsw(i32 %t0) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, -15
  %5 = and i32 %t0, 15
  %6 = or i32 %4, %5
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %8 = load i32* %7, align 4
  %.lobit.i = and i32 %8, 2097152
  %9 = icmp eq i32 %.lobit.i, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10, !prof !0

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 44
  %12 = load i16* %11, align 2
  %13 = and i16 %12, 1
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %helper_svm_check_intercept_param.exit, label %15

; <label>:15                                      ; preds = %10
  tail call void @helper_vmexit(i32 16, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %10, %0
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %1, i32 %6) nounwind
  ret void
}

define void @helper_clts() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 4
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 7
  %7 = load i32* %6, align 4
  %8 = and i32 %7, -2049
  store i32 %8, i32* %6, align 4
  ret void
}

define void @helper_invlpg(i32 %addr) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 33554432
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 121, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  tail call void @tlb_flush_page(%struct.CPUX86State* %1, i32 %addr) nounwind
  ret void
}

declare void @tlb_flush_page(%struct.CPUX86State*, i32)

define void @helper_rdtsc() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 4
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 4
  %5 = icmp eq i32 %4, 0
  %.phi.trans.insert = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %.pre = load i32* %.phi.trans.insert, align 4
  br i1 %5, label %._crit_edge, label %6

; <label>:6                                       ; preds = %0
  %7 = and i32 %.pre, 3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %._crit_edge, label %9

; <label>:9                                       ; preds = %6
  tail call fastcc void @raise_exception(i32 13) noreturn
  unreachable

._crit_edge:                                      ; preds = %6, %0
  %.lobit.i = and i32 %.pre, 2097152
  %10 = icmp eq i32 %.lobit.i, 0
  br i1 %10, label %helper_svm_check_intercept_param.exit, label %11, !prof !0

; <label>:11                                      ; preds = %._crit_edge
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %13 = load i64* %12, align 8
  %14 = and i64 %13, 16384
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %helper_svm_check_intercept_param.exit, label %16

; <label>:16                                      ; preds = %11
  tail call void @helper_vmexit(i32 110, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %11, %._crit_edge
  %17 = tail call i64 @cpu_get_tsc(%struct.CPUX86State* %1) nounwind
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 41
  %20 = load i64* %19, align 8
  %21 = add i64 %20, %17
  %22 = trunc i64 %21 to i32
  %23 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 0, i64 0
  store i32 %22, i32* %23, align 4
  %24 = lshr i64 %21, 32
  %25 = trunc i64 %24 to i32
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 0, i64 2
  store i32 %25, i32* %27, align 4
  ret void
}

declare i64 @cpu_get_tsc(%struct.CPUX86State*)

define void @helper_rdtscp() nounwind uwtable {
  tail call void @helper_rdtsc()
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 142
  %3 = load i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  store i32 %4, i32* %5, align 4
  ret void
}

define void @helper_rdpmc() noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 14, i64 4
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 256
  %5 = icmp eq i32 %4, 0
  %.phi.trans.insert = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %.pre = load i32* %.phi.trans.insert, align 4
  br i1 %5, label %._crit_edge, label %6

; <label>:6                                       ; preds = %0
  %7 = and i32 %.pre, 3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %._crit_edge, label %9

; <label>:9                                       ; preds = %6
  tail call fastcc void @raise_exception(i32 13) noreturn
  unreachable

._crit_edge:                                      ; preds = %6, %0
  %.lobit.i = and i32 %.pre, 2097152
  %10 = icmp eq i32 %.lobit.i, 0
  br i1 %10, label %helper_svm_check_intercept_param.exit, label %11, !prof !0

; <label>:11                                      ; preds = %._crit_edge
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %13 = load i64* %12, align 8
  %14 = and i64 %13, 32768
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %helper_svm_check_intercept_param.exit, label %16

; <label>:16                                      ; preds = %11
  tail call void @helper_vmexit(i32 111, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %11, %._crit_edge
  tail call fastcc void @raise_exception_err(i32 6, i32 0) noreturn
  unreachable
}

define void @helper_wrmsr() nounwind uwtable {
  tail call void @helper_svm_check_intercept_param(i32 124, i64 1)
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = or i64 %8, %4
  %10 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %11 = load i32* %10, align 4
  switch i32 %11, label %98 [
    i32 372, label %12
    i32 373, label %15
    i32 374, label %17
    i32 27, label %19
    i32 -1073741696, label %22
    i32 -1073741695, label %56
    i32 631, label %58
    i32 -1073676009, label %60
    i32 512, label %62
    i32 514, label %62
    i32 516, label %62
    i32 518, label %62
    i32 520, label %62
    i32 522, label %62
    i32 524, label %62
    i32 526, label %62
    i32 513, label %67
    i32 515, label %67
    i32 517, label %67
    i32 519, label %67
    i32 521, label %67
    i32 523, label %67
    i32 525, label %67
    i32 527, label %67
    i32 592, label %72
    i32 600, label %74
    i32 601, label %74
    i32 616, label %78
    i32 617, label %78
    i32 618, label %78
    i32 619, label %78
    i32 620, label %78
    i32 621, label %78
    i32 622, label %78
    i32 623, label %78
    i32 767, label %82
    i32 378, label %84
    i32 379, label %86
    i32 -1073741565, label %94
    i32 416, label %96
  ]

; <label>:12                                      ; preds = %0
  %13 = and i32 %3, 65535
  %14 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 34
  store i32 %13, i32* %14, align 4
  br label %116

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 35
  store i32 %3, i32* %16, align 4
  br label %116

; <label>:17                                      ; preds = %0
  %18 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 36
  store i32 %3, i32* %18, align 4
  br label %116

; <label>:19                                      ; preds = %0
  %20 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 138
  %21 = load %struct.DeviceState** %20, align 8
  tail call void @cpu_set_apic_base(%struct.DeviceState* %21, i64 %9) nounwind
  br label %116

; <label>:22                                      ; preds = %0
  %23 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 119
  %24 = load i32* %23, align 4
  %25 = lshr i32 %24, 11
  %.lobit = and i32 %25, 1
  %. = zext i32 %.lobit to i64
  %26 = and i32 %24, 536870912
  %27 = icmp eq i32 %26, 0
  %28 = or i64 %., 256
  %update_mask.1 = select i1 %27, i64 %., i64 %28
  %29 = and i32 %24, 33554432
  %30 = icmp eq i32 %29, 0
  %31 = or i64 %update_mask.1, 16384
  %update_mask.1. = select i1 %30, i64 %update_mask.1, i64 %31
  %32 = and i32 %24, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = or i64 %update_mask.1., 2048
  %update_mask.3 = select i1 %33, i64 %update_mask.1., i64 %34
  %35 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 120
  %36 = load i32* %35, align 4
  %37 = and i32 %36, 4
  %38 = icmp eq i32 %37, 0
  %39 = or i64 %update_mask.3, 4096
  %update_mask.3. = select i1 %38, i64 %update_mask.3, i64 %39
  %40 = or i64 %update_mask.3., 16384
  %update_mask.5 = select i1 %30, i64 %update_mask.3., i64 %40
  %41 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 37
  %42 = load i64* %41, align 8
  %43 = xor i64 %update_mask.5, -1
  %44 = and i64 %42, %43
  %45 = and i64 %update_mask.5, %9
  %46 = or i64 %44, %45
  store i64 %46, i64* %41, align 8
  %47 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %48 = load i32* %47, align 4
  %49 = and i32 %48, -1064961
  %50 = and i64 %46, 1024
  %51 = icmp eq i64 %50, 0
  %52 = or i32 %49, 16384
  %storemerge.i = select i1 %51, i32 %49, i32 %52
  %53 = and i64 %46, 4096
  %54 = icmp eq i64 %53, 0
  %55 = or i32 %storemerge.i, 1048576
  %storemerge..i = select i1 %54, i32 %storemerge.i, i32 %55
  store i32 %storemerge..i, i32* %47, align 4
  br label %116

; <label>:56                                      ; preds = %0
  %57 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 38
  store i64 %9, i64* %57, align 8
  br label %116

; <label>:58                                      ; preds = %0
  %59 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 109
  store i64 %9, i64* %59, align 8
  br label %116

; <label>:60                                      ; preds = %0
  %61 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 39
  store i64 %9, i64* %61, align 8
  br label %116

; <label>:62                                      ; preds = %0, %0, %0, %0, %0, %0, %0, %0
  %63 = add i32 %11, -512
  %64 = lshr i32 %63, 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 127, i64 %65, i32 0
  store i64 %9, i64* %66, align 8
  br label %116

; <label>:67                                      ; preds = %0, %0, %0, %0, %0, %0, %0, %0
  %68 = add i32 %11, -513
  %69 = lshr i32 %68, 1
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 127, i64 %70, i32 1
  store i64 %9, i64* %71, align 8
  br label %116

; <label>:72                                      ; preds = %0
  %73 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 125, i64 0
  store i64 %9, i64* %73, align 8
  br label %116

; <label>:74                                      ; preds = %0, %0
  %75 = add i32 %11, -599
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 125, i64 %76
  store i64 %9, i64* %77, align 8
  br label %116

; <label>:78                                      ; preds = %0, %0, %0, %0, %0, %0, %0, %0
  %79 = add i32 %11, -613
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 125, i64 %80
  store i64 %9, i64* %81, align 8
  br label %116

; <label>:82                                      ; preds = %0
  %83 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 126
  store i64 %9, i64* %83, align 8
  br label %116

; <label>:84                                      ; preds = %0
  %85 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 54
  store i64 %9, i64* %85, align 8
  br label %116

; <label>:86                                      ; preds = %0
  %87 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 139
  %88 = load i64* %87, align 8
  %89 = and i64 %88, 256
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %116, label %91

; <label>:91                                      ; preds = %86
  switch i64 %9, label %116 [
    i64 -1, label %92
    i64 0, label %92
  ]

; <label>:92                                      ; preds = %91, %91
  %93 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 140
  store i64 %9, i64* %93, align 8
  br label %116

; <label>:94                                      ; preds = %0
  %95 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 142
  store i64 %9, i64* %95, align 8
  br label %116

; <label>:96                                      ; preds = %0
  %97 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 55
  store i64 %9, i64* %97, align 8
  br label %116

; <label>:98                                      ; preds = %0
  %99 = icmp ugt i32 %11, 1023
  br i1 %99, label %100, label %116

; <label>:100                                     ; preds = %98
  %101 = zext i32 %11 to i64
  %102 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 139
  %103 = load i64* %102, align 8
  %104 = shl i64 %103, 2
  %105 = and i64 %104, 252
  %106 = or i64 %105, 1024
  %107 = icmp ult i64 %101, %106
  br i1 %107, label %108, label %116

; <label>:108                                     ; preds = %100
  %109 = add i32 %11, -1024
  %110 = and i32 %109, 3
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

; <label>:112                                     ; preds = %108
  switch i64 %9, label %116 [
    i64 -1, label %113
    i64 0, label %113
  ]

; <label>:113                                     ; preds = %112, %112, %108
  %114 = zext i32 %109 to i64
  %115 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 141, i64 %114
  store i64 %9, i64* %115, align 8
  br label %116

; <label>:116                                     ; preds = %113, %112, %100, %98, %96, %94, %92, %91, %86, %84, %82, %78, %74, %72, %67, %62, %60, %58, %56, %22, %19, %17, %15, %12
  ret void
}

declare void @cpu_set_apic_base(%struct.DeviceState*, i64)

define void @helper_rdmsr() nounwind uwtable {
  tail call void @helper_svm_check_intercept_param(i32 124, i64 0)
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %3 = load i32* %2, align 4
  switch i32 %3, label %82 [
    i32 372, label %4
    i32 373, label %8
    i32 374, label %12
    i32 27, label %16
    i32 -1073741696, label %20
    i32 -1073741695, label %23
    i32 631, label %26
    i32 -1073676009, label %29
    i32 408, label %97
    i32 512, label %32
    i32 514, label %32
    i32 516, label %32
    i32 518, label %32
    i32 520, label %32
    i32 522, label %32
    i32 524, label %32
    i32 526, label %32
    i32 513, label %38
    i32 515, label %38
    i32 517, label %38
    i32 519, label %38
    i32 521, label %38
    i32 523, label %38
    i32 525, label %38
    i32 527, label %38
    i32 592, label %44
    i32 600, label %47
    i32 601, label %47
    i32 616, label %52
    i32 617, label %52
    i32 618, label %52
    i32 619, label %52
    i32 620, label %52
    i32 621, label %52
    i32 622, label %52
    i32 623, label %52
    i32 767, label %57
    i32 254, label %60
    i32 377, label %65
    i32 379, label %68
    i32 378, label %76
    i32 416, label %79
  ]

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 34
  %6 = load i32* %5, align 4
  %7 = zext i32 %6 to i64
  br label %97

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 35
  %10 = load i32* %9, align 4
  %11 = zext i32 %10 to i64
  br label %97

; <label>:12                                      ; preds = %0
  %13 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 36
  %14 = load i32* %13, align 4
  %15 = zext i32 %14 to i64
  br label %97

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 138
  %18 = load %struct.DeviceState** %17, align 8
  %19 = tail call i64 @cpu_get_apic_base(%struct.DeviceState* %18) nounwind
  %.pre = load %struct.CPUX86State** @env, align 8
  br label %97

; <label>:20                                      ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 37
  %22 = load i64* %21, align 8
  br label %97

; <label>:23                                      ; preds = %0
  %24 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 38
  %25 = load i64* %24, align 8
  br label %97

; <label>:26                                      ; preds = %0
  %27 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 109
  %28 = load i64* %27, align 8
  br label %97

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 39
  %31 = load i64* %30, align 8
  br label %97

; <label>:32                                      ; preds = %0, %0, %0, %0, %0, %0, %0, %0
  %33 = add i32 %3, -512
  %34 = lshr i32 %33, 1
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 127, i64 %35, i32 0
  %37 = load i64* %36, align 8
  br label %97

; <label>:38                                      ; preds = %0, %0, %0, %0, %0, %0, %0, %0
  %39 = add i32 %3, -513
  %40 = lshr i32 %39, 1
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 127, i64 %41, i32 1
  %43 = load i64* %42, align 8
  br label %97

; <label>:44                                      ; preds = %0
  %45 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 125, i64 0
  %46 = load i64* %45, align 8
  br label %97

; <label>:47                                      ; preds = %0, %0
  %48 = add i32 %3, -599
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 125, i64 %49
  %51 = load i64* %50, align 8
  br label %97

; <label>:52                                      ; preds = %0, %0, %0, %0, %0, %0, %0, %0
  %53 = add i32 %3, -613
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 125, i64 %54
  %56 = load i64* %55, align 8
  br label %97

; <label>:57                                      ; preds = %0
  %58 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 126
  %59 = load i64* %58, align 8
  br label %97

; <label>:60                                      ; preds = %0
  %61 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 115
  %62 = load i32* %61, align 4
  %63 = and i32 %62, 4096
  %64 = icmp eq i32 %63, 0
  %. = select i1 %64, i64 0, i64 1288
  br label %97

; <label>:65                                      ; preds = %0
  %66 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 139
  %67 = load i64* %66, align 8
  br label %97

; <label>:68                                      ; preds = %0
  %69 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 139
  %70 = load i64* %69, align 8
  %71 = and i64 %70, 256
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %97, label %73

; <label>:73                                      ; preds = %68
  %74 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 140
  %75 = load i64* %74, align 8
  br label %97

; <label>:76                                      ; preds = %0
  %77 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 54
  %78 = load i64* %77, align 8
  br label %97

; <label>:79                                      ; preds = %0
  %80 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 55
  %81 = load i64* %80, align 8
  br label %97

; <label>:82                                      ; preds = %0
  %83 = icmp ugt i32 %3, 1023
  br i1 %83, label %84, label %97

; <label>:84                                      ; preds = %82
  %85 = zext i32 %3 to i64
  %86 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 139
  %87 = load i64* %86, align 8
  %88 = shl i64 %87, 2
  %89 = and i64 %88, 252
  %90 = or i64 %89, 1024
  %91 = icmp ult i64 %85, %90
  br i1 %91, label %92, label %97

; <label>:92                                      ; preds = %84
  %93 = add i32 %3, -1024
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 141, i64 %94
  %96 = load i64* %95, align 8
  br label %97

; <label>:97                                      ; preds = %92, %84, %82, %79, %76, %73, %68, %65, %60, %57, %52, %47, %44, %38, %32, %29, %26, %23, %20, %16, %12, %8, %4, %0
  %98 = phi %struct.CPUX86State* [ %1, %92 ], [ %1, %79 ], [ %1, %76 ], [ %1, %73 ], [ %1, %65 ], [ %1, %57 ], [ %1, %52 ], [ %1, %47 ], [ %1, %44 ], [ %1, %38 ], [ %1, %32 ], [ %1, %29 ], [ %1, %26 ], [ %1, %23 ], [ %1, %20 ], [ %.pre, %16 ], [ %1, %12 ], [ %1, %8 ], [ %1, %4 ], [ %1, %0 ], [ %1, %60 ], [ %1, %68 ], [ %1, %84 ], [ %1, %82 ]
  %val.0 = phi i64 [ %96, %92 ], [ %81, %79 ], [ %78, %76 ], [ %75, %73 ], [ %67, %65 ], [ %59, %57 ], [ %56, %52 ], [ %51, %47 ], [ %46, %44 ], [ %43, %38 ], [ %37, %32 ], [ %31, %29 ], [ %28, %26 ], [ %25, %23 ], [ %22, %20 ], [ %19, %16 ], [ %15, %12 ], [ %11, %8 ], [ %7, %4 ], [ 4398046512104, %0 ], [ %., %60 ], [ 0, %68 ], [ 0, %84 ], [ 0, %82 ]
  %99 = trunc i64 %val.0 to i32
  %100 = getelementptr inbounds %struct.CPUX86State* %98, i64 0, i32 0, i64 0
  store i32 %99, i32* %100, align 4
  %101 = lshr i64 %val.0, 32
  %102 = trunc i64 %101 to i32
  %103 = load %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State* %103, i64 0, i32 0, i64 2
  store i32 %102, i32* %104, align 4
  ret void
}

declare i64 @cpu_get_apic_base(%struct.DeviceState*)

define i32 @helper_lsl(i32 %selector1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %selector1, 65532
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %load_segment.exit.thread18, label %7

; <label>:7                                       ; preds = %0
  %8 = and i32 %selector1, 65528
  %9 = and i32 %selector1, 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i = select i1 %10, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %13 = or i32 %8, 7
  %14 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %15 = load i32* %14, align 4
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %load_segment.exit.thread18, label %17

; <label>:17                                      ; preds = %7
  %18 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %19 = load i32* %18, align 4
  %20 = add i32 %19, %8
  %21 = lshr i32 %20, 12
  %22 = and i32 %21, 255
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 0
  %25 = load i32* %24, align 4
  %26 = and i32 %20, -4093
  %27 = icmp eq i32 %25, %26
  %28 = zext i32 %20 to i64
  br i1 %27, label %29, label %ldl_kernel.exit.i, !prof !0

; <label>:29                                      ; preds = %17
  %30 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %28
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %29, %17
  %res.0.in.in.i.i = phi i64 [ %32, %29 ], [ %28, %17 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %33 = add i32 %20, 4
  %34 = lshr i32 %33, 12
  %35 = and i32 %34, 255
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %36, i32 0
  %38 = load i32* %37, align 4
  %39 = and i32 %33, -4093
  %40 = icmp eq i32 %38, %39
  %41 = zext i32 %33 to i64
  br i1 %40, label %42, label %46, !prof !0

; <label>:42                                      ; preds = %ldl_kernel.exit.i
  %43 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %36, i32 3
  %44 = load i64* %43, align 8
  %45 = add i64 %44, %41
  br label %46

; <label>:46                                      ; preds = %42, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %45, %42 ], [ %41, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %47 = and i32 %selector1, 3
  %48 = lshr i32 %res.0.i10.i, 13
  %49 = and i32 %48, 3
  %50 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %51 = load i32* %50, align 4
  %52 = and i32 %51, 3
  %53 = and i32 %res.0.i10.i, 4096
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %61, label %55

; <label>:55                                      ; preds = %46
  %56 = and i32 %res.0.i10.i, 3072
  %57 = icmp eq i32 %56, 3072
  br i1 %57, label %69, label %58

; <label>:58                                      ; preds = %55
  %59 = icmp ult i32 %49, %52
  %60 = icmp ult i32 %49, %47
  %or.cond11 = or i1 %59, %60
  br i1 %or.cond11, label %load_segment.exit.thread18, label %69

; <label>:61                                      ; preds = %46
  %62 = lshr i32 %res.0.i10.i, 8
  %63 = and i32 %62, 15
  switch i32 %63, label %load_segment.exit.thread18 [
    i32 1, label %64
    i32 2, label %64
    i32 3, label %64
    i32 9, label %64
    i32 11, label %64
  ]

; <label>:64                                      ; preds = %61, %61, %61, %61, %61
  %65 = icmp ult i32 %49, %52
  %66 = icmp ult i32 %49, %47
  %or.cond12 = or i1 %65, %66
  br i1 %or.cond12, label %load_segment.exit.thread18, label %69

load_segment.exit.thread18:                       ; preds = %64, %61, %58, %7, %0
  %67 = and i32 %4, -65
  %68 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %67, i32* %68, align 4
  br label %80

; <label>:69                                      ; preds = %64, %58, %55
  %70 = and i32 %res.0.i.i, 65535
  %71 = and i32 %res.0.i10.i, 983040
  %72 = or i32 %71, %70
  %73 = and i32 %res.0.i10.i, 8388608
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %get_seg_limit.exit, label %75

; <label>:75                                      ; preds = %69
  %76 = shl nuw i32 %72, 12
  %77 = or i32 %76, 4095
  br label %get_seg_limit.exit

get_seg_limit.exit:                               ; preds = %75, %69
  %limit.0.i = phi i32 [ %77, %75 ], [ %72, %69 ]
  %78 = or i32 %4, 64
  %79 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %78, i32* %79, align 4
  br label %80

; <label>:80                                      ; preds = %get_seg_limit.exit, %load_segment.exit.thread18
  %.0 = phi i32 [ 0, %load_segment.exit.thread18 ], [ %limit.0.i, %get_seg_limit.exit ]
  ret i32 %.0
}

define i32 @helper_lar(i32 %selector1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %selector1, 65532
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %load_segment.exit.thread16, label %7

; <label>:7                                       ; preds = %0
  %8 = and i32 %selector1, 65528
  %9 = and i32 %selector1, 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i = select i1 %10, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %13 = or i32 %8, 7
  %14 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %15 = load i32* %14, align 4
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %load_segment.exit.thread16, label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %7
  %17 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %18 = load i32* %17, align 4
  %19 = or i32 %8, 4
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 12
  %22 = and i32 %21, 255
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 0
  %25 = load i32* %24, align 4
  %26 = and i32 %20, -4093
  %27 = icmp eq i32 %25, %26
  %28 = zext i32 %20 to i64
  br i1 %27, label %29, label %33, !prof !0

; <label>:29                                      ; preds = %ldl_kernel.exit.i
  %30 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %28
  br label %33

; <label>:33                                      ; preds = %29, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %32, %29 ], [ %28, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %34 = and i32 %selector1, 3
  %35 = lshr i32 %res.0.i10.i, 13
  %36 = and i32 %35, 3
  %37 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %38 = load i32* %37, align 4
  %39 = and i32 %38, 3
  %40 = and i32 %res.0.i10.i, 4096
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %48, label %42

; <label>:42                                      ; preds = %33
  %43 = and i32 %res.0.i10.i, 3072
  %44 = icmp eq i32 %43, 3072
  br i1 %44, label %56, label %45

; <label>:45                                      ; preds = %42
  %46 = icmp ult i32 %36, %39
  %47 = icmp ult i32 %36, %34
  %or.cond11 = or i1 %46, %47
  br i1 %or.cond11, label %load_segment.exit.thread16, label %56

; <label>:48                                      ; preds = %33
  %49 = lshr i32 %res.0.i10.i, 8
  %50 = and i32 %49, 15
  switch i32 %50, label %load_segment.exit.thread16 [
    i32 1, label %51
    i32 2, label %51
    i32 3, label %51
    i32 4, label %51
    i32 5, label %51
    i32 9, label %51
    i32 11, label %51
    i32 12, label %51
  ]

; <label>:51                                      ; preds = %48, %48, %48, %48, %48, %48, %48, %48
  %52 = icmp ult i32 %36, %39
  %53 = icmp ult i32 %36, %34
  %or.cond12 = or i1 %52, %53
  br i1 %or.cond12, label %load_segment.exit.thread16, label %56

load_segment.exit.thread16:                       ; preds = %51, %48, %45, %7, %0
  %54 = and i32 %4, -65
  %55 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %54, i32* %55, align 4
  br label %60

; <label>:56                                      ; preds = %51, %45, %42
  %57 = or i32 %4, 64
  %58 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %57, i32* %58, align 4
  %59 = and i32 %res.0.i10.i, 15793920
  br label %60

; <label>:60                                      ; preds = %56, %load_segment.exit.thread16
  %.0 = phi i32 [ 0, %load_segment.exit.thread16 ], [ %59, %56 ]
  ret i32 %.0
}

define void @helper_verr(i32 %selector1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %selector1, 65532
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %load_segment.exit.thread12, label %7

; <label>:7                                       ; preds = %0
  %8 = and i32 %selector1, 65528
  %9 = and i32 %selector1, 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i = select i1 %10, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %13 = or i32 %8, 7
  %14 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %15 = load i32* %14, align 4
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %load_segment.exit.thread12, label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %7
  %17 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %18 = load i32* %17, align 4
  %19 = or i32 %8, 4
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 12
  %22 = and i32 %21, 255
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 0
  %25 = load i32* %24, align 4
  %26 = and i32 %20, -4093
  %27 = icmp eq i32 %25, %26
  %28 = zext i32 %20 to i64
  br i1 %27, label %29, label %33, !prof !0

; <label>:29                                      ; preds = %ldl_kernel.exit.i
  %30 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %28
  br label %33

; <label>:33                                      ; preds = %29, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %32, %29 ], [ %28, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %34 = and i32 %res.0.i10.i, 4096
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %load_segment.exit.thread12, label %36

; <label>:36                                      ; preds = %33
  %37 = and i32 %selector1, 3
  %38 = lshr i32 %res.0.i10.i, 13
  %39 = and i32 %38, 3
  %40 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %41 = load i32* %40, align 4
  %42 = and i32 %41, 3
  %43 = and i32 %res.0.i10.i, 2048
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %54, label %45

; <label>:45                                      ; preds = %36
  %46 = and i32 %res.0.i10.i, 512
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %load_segment.exit.thread12, label %48

; <label>:48                                      ; preds = %45
  %49 = and i32 %res.0.i10.i, 1024
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %59

; <label>:51                                      ; preds = %48
  %52 = icmp ult i32 %39, %42
  %53 = icmp ult i32 %39, %37
  %or.cond = or i1 %52, %53
  br i1 %or.cond, label %load_segment.exit.thread12, label %59

; <label>:54                                      ; preds = %36
  %55 = icmp ult i32 %39, %42
  %56 = icmp ult i32 %39, %37
  %or.cond9 = or i1 %55, %56
  br i1 %or.cond9, label %load_segment.exit.thread12, label %59

load_segment.exit.thread12:                       ; preds = %54, %51, %45, %33, %7, %0
  %57 = and i32 %4, -65
  %58 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %57, i32* %58, align 4
  br label %62

; <label>:59                                      ; preds = %54, %51, %48
  %60 = or i32 %4, 64
  %61 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %60, i32* %61, align 4
  br label %62

; <label>:62                                      ; preds = %59, %load_segment.exit.thread12
  ret void
}

define void @helper_verw(i32 %selector1) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32* %2, align 4
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %selector1, 65532
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %load_segment.exit.thread7, label %7

; <label>:7                                       ; preds = %0
  %8 = and i32 %selector1, 65528
  %9 = and i32 %selector1, 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 10
  %12 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 12
  %dt.0.i = select i1 %10, %struct.SegmentCache* %12, %struct.SegmentCache* %11
  %13 = or i32 %8, 7
  %14 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %15 = load i32* %14, align 4
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %load_segment.exit.thread7, label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %7
  %17 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %18 = load i32* %17, align 4
  %19 = or i32 %8, 4
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 12
  %22 = and i32 %21, 255
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 0
  %25 = load i32* %24, align 4
  %26 = and i32 %20, -4093
  %27 = icmp eq i32 %25, %26
  %28 = zext i32 %20 to i64
  br i1 %27, label %29, label %33, !prof !0

; <label>:29                                      ; preds = %ldl_kernel.exit.i
  %30 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 0, i64 %23, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %28
  br label %33

; <label>:33                                      ; preds = %29, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %32, %29 ], [ %28, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %34 = and i32 %res.0.i10.i, 4096
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %load_segment.exit.thread7, label %36

; <label>:36                                      ; preds = %33
  %37 = lshr i32 %res.0.i10.i, 13
  %38 = and i32 %37, 3
  %39 = and i32 %res.0.i10.i, 2048
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %load_segment.exit.thread7

; <label>:41                                      ; preds = %36
  %42 = and i32 %selector1, 3
  %43 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %44 = load i32* %43, align 4
  %45 = and i32 %44, 3
  %46 = icmp ult i32 %38, %45
  %47 = icmp ult i32 %38, %42
  %or.cond = or i1 %46, %47
  br i1 %or.cond, label %load_segment.exit.thread7, label %48

; <label>:48                                      ; preds = %41
  %49 = and i32 %res.0.i10.i, 512
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %load_segment.exit.thread7, label %53

load_segment.exit.thread7:                        ; preds = %48, %41, %36, %33, %7, %0
  %51 = and i32 %4, -65
  %52 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %51, i32* %52, align 4
  br label %56

; <label>:53                                      ; preds = %48
  %54 = or i32 %4, 64
  %55 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %54, i32* %55, align 4
  br label %56

; <label>:56                                      ; preds = %53, %load_segment.exit.thread7
  ret void
}

define void @helper_fbld_ST0(i32 %ptr) nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 3
  %5 = icmp eq i32 %4, 3
  %6 = zext i1 %5 to i64
  br label %7

; <label>:7                                       ; preds = %ldub_data.exit, %0
  %indvars.iv = phi i64 [ 8, %0 ], [ %indvars.iv.next, %ldub_data.exit ]
  %val.016 = phi i64 [ 0, %0 ], [ %30, %ldub_data.exit ]
  %8 = trunc i64 %indvars.iv to i32
  %9 = add i32 %8, %ptr
  %10 = lshr i32 %9, 12
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %6, i64 %12, i32 0
  %14 = load i32* %13, align 4
  %15 = and i32 %9, -4096
  %16 = icmp eq i32 %14, %15
  %17 = zext i32 %9 to i64
  br i1 %16, label %18, label %ldub_data.exit, !prof !0

; <label>:18                                      ; preds = %7
  %19 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %6, i64 %12, i32 3
  %20 = load i64* %19, align 8
  %21 = add i64 %20, %17
  br label %ldub_data.exit

ldub_data.exit:                                   ; preds = %18, %7
  %.sink.in.in.i = phi i64 [ %21, %18 ], [ %17, %7 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i8*
  %.sink.i = load i8* %.sink.in.i, align 1
  %22 = zext i8 %.sink.i to i32
  %23 = mul i64 %val.016, 100
  %24 = lshr i32 %22, 4
  %25 = mul i32 %24, 10
  %26 = zext i32 %25 to i64
  %27 = and i32 %22, 15
  %28 = zext i32 %27 to i64
  %29 = add i64 %28, %23
  %30 = add i64 %29, %26
  %31 = icmp sgt i32 %8, 0
  %indvars.iv.next = add i64 %indvars.iv, -1
  br i1 %31, label %7, label %ldub_data.exit14

ldub_data.exit14:                                 ; preds = %ldub_data.exit
  %32 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %33 = call { i64, i16 } @int64_to_floatx80(i64 %30, %struct.float_status* %32) nounwind
  %34 = extractvalue { i64, i16 } %33, 0
  %35 = extractvalue { i64, i16 } %33, 1
  %tmp.sroa.2.10..sroa.2.10.idx.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  %36 = load %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 16
  %38 = load i32* %37, align 4
  %39 = add i32 %38, 7
  %40 = and i32 %39, 7
  store i32 %40, i32* %37, align 4
  %41 = load %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 16
  %43 = load i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 19, i64 %44
  store i8 0, i8* %45, align 1
  %46 = load %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State* %46, i64 0, i32 16
  %48 = load i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %struct.CPUX86State* %46, i64 0, i32 21, i64 %49
  %tmp.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %50, i64 0, i32 0, i32 0
  store i64 %34, i64* %tmp.sroa.0.0..idx, align 8
  %tmp.sroa.1.8..idx8 = getelementptr inbounds %struct.CPUX86State* %46, i64 0, i32 21, i64 %49, i32 0, i32 1
  store i16 %35, i16* %tmp.sroa.1.8..idx8, align 8
  %tmp.sroa.2.10..raw_cast = bitcast %union.FPReg* %50 to i8*
  %tmp.sroa.2.10..raw_idx = getelementptr inbounds i8* %tmp.sroa.2.10..raw_cast, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %tmp.sroa.2.10..raw_idx, i8* %tmp.sroa.2.10..sroa.2.10.idx.idx, i64 6, i32 2, i1 false)
  ret void
}

declare { i64, i16 } @int64_to_floatx80(i64, %struct.float_status*)

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define void @helper_fbst_ST0(i32 %ptr) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %7 = load i64* %6, align 1
  %8 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %9 = load i16* %8, align 1
  %10 = tail call i64 @floatx80_to_int64(i64 %7, i16 %9, %struct.float_status* %5) nounwind
  %11 = add i32 %ptr, 9
  %12 = icmp slt i64 %10, 0
  %13 = lshr i32 %11, 12
  %14 = and i32 %13, 255
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 7
  %17 = load i32* %16, align 4
  %18 = and i32 %17, 3
  %19 = icmp eq i32 %18, 3
  %20 = zext i32 %14 to i64
  %21 = zext i1 %19 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 1
  %23 = load i32* %22, align 4
  %24 = and i32 %11, -4096
  %25 = icmp eq i32 %23, %24
  %26 = zext i32 %11 to i64
  br i1 %12, label %27, label %36

; <label>:27                                      ; preds = %0
  br i1 %25, label %30, label %28, !prof !0

; <label>:28                                      ; preds = %27
  %29 = inttoptr i64 %26 to i8*
  store i8 -128, i8* %29, align 1
  br label %stb_data.exit

; <label>:30                                      ; preds = %27
  %31 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 3
  %32 = load i64* %31, align 8
  %33 = add i64 %32, %26
  %34 = inttoptr i64 %33 to i8*
  store i8 -128, i8* %34, align 1
  br label %stb_data.exit

stb_data.exit:                                    ; preds = %30, %28
  %35 = sub nsw i64 0, %10
  br label %stb_data.exit15.preheader

; <label>:36                                      ; preds = %0
  br i1 %25, label %39, label %37, !prof !0

; <label>:37                                      ; preds = %36
  %38 = inttoptr i64 %26 to i8*
  store i8 0, i8* %38, align 1
  br label %stb_data.exit15.preheader

; <label>:39                                      ; preds = %36
  %40 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 3
  %41 = load i64* %40, align 8
  %42 = add i64 %41, %26
  %43 = inttoptr i64 %42 to i8*
  store i8 0, i8* %43, align 1
  br label %stb_data.exit15.preheader

stb_data.exit15.preheader:                        ; preds = %39, %37, %stb_data.exit
  %val.0.ph = phi i64 [ %10, %39 ], [ %10, %37 ], [ %35, %stb_data.exit ]
  %44 = icmp ugt i32 %ptr, -10
  %45 = icmp eq i64 %val.0.ph, 0
  %or.cond17 = or i1 %44, %45
  br i1 %or.cond17, label %stb_data.exit13.preheader, label %.lr.ph20

.lr.ph20:                                         ; preds = %stb_data.exit15.preheader
  %46 = zext i32 %ptr to i64
  br label %49

stb_data.exit13.preheader:                        ; preds = %stb_data.exit15.backedge, %stb_data.exit15.preheader
  %mem_ref.0.lcssa = phi i32 [ %ptr, %stb_data.exit15.preheader ], [ %57, %stb_data.exit15.backedge ]
  %47 = icmp ult i32 %mem_ref.0.lcssa, %11
  br i1 %47, label %.lr.ph, label %stb_data.exit13._crit_edge

.lr.ph:                                           ; preds = %stb_data.exit13.preheader
  %48 = zext i32 %mem_ref.0.lcssa to i64
  br label %82

; <label>:49                                      ; preds = %stb_data.exit15.backedge, %.lr.ph20
  %indvars.iv21 = phi i64 [ %46, %.lr.ph20 ], [ %indvars.iv.next22, %stb_data.exit15.backedge ]
  %val.019 = phi i64 [ %val.0.ph, %.lr.ph20 ], [ %52, %stb_data.exit15.backedge ]
  %mem_ref.018 = phi i32 [ %ptr, %.lr.ph20 ], [ %57, %stb_data.exit15.backedge ]
  %50 = srem i64 %val.019, 100
  %51 = trunc i64 %50 to i32
  %52 = sdiv i64 %val.019, 100
  %53 = sdiv i32 %51, 10
  %54 = shl i32 %53, 4
  %55 = srem i32 %51, 10
  %56 = or i32 %54, %55
  %57 = add i32 %mem_ref.018, 1
  %58 = trunc i64 %indvars.iv21 to i32
  %59 = lshr i64 %indvars.iv21, 12
  %60 = and i64 %59, 255
  %61 = load %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State* %61, i64 0, i32 7
  %63 = load i32* %62, align 4
  %64 = and i32 %63, 3
  %65 = icmp eq i32 %64, 3
  %66 = zext i1 %65 to i64
  %67 = getelementptr inbounds %struct.CPUX86State* %61, i64 0, i32 71, i64 %66, i64 %60, i32 1
  %68 = load i32* %67, align 4
  %69 = and i32 %58, -4096
  %70 = icmp eq i32 %68, %69
  br i1 %70, label %76, label %71, !prof !0

; <label>:71                                      ; preds = %49
  %72 = trunc i32 %56 to i8
  %73 = inttoptr i64 %indvars.iv21 to i8*
  store i8 %72, i8* %73, align 1
  br label %stb_data.exit15.backedge

stb_data.exit15.backedge:                         ; preds = %76, %71
  %74 = icmp uge i32 %57, %11
  %val.019.off = add i64 %val.019, 99
  %75 = icmp ult i64 %val.019.off, 199
  %or.cond = or i1 %74, %75
  %indvars.iv.next22 = add i64 %indvars.iv21, 1
  br i1 %or.cond, label %stb_data.exit13.preheader, label %49

; <label>:76                                      ; preds = %49
  %77 = getelementptr inbounds %struct.CPUX86State* %61, i64 0, i32 71, i64 %66, i64 %60, i32 3
  %78 = load i64* %77, align 8
  %79 = add i64 %78, %indvars.iv21
  %80 = inttoptr i64 %79 to i8*
  %81 = trunc i32 %56 to i8
  store i8 %81, i8* %80, align 1
  br label %stb_data.exit15.backedge

; <label>:82                                      ; preds = %stb_data.exit13.backedge, %.lr.ph
  %indvars.iv = phi i64 [ %48, %.lr.ph ], [ %indvars.iv.next, %stb_data.exit13.backedge ]
  %mem_ref.116 = phi i32 [ %mem_ref.0.lcssa, %.lr.ph ], [ %83, %stb_data.exit13.backedge ]
  %83 = add i32 %mem_ref.116, 1
  %84 = trunc i64 %indvars.iv to i32
  %85 = lshr i64 %indvars.iv, 12
  %86 = and i64 %85, 255
  %87 = load %struct.CPUX86State** @env, align 8
  %88 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 7
  %89 = load i32* %88, align 4
  %90 = and i32 %89, 3
  %91 = icmp eq i32 %90, 3
  %92 = zext i1 %91 to i64
  %93 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 71, i64 %92, i64 %86, i32 1
  %94 = load i32* %93, align 4
  %95 = and i32 %84, -4096
  %96 = icmp eq i32 %94, %95
  br i1 %96, label %99, label %97, !prof !0

; <label>:97                                      ; preds = %82
  %98 = inttoptr i64 %indvars.iv to i8*
  store i8 0, i8* %98, align 1
  br label %stb_data.exit13.backedge

stb_data.exit13.backedge:                         ; preds = %99, %97
  %indvars.iv.next = add i64 %indvars.iv, 1
  %exitcond = icmp eq i32 %83, %11
  br i1 %exitcond, label %stb_data.exit13._crit_edge, label %82

; <label>:99                                      ; preds = %82
  %100 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 71, i64 %92, i64 %86, i32 3
  %101 = load i64* %100, align 8
  %102 = add i64 %101, %indvars.iv
  %103 = inttoptr i64 %102 to i8*
  store i8 0, i8* %103, align 1
  br label %stb_data.exit13.backedge

stb_data.exit13._crit_edge:                       ; preds = %stb_data.exit13.backedge, %stb_data.exit13.preheader
  ret void
}

declare i64 @floatx80_to_int64(i64, i16, %struct.float_status*)

define void @helper_f2xm1() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %exp2 = call double @exp2(double %11) nounwind
  %12 = fadd double %exp2, -1.000000e+00
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 16
  %15 = load i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 21, i64 %16
  %18 = bitcast double %12 to i64
  %19 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 25
  %20 = call { i64, i16 } @float64_to_floatx80(i64 %18, %struct.float_status* %19) nounwind
  %21 = extractvalue { i64, i16 } %20, 0
  %22 = extractvalue { i64, i16 } %20, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %17, i64 0, i32 0, i32 0
  store i64 %21, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx1 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 21, i64 %16, i32 0, i32 1
  store i16 %22, i16* %.sroa.1.8..idx1, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %17 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  ret void
}

define void @helper_fyl2x() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0.000000e+00
  br i1 %12, label %13, label %52

; <label>:13                                      ; preds = %0
  %14 = call double @log(double %11) nounwind
  %15 = fdiv double %14, 0x3FE62E42FEFA39EF
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 16
  %18 = load i32* %17, align 4
  %19 = add i32 %18, 1
  %20 = and i32 %19, 7
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 21, i64 %21, i32 0, i32 0
  %23 = load i64* %22, align 1
  %24 = getelementptr %struct.CPUX86State* %16, i64 0, i32 21, i64 %21, i32 0, i32 1
  %25 = load i16* %24, align 1
  %26 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 25
  %27 = call i64 @floatx80_to_float64(i64 %23, i16 %25, %struct.float_status* %26) nounwind
  %28 = bitcast i64 %27 to double
  %29 = fmul double %15, %28
  %30 = load %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 16
  %32 = load i32* %31, align 4
  %33 = add i32 %32, 1
  %34 = and i32 %33, 7
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 21, i64 %35
  %37 = bitcast double %29 to i64
  %38 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 25
  %39 = call { i64, i16 } @float64_to_floatx80(i64 %37, %struct.float_status* %38) nounwind
  %40 = extractvalue { i64, i16 } %39, 0
  %41 = extractvalue { i64, i16 } %39, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %36, i64 0, i32 0, i32 0
  store i64 %40, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx1 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 21, i64 %35, i32 0, i32 1
  store i16 %41, i16* %.sroa.1.8..idx1, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %36 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %42 = load %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State* %42, i64 0, i32 16
  %44 = load i32* %43, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %struct.CPUX86State* %42, i64 0, i32 19, i64 %45
  store i8 1, i8* %46, align 1
  %47 = load %struct.CPUX86State** @env, align 8
  %48 = getelementptr inbounds %struct.CPUX86State* %47, i64 0, i32 16
  %49 = load i32* %48, align 4
  %50 = add i32 %49, 1
  %51 = and i32 %50, 7
  store i32 %51, i32* %48, align 4
  br label %61

; <label>:52                                      ; preds = %0
  %53 = load %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 17
  %55 = load i16* %54, align 2
  %56 = and i16 %55, -18177
  store i16 %56, i16* %54, align 2
  %57 = load %struct.CPUX86State** @env, align 8
  %58 = getelementptr inbounds %struct.CPUX86State* %57, i64 0, i32 17
  %59 = load i16* %58, align 2
  %60 = or i16 %59, 1024
  store i16 %60, i16* %58, align 2
  br label %61

; <label>:61                                      ; preds = %52, %13
  ret void
}

declare double @log(double) nounwind

define void @helper_fptan() nounwind uwtable {
  %.sroa.26 = alloca [6 x i8], align 2
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %or.cond = or i1 %12, %13
  br i1 %or.cond, label %14, label %19

; <label>:14                                      ; preds = %0
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 17
  %17 = load i16* %16, align 2
  %18 = or i16 %17, 1024
  store i16 %18, i16* %16, align 2
  br label %50

; <label>:19                                      ; preds = %0
  %20 = call double @tan(double %11) nounwind
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 16
  %23 = load i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 21, i64 %24
  %26 = bitcast double %20 to i64
  %27 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 25
  %28 = call { i64, i16 } @float64_to_floatx80(i64 %26, %struct.float_status* %27) nounwind
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %.sroa.03.0..idx = getelementptr inbounds %union.FPReg* %25, i64 0, i32 0, i32 0
  store i64 %29, i64* %.sroa.03.0..idx, align 8
  %.sroa.14.8..idx5 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 21, i64 %24, i32 0, i32 1
  store i16 %30, i16* %.sroa.14.8..idx5, align 8
  %.sroa.26.10..raw_cast = bitcast %union.FPReg* %25 to i8*
  %.sroa.26.10..raw_idx = getelementptr inbounds i8* %.sroa.26.10..raw_cast, i64 10
  %.sroa.26.10.idx = getelementptr inbounds [6 x i8]* %.sroa.26, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.26.10..raw_idx, i8* %.sroa.26.10.idx, i64 6, i32 2, i1 false)
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 16
  %33 = load i32* %32, align 4
  %34 = add i32 %33, 7
  %35 = and i32 %34, 7
  store i32 %35, i32* %32, align 4
  %36 = load %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 16
  %38 = load i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 19, i64 %39
  store i8 0, i8* %40, align 1
  %41 = load %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 16
  %43 = load i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 21, i64 %44
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %45, i64 0, i32 0, i32 0
  store i64 -9223372036854775808, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 21, i64 %44, i32 0, i32 1
  store i16 16383, i16* %.sroa.1.8..idx2, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %45 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %46 = load %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State* %46, i64 0, i32 17
  %48 = load i16* %47, align 2
  %49 = and i16 %48, -1025
  store i16 %49, i16* %47, align 2
  br label %50

; <label>:50                                      ; preds = %19, %14
  ret void
}

declare double @tan(double) nounwind

define void @helper_fpatan() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %6, i32 0, i32 0
  %8 = load i64* %7, align 1
  %9 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %6, i32 0, i32 1
  %10 = load i16* %9, align 1
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %12 = call i64 @floatx80_to_float64(i64 %8, i16 %10, %struct.float_status* %11) nounwind
  %13 = bitcast i64 %12 to double
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 16
  %16 = load i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %17, i32 0, i32 0
  %19 = load i64* %18, align 1
  %20 = getelementptr %struct.CPUX86State* %14, i64 0, i32 21, i64 %17, i32 0, i32 1
  %21 = load i16* %20, align 1
  %22 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 25
  %23 = call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* %22) nounwind
  %24 = bitcast i64 %23 to double
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 16
  %27 = load i32* %26, align 4
  %28 = add i32 %27, 1
  %29 = and i32 %28, 7
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 21, i64 %30
  %32 = call double @atan2(double %13, double %24) nounwind
  %33 = bitcast double %32 to i64
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 25
  %36 = call { i64, i16 } @float64_to_floatx80(i64 %33, %struct.float_status* %35) nounwind
  %37 = extractvalue { i64, i16 } %36, 0
  %38 = extractvalue { i64, i16 } %36, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %31, i64 0, i32 0, i32 0
  store i64 %37, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx1 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 21, i64 %30, i32 0, i32 1
  store i16 %38, i16* %.sroa.1.8..idx1, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %31 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %39 = load %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State* %39, i64 0, i32 16
  %41 = load i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.CPUX86State* %39, i64 0, i32 19, i64 %42
  store i8 1, i8* %43, align 1
  %44 = load %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State* %44, i64 0, i32 16
  %46 = load i32* %45, align 4
  %47 = add i32 %46, 1
  %48 = and i32 %47, 7
  store i32 %48, i32* %45, align 4
  ret void
}

declare double @atan2(double, double) nounwind

define void @helper_fxtract() nounwind uwtable {
  %temp.sroa.2 = alloca [6 x i8], align 2
  %.sroa.25 = alloca [6 x i8], align 2
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4
  %temp.sroa.0.0..idx14 = getelementptr inbounds %union.FPReg* %5, i64 0, i32 0, i32 0
  %temp.sroa.0.0.copyload15 = load i64* %temp.sroa.0.0..idx14, align 8
  %temp.sroa.1.8..idx20 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %temp.sroa.1.8.copyload21 = load i16* %temp.sroa.1.8..idx20, align 8
  %temp.sroa.2.10..raw_cast25 = bitcast %union.FPReg* %5 to i8*
  %temp.sroa.2.10..raw_idx26 = getelementptr inbounds i8* %temp.sroa.2.10..raw_cast25, i64 10
  %temp.sroa.2.10.idx27 = getelementptr inbounds [6 x i8]* %temp.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp.sroa.2.10.idx27, i8* %temp.sroa.2.10..raw_idx26, i64 6, i32 2, i1 false)
  %6 = and i16 %temp.sroa.1.8.copyload21, 32767
  %7 = icmp eq i16 %6, 0
  %8 = icmp eq i64 %temp.sroa.0.0.copyload15, 0
  %.demorgan = and i1 %7, %8
  br i1 %.demorgan, label %9, label %29

; <label>:9                                       ; preds = %0
  %10 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %11 = call { i64, i16 } @floatx80_div(i64 -9223372036854775808, i16 -16385, i64 0, i16 0, %struct.float_status* %10) nounwind
  %12 = extractvalue { i64, i16 } %11, 0
  %13 = extractvalue { i64, i16 } %11, 1
  store i64 %12, i64* %temp.sroa.0.0..idx14, align 8
  store i16 %13, i16* %temp.sroa.1.8..idx20, align 8
  %.sroa.25.10.idx = getelementptr inbounds [6 x i8]* %.sroa.25, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp.sroa.2.10..raw_idx26, i8* %.sroa.25.10.idx, i64 6, i32 2, i1 false)
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 16
  %16 = load i32* %15, align 4
  %17 = add i32 %16, 7
  %18 = and i32 %17, 7
  store i32 %18, i32* %15, align 4
  %19 = load %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 16
  %21 = load i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 19, i64 %22
  store i8 0, i8* %23, align 1
  %24 = load %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 16
  %26 = load i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 21, i64 %27
  %temp.sroa.0.0..idx12 = getelementptr inbounds %union.FPReg* %28, i64 0, i32 0, i32 0
  store i64 0, i64* %temp.sroa.0.0..idx12, align 8
  %temp.sroa.1.8..idx18 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 21, i64 %27, i32 0, i32 1
  store i16 %temp.sroa.1.8.copyload21, i16* %temp.sroa.1.8..idx18, align 8
  %temp.sroa.2.10..raw_cast22 = bitcast %union.FPReg* %28 to i8*
  %temp.sroa.2.10..raw_idx23 = getelementptr inbounds i8* %temp.sroa.2.10..raw_cast22, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp.sroa.2.10..raw_idx23, i8* %temp.sroa.2.10.idx27, i64 6, i32 2, i1 false)
  br label %54

; <label>:29                                      ; preds = %0
  %30 = zext i16 %temp.sroa.1.8.copyload21 to i32
  %31 = and i32 %30, 32767
  %32 = add nsw i32 %31, -16383
  %33 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %34 = call { i64, i16 } @int32_to_floatx80(i32 %32, %struct.float_status* %33) nounwind
  %35 = extractvalue { i64, i16 } %34, 0
  %36 = extractvalue { i64, i16 } %34, 1
  store i64 %35, i64* %temp.sroa.0.0..idx14, align 8
  store i16 %36, i16* %temp.sroa.1.8..idx20, align 8
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp.sroa.2.10..raw_idx26, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %37 = load %struct.CPUX86State** @env, align 8
  %38 = getelementptr inbounds %struct.CPUX86State* %37, i64 0, i32 16
  %39 = load i32* %38, align 4
  %40 = add i32 %39, 7
  %41 = and i32 %40, 7
  store i32 %41, i32* %38, align 4
  %42 = load %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State* %42, i64 0, i32 16
  %44 = load i32* %43, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %struct.CPUX86State* %42, i64 0, i32 19, i64 %45
  store i8 0, i8* %46, align 1
  %47 = and i16 %temp.sroa.1.8.copyload21, -32768
  %48 = or i16 %47, 16383
  %49 = load %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 16
  %51 = load i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 21, i64 %52
  %temp.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %53, i64 0, i32 0, i32 0
  store i64 %temp.sroa.0.0.copyload15, i64* %temp.sroa.0.0..idx, align 8
  %temp.sroa.1.8..idx16 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 21, i64 %52, i32 0, i32 1
  store i16 %48, i16* %temp.sroa.1.8..idx16, align 8
  %temp.sroa.2.10..raw_cast = bitcast %union.FPReg* %53 to i8*
  %temp.sroa.2.10..raw_idx = getelementptr inbounds i8* %temp.sroa.2.10..raw_cast, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %temp.sroa.2.10..raw_idx, i8* %temp.sroa.2.10.idx27, i64 6, i32 2, i1 false)
  br label %54

; <label>:54                                      ; preds = %29, %9
  ret void
}

declare { i64, i16 } @floatx80_div(i64, i16, i64, i16, %struct.float_status*)

declare { i64, i16 } @int32_to_floatx80(i32, %struct.float_status*)

define void @helper_fprem1() nounwind uwtable {
  %.sroa.26 = alloca [6 x i8], align 2
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 16
  %14 = load i32* %13, align 4
  %15 = add i32 %14, 1
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 21, i64 %17, i32 0, i32 0
  %19 = load i64* %18, align 1
  %20 = getelementptr %struct.CPUX86State* %12, i64 0, i32 21, i64 %17, i32 0, i32 1
  %21 = load i16* %20, align 1
  %22 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 25
  %23 = call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* %22) nounwind
  %24 = bitcast i64 %23 to double
  %25 = call i32 @__isinf(double %11) nounwind readnone
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %34

; <label>:27                                      ; preds = %0
  %28 = call i32 @__isnan(double %11) nounwind readnone
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %27
  %31 = call i32 @__isnan(double %24) nounwind readnone
  %32 = icmp ne i32 %31, 0
  %33 = fcmp oeq double %24, 0.000000e+00
  %or.cond = or i1 %32, %33
  br i1 %or.cond, label %34, label %48

; <label>:34                                      ; preds = %30, %27, %0
  %35 = load %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 16
  %37 = load i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 21, i64 %38
  %40 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 25
  %41 = call { i64, i16 } @float64_to_floatx80(i64 9221120237041090560, %struct.float_status* %40) nounwind
  %42 = extractvalue { i64, i16 } %41, 0
  %43 = extractvalue { i64, i16 } %41, 1
  %.sroa.03.0..idx = getelementptr inbounds %union.FPReg* %39, i64 0, i32 0, i32 0
  store i64 %42, i64* %.sroa.03.0..idx, align 8
  %.sroa.14.8..idx5 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 21, i64 %38, i32 0, i32 1
  store i16 %43, i16* %.sroa.14.8..idx5, align 8
  %.sroa.26.10..raw_cast = bitcast %union.FPReg* %39 to i8*
  %.sroa.26.10..raw_idx = getelementptr inbounds i8* %.sroa.26.10..raw_cast, i64 10
  %.sroa.26.10.idx = getelementptr inbounds [6 x i8]* %.sroa.26, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.26.10..raw_idx, i8* %.sroa.26.10.idx, i64 6, i32 2, i1 false)
  %44 = load %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State* %44, i64 0, i32 17
  %46 = load i16* %45, align 2
  %47 = and i16 %46, -18177
  store i16 %47, i16* %45, align 2
  br label %132

; <label>:48                                      ; preds = %30
  %49 = load %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 16
  %51 = load i32* %50, align 4
  %52 = zext i32 %51 to i64
  %fpsrcop1.sroa.1.8..idx12 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 21, i64 %52, i32 0, i32 1
  %fpsrcop1.sroa.1.8.copyload = load i16* %fpsrcop1.sroa.1.8..idx12, align 8
  %53 = add i32 %51, 1
  %54 = and i32 %53, 7
  %55 = zext i32 %54 to i64
  %fptemp1.sroa.1.8..idx11 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 21, i64 %55, i32 0, i32 1
  %fptemp1.sroa.1.8.copyload = load i16* %fptemp1.sroa.1.8..idx11, align 8
  %56 = zext i16 %fpsrcop1.sroa.1.8.copyload to i32
  %57 = and i32 %56, 32767
  %58 = zext i16 %fptemp1.sroa.1.8.copyload to i32
  %59 = and i32 %58, 32767
  %60 = sub nsw i32 %57, %59
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %66

; <label>:62                                      ; preds = %48
  %63 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 17
  %64 = load i16* %63, align 2
  %65 = and i16 %64, -18177
  store i16 %65, i16* %63, align 2
  br label %132

; <label>:66                                      ; preds = %48
  %67 = icmp slt i32 %60, 53
  br i1 %67, label %68, label %103

; <label>:68                                      ; preds = %66
  %69 = fdiv double %11, %24
  %70 = call double @rint(double %69) nounwind readnone
  %71 = fmul double %24, %70
  %72 = fcmp olt double %70, 0.000000e+00
  br i1 %72, label %73, label %75

; <label>:73                                      ; preds = %68
  %74 = fsub double -0.000000e+00, %70
  br label %75

; <label>:75                                      ; preds = %73, %68
  %q.0.in = phi double [ %74, %73 ], [ %70, %68 ]
  %q.0 = fptosi double %q.0.in to i64
  %76 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 17
  %77 = load i16* %76, align 2
  %78 = and i16 %77, -18177
  store i16 %78, i16* %76, align 2
  %79 = shl i64 %q.0, 6
  %80 = and i64 %79, 256
  %81 = load %struct.CPUX86State** @env, align 8
  %82 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 17
  %83 = load i16* %82, align 2
  %84 = zext i16 %83 to i64
  %85 = or i64 %84, %80
  %86 = trunc i64 %85 to i16
  store i16 %86, i16* %82, align 2
  %87 = shl i64 %q.0, 13
  %88 = and i64 %87, 16384
  %89 = load %struct.CPUX86State** @env, align 8
  %90 = getelementptr inbounds %struct.CPUX86State* %89, i64 0, i32 17
  %91 = load i16* %90, align 2
  %92 = zext i16 %91 to i64
  %93 = or i64 %92, %88
  %94 = trunc i64 %93 to i16
  store i16 %94, i16* %90, align 2
  %95 = shl i64 %q.0, 9
  %96 = and i64 %95, 512
  %97 = load %struct.CPUX86State** @env, align 8
  %98 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 17
  %99 = load i16* %98, align 2
  %100 = zext i16 %99 to i64
  %101 = or i64 %100, %96
  %102 = trunc i64 %101 to i16
  store i16 %102, i16* %98, align 2
  br label %121

; <label>:103                                     ; preds = %66
  %104 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 17
  %105 = load i16* %104, align 2
  %106 = or i16 %105, 1024
  store i16 %106, i16* %104, align 2
  %107 = add nsw i32 %60, -50
  %exp2 = call double @ldexp(double 1.000000e+00, i32 %107) nounwind
  %108 = fdiv double %11, %24
  %109 = fdiv double %108, %exp2
  %110 = fcmp olt double %109, 0.000000e+00
  br i1 %110, label %111, label %115

; <label>:111                                     ; preds = %103
  %112 = call double @fabs(double %109) nounwind readnone
  %113 = call double @floor(double %112) nounwind readnone
  %114 = fsub double -0.000000e+00, %113
  br label %117

; <label>:115                                     ; preds = %103
  %116 = call double @floor(double %109) nounwind readnone
  br label %117

; <label>:117                                     ; preds = %115, %111
  %118 = phi double [ %114, %111 ], [ %116, %115 ]
  %119 = fmul double %24, %118
  %120 = fmul double %exp2, %119
  br label %121

; <label>:121                                     ; preds = %117, %75
  %.pn = phi double [ %71, %75 ], [ %120, %117 ]
  %st0.0 = fsub double %11, %.pn
  %122 = load %struct.CPUX86State** @env, align 8
  %123 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 16
  %124 = load i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 21, i64 %125
  %127 = bitcast double %st0.0 to i64
  %128 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 25
  %129 = call { i64, i16 } @float64_to_floatx80(i64 %127, %struct.float_status* %128) nounwind
  %130 = extractvalue { i64, i16 } %129, 0
  %131 = extractvalue { i64, i16 } %129, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %126, i64 0, i32 0, i32 0
  store i64 %130, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 21, i64 %125, i32 0, i32 1
  store i16 %131, i16* %.sroa.1.8..idx2, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %126 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  br label %132

; <label>:132                                     ; preds = %121, %62, %34
  ret void
}

declare i32 @__isinf(double) nounwind readnone

declare i32 @__isnan(double) nounwind readnone

declare double @rint(double) nounwind readnone

declare double @floor(double) nounwind readnone

declare double @fabs(double) nounwind readnone

define void @helper_fprem() nounwind uwtable {
  %.sroa.26 = alloca [6 x i8], align 2
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 16
  %14 = load i32* %13, align 4
  %15 = add i32 %14, 1
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 21, i64 %17, i32 0, i32 0
  %19 = load i64* %18, align 1
  %20 = getelementptr %struct.CPUX86State* %12, i64 0, i32 21, i64 %17, i32 0, i32 1
  %21 = load i16* %20, align 1
  %22 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 25
  %23 = call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* %22) nounwind
  %24 = bitcast i64 %23 to double
  %25 = call i32 @__isinf(double %11) nounwind readnone
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %34

; <label>:27                                      ; preds = %0
  %28 = call i32 @__isnan(double %11) nounwind readnone
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %27
  %31 = call i32 @__isnan(double %24) nounwind readnone
  %32 = icmp ne i32 %31, 0
  %33 = fcmp oeq double %24, 0.000000e+00
  %or.cond = or i1 %32, %33
  br i1 %or.cond, label %34, label %48

; <label>:34                                      ; preds = %30, %27, %0
  %35 = load %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 16
  %37 = load i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 21, i64 %38
  %40 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 25
  %41 = call { i64, i16 } @float64_to_floatx80(i64 9221120237041090560, %struct.float_status* %40) nounwind
  %42 = extractvalue { i64, i16 } %41, 0
  %43 = extractvalue { i64, i16 } %41, 1
  %.sroa.03.0..idx = getelementptr inbounds %union.FPReg* %39, i64 0, i32 0, i32 0
  store i64 %42, i64* %.sroa.03.0..idx, align 8
  %.sroa.14.8..idx5 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 21, i64 %38, i32 0, i32 1
  store i16 %43, i16* %.sroa.14.8..idx5, align 8
  %.sroa.26.10..raw_cast = bitcast %union.FPReg* %39 to i8*
  %.sroa.26.10..raw_idx = getelementptr inbounds i8* %.sroa.26.10..raw_cast, i64 10
  %.sroa.26.10.idx = getelementptr inbounds [6 x i8]* %.sroa.26, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.26.10..raw_idx, i8* %.sroa.26.10.idx, i64 6, i32 2, i1 false)
  %44 = load %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State* %44, i64 0, i32 17
  %46 = load i16* %45, align 2
  %47 = and i16 %46, -18177
  store i16 %47, i16* %45, align 2
  br label %139

; <label>:48                                      ; preds = %30
  %49 = load %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 16
  %51 = load i32* %50, align 4
  %52 = zext i32 %51 to i64
  %fpsrcop1.sroa.1.8..idx13 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 21, i64 %52, i32 0, i32 1
  %fpsrcop1.sroa.1.8.copyload = load i16* %fpsrcop1.sroa.1.8..idx13, align 8
  %53 = add i32 %51, 1
  %54 = and i32 %53, 7
  %55 = zext i32 %54 to i64
  %fptemp1.sroa.1.8..idx12 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 21, i64 %55, i32 0, i32 1
  %fptemp1.sroa.1.8.copyload = load i16* %fptemp1.sroa.1.8..idx12, align 8
  %56 = zext i16 %fpsrcop1.sroa.1.8.copyload to i32
  %57 = and i32 %56, 32767
  %58 = zext i16 %fptemp1.sroa.1.8.copyload to i32
  %59 = and i32 %58, 32767
  %60 = sub nsw i32 %57, %59
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %66

; <label>:62                                      ; preds = %48
  %63 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 17
  %64 = load i16* %63, align 2
  %65 = and i16 %64, -18177
  store i16 %65, i16* %63, align 2
  br label %139

; <label>:66                                      ; preds = %48
  %67 = icmp slt i32 %60, 53
  br i1 %67, label %68, label %109

; <label>:68                                      ; preds = %66
  %69 = fdiv double %11, %24
  %70 = fcmp olt double %69, 0.000000e+00
  br i1 %70, label %71, label %73

; <label>:71                                      ; preds = %68
  %72 = call double @ceil(double %69) nounwind readnone
  br label %75

; <label>:73                                      ; preds = %68
  %74 = call double @floor(double %69) nounwind readnone
  br label %75

; <label>:75                                      ; preds = %73, %71
  %76 = phi double [ %72, %71 ], [ %74, %73 ]
  %77 = fmul double %24, %76
  %78 = fcmp olt double %76, 0.000000e+00
  br i1 %78, label %79, label %81

; <label>:79                                      ; preds = %75
  %80 = fsub double -0.000000e+00, %76
  br label %81

; <label>:81                                      ; preds = %79, %75
  %q.0.in = phi double [ %80, %79 ], [ %76, %75 ]
  %q.0 = fptosi double %q.0.in to i64
  %82 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 17
  %83 = load i16* %82, align 2
  %84 = and i16 %83, -18177
  store i16 %84, i16* %82, align 2
  %85 = shl i64 %q.0, 6
  %86 = and i64 %85, 256
  %87 = load %struct.CPUX86State** @env, align 8
  %88 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 17
  %89 = load i16* %88, align 2
  %90 = zext i16 %89 to i64
  %91 = or i64 %90, %86
  %92 = trunc i64 %91 to i16
  store i16 %92, i16* %88, align 2
  %93 = shl i64 %q.0, 13
  %94 = and i64 %93, 16384
  %95 = load %struct.CPUX86State** @env, align 8
  %96 = getelementptr inbounds %struct.CPUX86State* %95, i64 0, i32 17
  %97 = load i16* %96, align 2
  %98 = zext i16 %97 to i64
  %99 = or i64 %98, %94
  %100 = trunc i64 %99 to i16
  store i16 %100, i16* %96, align 2
  %101 = shl i64 %q.0, 9
  %102 = and i64 %101, 512
  %103 = load %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State* %103, i64 0, i32 17
  %105 = load i16* %104, align 2
  %106 = zext i16 %105 to i64
  %107 = or i64 %106, %102
  %108 = trunc i64 %107 to i16
  store i16 %108, i16* %104, align 2
  br label %128

; <label>:109                                     ; preds = %66
  %110 = srem i32 %60, 32
  %111 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 17
  %112 = load i16* %111, align 2
  %113 = or i16 %112, 1024
  store i16 %113, i16* %111, align 2
  %.neg34 = add i32 %60, -32
  %114 = sub i32 %.neg34, %110
  %exp2 = call double @ldexp(double 1.000000e+00, i32 %114) nounwind
  %115 = fdiv double %11, %24
  %116 = fdiv double %115, %exp2
  %117 = fcmp olt double %116, 0.000000e+00
  br i1 %117, label %118, label %122

; <label>:118                                     ; preds = %109
  %119 = call double @fabs(double %116) nounwind readnone
  %120 = call double @floor(double %119) nounwind readnone
  %121 = fsub double -0.000000e+00, %120
  br label %124

; <label>:122                                     ; preds = %109
  %123 = call double @floor(double %116) nounwind readnone
  br label %124

; <label>:124                                     ; preds = %122, %118
  %125 = phi double [ %121, %118 ], [ %123, %122 ]
  %126 = fmul double %24, %125
  %127 = fmul double %exp2, %126
  br label %128

; <label>:128                                     ; preds = %124, %81
  %.pn = phi double [ %77, %81 ], [ %127, %124 ]
  %st0.0 = fsub double %11, %.pn
  %129 = load %struct.CPUX86State** @env, align 8
  %130 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 16
  %131 = load i32* %130, align 4
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 21, i64 %132
  %134 = bitcast double %st0.0 to i64
  %135 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 25
  %136 = call { i64, i16 } @float64_to_floatx80(i64 %134, %struct.float_status* %135) nounwind
  %137 = extractvalue { i64, i16 } %136, 0
  %138 = extractvalue { i64, i16 } %136, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %133, i64 0, i32 0, i32 0
  store i64 %137, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 21, i64 %132, i32 0, i32 1
  store i16 %138, i16* %.sroa.1.8..idx2, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %133 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  br label %139

; <label>:139                                     ; preds = %128, %62, %34
  ret void
}

declare double @ceil(double) nounwind readnone

define void @helper_fyl2xp1() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = fadd double %11, 1.000000e+00
  %13 = fcmp ogt double %12, 0.000000e+00
  br i1 %13, label %14, label %53

; <label>:14                                      ; preds = %0
  %15 = call double @log(double %12) nounwind
  %16 = fdiv double %15, 0x3FE62E42FEFA39EF
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 16
  %19 = load i32* %18, align 4
  %20 = add i32 %19, 1
  %21 = and i32 %20, 7
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 21, i64 %22, i32 0, i32 0
  %24 = load i64* %23, align 1
  %25 = getelementptr %struct.CPUX86State* %17, i64 0, i32 21, i64 %22, i32 0, i32 1
  %26 = load i16* %25, align 1
  %27 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 25
  %28 = call i64 @floatx80_to_float64(i64 %24, i16 %26, %struct.float_status* %27) nounwind
  %29 = bitcast i64 %28 to double
  %30 = fmul double %16, %29
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 16
  %33 = load i32* %32, align 4
  %34 = add i32 %33, 1
  %35 = and i32 %34, 7
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 21, i64 %36
  %38 = bitcast double %30 to i64
  %39 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 25
  %40 = call { i64, i16 } @float64_to_floatx80(i64 %38, %struct.float_status* %39) nounwind
  %41 = extractvalue { i64, i16 } %40, 0
  %42 = extractvalue { i64, i16 } %40, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %37, i64 0, i32 0, i32 0
  store i64 %41, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx1 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 21, i64 %36, i32 0, i32 1
  store i16 %42, i16* %.sroa.1.8..idx1, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %37 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %43 = load %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State* %43, i64 0, i32 16
  %45 = load i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %struct.CPUX86State* %43, i64 0, i32 19, i64 %46
  store i8 1, i8* %47, align 1
  %48 = load %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State* %48, i64 0, i32 16
  %50 = load i32* %49, align 4
  %51 = add i32 %50, 1
  %52 = and i32 %51, 7
  store i32 %52, i32* %49, align 4
  br label %62

; <label>:53                                      ; preds = %0
  %54 = load %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State* %54, i64 0, i32 17
  %56 = load i16* %55, align 2
  %57 = and i16 %56, -18177
  store i16 %57, i16* %55, align 2
  %58 = load %struct.CPUX86State** @env, align 8
  %59 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 17
  %60 = load i16* %59, align 2
  %61 = or i16 %60, 1024
  store i16 %61, i16* %59, align 2
  br label %62

; <label>:62                                      ; preds = %53, %14
  ret void
}

define void @helper_fsqrt() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %6 = load i16* %5, align 1
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %16, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 17
  %10 = load i16* %9, align 2
  %11 = and i16 %10, -18177
  store i16 %11, i16* %9, align 2
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 17
  %14 = load i16* %13, align 2
  %15 = or i16 %14, 1024
  store i16 %15, i16* %13, align 2
  %.pre = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert = getelementptr inbounds %struct.CPUX86State* %.pre, i64 0, i32 16
  %.pre2 = load i32* %.phi.trans.insert, align 4
  %.phi.trans.insert3 = zext i32 %.pre2 to i64
  %.phi.trans.insert4 = getelementptr %struct.CPUX86State* %.pre, i64 0, i32 21, i64 %.phi.trans.insert3, i32 0, i32 1
  %.pre5 = load i16* %.phi.trans.insert4, align 1
  br label %16

; <label>:16                                      ; preds = %8, %0
  %17 = phi i16 [ %6, %0 ], [ %.pre5, %8 ]
  %18 = phi i32 [ %3, %0 ], [ %.pre2, %8 ]
  %19 = phi %struct.CPUX86State* [ %1, %0 ], [ %.pre, %8 ]
  %20 = zext i32 %18 to i64
  %21 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 21, i64 %20
  %22 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 25
  %23 = getelementptr inbounds %union.FPReg* %21, i64 0, i32 0, i32 0
  %24 = load i64* %23, align 1
  %25 = getelementptr %struct.CPUX86State* %19, i64 0, i32 21, i64 %20, i32 0, i32 1
  %26 = call { i64, i16 } @floatx80_sqrt(i64 %24, i16 %17, %struct.float_status* %22) nounwind
  %27 = extractvalue { i64, i16 } %26, 0
  %28 = extractvalue { i64, i16 } %26, 1
  store i64 %27, i64* %23, align 8
  store i16 %28, i16* %25, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %21 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  ret void
}

declare { i64, i16 } @floatx80_sqrt(i64, i16, %struct.float_status*)

define void @helper_fsincos() nounwind uwtable {
  %.sroa.26 = alloca [6 x i8], align 2
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %or.cond = or i1 %12, %13
  %14 = load %struct.CPUX86State** @env, align 8
  br i1 %or.cond, label %15, label %19

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 17
  %17 = load i16* %16, align 2
  %18 = or i16 %17, 1024
  store i16 %18, i16* %16, align 2
  br label %57

; <label>:19                                      ; preds = %0
  %20 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 16
  %21 = load i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %22
  %24 = call double @sin(double %11) nounwind
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 25
  %28 = call { i64, i16 } @float64_to_floatx80(i64 %25, %struct.float_status* %27) nounwind
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %.sroa.03.0..idx = getelementptr inbounds %union.FPReg* %23, i64 0, i32 0, i32 0
  store i64 %29, i64* %.sroa.03.0..idx, align 8
  %.sroa.14.8..idx5 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %22, i32 0, i32 1
  store i16 %30, i16* %.sroa.14.8..idx5, align 8
  %.sroa.26.10..raw_cast = bitcast %union.FPReg* %23 to i8*
  %.sroa.26.10..raw_idx = getelementptr inbounds i8* %.sroa.26.10..raw_cast, i64 10
  %.sroa.26.10.idx = getelementptr inbounds [6 x i8]* %.sroa.26, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.26.10..raw_idx, i8* %.sroa.26.10.idx, i64 6, i32 2, i1 false)
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 16
  %33 = load i32* %32, align 4
  %34 = add i32 %33, 7
  %35 = and i32 %34, 7
  store i32 %35, i32* %32, align 4
  %36 = load %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 16
  %38 = load i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 19, i64 %39
  store i8 0, i8* %40, align 1
  %41 = load %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 16
  %43 = load i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 21, i64 %44
  %46 = call double @cos(double %11) nounwind
  %47 = bitcast double %46 to i64
  %48 = load %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State* %48, i64 0, i32 25
  %50 = call { i64, i16 } @float64_to_floatx80(i64 %47, %struct.float_status* %49) nounwind
  %51 = extractvalue { i64, i16 } %50, 0
  %52 = extractvalue { i64, i16 } %50, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %45, i64 0, i32 0, i32 0
  store i64 %51, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %41, i64 0, i32 21, i64 %44, i32 0, i32 1
  store i16 %52, i16* %.sroa.1.8..idx2, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %45 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %53 = load %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 17
  %55 = load i16* %54, align 2
  %56 = and i16 %55, -1025
  store i16 %56, i16* %54, align 2
  br label %57

; <label>:57                                      ; preds = %19, %15
  ret void
}

declare double @sin(double) nounwind

declare double @cos(double) nounwind

define void @helper_frndint() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %7 = getelementptr inbounds %union.FPReg* %5, i64 0, i32 0, i32 0
  %8 = load i64* %7, align 1
  %9 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %10 = load i16* %9, align 1
  %11 = call { i64, i16 } @floatx80_round_to_int(i64 %8, i16 %10, %struct.float_status* %6) nounwind
  %12 = extractvalue { i64, i16 } %11, 0
  %13 = extractvalue { i64, i16 } %11, 1
  store i64 %12, i64* %7, align 8
  store i16 %13, i16* %9, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %5 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  ret void
}

declare { i64, i16 } @floatx80_round_to_int(i64, i16, %struct.float_status*)

define void @helper_fscale() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  %6 = zext i32 %5 to i64
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %6, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = and i16 %8, 32767
  %10 = icmp eq i16 %9, 32767
  br i1 %10, label %floatx80_is_any_nan.exit, label %floatx80_is_any_nan.exit.thread

floatx80_is_any_nan.exit:                         ; preds = %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %6, i32 0, i32 0
  %12 = load i64* %11, align 1
  %.mask.i = and i64 %12, 9223372036854775807
  %13 = icmp eq i64 %.mask.i, 0
  br i1 %13, label %floatx80_is_any_nan.exit.thread, label %14

; <label>:14                                      ; preds = %floatx80_is_any_nan.exit
  %15 = zext i32 %3 to i64
  %16 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %15, i32 0
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %6, i32 0
  %18 = bitcast %struct.floatx80* %16 to i8*
  %19 = bitcast %struct.floatx80* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 16, i1 false)
  br label %37

floatx80_is_any_nan.exit.thread:                  ; preds = %floatx80_is_any_nan.exit, %0
  %20 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %21 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %6, i32 0, i32 0
  %22 = load i64* %21, align 1
  %23 = call i32 @floatx80_to_int32_round_to_zero(i64 %22, i16 %8, %struct.float_status* %20) nounwind
  %24 = load %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 16
  %26 = load i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 21, i64 %27
  %29 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 25
  %30 = getelementptr inbounds %union.FPReg* %28, i64 0, i32 0, i32 0
  %31 = load i64* %30, align 1
  %32 = getelementptr %struct.CPUX86State* %24, i64 0, i32 21, i64 %27, i32 0, i32 1
  %33 = load i16* %32, align 1
  %34 = call { i64, i16 } @floatx80_scalbn(i64 %31, i16 %33, i32 %23, %struct.float_status* %29) nounwind
  %35 = extractvalue { i64, i16 } %34, 0
  %36 = extractvalue { i64, i16 } %34, 1
  store i64 %35, i64* %30, align 8
  store i16 %36, i16* %32, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %28 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  br label %37

; <label>:37                                      ; preds = %floatx80_is_any_nan.exit.thread, %14
  ret void
}

declare i32 @floatx80_to_int32_round_to_zero(i64, i16, %struct.float_status*)

declare { i64, i16 } @floatx80_scalbn(i64, i16, i32, %struct.float_status*)

define void @helper_fsin() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %or.cond = or i1 %12, %13
  %14 = load %struct.CPUX86State** @env, align 8
  br i1 %or.cond, label %15, label %19

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 17
  %17 = load i16* %16, align 2
  %18 = or i16 %17, 1024
  store i16 %18, i16* %16, align 2
  br label %35

; <label>:19                                      ; preds = %0
  %20 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 16
  %21 = load i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %22
  %24 = call double @sin(double %11) nounwind
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 25
  %28 = call { i64, i16 } @float64_to_floatx80(i64 %25, %struct.float_status* %27) nounwind
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %23, i64 0, i32 0, i32 0
  store i64 %29, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %22, i32 0, i32 1
  store i16 %30, i16* %.sroa.1.8..idx2, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %23 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 17
  %33 = load i16* %32, align 2
  %34 = and i16 %33, -1025
  store i16 %34, i16* %32, align 2
  br label %35

; <label>:35                                      ; preds = %19, %15
  ret void
}

define void @helper_fcos() nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %6 = load i64* %5, align 1
  %7 = getelementptr %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %8 = load i16* %7, align 1
  %9 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 25
  %10 = call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* %9) nounwind
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %or.cond = or i1 %12, %13
  %14 = load %struct.CPUX86State** @env, align 8
  br i1 %or.cond, label %15, label %19

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 17
  %17 = load i16* %16, align 2
  %18 = or i16 %17, 1024
  store i16 %18, i16* %16, align 2
  br label %35

; <label>:19                                      ; preds = %0
  %20 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 16
  %21 = load i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %22
  %24 = call double @cos(double %11) nounwind
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 25
  %28 = call { i64, i16 } @float64_to_floatx80(i64 %25, %struct.float_status* %27) nounwind
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %23, i64 0, i32 0, i32 0
  store i64 %29, i64* %.sroa.0.0..idx, align 8
  %.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 21, i64 %22, i32 0, i32 1
  store i16 %30, i16* %.sroa.1.8..idx2, align 8
  %.sroa.2.10..raw_cast = bitcast %union.FPReg* %23 to i8*
  %.sroa.2.10..raw_idx = getelementptr inbounds i8* %.sroa.2.10..raw_cast, i64 10
  %.sroa.2.10.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.10..raw_idx, i8* %.sroa.2.10.idx, i64 6, i32 2, i1 false)
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 17
  %33 = load i16* %32, align 2
  %34 = and i16 %33, -1025
  store i16 %34, i16* %32, align 2
  br label %35

; <label>:35                                      ; preds = %19, %15
  ret void
}

define void @helper_fxam_ST0() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %3 = load i32* %2, align 4
  %4 = zext i32 %3 to i64
  %temp.sroa.0.0..idx = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 0
  %temp.sroa.0.0.copyload = load i64* %temp.sroa.0.0..idx, align 8
  %temp.sroa.1.8..idx4 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %4, i32 0, i32 1
  %temp.sroa.1.8.copyload = load i16* %temp.sroa.1.8..idx4, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 17
  %6 = load i16* %5, align 2
  %7 = and i16 %6, -18177
  store i16 %7, i16* %5, align 2
  %8 = zext i16 %temp.sroa.1.8.copyload to i32
  %9 = and i32 %8, 32768
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %16, label %11

; <label>:11                                      ; preds = %0
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 17
  %14 = load i16* %13, align 2
  %15 = or i16 %14, 512
  store i16 %15, i16* %13, align 2
  br label %16

; <label>:16                                      ; preds = %11, %0
  %17 = and i32 %8, 32767
  switch i32 %17, label %36 [
    i32 32767, label %18
    i32 0, label %27
  ]

; <label>:18                                      ; preds = %16
  %19 = icmp eq i64 %temp.sroa.0.0.copyload, -9223372036854775808
  %20 = load %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State* %20, i64 0, i32 17
  %22 = load i16* %21, align 2
  br i1 %19, label %23, label %25

; <label>:23                                      ; preds = %18
  %24 = or i16 %22, 1280
  store i16 %24, i16* %21, align 2
  br label %41

; <label>:25                                      ; preds = %18
  %26 = or i16 %22, 256
  store i16 %26, i16* %21, align 2
  br label %41

; <label>:27                                      ; preds = %16
  %28 = icmp eq i64 %temp.sroa.0.0.copyload, 0
  %29 = load %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State* %29, i64 0, i32 17
  %31 = load i16* %30, align 2
  br i1 %28, label %32, label %34

; <label>:32                                      ; preds = %27
  %33 = or i16 %31, 16384
  store i16 %33, i16* %30, align 2
  br label %41

; <label>:34                                      ; preds = %27
  %35 = or i16 %31, 17408
  store i16 %35, i16* %30, align 2
  br label %41

; <label>:36                                      ; preds = %16
  %37 = load %struct.CPUX86State** @env, align 8
  %38 = getelementptr inbounds %struct.CPUX86State* %37, i64 0, i32 17
  %39 = load i16* %38, align 2
  %40 = or i16 %39, 1024
  store i16 %40, i16* %38, align 2
  br label %41

; <label>:41                                      ; preds = %36, %34, %32, %25, %23
  ret void
}

define void @helper_fstenv(i32 %ptr, i32 %data32) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 17
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  %6 = load i32* %5, align 4
  %7 = shl i32 %6, 11
  %8 = and i32 %7, 14336
  br label %9

; <label>:9                                       ; preds = %28, %0
  %indvars.iv = phi i64 [ 7, %0 ], [ %indvars.iv.next, %28 ]
  %fptag.042 = phi i32 [ 0, %0 ], [ %fptag.1, %28 ]
  %10 = shl i32 %fptag.042, 2
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 19, i64 %indvars.iv
  %12 = load i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %16, label %14

; <label>:14                                      ; preds = %9
  %15 = or i32 %10, 3
  br label %28

; <label>:16                                      ; preds = %9
  %tmp.sroa.0.0..idx = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %indvars.iv, i32 0, i32 0
  %tmp.sroa.0.0.copyload = load i64* %tmp.sroa.0.0..idx, align 8
  %tmp.sroa.1.8..idx2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 21, i64 %indvars.iv, i32 0, i32 1
  %tmp.sroa.1.8.copyload = load i16* %tmp.sroa.1.8..idx2, align 8
  %17 = zext i16 %tmp.sroa.1.8.copyload to i32
  %18 = and i32 %17, 32767
  %19 = icmp eq i32 %18, 0
  %20 = icmp eq i64 %tmp.sroa.0.0.copyload, 0
  %or.cond28 = and i1 %19, %20
  br i1 %or.cond28, label %21, label %23

; <label>:21                                      ; preds = %16
  %22 = or i32 %10, 1
  br label %28

; <label>:23                                      ; preds = %16
  switch i32 %18, label %24 [
    i32 32767, label %26
    i32 0, label %26
  ]

; <label>:24                                      ; preds = %23
  %25 = icmp sgt i64 %tmp.sroa.0.0.copyload, -1
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %24, %23, %23
  %27 = or i32 %10, 2
  br label %28

; <label>:28                                      ; preds = %26, %24, %21, %14
  %fptag.1 = phi i32 [ %15, %14 ], [ %22, %21 ], [ %27, %26 ], [ %10, %24 ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %29 = trunc i64 %indvars.iv to i32
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %9, label %31

; <label>:31                                      ; preds = %28
  %32 = and i32 %4, 51199
  %33 = or i32 %8, %32
  %34 = icmp eq i32 %data32, 0
  %35 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 18
  %36 = load i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = lshr i32 %ptr, 12
  %39 = and i32 %38, 255
  %40 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %41 = load i32* %40, align 4
  %42 = and i32 %41, 3
  %43 = icmp eq i32 %42, 3
  %44 = zext i32 %39 to i64
  %45 = zext i1 %43 to i64
  %46 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %45, i64 %44, i32 1
  %47 = load i32* %46, align 4
  br i1 %34, label %191, label %48

; <label>:48                                      ; preds = %31
  %49 = and i32 %ptr, -4093
  %50 = icmp eq i32 %47, %49
  %51 = zext i32 %ptr to i64
  br i1 %50, label %54, label %52, !prof !0

; <label>:52                                      ; preds = %48
  %53 = inttoptr i64 %51 to i32*
  store i32 %37, i32* %53, align 4
  br label %stl_data.exit

; <label>:54                                      ; preds = %48
  %55 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %45, i64 %44, i32 3
  %56 = load i64* %55, align 8
  %57 = add i64 %56, %51
  %58 = inttoptr i64 %57 to i32*
  store i32 %37, i32* %58, align 4
  br label %stl_data.exit

stl_data.exit:                                    ; preds = %54, %52
  %59 = add i32 %ptr, 4
  %60 = lshr i32 %59, 12
  %61 = and i32 %60, 255
  %62 = load %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State* %62, i64 0, i32 7
  %64 = load i32* %63, align 4
  %65 = and i32 %64, 3
  %66 = icmp eq i32 %65, 3
  %67 = zext i32 %61 to i64
  %68 = zext i1 %66 to i64
  %69 = getelementptr inbounds %struct.CPUX86State* %62, i64 0, i32 71, i64 %68, i64 %67, i32 1
  %70 = load i32* %69, align 4
  %71 = and i32 %59, -4093
  %72 = icmp eq i32 %70, %71
  %73 = zext i32 %59 to i64
  br i1 %72, label %76, label %74, !prof !0

; <label>:74                                      ; preds = %stl_data.exit
  %75 = inttoptr i64 %73 to i32*
  store i32 %33, i32* %75, align 4
  br label %stl_data.exit40

; <label>:76                                      ; preds = %stl_data.exit
  %77 = getelementptr inbounds %struct.CPUX86State* %62, i64 0, i32 71, i64 %68, i64 %67, i32 3
  %78 = load i64* %77, align 8
  %79 = add i64 %78, %73
  %80 = inttoptr i64 %79 to i32*
  store i32 %33, i32* %80, align 4
  br label %stl_data.exit40

stl_data.exit40:                                  ; preds = %76, %74
  %81 = add i32 %ptr, 8
  %82 = lshr i32 %81, 12
  %83 = and i32 %82, 255
  %84 = load %struct.CPUX86State** @env, align 8
  %85 = getelementptr inbounds %struct.CPUX86State* %84, i64 0, i32 7
  %86 = load i32* %85, align 4
  %87 = and i32 %86, 3
  %88 = icmp eq i32 %87, 3
  %89 = zext i32 %83 to i64
  %90 = zext i1 %88 to i64
  %91 = getelementptr inbounds %struct.CPUX86State* %84, i64 0, i32 71, i64 %90, i64 %89, i32 1
  %92 = load i32* %91, align 4
  %93 = and i32 %81, -4093
  %94 = icmp eq i32 %92, %93
  %95 = zext i32 %81 to i64
  br i1 %94, label %98, label %96, !prof !0

; <label>:96                                      ; preds = %stl_data.exit40
  %97 = inttoptr i64 %95 to i32*
  store i32 %fptag.1, i32* %97, align 4
  br label %stl_data.exit39

; <label>:98                                      ; preds = %stl_data.exit40
  %99 = getelementptr inbounds %struct.CPUX86State* %84, i64 0, i32 71, i64 %90, i64 %89, i32 3
  %100 = load i64* %99, align 8
  %101 = add i64 %100, %95
  %102 = inttoptr i64 %101 to i32*
  store i32 %fptag.1, i32* %102, align 4
  br label %stl_data.exit39

stl_data.exit39:                                  ; preds = %98, %96
  %103 = add i32 %ptr, 12
  %104 = lshr i32 %103, 12
  %105 = and i32 %104, 255
  %106 = load %struct.CPUX86State** @env, align 8
  %107 = getelementptr inbounds %struct.CPUX86State* %106, i64 0, i32 7
  %108 = load i32* %107, align 4
  %109 = and i32 %108, 3
  %110 = icmp eq i32 %109, 3
  %111 = zext i32 %105 to i64
  %112 = zext i1 %110 to i64
  %113 = getelementptr inbounds %struct.CPUX86State* %106, i64 0, i32 71, i64 %112, i64 %111, i32 1
  %114 = load i32* %113, align 4
  %115 = and i32 %103, -4093
  %116 = icmp eq i32 %114, %115
  %117 = zext i32 %103 to i64
  br i1 %116, label %120, label %118, !prof !0

; <label>:118                                     ; preds = %stl_data.exit39
  %119 = inttoptr i64 %117 to i32*
  store i32 0, i32* %119, align 4
  br label %stl_data.exit38

; <label>:120                                     ; preds = %stl_data.exit39
  %121 = getelementptr inbounds %struct.CPUX86State* %106, i64 0, i32 71, i64 %112, i64 %111, i32 3
  %122 = load i64* %121, align 8
  %123 = add i64 %122, %117
  %124 = inttoptr i64 %123 to i32*
  store i32 0, i32* %124, align 4
  br label %stl_data.exit38

stl_data.exit38:                                  ; preds = %120, %118
  %125 = add i32 %ptr, 16
  %126 = lshr i32 %125, 12
  %127 = and i32 %126, 255
  %128 = load %struct.CPUX86State** @env, align 8
  %129 = getelementptr inbounds %struct.CPUX86State* %128, i64 0, i32 7
  %130 = load i32* %129, align 4
  %131 = and i32 %130, 3
  %132 = icmp eq i32 %131, 3
  %133 = zext i32 %127 to i64
  %134 = zext i1 %132 to i64
  %135 = getelementptr inbounds %struct.CPUX86State* %128, i64 0, i32 71, i64 %134, i64 %133, i32 1
  %136 = load i32* %135, align 4
  %137 = and i32 %125, -4093
  %138 = icmp eq i32 %136, %137
  %139 = zext i32 %125 to i64
  br i1 %138, label %142, label %140, !prof !0

; <label>:140                                     ; preds = %stl_data.exit38
  %141 = inttoptr i64 %139 to i32*
  store i32 0, i32* %141, align 4
  br label %stl_data.exit37

; <label>:142                                     ; preds = %stl_data.exit38
  %143 = getelementptr inbounds %struct.CPUX86State* %128, i64 0, i32 71, i64 %134, i64 %133, i32 3
  %144 = load i64* %143, align 8
  %145 = add i64 %144, %139
  %146 = inttoptr i64 %145 to i32*
  store i32 0, i32* %146, align 4
  br label %stl_data.exit37

stl_data.exit37:                                  ; preds = %142, %140
  %147 = add i32 %ptr, 20
  %148 = lshr i32 %147, 12
  %149 = and i32 %148, 255
  %150 = load %struct.CPUX86State** @env, align 8
  %151 = getelementptr inbounds %struct.CPUX86State* %150, i64 0, i32 7
  %152 = load i32* %151, align 4
  %153 = and i32 %152, 3
  %154 = icmp eq i32 %153, 3
  %155 = zext i32 %149 to i64
  %156 = zext i1 %154 to i64
  %157 = getelementptr inbounds %struct.CPUX86State* %150, i64 0, i32 71, i64 %156, i64 %155, i32 1
  %158 = load i32* %157, align 4
  %159 = and i32 %147, -4093
  %160 = icmp eq i32 %158, %159
  %161 = zext i32 %147 to i64
  br i1 %160, label %164, label %162, !prof !0

; <label>:162                                     ; preds = %stl_data.exit37
  %163 = inttoptr i64 %161 to i32*
  store i32 0, i32* %163, align 4
  br label %stl_data.exit36

; <label>:164                                     ; preds = %stl_data.exit37
  %165 = getelementptr inbounds %struct.CPUX86State* %150, i64 0, i32 71, i64 %156, i64 %155, i32 3
  %166 = load i64* %165, align 8
  %167 = add i64 %166, %161
  %168 = inttoptr i64 %167 to i32*
  store i32 0, i32* %168, align 4
  br label %stl_data.exit36

stl_data.exit36:                                  ; preds = %164, %162
  %169 = add i32 %ptr, 24
  %170 = lshr i32 %169, 12
  %171 = and i32 %170, 255
  %172 = load %struct.CPUX86State** @env, align 8
  %173 = getelementptr inbounds %struct.CPUX86State* %172, i64 0, i32 7
  %174 = load i32* %173, align 4
  %175 = and i32 %174, 3
  %176 = icmp eq i32 %175, 3
  %177 = zext i32 %171 to i64
  %178 = zext i1 %176 to i64
  %179 = getelementptr inbounds %struct.CPUX86State* %172, i64 0, i32 71, i64 %178, i64 %177, i32 1
  %180 = load i32* %179, align 4
  %181 = and i32 %169, -4093
  %182 = icmp eq i32 %180, %181
  %183 = zext i32 %169 to i64
  br i1 %182, label %186, label %184, !prof !0

; <label>:184                                     ; preds = %stl_data.exit36
  %185 = inttoptr i64 %183 to i32*
  store i32 0, i32* %185, align 4
  br label %stl_data.exit35

; <label>:186                                     ; preds = %stl_data.exit36
  %187 = getelementptr inbounds %struct.CPUX86State* %172, i64 0, i32 71, i64 %178, i64 %177, i32 3
  %188 = load i64* %187, align 8
  %189 = add i64 %188, %183
  %190 = inttoptr i64 %189 to i32*
  store i32 0, i32* %190, align 4
  br label %stl_data.exit35

; <label>:191                                     ; preds = %31
  %192 = and i32 %ptr, -4095
  %193 = icmp eq i32 %47, %192
  %194 = zext i32 %ptr to i64
  br i1 %193, label %197, label %195, !prof !0

; <label>:195                                     ; preds = %191
  %196 = inttoptr i64 %194 to i16*
  store i16 %36, i16* %196, align 2
  br label %stw_data.exit34

; <label>:197                                     ; preds = %191
  %198 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 71, i64 %45, i64 %44, i32 3
  %199 = load i64* %198, align 8
  %200 = add i64 %199, %194
  %201 = inttoptr i64 %200 to i16*
  store i16 %36, i16* %201, align 2
  br label %stw_data.exit34

stw_data.exit34:                                  ; preds = %197, %195
  %202 = add i32 %ptr, 2
  %203 = lshr i32 %202, 12
  %204 = and i32 %203, 255
  %205 = load %struct.CPUX86State** @env, align 8
  %206 = getelementptr inbounds %struct.CPUX86State* %205, i64 0, i32 7
  %207 = load i32* %206, align 4
  %208 = and i32 %207, 3
  %209 = icmp eq i32 %208, 3
  %210 = zext i32 %204 to i64
  %211 = zext i1 %209 to i64
  %212 = getelementptr inbounds %struct.CPUX86State* %205, i64 0, i32 71, i64 %211, i64 %210, i32 1
  %213 = load i32* %212, align 4
  %214 = and i32 %202, -4095
  %215 = icmp eq i32 %213, %214
  br i1 %215, label %220, label %216, !prof !0

; <label>:216                                     ; preds = %stw_data.exit34
  %217 = trunc i32 %33 to i16
  %218 = zext i32 %202 to i64
  %219 = inttoptr i64 %218 to i16*
  store i16 %217, i16* %219, align 2
  br label %stw_data.exit33

; <label>:220                                     ; preds = %stw_data.exit34
  %221 = zext i32 %202 to i64
  %222 = getelementptr inbounds %struct.CPUX86State* %205, i64 0, i32 71, i64 %211, i64 %210, i32 3
  %223 = load i64* %222, align 8
  %224 = add i64 %223, %221
  %225 = trunc i32 %33 to i16
  %226 = inttoptr i64 %224 to i16*
  store i16 %225, i16* %226, align 2
  br label %stw_data.exit33

stw_data.exit33:                                  ; preds = %220, %216
  %227 = add i32 %ptr, 4
  %228 = lshr i32 %227, 12
  %229 = and i32 %228, 255
  %230 = load %struct.CPUX86State** @env, align 8
  %231 = getelementptr inbounds %struct.CPUX86State* %230, i64 0, i32 7
  %232 = load i32* %231, align 4
  %233 = and i32 %232, 3
  %234 = icmp eq i32 %233, 3
  %235 = zext i32 %229 to i64
  %236 = zext i1 %234 to i64
  %237 = getelementptr inbounds %struct.CPUX86State* %230, i64 0, i32 71, i64 %236, i64 %235, i32 1
  %238 = load i32* %237, align 4
  %239 = and i32 %227, -4095
  %240 = icmp eq i32 %238, %239
  br i1 %240, label %245, label %241, !prof !0

; <label>:241                                     ; preds = %stw_data.exit33
  %242 = trunc i32 %fptag.1 to i16
  %243 = zext i32 %227 to i64
  %244 = inttoptr i64 %243 to i16*
  store i16 %242, i16* %244, align 2
  br label %stw_data.exit32

; <label>:245                                     ; preds = %stw_data.exit33
  %246 = zext i32 %227 to i64
  %247 = getelementptr inbounds %struct.CPUX86State* %230, i64 0, i32 71, i64 %236, i64 %235, i32 3
  %248 = load i64* %247, align 8
  %249 = add i64 %248, %246
  %250 = trunc i32 %fptag.1 to i16
  %251 = inttoptr i64 %249 to i16*
  store i16 %250, i16* %251, align 2
  br label %stw_data.exit32

stw_data.exit32:                                  ; preds = %245, %241
  %252 = add i32 %ptr, 6
  %253 = lshr i32 %252, 12
  %254 = and i32 %253, 255
  %255 = load %struct.CPUX86State** @env, align 8
  %256 = getelementptr inbounds %struct.CPUX86State* %255, i64 0, i32 7
  %257 = load i32* %256, align 4
  %258 = and i32 %257, 3
  %259 = icmp eq i32 %258, 3
  %260 = zext i32 %254 to i64
  %261 = zext i1 %259 to i64
  %262 = getelementptr inbounds %struct.CPUX86State* %255, i64 0, i32 71, i64 %261, i64 %260, i32 1
  %263 = load i32* %262, align 4
  %264 = and i32 %252, -4095
  %265 = icmp eq i32 %263, %264
  %266 = zext i32 %252 to i64
  br i1 %265, label %269, label %267, !prof !0

; <label>:267                                     ; preds = %stw_data.exit32
  %268 = inttoptr i64 %266 to i16*
  store i16 0, i16* %268, align 2
  br label %stw_data.exit31

; <label>:269                                     ; preds = %stw_data.exit32
  %270 = getelementptr inbounds %struct.CPUX86State* %255, i64 0, i32 71, i64 %261, i64 %260, i32 3
  %271 = load i64* %270, align 8
  %272 = add i64 %271, %266
  %273 = inttoptr i64 %272 to i16*
  store i16 0, i16* %273, align 2
  br label %stw_data.exit31

stw_data.exit31:                                  ; preds = %269, %267
  %274 = add i32 %ptr, 8
  %275 = lshr i32 %274, 12
  %276 = and i32 %275, 255
  %277 = load %struct.CPUX86State** @env, align 8
  %278 = getelementptr inbounds %struct.CPUX86State* %277, i64 0, i32 7
  %279 = load i32* %278, align 4
  %280 = and i32 %279, 3
  %281 = icmp eq i32 %280, 3
  %282 = zext i32 %276 to i64
  %283 = zext i1 %281 to i64
  %284 = getelementptr inbounds %struct.CPUX86State* %277, i64 0, i32 71, i64 %283, i64 %282, i32 1
  %285 = load i32* %284, align 4
  %286 = and i32 %274, -4095
  %287 = icmp eq i32 %285, %286
  %288 = zext i32 %274 to i64
  br i1 %287, label %291, label %289, !prof !0

; <label>:289                                     ; preds = %stw_data.exit31
  %290 = inttoptr i64 %288 to i16*
  store i16 0, i16* %290, align 2
  br label %stw_data.exit30

; <label>:291                                     ; preds = %stw_data.exit31
  %292 = getelementptr inbounds %struct.CPUX86State* %277, i64 0, i32 71, i64 %283, i64 %282, i32 3
  %293 = load i64* %292, align 8
  %294 = add i64 %293, %288
  %295 = inttoptr i64 %294 to i16*
  store i16 0, i16* %295, align 2
  br label %stw_data.exit30

stw_data.exit30:                                  ; preds = %291, %289
  %296 = add i32 %ptr, 10
  %297 = lshr i32 %296, 12
  %298 = and i32 %297, 255
  %299 = load %struct.CPUX86State** @env, align 8
  %300 = getelementptr inbounds %struct.CPUX86State* %299, i64 0, i32 7
  %301 = load i32* %300, align 4
  %302 = and i32 %301, 3
  %303 = icmp eq i32 %302, 3
  %304 = zext i32 %298 to i64
  %305 = zext i1 %303 to i64
  %306 = getelementptr inbounds %struct.CPUX86State* %299, i64 0, i32 71, i64 %305, i64 %304, i32 1
  %307 = load i32* %306, align 4
  %308 = and i32 %296, -4095
  %309 = icmp eq i32 %307, %308
  %310 = zext i32 %296 to i64
  br i1 %309, label %313, label %311, !prof !0

; <label>:311                                     ; preds = %stw_data.exit30
  %312 = inttoptr i64 %310 to i16*
  store i16 0, i16* %312, align 2
  br label %stw_data.exit29

; <label>:313                                     ; preds = %stw_data.exit30
  %314 = getelementptr inbounds %struct.CPUX86State* %299, i64 0, i32 71, i64 %305, i64 %304, i32 3
  %315 = load i64* %314, align 8
  %316 = add i64 %315, %310
  %317 = inttoptr i64 %316 to i16*
  store i16 0, i16* %317, align 2
  br label %stw_data.exit29

stw_data.exit29:                                  ; preds = %313, %311
  %318 = add i32 %ptr, 12
  %319 = lshr i32 %318, 12
  %320 = and i32 %319, 255
  %321 = load %struct.CPUX86State** @env, align 8
  %322 = getelementptr inbounds %struct.CPUX86State* %321, i64 0, i32 7
  %323 = load i32* %322, align 4
  %324 = and i32 %323, 3
  %325 = icmp eq i32 %324, 3
  %326 = zext i32 %320 to i64
  %327 = zext i1 %325 to i64
  %328 = getelementptr inbounds %struct.CPUX86State* %321, i64 0, i32 71, i64 %327, i64 %326, i32 1
  %329 = load i32* %328, align 4
  %330 = and i32 %318, -4095
  %331 = icmp eq i32 %329, %330
  %332 = zext i32 %318 to i64
  br i1 %331, label %335, label %333, !prof !0

; <label>:333                                     ; preds = %stw_data.exit29
  %334 = inttoptr i64 %332 to i16*
  store i16 0, i16* %334, align 2
  br label %stl_data.exit35

; <label>:335                                     ; preds = %stw_data.exit29
  %336 = getelementptr inbounds %struct.CPUX86State* %321, i64 0, i32 71, i64 %327, i64 %326, i32 3
  %337 = load i64* %336, align 8
  %338 = add i64 %337, %332
  %339 = inttoptr i64 %338 to i16*
  store i16 0, i16* %339, align 2
  br label %stl_data.exit35

stl_data.exit35:                                  ; preds = %335, %333, %186, %184
  ret void
}

define void @helper_fldenv(i32 %ptr, i32 %data32) nounwind uwtable {
  %1 = icmp eq i32 %data32, 0
  %2 = lshr i32 %ptr, 12
  %3 = and i32 %2, 255
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 7
  %6 = load i32* %5, align 4
  %7 = and i32 %6, 3
  %8 = icmp eq i32 %7, 3
  %9 = zext i32 %3 to i64
  %10 = zext i1 %8 to i64
  %11 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 71, i64 %10, i64 %9, i32 0
  %12 = load i32* %11, align 4
  %13 = and i32 %ptr, -4095
  %14 = icmp eq i32 %12, %13
  %15 = zext i32 %ptr to i64
  br i1 %14, label %16, label %lduw_data.exit, !prof !0

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 71, i64 %10, i64 %9, i32 3
  %18 = load i64* %17, align 8
  %19 = add i64 %18, %15
  br label %lduw_data.exit

lduw_data.exit:                                   ; preds = %16, %0
  %.sink.in.in.i = phi i64 [ %19, %16 ], [ %15, %0 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %20 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 18
  store i16 %.sink.i, i16* %20, align 2
  br i1 %1, label %54, label %21

; <label>:21                                      ; preds = %lduw_data.exit
  %22 = add i32 %ptr, 4
  %23 = lshr i32 %22, 12
  %24 = and i32 %23, 255
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 7
  %27 = load i32* %26, align 4
  %28 = and i32 %27, 3
  %29 = icmp eq i32 %28, 3
  %30 = zext i32 %24 to i64
  %31 = zext i1 %29 to i64
  %32 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 71, i64 %31, i64 %30, i32 0
  %33 = load i32* %32, align 4
  %34 = and i32 %22, -4095
  %35 = icmp eq i32 %33, %34
  %36 = zext i32 %22 to i64
  br i1 %35, label %37, label %lduw_data.exit24, !prof !0

; <label>:37                                      ; preds = %21
  %38 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 71, i64 %31, i64 %30, i32 3
  %39 = load i64* %38, align 8
  %40 = add i64 %39, %36
  br label %lduw_data.exit24

lduw_data.exit24:                                 ; preds = %37, %21
  %.sink.in.in.i21 = phi i64 [ %40, %37 ], [ %36, %21 ]
  %.sink.in.i22 = inttoptr i64 %.sink.in.in.i21 to i16*
  %.sink.i23 = load i16* %.sink.in.i22, align 2
  %41 = add i32 %ptr, 8
  %42 = lshr i32 %41, 12
  %43 = and i32 %42, 255
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 71, i64 %31, i64 %44, i32 0
  %46 = load i32* %45, align 4
  %47 = and i32 %41, -4095
  %48 = icmp eq i32 %46, %47
  %49 = zext i32 %41 to i64
  br i1 %48, label %50, label %lduw_data.exit20, !prof !0

; <label>:50                                      ; preds = %lduw_data.exit24
  %51 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 71, i64 %31, i64 %44, i32 3
  %52 = load i64* %51, align 8
  %53 = add i64 %52, %49
  br label %lduw_data.exit20

; <label>:54                                      ; preds = %lduw_data.exit
  %55 = add i32 %ptr, 2
  %56 = lshr i32 %55, 12
  %57 = and i32 %56, 255
  %58 = load %struct.CPUX86State** @env, align 8
  %59 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 7
  %60 = load i32* %59, align 4
  %61 = and i32 %60, 3
  %62 = icmp eq i32 %61, 3
  %63 = zext i32 %57 to i64
  %64 = zext i1 %62 to i64
  %65 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 71, i64 %64, i64 %63, i32 0
  %66 = load i32* %65, align 4
  %67 = and i32 %55, -4095
  %68 = icmp eq i32 %66, %67
  %69 = zext i32 %55 to i64
  br i1 %68, label %70, label %lduw_data.exit16, !prof !0

; <label>:70                                      ; preds = %54
  %71 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 71, i64 %64, i64 %63, i32 3
  %72 = load i64* %71, align 8
  %73 = add i64 %72, %69
  br label %lduw_data.exit16

lduw_data.exit16:                                 ; preds = %70, %54
  %.sink.in.in.i13 = phi i64 [ %73, %70 ], [ %69, %54 ]
  %.sink.in.i14 = inttoptr i64 %.sink.in.in.i13 to i16*
  %.sink.i15 = load i16* %.sink.in.i14, align 2
  %74 = add i32 %ptr, 4
  %75 = lshr i32 %74, 12
  %76 = and i32 %75, 255
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 71, i64 %64, i64 %77, i32 0
  %79 = load i32* %78, align 4
  %80 = and i32 %74, -4095
  %81 = icmp eq i32 %79, %80
  %82 = zext i32 %74 to i64
  br i1 %81, label %83, label %lduw_data.exit20, !prof !0

; <label>:83                                      ; preds = %lduw_data.exit16
  %84 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 71, i64 %64, i64 %77, i32 3
  %85 = load i64* %84, align 8
  %86 = add i64 %85, %82
  br label %lduw_data.exit20

lduw_data.exit20:                                 ; preds = %83, %lduw_data.exit16, %50, %lduw_data.exit24
  %87 = phi %struct.CPUX86State* [ %25, %50 ], [ %25, %lduw_data.exit24 ], [ %58, %83 ], [ %58, %lduw_data.exit16 ]
  %.sink.i19.sink.in.in = phi i64 [ %53, %50 ], [ %49, %lduw_data.exit24 ], [ %86, %83 ], [ %82, %lduw_data.exit16 ]
  %fpus.0.in = phi i16 [ %.sink.i23, %50 ], [ %.sink.i23, %lduw_data.exit24 ], [ %.sink.i15, %83 ], [ %.sink.i15, %lduw_data.exit16 ]
  %.sink.i19.sink.in = inttoptr i64 %.sink.i19.sink.in.in to i16*
  %fpus.0 = zext i16 %fpus.0.in to i32
  %.sink.i19.sink = load i16* %.sink.i19.sink.in, align 2
  %88 = zext i16 %.sink.i19.sink to i32
  %89 = lshr i32 %fpus.0, 11
  %90 = and i32 %89, 7
  %91 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 16
  store i32 %90, i32* %91, align 4
  %92 = and i16 %fpus.0.in, -14337
  %93 = load %struct.CPUX86State** @env, align 8
  %94 = getelementptr inbounds %struct.CPUX86State* %93, i64 0, i32 17
  store i16 %92, i16* %94, align 2
  %95 = and i32 %88, 3
  %96 = icmp eq i32 %95, 3
  %97 = zext i1 %96 to i8
  %98 = load %struct.CPUX86State** @env, align 8
  %99 = getelementptr inbounds %struct.CPUX86State* %98, i64 0, i32 19, i64 0
  store i8 %97, i8* %99, align 1
  %100 = and i32 %88, 12
  %101 = icmp eq i32 %100, 12
  %102 = zext i1 %101 to i8
  %103 = load %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State* %103, i64 0, i32 19, i64 1
  store i8 %102, i8* %104, align 1
  %105 = and i32 %88, 48
  %106 = icmp eq i32 %105, 48
  %107 = zext i1 %106 to i8
  %108 = load %struct.CPUX86State** @env, align 8
  %109 = getelementptr inbounds %struct.CPUX86State* %108, i64 0, i32 19, i64 2
  store i8 %107, i8* %109, align 1
  %110 = and i32 %88, 192
  %111 = icmp eq i32 %110, 192
  %112 = zext i1 %111 to i8
  %113 = load %struct.CPUX86State** @env, align 8
  %114 = getelementptr inbounds %struct.CPUX86State* %113, i64 0, i32 19, i64 3
  store i8 %112, i8* %114, align 1
  %115 = and i32 %88, 768
  %116 = icmp eq i32 %115, 768
  %117 = zext i1 %116 to i8
  %118 = load %struct.CPUX86State** @env, align 8
  %119 = getelementptr inbounds %struct.CPUX86State* %118, i64 0, i32 19, i64 4
  store i8 %117, i8* %119, align 1
  %120 = and i32 %88, 3072
  %121 = icmp eq i32 %120, 3072
  %122 = zext i1 %121 to i8
  %123 = load %struct.CPUX86State** @env, align 8
  %124 = getelementptr inbounds %struct.CPUX86State* %123, i64 0, i32 19, i64 5
  store i8 %122, i8* %124, align 1
  %125 = and i32 %88, 12288
  %126 = icmp eq i32 %125, 12288
  %127 = zext i1 %126 to i8
  %128 = load %struct.CPUX86State** @env, align 8
  %129 = getelementptr inbounds %struct.CPUX86State* %128, i64 0, i32 19, i64 6
  store i8 %127, i8* %129, align 1
  %.mask = and i32 %88, 49152
  %130 = icmp eq i32 %.mask, 49152
  %131 = zext i1 %130 to i8
  %132 = load %struct.CPUX86State** @env, align 8
  %133 = getelementptr inbounds %struct.CPUX86State* %132, i64 0, i32 19, i64 7
  store i8 %131, i8* %133, align 1
  ret void
}

define void @helper_fsave(i32 %ptr, i32 %data32) nounwind uwtable {
  tail call void @helper_fstenv(i32 %ptr, i32 %data32)
  %1 = shl i32 14, %data32
  %2 = add i32 %1, %ptr
  %3 = load %struct.CPUX86State** @env, align 8
  br label %4

; <label>:4                                       ; preds = %helper_fstt.exit, %0
  %5 = phi %struct.CPUX86State* [ %3, %0 ], [ %55, %helper_fstt.exit ]
  %i.010 = phi i32 [ 0, %0 ], [ %54, %helper_fstt.exit ]
  %.09 = phi i32 [ %2, %0 ], [ %53, %helper_fstt.exit ]
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 16
  %7 = load i32* %6, align 4
  %8 = add i32 %7, %i.010
  %9 = and i32 %8, 7
  %10 = zext i32 %9 to i64
  %tmp.sroa.0.0..idx = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 21, i64 %10, i32 0, i32 0
  %tmp.sroa.0.0.copyload = load i64* %tmp.sroa.0.0..idx, align 8
  %tmp.sroa.1.8..idx3 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 21, i64 %10, i32 0, i32 1
  %tmp.sroa.1.8.copyload = load i16* %tmp.sroa.1.8..idx3, align 8
  %11 = lshr i32 %.09, 12
  %12 = and i32 %11, 255
  %13 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 7
  %14 = load i32* %13, align 4
  %15 = and i32 %14, 3
  %16 = icmp eq i32 %15, 3
  %17 = zext i32 %12 to i64
  %18 = zext i1 %16 to i64
  %19 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 71, i64 %18, i64 %17, i32 1
  %20 = load i32* %19, align 4
  %21 = and i32 %.09, -4089
  %22 = icmp eq i32 %20, %21
  %23 = zext i32 %.09 to i64
  br i1 %22, label %26, label %24, !prof !0

; <label>:24                                      ; preds = %4
  %25 = inttoptr i64 %23 to i64*
  store i64 %tmp.sroa.0.0.copyload, i64* %25, align 8
  br label %stq_data.exit.i

; <label>:26                                      ; preds = %4
  %27 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 71, i64 %18, i64 %17, i32 3
  %28 = load i64* %27, align 8
  %29 = add i64 %28, %23
  %30 = inttoptr i64 %29 to i64*
  store i64 %tmp.sroa.0.0.copyload, i64* %30, align 8
  br label %stq_data.exit.i

stq_data.exit.i:                                  ; preds = %26, %24
  %31 = add i32 %.09, 8
  %32 = lshr i32 %31, 12
  %33 = and i32 %32, 255
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 7
  %36 = load i32* %35, align 4
  %37 = and i32 %36, 3
  %38 = icmp eq i32 %37, 3
  %39 = zext i32 %33 to i64
  %40 = zext i1 %38 to i64
  %41 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 71, i64 %40, i64 %39, i32 1
  %42 = load i32* %41, align 4
  %43 = and i32 %31, -4095
  %44 = icmp eq i32 %42, %43
  %45 = zext i32 %31 to i64
  br i1 %44, label %48, label %46, !prof !0

; <label>:46                                      ; preds = %stq_data.exit.i
  %47 = inttoptr i64 %45 to i16*
  store i16 %tmp.sroa.1.8.copyload, i16* %47, align 2
  br label %helper_fstt.exit

; <label>:48                                      ; preds = %stq_data.exit.i
  %49 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 71, i64 %40, i64 %39, i32 3
  %50 = load i64* %49, align 8
  %51 = add i64 %50, %45
  %52 = inttoptr i64 %51 to i16*
  store i16 %tmp.sroa.1.8.copyload, i16* %52, align 2
  br label %helper_fstt.exit

helper_fstt.exit:                                 ; preds = %48, %46
  %53 = add i32 %.09, 10
  %54 = add nsw i32 %i.010, 1
  %55 = load %struct.CPUX86State** @env, align 8
  %exitcond = icmp eq i32 %54, 8
  br i1 %exitcond, label %56, label %4

; <label>:56                                      ; preds = %helper_fstt.exit
  %57 = getelementptr inbounds %struct.CPUX86State* %55, i64 0, i32 17
  store i16 0, i16* %57, align 2
  %58 = load %struct.CPUX86State** @env, align 8
  %59 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 16
  store i32 0, i32* %59, align 4
  %60 = load %struct.CPUX86State** @env, align 8
  %61 = getelementptr inbounds %struct.CPUX86State* %60, i64 0, i32 18
  store i16 895, i16* %61, align 2
  %62 = load %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State* %62, i64 0, i32 19, i64 0
  store i8 1, i8* %63, align 1
  %64 = load %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State* %64, i64 0, i32 19, i64 1
  store i8 1, i8* %65, align 1
  %66 = load %struct.CPUX86State** @env, align 8
  %67 = getelementptr inbounds %struct.CPUX86State* %66, i64 0, i32 19, i64 2
  store i8 1, i8* %67, align 1
  %68 = load %struct.CPUX86State** @env, align 8
  %69 = getelementptr inbounds %struct.CPUX86State* %68, i64 0, i32 19, i64 3
  store i8 1, i8* %69, align 1
  %70 = load %struct.CPUX86State** @env, align 8
  %71 = getelementptr inbounds %struct.CPUX86State* %70, i64 0, i32 19, i64 4
  store i8 1, i8* %71, align 1
  %72 = load %struct.CPUX86State** @env, align 8
  %73 = getelementptr inbounds %struct.CPUX86State* %72, i64 0, i32 19, i64 5
  store i8 1, i8* %73, align 1
  %74 = load %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State* %74, i64 0, i32 19, i64 6
  store i8 1, i8* %75, align 1
  %76 = load %struct.CPUX86State** @env, align 8
  %77 = getelementptr inbounds %struct.CPUX86State* %76, i64 0, i32 19, i64 7
  store i8 1, i8* %77, align 1
  ret void
}

define void @helper_frstor(i32 %ptr, i32 %data32) nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  call void @helper_fldenv(i32 %ptr, i32 %data32)
  %1 = shl i32 14, %data32
  %2 = add i32 %1, %ptr
  %tmp.sroa.2.10..sroa.2.10.idx.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  br label %3

; <label>:3                                       ; preds = %helper_fldt.exit, %0
  %.012 = phi i32 [ %2, %0 ], [ %41, %helper_fldt.exit ]
  %i.011 = phi i32 [ 0, %0 ], [ %42, %helper_fldt.exit ]
  %4 = lshr i32 %.012, 12
  %5 = and i32 %4, 255
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 7
  %8 = load i32* %7, align 4
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 3
  %11 = zext i32 %5 to i64
  %12 = zext i1 %10 to i64
  %13 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 %12, i64 %11, i32 0
  %14 = load i32* %13, align 4
  %15 = and i32 %.012, -4089
  %16 = icmp eq i32 %14, %15
  %17 = zext i32 %.012 to i64
  br i1 %16, label %18, label %ldq_data.exit.i, !prof !0

; <label>:18                                      ; preds = %3
  %19 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 %12, i64 %11, i32 3
  %20 = load i64* %19, align 8
  %21 = add i64 %20, %17
  br label %ldq_data.exit.i

ldq_data.exit.i:                                  ; preds = %18, %3
  %res.0.in.in.i.i = phi i64 [ %21, %18 ], [ %17, %3 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i64*
  %res.0.i.i = load i64* %res.0.in.i.i, align 8
  %22 = add i32 %.012, 8
  %23 = lshr i32 %22, 12
  %24 = and i32 %23, 255
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 %12, i64 %25, i32 0
  %27 = load i32* %26, align 4
  %28 = and i32 %22, -4095
  %29 = icmp eq i32 %27, %28
  %30 = zext i32 %22 to i64
  br i1 %29, label %31, label %helper_fldt.exit, !prof !0

; <label>:31                                      ; preds = %ldq_data.exit.i
  %32 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 %12, i64 %25, i32 3
  %33 = load i64* %32, align 8
  %34 = add i64 %33, %30
  br label %helper_fldt.exit

helper_fldt.exit:                                 ; preds = %31, %ldq_data.exit.i
  %.sink.in.in.i.i = phi i64 [ %34, %31 ], [ %30, %ldq_data.exit.i ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %35 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 16
  %36 = load i32* %35, align 4
  %37 = add i32 %36, %i.011
  %38 = and i32 %37, 7
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 21, i64 %39
  %tmp.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %40, i64 0, i32 0, i32 0
  store i64 %res.0.i.i, i64* %tmp.sroa.0.0..idx, align 8
  %tmp.sroa.1.8..idx4 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 21, i64 %39, i32 0, i32 1
  store i16 %.sink.i.i, i16* %tmp.sroa.1.8..idx4, align 8
  %tmp.sroa.2.10..raw_cast = bitcast %union.FPReg* %40 to i8*
  %tmp.sroa.2.10..raw_idx = getelementptr inbounds i8* %tmp.sroa.2.10..raw_cast, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %tmp.sroa.2.10..raw_idx, i8* %tmp.sroa.2.10..sroa.2.10.idx.idx, i64 6, i32 2, i1 false)
  %41 = add i32 %.012, 10
  %42 = add nsw i32 %i.011, 1
  %exitcond = icmp eq i32 %42, 8
  br i1 %exitcond, label %43, label %3

; <label>:43                                      ; preds = %helper_fldt.exit
  ret void
}

define void @helper_fxsave(i32 %ptr, i32 %data64) nounwind uwtable {
  %1 = and i32 %ptr, 15
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  tail call fastcc void @raise_exception(i32 13) noreturn
  unreachable

; <label>:4                                       ; preds = %0
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 17
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 16
  %10 = load i32* %9, align 4
  %11 = shl i32 %10, 11
  %12 = and i32 %11, 14336
  %13 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 0
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl nuw nsw i32 %18, 1
  %20 = or i32 %19, %15
  %21 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 2
  %22 = load i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 2
  %25 = or i32 %24, %20
  %26 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 3
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %28, 3
  %30 = or i32 %29, %25
  %31 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 4
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw nsw i32 %33, 4
  %35 = or i32 %34, %30
  %36 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 5
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl nuw nsw i32 %38, 5
  %40 = or i32 %39, %35
  %41 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 6
  %42 = load i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 6
  %45 = or i32 %44, %40
  %46 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 19, i64 7
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 7
  %50 = or i32 %49, %45
  %51 = and i32 %8, 51199
  %52 = or i32 %12, %51
  %53 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 18
  %54 = load i16* %53, align 2
  %55 = lshr i32 %ptr, 12
  %56 = and i32 %55, 255
  %57 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 7
  %58 = load i32* %57, align 4
  %59 = and i32 %58, 3
  %60 = icmp eq i32 %59, 3
  %61 = zext i32 %56 to i64
  %62 = zext i1 %60 to i64
  %63 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 71, i64 %62, i64 %61, i32 1
  %64 = load i32* %63, align 4
  %65 = and i32 %ptr, -4095
  %66 = icmp eq i32 %64, %65
  %67 = zext i32 %ptr to i64
  br i1 %66, label %70, label %68, !prof !0

; <label>:68                                      ; preds = %4
  %69 = inttoptr i64 %67 to i16*
  store i16 %54, i16* %69, align 2
  br label %stw_data.exit

; <label>:70                                      ; preds = %4
  %71 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 71, i64 %62, i64 %61, i32 3
  %72 = load i64* %71, align 8
  %73 = add i64 %72, %67
  %74 = inttoptr i64 %73 to i16*
  store i16 %54, i16* %74, align 2
  br label %stw_data.exit

stw_data.exit:                                    ; preds = %70, %68
  %75 = add i32 %ptr, 2
  %76 = lshr i32 %75, 12
  %77 = and i32 %76, 255
  %78 = load %struct.CPUX86State** @env, align 8
  %79 = getelementptr inbounds %struct.CPUX86State* %78, i64 0, i32 7
  %80 = load i32* %79, align 4
  %81 = and i32 %80, 3
  %82 = icmp eq i32 %81, 3
  %83 = zext i32 %77 to i64
  %84 = zext i1 %82 to i64
  %85 = getelementptr inbounds %struct.CPUX86State* %78, i64 0, i32 71, i64 %84, i64 %83, i32 1
  %86 = load i32* %85, align 4
  %87 = and i32 %75, -4095
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %93, label %89, !prof !0

; <label>:89                                      ; preds = %stw_data.exit
  %90 = trunc i32 %52 to i16
  %91 = zext i32 %75 to i64
  %92 = inttoptr i64 %91 to i16*
  store i16 %90, i16* %92, align 2
  br label %stw_data.exit36

; <label>:93                                      ; preds = %stw_data.exit
  %94 = zext i32 %75 to i64
  %95 = getelementptr inbounds %struct.CPUX86State* %78, i64 0, i32 71, i64 %84, i64 %83, i32 3
  %96 = load i64* %95, align 8
  %97 = add i64 %96, %94
  %98 = trunc i32 %52 to i16
  %99 = inttoptr i64 %97 to i16*
  store i16 %98, i16* %99, align 2
  br label %stw_data.exit36

stw_data.exit36:                                  ; preds = %93, %89
  %100 = add i32 %ptr, 4
  %101 = xor i32 %50, 255
  %102 = lshr i32 %100, 12
  %103 = and i32 %102, 255
  %104 = load %struct.CPUX86State** @env, align 8
  %105 = getelementptr inbounds %struct.CPUX86State* %104, i64 0, i32 7
  %106 = load i32* %105, align 4
  %107 = and i32 %106, 3
  %108 = icmp eq i32 %107, 3
  %109 = zext i32 %103 to i64
  %110 = zext i1 %108 to i64
  %111 = getelementptr inbounds %struct.CPUX86State* %104, i64 0, i32 71, i64 %110, i64 %109, i32 1
  %112 = load i32* %111, align 4
  %113 = and i32 %100, -4095
  %114 = icmp eq i32 %112, %113
  br i1 %114, label %119, label %115, !prof !0

; <label>:115                                     ; preds = %stw_data.exit36
  %116 = trunc i32 %101 to i16
  %117 = zext i32 %100 to i64
  %118 = inttoptr i64 %117 to i16*
  store i16 %116, i16* %118, align 2
  br label %stw_data.exit35

; <label>:119                                     ; preds = %stw_data.exit36
  %120 = zext i32 %100 to i64
  %121 = getelementptr inbounds %struct.CPUX86State* %104, i64 0, i32 71, i64 %110, i64 %109, i32 3
  %122 = load i64* %121, align 8
  %123 = add i64 %122, %120
  %124 = trunc i32 %101 to i16
  %125 = inttoptr i64 %123 to i16*
  store i16 %124, i16* %125, align 2
  br label %stw_data.exit35

stw_data.exit35:                                  ; preds = %119, %115
  %126 = add i32 %ptr, 8
  %127 = lshr i32 %126, 12
  %128 = and i32 %127, 255
  %129 = load %struct.CPUX86State** @env, align 8
  %130 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 7
  %131 = load i32* %130, align 4
  %132 = and i32 %131, 3
  %133 = icmp eq i32 %132, 3
  %134 = zext i32 %128 to i64
  %135 = zext i1 %133 to i64
  %136 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 71, i64 %135, i64 %134, i32 1
  %137 = load i32* %136, align 4
  %138 = and i32 %126, -4093
  %139 = icmp eq i32 %137, %138
  %140 = zext i32 %126 to i64
  br i1 %139, label %143, label %141, !prof !0

; <label>:141                                     ; preds = %stw_data.exit35
  %142 = inttoptr i64 %140 to i32*
  store i32 0, i32* %142, align 4
  br label %stl_data.exit34

; <label>:143                                     ; preds = %stw_data.exit35
  %144 = getelementptr inbounds %struct.CPUX86State* %129, i64 0, i32 71, i64 %135, i64 %134, i32 3
  %145 = load i64* %144, align 8
  %146 = add i64 %145, %140
  %147 = inttoptr i64 %146 to i32*
  store i32 0, i32* %147, align 4
  br label %stl_data.exit34

stl_data.exit34:                                  ; preds = %143, %141
  %148 = add i32 %ptr, 12
  %149 = lshr i32 %148, 12
  %150 = and i32 %149, 255
  %151 = load %struct.CPUX86State** @env, align 8
  %152 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 7
  %153 = load i32* %152, align 4
  %154 = and i32 %153, 3
  %155 = icmp eq i32 %154, 3
  %156 = zext i32 %150 to i64
  %157 = zext i1 %155 to i64
  %158 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 71, i64 %157, i64 %156, i32 1
  %159 = load i32* %158, align 4
  %160 = and i32 %148, -4093
  %161 = icmp eq i32 %159, %160
  %162 = zext i32 %148 to i64
  br i1 %161, label %165, label %163, !prof !0

; <label>:163                                     ; preds = %stl_data.exit34
  %164 = inttoptr i64 %162 to i32*
  store i32 0, i32* %164, align 4
  br label %stl_data.exit33

; <label>:165                                     ; preds = %stl_data.exit34
  %166 = getelementptr inbounds %struct.CPUX86State* %151, i64 0, i32 71, i64 %157, i64 %156, i32 3
  %167 = load i64* %166, align 8
  %168 = add i64 %167, %162
  %169 = inttoptr i64 %168 to i32*
  store i32 0, i32* %169, align 4
  br label %stl_data.exit33

stl_data.exit33:                                  ; preds = %165, %163
  %170 = add i32 %ptr, 16
  %171 = lshr i32 %170, 12
  %172 = and i32 %171, 255
  %173 = load %struct.CPUX86State** @env, align 8
  %174 = getelementptr inbounds %struct.CPUX86State* %173, i64 0, i32 7
  %175 = load i32* %174, align 4
  %176 = and i32 %175, 3
  %177 = icmp eq i32 %176, 3
  %178 = zext i32 %172 to i64
  %179 = zext i1 %177 to i64
  %180 = getelementptr inbounds %struct.CPUX86State* %173, i64 0, i32 71, i64 %179, i64 %178, i32 1
  %181 = load i32* %180, align 4
  %182 = and i32 %170, -4093
  %183 = icmp eq i32 %181, %182
  %184 = zext i32 %170 to i64
  br i1 %183, label %187, label %185, !prof !0

; <label>:185                                     ; preds = %stl_data.exit33
  %186 = inttoptr i64 %184 to i32*
  store i32 0, i32* %186, align 4
  br label %stl_data.exit32

; <label>:187                                     ; preds = %stl_data.exit33
  %188 = getelementptr inbounds %struct.CPUX86State* %173, i64 0, i32 71, i64 %179, i64 %178, i32 3
  %189 = load i64* %188, align 8
  %190 = add i64 %189, %184
  %191 = inttoptr i64 %190 to i32*
  store i32 0, i32* %191, align 4
  br label %stl_data.exit32

stl_data.exit32:                                  ; preds = %187, %185
  %192 = add i32 %ptr, 20
  %193 = lshr i32 %192, 12
  %194 = and i32 %193, 255
  %195 = load %struct.CPUX86State** @env, align 8
  %196 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 7
  %197 = load i32* %196, align 4
  %198 = and i32 %197, 3
  %199 = icmp eq i32 %198, 3
  %200 = zext i32 %194 to i64
  %201 = zext i1 %199 to i64
  %202 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 71, i64 %201, i64 %200, i32 1
  %203 = load i32* %202, align 4
  %204 = and i32 %192, -4093
  %205 = icmp eq i32 %203, %204
  %206 = zext i32 %192 to i64
  br i1 %205, label %209, label %207, !prof !0

; <label>:207                                     ; preds = %stl_data.exit32
  %208 = inttoptr i64 %206 to i32*
  store i32 0, i32* %208, align 4
  br label %stl_data.exit31

; <label>:209                                     ; preds = %stl_data.exit32
  %210 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 71, i64 %201, i64 %200, i32 3
  %211 = load i64* %210, align 8
  %212 = add i64 %211, %206
  %213 = inttoptr i64 %212 to i32*
  store i32 0, i32* %213, align 4
  br label %stl_data.exit31

stl_data.exit31:                                  ; preds = %209, %207
  %214 = add i32 %ptr, 32
  %215 = load %struct.CPUX86State** @env, align 8
  br label %216

; <label>:216                                     ; preds = %helper_fstt.exit, %stl_data.exit31
  %217 = phi %struct.CPUX86State* [ %215, %stl_data.exit31 ], [ %267, %helper_fstt.exit ]
  %addr.040 = phi i32 [ %214, %stl_data.exit31 ], [ %265, %helper_fstt.exit ]
  %i.139 = phi i32 [ 0, %stl_data.exit31 ], [ %266, %helper_fstt.exit ]
  %218 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 16
  %219 = load i32* %218, align 4
  %220 = add i32 %219, %i.139
  %221 = and i32 %220, 7
  %222 = zext i32 %221 to i64
  %tmp.sroa.0.0..idx = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 21, i64 %222, i32 0, i32 0
  %tmp.sroa.0.0.copyload = load i64* %tmp.sroa.0.0..idx, align 8
  %tmp.sroa.1.8..idx5 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 21, i64 %222, i32 0, i32 1
  %tmp.sroa.1.8.copyload = load i16* %tmp.sroa.1.8..idx5, align 8
  %223 = lshr i32 %addr.040, 12
  %224 = and i32 %223, 255
  %225 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 7
  %226 = load i32* %225, align 4
  %227 = and i32 %226, 3
  %228 = icmp eq i32 %227, 3
  %229 = zext i32 %224 to i64
  %230 = zext i1 %228 to i64
  %231 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 71, i64 %230, i64 %229, i32 1
  %232 = load i32* %231, align 4
  %233 = and i32 %addr.040, -4089
  %234 = icmp eq i32 %232, %233
  %235 = zext i32 %addr.040 to i64
  br i1 %234, label %238, label %236, !prof !0

; <label>:236                                     ; preds = %216
  %237 = inttoptr i64 %235 to i64*
  store i64 %tmp.sroa.0.0.copyload, i64* %237, align 8
  br label %stq_data.exit.i

; <label>:238                                     ; preds = %216
  %239 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 71, i64 %230, i64 %229, i32 3
  %240 = load i64* %239, align 8
  %241 = add i64 %240, %235
  %242 = inttoptr i64 %241 to i64*
  store i64 %tmp.sroa.0.0.copyload, i64* %242, align 8
  br label %stq_data.exit.i

stq_data.exit.i:                                  ; preds = %238, %236
  %243 = add i32 %addr.040, 8
  %244 = lshr i32 %243, 12
  %245 = and i32 %244, 255
  %246 = load %struct.CPUX86State** @env, align 8
  %247 = getelementptr inbounds %struct.CPUX86State* %246, i64 0, i32 7
  %248 = load i32* %247, align 4
  %249 = and i32 %248, 3
  %250 = icmp eq i32 %249, 3
  %251 = zext i32 %245 to i64
  %252 = zext i1 %250 to i64
  %253 = getelementptr inbounds %struct.CPUX86State* %246, i64 0, i32 71, i64 %252, i64 %251, i32 1
  %254 = load i32* %253, align 4
  %255 = and i32 %243, -4095
  %256 = icmp eq i32 %254, %255
  %257 = zext i32 %243 to i64
  br i1 %256, label %260, label %258, !prof !0

; <label>:258                                     ; preds = %stq_data.exit.i
  %259 = inttoptr i64 %257 to i16*
  store i16 %tmp.sroa.1.8.copyload, i16* %259, align 2
  br label %helper_fstt.exit

; <label>:260                                     ; preds = %stq_data.exit.i
  %261 = getelementptr inbounds %struct.CPUX86State* %246, i64 0, i32 71, i64 %252, i64 %251, i32 3
  %262 = load i64* %261, align 8
  %263 = add i64 %262, %257
  %264 = inttoptr i64 %263 to i16*
  store i16 %tmp.sroa.1.8.copyload, i16* %264, align 2
  br label %helper_fstt.exit

helper_fstt.exit:                                 ; preds = %260, %258
  %265 = add i32 %addr.040, 16
  %266 = add nsw i32 %i.139, 1
  %267 = load %struct.CPUX86State** @env, align 8
  %exitcond = icmp eq i32 %266, 8
  br i1 %exitcond, label %268, label %216

; <label>:268                                     ; preds = %helper_fstt.exit
  %269 = getelementptr inbounds %struct.CPUX86State* %267, i64 0, i32 14, i64 4
  %270 = load i32* %269, align 4
  %271 = and i32 %270, 512
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %.loopexit, label %273

; <label>:273                                     ; preds = %268
  %274 = add i32 %ptr, 24
  %275 = getelementptr inbounds %struct.CPUX86State* %267, i64 0, i32 29
  %276 = load i32* %275, align 4
  %277 = lshr i32 %274, 12
  %278 = and i32 %277, 255
  %279 = getelementptr inbounds %struct.CPUX86State* %267, i64 0, i32 7
  %280 = load i32* %279, align 4
  %281 = and i32 %280, 3
  %282 = icmp eq i32 %281, 3
  %283 = zext i32 %278 to i64
  %284 = zext i1 %282 to i64
  %285 = getelementptr inbounds %struct.CPUX86State* %267, i64 0, i32 71, i64 %284, i64 %283, i32 1
  %286 = load i32* %285, align 4
  %287 = and i32 %274, -4093
  %288 = icmp eq i32 %286, %287
  %289 = zext i32 %274 to i64
  br i1 %288, label %292, label %290, !prof !0

; <label>:290                                     ; preds = %273
  %291 = inttoptr i64 %289 to i32*
  store i32 %276, i32* %291, align 4
  br label %stl_data.exit30

; <label>:292                                     ; preds = %273
  %293 = getelementptr inbounds %struct.CPUX86State* %267, i64 0, i32 71, i64 %284, i64 %283, i32 3
  %294 = load i64* %293, align 8
  %295 = add i64 %294, %289
  %296 = inttoptr i64 %295 to i32*
  store i32 %276, i32* %296, align 4
  br label %stl_data.exit30

stl_data.exit30:                                  ; preds = %292, %290
  %297 = add i32 %ptr, 28
  %298 = lshr i32 %297, 12
  %299 = and i32 %298, 255
  %300 = load %struct.CPUX86State** @env, align 8
  %301 = getelementptr inbounds %struct.CPUX86State* %300, i64 0, i32 7
  %302 = load i32* %301, align 4
  %303 = and i32 %302, 3
  %304 = icmp eq i32 %303, 3
  %305 = zext i32 %299 to i64
  %306 = zext i1 %304 to i64
  %307 = getelementptr inbounds %struct.CPUX86State* %300, i64 0, i32 71, i64 %306, i64 %305, i32 1
  %308 = load i32* %307, align 4
  %309 = and i32 %297, -4093
  %310 = icmp eq i32 %308, %309
  %311 = zext i32 %297 to i64
  br i1 %310, label %314, label %312, !prof !0

; <label>:312                                     ; preds = %stl_data.exit30
  %313 = inttoptr i64 %311 to i32*
  store i32 65535, i32* %313, align 4
  br label %stl_data.exit

; <label>:314                                     ; preds = %stl_data.exit30
  %315 = getelementptr inbounds %struct.CPUX86State* %300, i64 0, i32 71, i64 %306, i64 %305, i32 3
  %316 = load i64* %315, align 8
  %317 = add i64 %316, %311
  %318 = inttoptr i64 %317 to i32*
  store i32 65535, i32* %318, align 4
  br label %stl_data.exit

stl_data.exit:                                    ; preds = %314, %312
  %319 = load %struct.CPUX86State** @env, align 8
  %320 = getelementptr inbounds %struct.CPUX86State* %319, i64 0, i32 7
  %321 = load i32* %320, align 4
  %322 = lshr i32 %321, 12
  %323 = and i32 %322, 8
  %324 = add i32 %323, 8
  %325 = add i32 %ptr, 160
  %326 = getelementptr inbounds %struct.CPUX86State* %319, i64 0, i32 37
  %327 = load i64* %326, align 8
  %328 = and i64 %327, 16384
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %.lr.ph, label %330

; <label>:330                                     ; preds = %stl_data.exit
  %331 = and i32 %321, 16387
  %332 = icmp eq i32 %331, 16384
  br i1 %332, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %stq_data.exit._crit_edge, %330, %stl_data.exit
  %333 = phi i32 [ %.pre47, %stq_data.exit._crit_edge ], [ %321, %330 ], [ %321, %stl_data.exit ]
  %334 = phi %struct.CPUX86State* [ %.pre, %stq_data.exit._crit_edge ], [ %319, %330 ], [ %319, %stl_data.exit ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %stq_data.exit._crit_edge ], [ 0, %330 ], [ 0, %stl_data.exit ]
  %addr.138 = phi i32 [ %381, %stq_data.exit._crit_edge ], [ %325, %330 ], [ %325, %stl_data.exit ]
  %335 = getelementptr inbounds %struct.CPUX86State* %334, i64 0, i32 30, i64 %indvars.iv, i32 0, i64 0
  %336 = load i64* %335, align 8
  %337 = lshr i32 %addr.138, 12
  %338 = and i32 %337, 255
  %339 = and i32 %333, 3
  %340 = icmp eq i32 %339, 3
  %341 = zext i32 %338 to i64
  %342 = zext i1 %340 to i64
  %343 = getelementptr inbounds %struct.CPUX86State* %334, i64 0, i32 71, i64 %342, i64 %341, i32 1
  %344 = load i32* %343, align 4
  %345 = and i32 %addr.138, -4089
  %346 = icmp eq i32 %344, %345
  %347 = zext i32 %addr.138 to i64
  br i1 %346, label %350, label %348, !prof !0

; <label>:348                                     ; preds = %.lr.ph
  %349 = inttoptr i64 %347 to i64*
  store i64 %336, i64* %349, align 8
  br label %stq_data.exit29

; <label>:350                                     ; preds = %.lr.ph
  %351 = getelementptr inbounds %struct.CPUX86State* %334, i64 0, i32 71, i64 %342, i64 %341, i32 3
  %352 = load i64* %351, align 8
  %353 = add i64 %352, %347
  %354 = inttoptr i64 %353 to i64*
  store i64 %336, i64* %354, align 8
  br label %stq_data.exit29

stq_data.exit29:                                  ; preds = %350, %348
  %355 = add i32 %addr.138, 8
  %356 = load %struct.CPUX86State** @env, align 8
  %357 = getelementptr inbounds %struct.CPUX86State* %356, i64 0, i32 30, i64 %indvars.iv, i32 0, i64 1
  %358 = load i64* %357, align 8
  %359 = lshr i32 %355, 12
  %360 = and i32 %359, 255
  %361 = getelementptr inbounds %struct.CPUX86State* %356, i64 0, i32 7
  %362 = load i32* %361, align 4
  %363 = and i32 %362, 3
  %364 = icmp eq i32 %363, 3
  %365 = zext i32 %360 to i64
  %366 = zext i1 %364 to i64
  %367 = getelementptr inbounds %struct.CPUX86State* %356, i64 0, i32 71, i64 %366, i64 %365, i32 1
  %368 = load i32* %367, align 4
  %369 = and i32 %355, -4089
  %370 = icmp eq i32 %368, %369
  %371 = zext i32 %355 to i64
  br i1 %370, label %374, label %372, !prof !0

; <label>:372                                     ; preds = %stq_data.exit29
  %373 = inttoptr i64 %371 to i64*
  store i64 %358, i64* %373, align 8
  br label %stq_data.exit

; <label>:374                                     ; preds = %stq_data.exit29
  %375 = getelementptr inbounds %struct.CPUX86State* %356, i64 0, i32 71, i64 %366, i64 %365, i32 3
  %376 = load i64* %375, align 8
  %377 = add i64 %376, %371
  %378 = inttoptr i64 %377 to i64*
  store i64 %358, i64* %378, align 8
  br label %stq_data.exit

stq_data.exit:                                    ; preds = %374, %372
  %indvars.iv.next = add i64 %indvars.iv, 1
  %379 = trunc i64 %indvars.iv.next to i32
  %380 = icmp slt i32 %379, %324
  br i1 %380, label %stq_data.exit._crit_edge, label %.loopexit

stq_data.exit._crit_edge:                         ; preds = %stq_data.exit
  %381 = add i32 %addr.138, 16
  %.pre = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert = getelementptr inbounds %struct.CPUX86State* %.pre, i64 0, i32 7
  %.pre47 = load i32* %.phi.trans.insert, align 4
  br label %.lr.ph

.loopexit:                                        ; preds = %stq_data.exit, %330, %268
  ret void
}

define void @helper_fxrstor(i32 %ptr, i32 %data64) nounwind uwtable {
  %.sroa.2 = alloca [6 x i8], align 2
  %1 = and i32 %ptr, 15
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  call fastcc void @raise_exception(i32 13) noreturn
  unreachable

; <label>:4                                       ; preds = %0
  %5 = lshr i32 %ptr, 12
  %6 = and i32 %5, 255
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 7
  %9 = load i32* %8, align 4
  %10 = and i32 %9, 3
  %11 = icmp eq i32 %10, 3
  %12 = zext i32 %6 to i64
  %13 = zext i1 %11 to i64
  %14 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 %13, i64 %12, i32 0
  %15 = load i32* %14, align 4
  %16 = and i32 %ptr, -4095
  %17 = icmp eq i32 %15, %16
  %18 = zext i32 %ptr to i64
  br i1 %17, label %19, label %lduw_data.exit, !prof !0

; <label>:19                                      ; preds = %4
  %20 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 71, i64 %13, i64 %12, i32 3
  %21 = load i64* %20, align 8
  %22 = add i64 %21, %18
  br label %lduw_data.exit

lduw_data.exit:                                   ; preds = %19, %4
  %.sink.in.in.i = phi i64 [ %22, %19 ], [ %18, %4 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %23 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 18
  store i16 %.sink.i, i16* %23, align 2
  %24 = add i32 %ptr, 2
  %25 = lshr i32 %24, 12
  %26 = and i32 %25, 255
  %27 = load %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 7
  %29 = load i32* %28, align 4
  %30 = and i32 %29, 3
  %31 = icmp eq i32 %30, 3
  %32 = zext i32 %26 to i64
  %33 = zext i1 %31 to i64
  %34 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 71, i64 %33, i64 %32, i32 0
  %35 = load i32* %34, align 4
  %36 = and i32 %24, -4095
  %37 = icmp eq i32 %35, %36
  %38 = zext i32 %24 to i64
  br i1 %37, label %39, label %lduw_data.exit42, !prof !0

; <label>:39                                      ; preds = %lduw_data.exit
  %40 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 71, i64 %33, i64 %32, i32 3
  %41 = load i64* %40, align 8
  %42 = add i64 %41, %38
  br label %lduw_data.exit42

lduw_data.exit42:                                 ; preds = %39, %lduw_data.exit
  %.sink.in.in.i39 = phi i64 [ %42, %39 ], [ %38, %lduw_data.exit ]
  %.sink.in.i40 = inttoptr i64 %.sink.in.in.i39 to i16*
  %.sink.i41 = load i16* %.sink.in.i40, align 2
  %43 = zext i16 %.sink.i41 to i32
  %44 = add i32 %ptr, 4
  %45 = lshr i32 %44, 12
  %46 = and i32 %45, 255
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 71, i64 %33, i64 %47, i32 0
  %49 = load i32* %48, align 4
  %50 = and i32 %44, -4095
  %51 = icmp eq i32 %49, %50
  %52 = zext i32 %44 to i64
  br i1 %51, label %53, label %lduw_data.exit38, !prof !0

; <label>:53                                      ; preds = %lduw_data.exit42
  %54 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 71, i64 %33, i64 %47, i32 3
  %55 = load i64* %54, align 8
  %56 = add i64 %55, %52
  br label %lduw_data.exit38

lduw_data.exit38:                                 ; preds = %53, %lduw_data.exit42
  %.sink.in.in.i35 = phi i64 [ %56, %53 ], [ %52, %lduw_data.exit42 ]
  %.sink.in.i36 = inttoptr i64 %.sink.in.in.i35 to i16*
  %.sink.i37 = load i16* %.sink.in.i36, align 2
  %57 = zext i16 %.sink.i37 to i32
  %58 = lshr i32 %43, 11
  %59 = and i32 %58, 7
  %60 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 16
  store i32 %59, i32* %60, align 4
  %61 = and i16 %.sink.i41, -14337
  %62 = load %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State* %62, i64 0, i32 17
  store i16 %61, i16* %63, align 2
  %64 = xor i32 %57, 255
  %.tr26 = trunc i32 %64 to i8
  %65 = and i8 %.tr26, 1
  %66 = load %struct.CPUX86State** @env, align 8
  %67 = getelementptr inbounds %struct.CPUX86State* %66, i64 0, i32 19, i64 0
  store i8 %65, i8* %67, align 1
  %68 = lshr i32 %64, 1
  %.tr26.1 = trunc i32 %68 to i8
  %69 = and i8 %.tr26.1, 1
  %70 = load %struct.CPUX86State** @env, align 8
  %71 = getelementptr inbounds %struct.CPUX86State* %70, i64 0, i32 19, i64 1
  store i8 %69, i8* %71, align 1
  %72 = lshr i32 %64, 2
  %.tr26.2 = trunc i32 %72 to i8
  %73 = and i8 %.tr26.2, 1
  %74 = load %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State* %74, i64 0, i32 19, i64 2
  store i8 %73, i8* %75, align 1
  %76 = lshr i32 %64, 3
  %.tr26.3 = trunc i32 %76 to i8
  %77 = and i8 %.tr26.3, 1
  %78 = load %struct.CPUX86State** @env, align 8
  %79 = getelementptr inbounds %struct.CPUX86State* %78, i64 0, i32 19, i64 3
  store i8 %77, i8* %79, align 1
  %80 = lshr i32 %64, 4
  %.tr26.4 = trunc i32 %80 to i8
  %81 = and i8 %.tr26.4, 1
  %82 = load %struct.CPUX86State** @env, align 8
  %83 = getelementptr inbounds %struct.CPUX86State* %82, i64 0, i32 19, i64 4
  store i8 %81, i8* %83, align 1
  %84 = lshr i32 %64, 5
  %.tr26.5 = trunc i32 %84 to i8
  %85 = and i8 %.tr26.5, 1
  %86 = load %struct.CPUX86State** @env, align 8
  %87 = getelementptr inbounds %struct.CPUX86State* %86, i64 0, i32 19, i64 5
  store i8 %85, i8* %87, align 1
  %88 = lshr i32 %64, 6
  %.tr26.6 = trunc i32 %88 to i8
  %89 = and i8 %.tr26.6, 1
  %90 = load %struct.CPUX86State** @env, align 8
  %91 = getelementptr inbounds %struct.CPUX86State* %90, i64 0, i32 19, i64 6
  store i8 %89, i8* %91, align 1
  %92 = lshr i32 %64, 7
  %.tr26.7 = trunc i32 %92 to i8
  %93 = and i8 %.tr26.7, 1
  %94 = load %struct.CPUX86State** @env, align 8
  %95 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 19, i64 7
  store i8 %93, i8* %95, align 1
  %96 = add i32 %ptr, 32
  %tmp.sroa.2.10..sroa.2.10.idx.idx = getelementptr inbounds [6 x i8]* %.sroa.2, i64 0, i64 0
  br label %97

; <label>:97                                      ; preds = %helper_fldt.exit, %lduw_data.exit38
  %i.146 = phi i32 [ 0, %lduw_data.exit38 ], [ %136, %helper_fldt.exit ]
  %addr.045 = phi i32 [ %96, %lduw_data.exit38 ], [ %135, %helper_fldt.exit ]
  %98 = lshr i32 %addr.045, 12
  %99 = and i32 %98, 255
  %100 = load %struct.CPUX86State** @env, align 8
  %101 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 7
  %102 = load i32* %101, align 4
  %103 = and i32 %102, 3
  %104 = icmp eq i32 %103, 3
  %105 = zext i32 %99 to i64
  %106 = zext i1 %104 to i64
  %107 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 71, i64 %106, i64 %105, i32 0
  %108 = load i32* %107, align 4
  %109 = and i32 %addr.045, -4089
  %110 = icmp eq i32 %108, %109
  %111 = zext i32 %addr.045 to i64
  br i1 %110, label %112, label %ldq_data.exit.i, !prof !0

; <label>:112                                     ; preds = %97
  %113 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 71, i64 %106, i64 %105, i32 3
  %114 = load i64* %113, align 8
  %115 = add i64 %114, %111
  br label %ldq_data.exit.i

ldq_data.exit.i:                                  ; preds = %112, %97
  %res.0.in.in.i.i = phi i64 [ %115, %112 ], [ %111, %97 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i64*
  %res.0.i.i = load i64* %res.0.in.i.i, align 8
  %116 = add i32 %addr.045, 8
  %117 = lshr i32 %116, 12
  %118 = and i32 %117, 255
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 71, i64 %106, i64 %119, i32 0
  %121 = load i32* %120, align 4
  %122 = and i32 %116, -4095
  %123 = icmp eq i32 %121, %122
  %124 = zext i32 %116 to i64
  br i1 %123, label %125, label %helper_fldt.exit, !prof !0

; <label>:125                                     ; preds = %ldq_data.exit.i
  %126 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 71, i64 %106, i64 %119, i32 3
  %127 = load i64* %126, align 8
  %128 = add i64 %127, %124
  br label %helper_fldt.exit

helper_fldt.exit:                                 ; preds = %125, %ldq_data.exit.i
  %.sink.in.in.i.i = phi i64 [ %128, %125 ], [ %124, %ldq_data.exit.i ]
  %.sink.in.i.i = inttoptr i64 %.sink.in.in.i.i to i16*
  %.sink.i.i = load i16* %.sink.in.i.i, align 2
  %129 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 16
  %130 = load i32* %129, align 4
  %131 = add i32 %130, %i.146
  %132 = and i32 %131, 7
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 21, i64 %133
  %tmp.sroa.0.0..idx = getelementptr inbounds %union.FPReg* %134, i64 0, i32 0, i32 0
  store i64 %res.0.i.i, i64* %tmp.sroa.0.0..idx, align 8
  %tmp.sroa.1.8..idx6 = getelementptr inbounds %struct.CPUX86State* %100, i64 0, i32 21, i64 %133, i32 0, i32 1
  store i16 %.sink.i.i, i16* %tmp.sroa.1.8..idx6, align 8
  %tmp.sroa.2.10..raw_cast = bitcast %union.FPReg* %134 to i8*
  %tmp.sroa.2.10..raw_idx = getelementptr inbounds i8* %tmp.sroa.2.10..raw_cast, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %tmp.sroa.2.10..raw_idx, i8* %tmp.sroa.2.10..sroa.2.10.idx.idx, i64 6, i32 2, i1 false)
  %135 = add i32 %addr.045, 16
  %136 = add nsw i32 %i.146, 1
  %exitcond = icmp eq i32 %136, 8
  br i1 %exitcond, label %137, label %97

; <label>:137                                     ; preds = %helper_fldt.exit
  %138 = load %struct.CPUX86State** @env, align 8
  %139 = getelementptr inbounds %struct.CPUX86State* %138, i64 0, i32 14, i64 4
  %140 = load i32* %139, align 4
  %141 = and i32 %140, 512
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %.loopexit, label %143

; <label>:143                                     ; preds = %137
  %144 = add i32 %ptr, 24
  %145 = lshr i32 %144, 12
  %146 = and i32 %145, 255
  %147 = getelementptr inbounds %struct.CPUX86State* %138, i64 0, i32 7
  %148 = load i32* %147, align 4
  %149 = and i32 %148, 3
  %150 = icmp eq i32 %149, 3
  %151 = zext i32 %146 to i64
  %152 = zext i1 %150 to i64
  %153 = getelementptr inbounds %struct.CPUX86State* %138, i64 0, i32 71, i64 %152, i64 %151, i32 0
  %154 = load i32* %153, align 4
  %155 = and i32 %144, -4093
  %156 = icmp eq i32 %154, %155
  %157 = zext i32 %144 to i64
  br i1 %156, label %158, label %ldl_data.exit, !prof !0

; <label>:158                                     ; preds = %143
  %159 = getelementptr inbounds %struct.CPUX86State* %138, i64 0, i32 71, i64 %152, i64 %151, i32 3
  %160 = load i64* %159, align 8
  %161 = add i64 %160, %157
  br label %ldl_data.exit

ldl_data.exit:                                    ; preds = %158, %143
  %res.0.in.in.i32 = phi i64 [ %161, %158 ], [ %157, %143 ]
  %res.0.in.i33 = inttoptr i64 %res.0.in.in.i32 to i32*
  %res.0.i34 = load i32* %res.0.in.i33, align 4
  %162 = getelementptr inbounds %struct.CPUX86State* %138, i64 0, i32 29
  store i32 %res.0.i34, i32* %162, align 4
  %163 = load %struct.CPUX86State** @env, align 8
  %164 = getelementptr inbounds %struct.CPUX86State* %163, i64 0, i32 7
  %165 = load i32* %164, align 4
  %166 = lshr i32 %165, 12
  %167 = and i32 %166, 8
  %168 = add i32 %167, 8
  %169 = add i32 %ptr, 160
  %170 = getelementptr inbounds %struct.CPUX86State* %163, i64 0, i32 37
  %171 = load i64* %170, align 8
  %172 = and i64 %171, 16384
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %.lr.ph, label %174

; <label>:174                                     ; preds = %ldl_data.exit
  %175 = and i32 %165, 16387
  %176 = icmp eq i32 %175, 16384
  br i1 %176, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %ldq_data.exit._crit_edge, %174, %ldl_data.exit
  %177 = phi i32 [ %.pre51, %ldq_data.exit._crit_edge ], [ %165, %174 ], [ %165, %ldl_data.exit ]
  %178 = phi %struct.CPUX86State* [ %.pre, %ldq_data.exit._crit_edge ], [ %163, %174 ], [ %163, %ldl_data.exit ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %ldq_data.exit._crit_edge ], [ 0, %174 ], [ 0, %ldl_data.exit ]
  %addr.143 = phi i32 [ %217, %ldq_data.exit._crit_edge ], [ %169, %174 ], [ %169, %ldl_data.exit ]
  %179 = lshr i32 %addr.143, 12
  %180 = and i32 %179, 255
  %181 = and i32 %177, 3
  %182 = icmp eq i32 %181, 3
  %183 = zext i32 %180 to i64
  %184 = zext i1 %182 to i64
  %185 = getelementptr inbounds %struct.CPUX86State* %178, i64 0, i32 71, i64 %184, i64 %183, i32 0
  %186 = load i32* %185, align 4
  %187 = and i32 %addr.143, -4089
  %188 = icmp eq i32 %186, %187
  %189 = zext i32 %addr.143 to i64
  br i1 %188, label %190, label %ldq_data.exit31, !prof !0

; <label>:190                                     ; preds = %.lr.ph
  %191 = getelementptr inbounds %struct.CPUX86State* %178, i64 0, i32 71, i64 %184, i64 %183, i32 3
  %192 = load i64* %191, align 8
  %193 = add i64 %192, %189
  br label %ldq_data.exit31

ldq_data.exit31:                                  ; preds = %190, %.lr.ph
  %res.0.in.in.i28 = phi i64 [ %193, %190 ], [ %189, %.lr.ph ]
  %res.0.in.i29 = inttoptr i64 %res.0.in.in.i28 to i64*
  %res.0.i30 = load i64* %res.0.in.i29, align 8
  %194 = getelementptr inbounds %struct.CPUX86State* %178, i64 0, i32 30, i64 %indvars.iv, i32 0, i64 0
  store i64 %res.0.i30, i64* %194, align 8
  %195 = add i32 %addr.143, 8
  %196 = lshr i32 %195, 12
  %197 = and i32 %196, 255
  %198 = load %struct.CPUX86State** @env, align 8
  %199 = getelementptr inbounds %struct.CPUX86State* %198, i64 0, i32 7
  %200 = load i32* %199, align 4
  %201 = and i32 %200, 3
  %202 = icmp eq i32 %201, 3
  %203 = zext i32 %197 to i64
  %204 = zext i1 %202 to i64
  %205 = getelementptr inbounds %struct.CPUX86State* %198, i64 0, i32 71, i64 %204, i64 %203, i32 0
  %206 = load i32* %205, align 4
  %207 = and i32 %195, -4089
  %208 = icmp eq i32 %206, %207
  %209 = zext i32 %195 to i64
  br i1 %208, label %210, label %ldq_data.exit, !prof !0

; <label>:210                                     ; preds = %ldq_data.exit31
  %211 = getelementptr inbounds %struct.CPUX86State* %198, i64 0, i32 71, i64 %204, i64 %203, i32 3
  %212 = load i64* %211, align 8
  %213 = add i64 %212, %209
  br label %ldq_data.exit

ldq_data.exit:                                    ; preds = %210, %ldq_data.exit31
  %res.0.in.in.i = phi i64 [ %213, %210 ], [ %209, %ldq_data.exit31 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i64*
  %res.0.i = load i64* %res.0.in.i, align 8
  %214 = getelementptr inbounds %struct.CPUX86State* %198, i64 0, i32 30, i64 %indvars.iv, i32 0, i64 1
  store i64 %res.0.i, i64* %214, align 8
  %indvars.iv.next = add i64 %indvars.iv, 1
  %215 = trunc i64 %indvars.iv.next to i32
  %216 = icmp slt i32 %215, %168
  br i1 %216, label %ldq_data.exit._crit_edge, label %.loopexit

ldq_data.exit._crit_edge:                         ; preds = %ldq_data.exit
  %217 = add i32 %addr.143, 16
  %.pre = load %struct.CPUX86State** @env, align 8
  %.phi.trans.insert = getelementptr inbounds %struct.CPUX86State* %.pre, i64 0, i32 7
  %.pre51 = load i32* %.phi.trans.insert, align 4
  br label %.lr.ph

.loopexit:                                        ; preds = %ldq_data.exit, %174, %137
  ret void
}

define void @cpu_get_fp80(i64* nocapture %pmant, i16* nocapture %pexp, i64 %f.coerce0, i16 %f.coerce1) nounwind uwtable {
  store i64 %f.coerce0, i64* %pmant, align 8
  store i16 %f.coerce1, i16* %pexp, align 2
  ret void
}

define { i64, i16 } @cpu_set_fp80(i64 %mant, i16 zeroext %upper) nounwind uwtable readnone {
  %.fca.0.insert = insertvalue { i64, i16 } undef, i64 %mant, 0
  %.fca.1.insert = insertvalue { i64, i16 } %.fca.0.insert, i16 %upper, 1
  ret { i64, i16 } %.fca.1.insert
}

define void @helper_hlt(i32 %next_eip_addend) noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 16777216
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 120, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 1
  %12 = load i32* %11, align 4
  %13 = add i32 %12, %next_eip_addend
  store i32 %13, i32* %11, align 4
  tail call fastcc void @do_hlt()
  unreachable
}

define internal fastcc void @do_hlt() noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 4
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 68
  store i32 1, i32* %6, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 86
  store i32 65537, i32* %8, align 4
  %9 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_loop_exit(%struct.CPUX86State* %9) noreturn nounwind
  unreachable
}

define void @helper_monitor(i32 %ptr) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  tail call fastcc void @raise_exception(i32 13) noreturn
  unreachable

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %8 = load i32* %7, align 4
  %.lobit.i = and i32 %8, 2097152
  %9 = icmp eq i32 %.lobit.i, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10, !prof !0

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %12 = load i64* %11, align 8
  %13 = and i64 %12, 4398046511104
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %helper_svm_check_intercept_param.exit, label %15

; <label>:15                                      ; preds = %10
  tail call void @helper_vmexit(i32 138, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %10, %6
  ret void
}

define void @helper_mwait(i32 %next_eip_addend) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  tail call fastcc void @raise_exception(i32 13) noreturn
  unreachable

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %8 = load i32* %7, align 4
  %.lobit.i = and i32 %8, 2097152
  %9 = icmp eq i32 %.lobit.i, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10, !prof !0

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %12 = load i64* %11, align 8
  %13 = and i64 %12, 8796093022208
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %helper_svm_check_intercept_param.exit, label %15

; <label>:15                                      ; preds = %10
  tail call void @helper_vmexit(i32 139, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %10, %6
  %16 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 1
  %17 = load i32* %16, align 4
  %18 = add i32 %17, %next_eip_addend
  store i32 %18, i32* %16, align 4
  %19 = load %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 88
  %21 = load i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %28

; <label>:23                                      ; preds = %helper_svm_check_intercept_param.exit
  %24 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 87
  %25 = load %struct.CPUX86State** %24, align 8
  %26 = icmp eq %struct.CPUX86State* %25, null
  br i1 %26, label %27, label %28

; <label>:27                                      ; preds = %23
  tail call fastcc void @do_hlt()
  unreachable

; <label>:28                                      ; preds = %23, %helper_svm_check_intercept_param.exit
  ret void
}

define void @helper_debug() noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 86
  store i32 65538, i32* %2, align 4
  %3 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_loop_exit(%struct.CPUX86State* %3) noreturn nounwind
  unreachable
}

declare void @cpu_loop_exit(%struct.CPUX86State*) noreturn

define void @helper_reset_rf() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %3 = load i32* %2, align 4
  %4 = and i32 %3, -65537
  store i32 %4, i32* %2, align 4
  ret void
}

define void @helper_raise_interrupt(i32 %intno, i32 %next_eip_addend) nounwind uwtable {
  %1 = tail call i32 (...)* @raise_interrupt(i32 %intno, i32 1, i32 0, i32 %next_eip_addend) nounwind
  ret void
}

define void @helper_raise_exception(i32 %exception_index) noreturn nounwind uwtable {
  tail call fastcc void @raise_exception(i32 %exception_index) noreturn
  unreachable
}

define void @helper_cli() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %3 = load i32* %2, align 4
  %4 = and i32 %3, -513
  store i32 %4, i32* %2, align 4
  ret void
}

define void @helper_sti() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 2
  %3 = load i32* %2, align 4
  %4 = or i32 %3, 512
  store i32 %4, i32* %2, align 4
  ret void
}

define void @helper_set_inhibit_irq() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %4 = or i32 %3, 8
  store i32 %4, i32* %2, align 4
  ret void
}

define void @helper_reset_inhibit_irq() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 4
  ret void
}

define void @helper_boundw(i32 %a0, i32 %v) nounwind uwtable {
  %1 = lshr i32 %a0, 12
  %2 = and i32 %1, 255
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 7
  %5 = load i32* %4, align 4
  %6 = and i32 %5, 3
  %7 = icmp eq i32 %6, 3
  %8 = zext i32 %2 to i64
  %9 = zext i1 %7 to i64
  %10 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %8, i32 0
  %11 = load i32* %10, align 4
  %12 = and i32 %a0, -4095
  %13 = icmp eq i32 %11, %12
  %14 = zext i32 %a0 to i64
  br i1 %13, label %15, label %ldsw_data.exit, !prof !0

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %8, i32 3
  %17 = load i64* %16, align 8
  %18 = add i64 %17, %14
  br label %ldsw_data.exit

ldsw_data.exit:                                   ; preds = %15, %0
  %.sink.in.in.i = phi i64 [ %18, %15 ], [ %14, %0 ]
  %.sink.in.i = inttoptr i64 %.sink.in.in.i to i16*
  %.sink.i = load i16* %.sink.in.i, align 2
  %19 = sext i16 %.sink.i to i32
  %20 = add i32 %a0, 2
  %21 = lshr i32 %20, 12
  %22 = and i32 %21, 255
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %23, i32 0
  %25 = load i32* %24, align 4
  %26 = and i32 %20, -4095
  %27 = icmp eq i32 %25, %26
  %28 = zext i32 %20 to i64
  br i1 %27, label %29, label %ldsw_data.exit8, !prof !0

; <label>:29                                      ; preds = %ldsw_data.exit
  %30 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %23, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %28
  br label %ldsw_data.exit8

ldsw_data.exit8:                                  ; preds = %29, %ldsw_data.exit
  %.sink.in.in.i5 = phi i64 [ %32, %29 ], [ %28, %ldsw_data.exit ]
  %.sink.in.i6 = inttoptr i64 %.sink.in.in.i5 to i16*
  %.sink.i7 = load i16* %.sink.in.i6, align 2
  %33 = sext i16 %.sink.i7 to i32
  %sext = shl i32 %v, 16
  %34 = ashr exact i32 %sext, 16
  %35 = icmp slt i32 %34, %19
  %36 = icmp sgt i32 %34, %33
  %or.cond = or i1 %35, %36
  br i1 %or.cond, label %37, label %38

; <label>:37                                      ; preds = %ldsw_data.exit8
  tail call fastcc void @raise_exception(i32 5) noreturn
  unreachable

; <label>:38                                      ; preds = %ldsw_data.exit8
  ret void
}

define void @helper_boundl(i32 %a0, i32 %v) nounwind uwtable {
  %1 = lshr i32 %a0, 12
  %2 = and i32 %1, 255
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 7
  %5 = load i32* %4, align 4
  %6 = and i32 %5, 3
  %7 = icmp eq i32 %6, 3
  %8 = zext i32 %2 to i64
  %9 = zext i1 %7 to i64
  %10 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %8, i32 0
  %11 = load i32* %10, align 4
  %12 = and i32 %a0, -4093
  %13 = icmp eq i32 %11, %12
  %14 = zext i32 %a0 to i64
  br i1 %13, label %15, label %ldl_data.exit, !prof !0

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %8, i32 3
  %17 = load i64* %16, align 8
  %18 = add i64 %17, %14
  br label %ldl_data.exit

ldl_data.exit:                                    ; preds = %15, %0
  %res.0.in.in.i = phi i64 [ %18, %15 ], [ %14, %0 ]
  %res.0.in.i = inttoptr i64 %res.0.in.in.i to i32*
  %res.0.i = load i32* %res.0.in.i, align 4
  %19 = add i32 %a0, 4
  %20 = lshr i32 %19, 12
  %21 = and i32 %20, 255
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %22, i32 0
  %24 = load i32* %23, align 4
  %25 = and i32 %19, -4093
  %26 = icmp eq i32 %24, %25
  %27 = zext i32 %19 to i64
  br i1 %26, label %28, label %ldl_data.exit7, !prof !0

; <label>:28                                      ; preds = %ldl_data.exit
  %29 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 71, i64 %9, i64 %22, i32 3
  %30 = load i64* %29, align 8
  %31 = add i64 %30, %27
  br label %ldl_data.exit7

ldl_data.exit7:                                   ; preds = %28, %ldl_data.exit
  %res.0.in.in.i4 = phi i64 [ %31, %28 ], [ %27, %ldl_data.exit ]
  %res.0.in.i5 = inttoptr i64 %res.0.in.in.i4 to i32*
  %res.0.i6 = load i32* %res.0.in.i5, align 4
  %32 = icmp sgt i32 %res.0.i, %v
  %33 = icmp slt i32 %res.0.i6, %v
  %or.cond = or i1 %32, %33
  br i1 %or.cond, label %34, label %35

; <label>:34                                      ; preds = %ldl_data.exit7
  tail call fastcc void @raise_exception(i32 5) noreturn
  unreachable

; <label>:35                                      ; preds = %ldl_data.exit7
  ret void
}

define zeroext i8 @__ldb_mmu(i32 %addr, i32 %mmu_idx) nounwind uwtable readonly {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i8*
  %3 = load i8* %2, align 1
  ret i8 %3
}

define void @__stb_mmu(i32 %addr, i8 zeroext %val, i32 %mmu_idx) nounwind uwtable {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i8*
  store i8 %val, i8* %2, align 1
  ret void
}

define zeroext i16 @__ldw_mmu(i32 %addr, i32 %mmu_idx) nounwind uwtable readonly {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i16*
  %3 = load i16* %2, align 2
  ret i16 %3
}

define void @__stw_mmu(i32 %addr, i16 zeroext %val, i32 %mmu_idx) nounwind uwtable {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i16*
  store i16 %val, i16* %2, align 2
  ret void
}

define i32 @__ldl_mmu(i32 %addr, i32 %mmu_idx) nounwind uwtable readonly {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i32*
  %3 = load i32* %2, align 4
  ret i32 %3
}

define void @__stl_mmu(i32 %addr, i32 %val, i32 %mmu_idx) nounwind uwtable {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i32*
  store i32 %val, i32* %2, align 4
  ret void
}

define i64 @__ldq_mmu(i32 %addr, i32 %mmu_idx) nounwind uwtable readonly {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i64*
  %3 = load i64* %2, align 8
  ret i64 %3
}

define void @__stq_mmu(i32 %addr, i64 %val, i32 %mmu_idx) nounwind uwtable {
  %1 = zext i32 %addr to i64
  %2 = inttoptr i64 %1 to i64*
  store i64 %val, i64* %2, align 8
  ret void
}

define void @tlb_fill(%struct.CPUX86State* nocapture %env1, i32 %addr, i32 %is_write, i32 %mmu_idx, i8* nocapture %retaddr) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = tail call i32 @cpu_x86_handle_mmu_fault(%struct.CPUX86State* %1, i32 %addr, i32 %is_write, i32 %mmu_idx) nounwind
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  tail call void (...)* @bct_hadler_klee_page_fault() nounwind
  br label %5

; <label>:5                                       ; preds = %4, %0
  ret void
}

declare i32 @cpu_x86_handle_mmu_fault(%struct.CPUX86State*, i32, i32, i32)

declare void @bct_hadler_klee_page_fault(...)

define void @helper_vmrun(i32 %aflag, i32 %next_eip_addend) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 4294967296
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 128, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %12 = load i32* %11, align 4
  %13 = load i32* @loglevel, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

; <label>:16                                      ; preds = %helper_svm_check_intercept_param.exit
  %17 = load %struct._IO_FILE** @logfile, align 8
  %18 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([13 x i8]* @.str5, i64 0, i64 0), i32 %12) nounwind
  %.pre = load %struct.CPUX86State** @env, align 8
  br label %19

; <label>:19                                      ; preds = %16, %helper_svm_check_intercept_param.exit
  %20 = phi %struct.CPUX86State* [ %1, %helper_svm_check_intercept_param.exit ], [ %.pre, %16 ]
  %21 = zext i32 %12 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %20, i64 0, i32 40
  store i64 %21, i64* %22, align 8
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 39
  %25 = load i64* %24, align 8
  %26 = add i64 %25, 1128
  %27 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 12, i32 1
  %28 = load i32* %27, align 4
  %29 = zext i32 %28 to i64
  tail call void @stq_phys(i64 %26, i64 %29) nounwind
  %30 = load %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 39
  %32 = load i64* %31, align 8
  %33 = add i64 %32, 1124
  %34 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 12, i32 2
  %35 = load i32* %34, align 4
  tail call void @stl_phys(i64 %33, i32 %35) nounwind
  %36 = load %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 39
  %38 = load i64* %37, align 8
  %39 = add i64 %38, 1160
  %40 = getelementptr inbounds %struct.CPUX86State* %36, i64 0, i32 13, i32 1
  %41 = load i32* %40, align 4
  %42 = zext i32 %41 to i64
  tail call void @stq_phys(i64 %39, i64 %42) nounwind
  %43 = load %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State* %43, i64 0, i32 39
  %45 = load i64* %44, align 8
  %46 = add i64 %45, 1156
  %47 = getelementptr inbounds %struct.CPUX86State* %43, i64 0, i32 13, i32 2
  %48 = load i32* %47, align 4
  tail call void @stl_phys(i64 %46, i32 %48) nounwind
  %49 = load %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 39
  %51 = load i64* %50, align 8
  %52 = add i64 %51, 1368
  %53 = getelementptr inbounds %struct.CPUX86State* %49, i64 0, i32 14, i64 0
  %54 = load i32* %53, align 4
  %55 = zext i32 %54 to i64
  tail call void @stq_phys(i64 %52, i64 %55) nounwind
  %56 = load %struct.CPUX86State** @env, align 8
  %57 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 39
  %58 = load i64* %57, align 8
  %59 = add i64 %58, 1600
  %60 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 14, i64 2
  %61 = load i32* %60, align 4
  %62 = zext i32 %61 to i64
  tail call void @stq_phys(i64 %59, i64 %62) nounwind
  %63 = load %struct.CPUX86State** @env, align 8
  %64 = getelementptr inbounds %struct.CPUX86State* %63, i64 0, i32 39
  %65 = load i64* %64, align 8
  %66 = add i64 %65, 1360
  %67 = getelementptr inbounds %struct.CPUX86State* %63, i64 0, i32 14, i64 3
  %68 = load i32* %67, align 4
  %69 = zext i32 %68 to i64
  tail call void @stq_phys(i64 %66, i64 %69) nounwind
  %70 = load %struct.CPUX86State** @env, align 8
  %71 = getelementptr inbounds %struct.CPUX86State* %70, i64 0, i32 39
  %72 = load i64* %71, align 8
  %73 = add i64 %72, 1352
  %74 = getelementptr inbounds %struct.CPUX86State* %70, i64 0, i32 14, i64 4
  %75 = load i32* %74, align 4
  %76 = zext i32 %75 to i64
  tail call void @stq_phys(i64 %73, i64 %76) nounwind
  %77 = load %struct.CPUX86State** @env, align 8
  %78 = getelementptr inbounds %struct.CPUX86State* %77, i64 0, i32 39
  %79 = load i64* %78, align 8
  %80 = add i64 %79, 1384
  %81 = getelementptr inbounds %struct.CPUX86State* %77, i64 0, i32 59, i64 6
  %82 = load i32* %81, align 4
  %83 = zext i32 %82 to i64
  tail call void @stq_phys(i64 %80, i64 %83) nounwind
  %84 = load %struct.CPUX86State** @env, align 8
  %85 = getelementptr inbounds %struct.CPUX86State* %84, i64 0, i32 39
  %86 = load i64* %85, align 8
  %87 = add i64 %86, 1376
  %88 = getelementptr inbounds %struct.CPUX86State* %84, i64 0, i32 59, i64 7
  %89 = load i32* %88, align 4
  %90 = zext i32 %89 to i64
  tail call void @stq_phys(i64 %87, i64 %90) nounwind
  %91 = load %struct.CPUX86State** @env, align 8
  %92 = getelementptr inbounds %struct.CPUX86State* %91, i64 0, i32 39
  %93 = load i64* %92, align 8
  %94 = add i64 %93, 1232
  %95 = getelementptr inbounds %struct.CPUX86State* %91, i64 0, i32 37
  %96 = load i64* %95, align 8
  tail call void @stq_phys(i64 %94, i64 %96) nounwind
  %97 = load %struct.CPUX86State** @env, align 8
  %98 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 39
  %99 = load i64* %98, align 8
  %100 = add i64 %99, 1392
  %101 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 2
  %102 = load i32* %101, align 4
  %103 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 5
  %104 = load i32* %103, align 4
  %105 = tail call i32 @helper_cc_compute_all(i32 %104) nounwind
  %106 = or i32 %105, %102
  %107 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 6
  %108 = load i32* %107, align 4
  %109 = and i32 %108, 1024
  %110 = or i32 %106, %109
  %111 = zext i32 %110 to i64
  tail call void @stq_phys(i64 %100, i64 %111) nounwind
  %112 = load %struct.CPUX86State** @env, align 8
  %113 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 39
  %114 = load i64* %113, align 8
  %115 = add i64 %114, 1024
  %116 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 9, i64 0, i32 0
  %117 = load i32* %116, align 4
  tail call void @stw_phys(i64 %115, i32 %117) nounwind
  %118 = add i64 %114, 1032
  %119 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 9, i64 0, i32 1
  %120 = load i32* %119, align 4
  %121 = zext i32 %120 to i64
  tail call void @stq_phys(i64 %118, i64 %121) nounwind
  %122 = add i64 %114, 1028
  %123 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 9, i64 0, i32 2
  %124 = load i32* %123, align 4
  tail call void @stl_phys(i64 %122, i32 %124) nounwind
  %125 = add i64 %114, 1026
  %126 = getelementptr inbounds %struct.CPUX86State* %112, i64 0, i32 9, i64 0, i32 3
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 8
  %129 = and i32 %128, 255
  %130 = lshr i32 %127, 12
  %131 = and i32 %130, 3840
  %132 = or i32 %129, %131
  tail call void @stw_phys(i64 %125, i32 %132) nounwind
  %133 = load %struct.CPUX86State** @env, align 8
  %134 = getelementptr inbounds %struct.CPUX86State* %133, i64 0, i32 39
  %135 = load i64* %134, align 8
  %136 = add i64 %135, 1040
  %137 = getelementptr inbounds %struct.CPUX86State* %133, i64 0, i32 9, i64 1, i32 0
  %138 = load i32* %137, align 4
  tail call void @stw_phys(i64 %136, i32 %138) nounwind
  %139 = add i64 %135, 1048
  %140 = getelementptr inbounds %struct.CPUX86State* %133, i64 0, i32 9, i64 1, i32 1
  %141 = load i32* %140, align 4
  %142 = zext i32 %141 to i64
  tail call void @stq_phys(i64 %139, i64 %142) nounwind
  %143 = add i64 %135, 1044
  %144 = getelementptr inbounds %struct.CPUX86State* %133, i64 0, i32 9, i64 1, i32 2
  %145 = load i32* %144, align 4
  tail call void @stl_phys(i64 %143, i32 %145) nounwind
  %146 = add i64 %135, 1042
  %147 = getelementptr inbounds %struct.CPUX86State* %133, i64 0, i32 9, i64 1, i32 3
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 8
  %150 = and i32 %149, 255
  %151 = lshr i32 %148, 12
  %152 = and i32 %151, 3840
  %153 = or i32 %150, %152
  tail call void @stw_phys(i64 %146, i32 %153) nounwind
  %154 = load %struct.CPUX86State** @env, align 8
  %155 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 39
  %156 = load i64* %155, align 8
  %157 = add i64 %156, 1056
  %158 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 9, i64 2, i32 0
  %159 = load i32* %158, align 4
  tail call void @stw_phys(i64 %157, i32 %159) nounwind
  %160 = add i64 %156, 1064
  %161 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 9, i64 2, i32 1
  %162 = load i32* %161, align 4
  %163 = zext i32 %162 to i64
  tail call void @stq_phys(i64 %160, i64 %163) nounwind
  %164 = add i64 %156, 1060
  %165 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 9, i64 2, i32 2
  %166 = load i32* %165, align 4
  tail call void @stl_phys(i64 %164, i32 %166) nounwind
  %167 = add i64 %156, 1058
  %168 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 9, i64 2, i32 3
  %169 = load i32* %168, align 4
  %170 = lshr i32 %169, 8
  %171 = and i32 %170, 255
  %172 = lshr i32 %169, 12
  %173 = and i32 %172, 3840
  %174 = or i32 %171, %173
  tail call void @stw_phys(i64 %167, i32 %174) nounwind
  %175 = load %struct.CPUX86State** @env, align 8
  %176 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 39
  %177 = load i64* %176, align 8
  %178 = add i64 %177, 1072
  %179 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 9, i64 3, i32 0
  %180 = load i32* %179, align 4
  tail call void @stw_phys(i64 %178, i32 %180) nounwind
  %181 = add i64 %177, 1080
  %182 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 9, i64 3, i32 1
  %183 = load i32* %182, align 4
  %184 = zext i32 %183 to i64
  tail call void @stq_phys(i64 %181, i64 %184) nounwind
  %185 = add i64 %177, 1076
  %186 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 9, i64 3, i32 2
  %187 = load i32* %186, align 4
  tail call void @stl_phys(i64 %185, i32 %187) nounwind
  %188 = add i64 %177, 1074
  %189 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 9, i64 3, i32 3
  %190 = load i32* %189, align 4
  %191 = lshr i32 %190, 8
  %192 = and i32 %191, 255
  %193 = lshr i32 %190, 12
  %194 = and i32 %193, 3840
  %195 = or i32 %192, %194
  tail call void @stw_phys(i64 %188, i32 %195) nounwind
  %196 = load %struct.CPUX86State** @env, align 8
  %197 = getelementptr inbounds %struct.CPUX86State* %196, i64 0, i32 39
  %198 = load i64* %197, align 8
  %199 = add i64 %198, 1400
  %200 = getelementptr inbounds %struct.CPUX86State* %196, i64 0, i32 1
  %201 = load i32* %200, align 4
  %202 = add i32 %201, %next_eip_addend
  %203 = zext i32 %202 to i64
  tail call void @stq_phys(i64 %199, i64 %203) nounwind
  %204 = load %struct.CPUX86State** @env, align 8
  %205 = getelementptr inbounds %struct.CPUX86State* %204, i64 0, i32 39
  %206 = load i64* %205, align 8
  %207 = add i64 %206, 1496
  %208 = getelementptr inbounds %struct.CPUX86State* %204, i64 0, i32 0, i64 4
  %209 = load i32* %208, align 4
  %210 = zext i32 %209 to i64
  tail call void @stq_phys(i64 %207, i64 %210) nounwind
  %211 = load %struct.CPUX86State** @env, align 8
  %212 = getelementptr inbounds %struct.CPUX86State* %211, i64 0, i32 39
  %213 = load i64* %212, align 8
  %214 = add i64 %213, 1528
  %215 = getelementptr inbounds %struct.CPUX86State* %211, i64 0, i32 0, i64 0
  %216 = load i32* %215, align 4
  %217 = zext i32 %216 to i64
  tail call void @stq_phys(i64 %214, i64 %217) nounwind
  %218 = load %struct.CPUX86State** @env, align 8
  %219 = getelementptr inbounds %struct.CPUX86State* %218, i64 0, i32 40
  %220 = load i64* %219, align 8
  %221 = add i64 %220, 12
  %222 = tail call i64 @ldq_phys(i64 %221) nounwind
  %223 = load %struct.CPUX86State** @env, align 8
  %224 = getelementptr inbounds %struct.CPUX86State* %223, i64 0, i32 42
  store i64 %222, i64* %224, align 8
  %225 = load %struct.CPUX86State** @env, align 8
  %226 = getelementptr inbounds %struct.CPUX86State* %225, i64 0, i32 40
  %227 = load i64* %226, align 8
  %228 = tail call i32 @lduw_phys(i64 %227) nounwind
  %229 = trunc i32 %228 to i16
  %230 = load %struct.CPUX86State** @env, align 8
  %231 = getelementptr inbounds %struct.CPUX86State* %230, i64 0, i32 43
  store i16 %229, i16* %231, align 2
  %232 = load %struct.CPUX86State** @env, align 8
  %233 = getelementptr inbounds %struct.CPUX86State* %232, i64 0, i32 40
  %234 = load i64* %233, align 8
  %235 = add i64 %234, 2
  %236 = tail call i32 @lduw_phys(i64 %235) nounwind
  %237 = trunc i32 %236 to i16
  %238 = load %struct.CPUX86State** @env, align 8
  %239 = getelementptr inbounds %struct.CPUX86State* %238, i64 0, i32 44
  store i16 %237, i16* %239, align 2
  %240 = load %struct.CPUX86State** @env, align 8
  %241 = getelementptr inbounds %struct.CPUX86State* %240, i64 0, i32 40
  %242 = load i64* %241, align 8
  %243 = add i64 %242, 4
  %244 = tail call i32 @lduw_phys(i64 %243) nounwind
  %245 = trunc i32 %244 to i16
  %246 = load %struct.CPUX86State** @env, align 8
  %247 = getelementptr inbounds %struct.CPUX86State* %246, i64 0, i32 45
  store i16 %245, i16* %247, align 2
  %248 = load %struct.CPUX86State** @env, align 8
  %249 = getelementptr inbounds %struct.CPUX86State* %248, i64 0, i32 40
  %250 = load i64* %249, align 8
  %251 = add i64 %250, 6
  %252 = tail call i32 @lduw_phys(i64 %251) nounwind
  %253 = trunc i32 %252 to i16
  %254 = load %struct.CPUX86State** @env, align 8
  %255 = getelementptr inbounds %struct.CPUX86State* %254, i64 0, i32 46
  store i16 %253, i16* %255, align 2
  %256 = load %struct.CPUX86State** @env, align 8
  %257 = getelementptr inbounds %struct.CPUX86State* %256, i64 0, i32 40
  %258 = load i64* %257, align 8
  %259 = add i64 %258, 8
  %260 = tail call i32 @ldl_phys(i64 %259) nounwind
  %261 = load %struct.CPUX86State** @env, align 8
  %262 = getelementptr inbounds %struct.CPUX86State* %261, i64 0, i32 47
  store i32 %260, i32* %262, align 4
  %263 = load %struct.CPUX86State** @env, align 8
  %264 = getelementptr inbounds %struct.CPUX86State* %263, i64 0, i32 7
  %265 = load i32* %264, align 4
  %266 = or i32 %265, 2097152
  store i32 %266, i32* %264, align 4
  %267 = load %struct.CPUX86State** @env, align 8
  %268 = getelementptr inbounds %struct.CPUX86State* %267, i64 0, i32 40
  %269 = load i64* %268, align 8
  %270 = add i64 %269, 80
  %271 = tail call i64 @ldq_phys(i64 %270) nounwind
  %272 = load %struct.CPUX86State** @env, align 8
  %273 = getelementptr inbounds %struct.CPUX86State* %272, i64 0, i32 41
  store i64 %271, i64* %273, align 8
  %274 = load %struct.CPUX86State** @env, align 8
  %275 = getelementptr inbounds %struct.CPUX86State* %274, i64 0, i32 40
  %276 = load i64* %275, align 8
  %277 = add i64 %276, 1128
  %278 = tail call i64 @ldq_phys(i64 %277) nounwind
  %279 = trunc i64 %278 to i32
  %280 = load %struct.CPUX86State** @env, align 8
  %281 = getelementptr inbounds %struct.CPUX86State* %280, i64 0, i32 12, i32 1
  store i32 %279, i32* %281, align 4
  %282 = load %struct.CPUX86State** @env, align 8
  %283 = getelementptr inbounds %struct.CPUX86State* %282, i64 0, i32 40
  %284 = load i64* %283, align 8
  %285 = add i64 %284, 1124
  %286 = tail call i32 @ldl_phys(i64 %285) nounwind
  %287 = load %struct.CPUX86State** @env, align 8
  %288 = getelementptr inbounds %struct.CPUX86State* %287, i64 0, i32 12, i32 2
  store i32 %286, i32* %288, align 4
  %289 = load %struct.CPUX86State** @env, align 8
  %290 = getelementptr inbounds %struct.CPUX86State* %289, i64 0, i32 40
  %291 = load i64* %290, align 8
  %292 = add i64 %291, 1160
  %293 = tail call i64 @ldq_phys(i64 %292) nounwind
  %294 = trunc i64 %293 to i32
  %295 = load %struct.CPUX86State** @env, align 8
  %296 = getelementptr inbounds %struct.CPUX86State* %295, i64 0, i32 13, i32 1
  store i32 %294, i32* %296, align 4
  %297 = load %struct.CPUX86State** @env, align 8
  %298 = getelementptr inbounds %struct.CPUX86State* %297, i64 0, i32 40
  %299 = load i64* %298, align 8
  %300 = add i64 %299, 1156
  %301 = tail call i32 @ldl_phys(i64 %300) nounwind
  %302 = load %struct.CPUX86State** @env, align 8
  %303 = getelementptr inbounds %struct.CPUX86State* %302, i64 0, i32 13, i32 2
  store i32 %301, i32* %303, align 4
  %304 = load %struct.CPUX86State** @env, align 8
  %305 = getelementptr inbounds %struct.CPUX86State* %304, i64 0, i32 40
  %306 = load i64* %305, align 8
  %307 = add i64 %306, 128
  tail call void @stq_phys(i64 %307, i64 0) nounwind
  %308 = load %struct.CPUX86State** @env, align 8
  %309 = getelementptr inbounds %struct.CPUX86State* %308, i64 0, i32 40
  %310 = load i64* %309, align 8
  %311 = add i64 %310, 1368
  %312 = tail call i64 @ldq_phys(i64 %311) nounwind
  %313 = trunc i64 %312 to i32
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %308, i32 %313) nounwind
  %314 = load %struct.CPUX86State** @env, align 8
  %315 = getelementptr inbounds %struct.CPUX86State* %314, i64 0, i32 40
  %316 = load i64* %315, align 8
  %317 = add i64 %316, 1352
  %318 = tail call i64 @ldq_phys(i64 %317) nounwind
  %319 = trunc i64 %318 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %314, i32 %319) nounwind
  %320 = load %struct.CPUX86State** @env, align 8
  %321 = getelementptr inbounds %struct.CPUX86State* %320, i64 0, i32 40
  %322 = load i64* %321, align 8
  %323 = add i64 %322, 1360
  %324 = tail call i64 @ldq_phys(i64 %323) nounwind
  %325 = trunc i64 %324 to i32
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %320, i32 %325) nounwind
  %326 = load %struct.CPUX86State** @env, align 8
  %327 = getelementptr inbounds %struct.CPUX86State* %326, i64 0, i32 40
  %328 = load i64* %327, align 8
  %329 = add i64 %328, 1600
  %330 = tail call i64 @ldq_phys(i64 %329) nounwind
  %331 = trunc i64 %330 to i32
  %332 = load %struct.CPUX86State** @env, align 8
  %333 = getelementptr inbounds %struct.CPUX86State* %332, i64 0, i32 14, i64 2
  store i32 %331, i32* %333, align 4
  %334 = load %struct.CPUX86State** @env, align 8
  %335 = getelementptr inbounds %struct.CPUX86State* %334, i64 0, i32 40
  %336 = load i64* %335, align 8
  %337 = add i64 %336, 96
  %338 = tail call i32 @ldl_phys(i64 %337) nounwind
  %339 = load %struct.CPUX86State** @env, align 8
  %340 = getelementptr inbounds %struct.CPUX86State* %339, i64 0, i32 8
  %341 = load i32* %340, align 4
  %342 = and i32 %341, -11
  store i32 %342, i32* %340, align 4
  %343 = and i32 %338, 16777216
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %._crit_edge23, label %345

; <label>:345                                     ; preds = %19
  %.tr = trunc i32 %338 to i8
  %346 = and i8 %.tr, 15
  %347 = load %struct.CPUX86State** @env, align 8
  %348 = getelementptr inbounds %struct.CPUX86State* %347, i64 0, i32 48
  store i8 %346, i8* %348, align 1
  %349 = load %struct.CPUX86State** @env, align 8
  %350 = getelementptr inbounds %struct.CPUX86State* %349, i64 0, i32 8
  %351 = load i32* %350, align 4
  %352 = or i32 %351, 8
  store i32 %352, i32* %350, align 4
  %353 = load %struct.CPUX86State** @env, align 8
  %354 = getelementptr inbounds %struct.CPUX86State* %353, i64 0, i32 2
  %355 = load i32* %354, align 4
  %356 = and i32 %355, 512
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %._crit_edge23, label %358

; <label>:358                                     ; preds = %345
  %359 = getelementptr inbounds %struct.CPUX86State* %353, i64 0, i32 8
  %360 = load i32* %359, align 4
  %361 = or i32 %360, 2
  store i32 %361, i32* %359, align 4
  br label %._crit_edge23

._crit_edge23:                                    ; preds = %358, %345, %19
  %362 = load %struct.CPUX86State** @env, align 8
  %363 = getelementptr inbounds %struct.CPUX86State* %362, i64 0, i32 40
  %364 = load i64* %363, align 8
  %365 = add i64 %364, 1232
  %366 = tail call i64 @ldq_phys(i64 %365) nounwind
  %367 = getelementptr inbounds %struct.CPUX86State* %362, i64 0, i32 37
  store i64 %366, i64* %367, align 8
  %368 = getelementptr inbounds %struct.CPUX86State* %362, i64 0, i32 7
  %369 = load i32* %368, align 4
  %370 = and i32 %369, -1064961
  %371 = and i64 %366, 1024
  %372 = icmp eq i64 %371, 0
  %373 = or i32 %370, 16384
  %storemerge.i = select i1 %372, i32 %370, i32 %373
  %374 = and i64 %366, 4096
  %375 = icmp eq i64 %374, 0
  %376 = or i32 %storemerge.i, 1048576
  %storemerge..i = select i1 %375, i32 %storemerge.i, i32 %376
  store i32 %storemerge..i, i32* %368, align 4
  %377 = load %struct.CPUX86State** @env, align 8
  %378 = getelementptr inbounds %struct.CPUX86State* %377, i64 0, i32 2
  store i32 0, i32* %378, align 4
  %379 = load %struct.CPUX86State** @env, align 8
  %380 = getelementptr inbounds %struct.CPUX86State* %379, i64 0, i32 40
  %381 = load i64* %380, align 8
  %382 = add i64 %381, 1392
  %383 = tail call i64 @ldq_phys(i64 %382) nounwind
  %384 = trunc i64 %383 to i32
  %385 = and i32 %384, 2261
  %386 = load %struct.CPUX86State** @env, align 8
  %387 = getelementptr inbounds %struct.CPUX86State* %386, i64 0, i32 3
  store i32 %385, i32* %387, align 4
  %388 = lshr i32 %384, 10
  %389 = shl nuw nsw i32 %388, 1
  %390 = and i32 %389, 2
  %391 = sub nsw i32 1, %390
  %392 = load %struct.CPUX86State** @env, align 8
  %393 = getelementptr inbounds %struct.CPUX86State* %392, i64 0, i32 6
  store i32 %391, i32* %393, align 4
  %394 = load %struct.CPUX86State** @env, align 8
  %395 = getelementptr inbounds %struct.CPUX86State* %394, i64 0, i32 2
  %396 = load i32* %395, align 4
  %397 = and i32 %396, 3285
  %398 = and i32 %384, -3288
  %399 = or i32 %398, %397
  %400 = or i32 %399, 2
  store i32 %400, i32* %395, align 4
  %401 = load %struct.CPUX86State** @env, align 8
  %402 = getelementptr inbounds %struct.CPUX86State* %401, i64 0, i32 5
  store i32 1, i32* %402, align 4
  %403 = load %struct.CPUX86State** @env, align 8
  %404 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 40
  %405 = load i64* %404, align 8
  %406 = add i64 %405, 1024
  %407 = tail call i32 @lduw_phys(i64 %406) nounwind
  %408 = add i64 %405, 1032
  %409 = tail call i64 @ldq_phys(i64 %408) nounwind
  %410 = trunc i64 %409 to i32
  %411 = add i64 %405, 1028
  %412 = tail call i32 @ldl_phys(i64 %411) nounwind
  %413 = add i64 %405, 1026
  %414 = tail call i32 @lduw_phys(i64 %413) nounwind
  %415 = shl i32 %414, 8
  %416 = and i32 %415, 65280
  %417 = shl i32 %414, 12
  %418 = and i32 %417, 15728640
  %419 = or i32 %416, %418
  %420 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 0, i32 0
  store i32 %407, i32* %420, align 4
  %421 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 0, i32 1
  store i32 %410, i32* %421, align 4
  %422 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 0, i32 2
  store i32 %412, i32* %422, align 4
  %423 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 0, i32 3
  store i32 %419, i32* %423, align 4
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 7
  %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4
  %424 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 2, i32 3
  %425 = load i32* %424, align 4
  %426 = lshr i32 %425, 17
  %427 = and i32 %426, 32
  %428 = and i32 %.pre.i.i, 32768
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %430, label %svm_load_seg_cache.exit

; <label>:430                                     ; preds = %._crit_edge23
  %431 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 14, i64 0
  %432 = load i32* %431, align 4
  %433 = and i32 %432, 1
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %443, label %435

; <label>:435                                     ; preds = %430
  %436 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 2
  %437 = load i32* %436, align 4
  %438 = and i32 %437, 131072
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %443

; <label>:440                                     ; preds = %435
  %441 = and i32 %.pre.i.i, 16
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %443, label %445

; <label>:443                                     ; preds = %440, %435, %430
  %444 = or i32 %427, 64
  br label %svm_load_seg_cache.exit

; <label>:445                                     ; preds = %440
  %446 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 3, i32 1
  %447 = load i32* %446, align 4
  %448 = or i32 %410, %447
  %449 = getelementptr inbounds %struct.CPUX86State* %403, i64 0, i32 9, i64 2, i32 1
  %450 = load i32* %449, align 4
  %451 = or i32 %448, %450
  %452 = icmp ne i32 %451, 0
  %453 = zext i1 %452 to i32
  %454 = shl nuw nsw i32 %453, 6
  %455 = or i32 %454, %427
  br label %svm_load_seg_cache.exit

svm_load_seg_cache.exit:                          ; preds = %445, %443, %._crit_edge23
  %new_hflags.0.i.i = phi i32 [ %427, %._crit_edge23 ], [ %444, %443 ], [ %455, %445 ]
  %456 = and i32 %.pre.i.i, -97
  %457 = or i32 %new_hflags.0.i.i, %456
  store i32 %457, i32* %.phi.trans.insert.i.i, align 4
  %458 = load %struct.CPUX86State** @env, align 8
  %459 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 40
  %460 = load i64* %459, align 8
  %461 = add i64 %460, 1040
  %462 = tail call i32 @lduw_phys(i64 %461) nounwind
  %463 = add i64 %460, 1048
  %464 = tail call i64 @ldq_phys(i64 %463) nounwind
  %465 = trunc i64 %464 to i32
  %466 = add i64 %460, 1044
  %467 = tail call i32 @ldl_phys(i64 %466) nounwind
  %468 = add i64 %460, 1042
  %469 = tail call i32 @lduw_phys(i64 %468) nounwind
  %470 = shl i32 %469, 8
  %471 = and i32 %470, 65280
  %472 = shl i32 %469, 12
  %473 = and i32 %472, 15728640
  %474 = or i32 %471, %473
  %475 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 1, i32 0
  store i32 %462, i32* %475, align 4
  %476 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 1, i32 1
  store i32 %465, i32* %476, align 4
  %477 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 1, i32 2
  store i32 %467, i32* %477, align 4
  %478 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 1, i32 3
  store i32 %474, i32* %478, align 4
  %479 = lshr exact i32 %473, 18
  %480 = and i32 %479, 16
  %481 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 7
  %482 = load i32* %481, align 4
  %483 = and i32 %482, -32785
  %484 = or i32 %480, %483
  store i32 %484, i32* %481, align 4
  %485 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 2, i32 3
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 17
  %488 = and i32 %487, 32
  %489 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 14, i64 0
  %490 = load i32* %489, align 4
  %491 = and i32 %490, 1
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %499, label %493

; <label>:493                                     ; preds = %svm_load_seg_cache.exit
  %494 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 2
  %495 = load i32* %494, align 4
  %496 = and i32 %495, 131072
  %497 = icmp ne i32 %496, 0
  %498 = icmp eq i32 %480, 0
  %or.cond = or i1 %497, %498
  br i1 %or.cond, label %499, label %501

; <label>:499                                     ; preds = %493, %svm_load_seg_cache.exit
  %500 = or i32 %488, 64
  br label %svm_load_seg_cache.exit14

; <label>:501                                     ; preds = %493
  %502 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 3, i32 1
  %503 = load i32* %502, align 4
  %504 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 0, i32 1
  %505 = load i32* %504, align 4
  %506 = or i32 %505, %503
  %507 = getelementptr inbounds %struct.CPUX86State* %458, i64 0, i32 9, i64 2, i32 1
  %508 = load i32* %507, align 4
  %509 = or i32 %506, %508
  %510 = icmp ne i32 %509, 0
  %511 = zext i1 %510 to i32
  %512 = shl nuw nsw i32 %511, 6
  %513 = or i32 %512, %488
  br label %svm_load_seg_cache.exit14

svm_load_seg_cache.exit14:                        ; preds = %501, %499
  %new_hflags.0.i.i13 = phi i32 [ %500, %499 ], [ %513, %501 ]
  %514 = and i32 %484, -32865
  %515 = or i32 %new_hflags.0.i.i13, %514
  store i32 %515, i32* %481, align 4
  %516 = load %struct.CPUX86State** @env, align 8
  %517 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 40
  %518 = load i64* %517, align 8
  %519 = add i64 %518, 1056
  %520 = tail call i32 @lduw_phys(i64 %519) nounwind
  %521 = add i64 %518, 1064
  %522 = tail call i64 @ldq_phys(i64 %521) nounwind
  %523 = trunc i64 %522 to i32
  %524 = add i64 %518, 1060
  %525 = tail call i32 @ldl_phys(i64 %524) nounwind
  %526 = add i64 %518, 1058
  %527 = tail call i32 @lduw_phys(i64 %526) nounwind
  %528 = shl i32 %527, 8
  %529 = and i32 %528, 65280
  %530 = shl i32 %527, 12
  %531 = and i32 %530, 15728640
  %532 = or i32 %529, %531
  %533 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 9, i64 2, i32 0
  store i32 %520, i32* %533, align 4
  %534 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 9, i64 2, i32 1
  store i32 %523, i32* %534, align 4
  %535 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 9, i64 2, i32 2
  store i32 %525, i32* %535, align 4
  %536 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 9, i64 2, i32 3
  store i32 %532, i32* %536, align 4
  %.phi.trans.insert.i.i15 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 7
  %.pre.i.i16 = load i32* %.phi.trans.insert.i.i15, align 4
  %537 = lshr exact i32 %531, 17
  %538 = and i32 %537, 32
  %539 = and i32 %.pre.i.i16, 32768
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %svm_load_seg_cache.exit18

; <label>:541                                     ; preds = %svm_load_seg_cache.exit14
  %542 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 14, i64 0
  %543 = load i32* %542, align 4
  %544 = and i32 %543, 1
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %554, label %546

; <label>:546                                     ; preds = %541
  %547 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 131072
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %551, label %554

; <label>:551                                     ; preds = %546
  %552 = and i32 %.pre.i.i16, 16
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %554, label %556

; <label>:554                                     ; preds = %551, %546, %541
  %555 = or i32 %538, 64
  br label %svm_load_seg_cache.exit18

; <label>:556                                     ; preds = %551
  %557 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 9, i64 3, i32 1
  %558 = load i32* %557, align 4
  %559 = getelementptr inbounds %struct.CPUX86State* %516, i64 0, i32 9, i64 0, i32 1
  %560 = load i32* %559, align 4
  %561 = or i32 %560, %558
  %562 = or i32 %561, %523
  %563 = icmp ne i32 %562, 0
  %564 = zext i1 %563 to i32
  %565 = shl nuw nsw i32 %564, 6
  %566 = or i32 %565, %538
  br label %svm_load_seg_cache.exit18

svm_load_seg_cache.exit18:                        ; preds = %556, %554, %svm_load_seg_cache.exit14
  %new_hflags.0.i.i17 = phi i32 [ %538, %svm_load_seg_cache.exit14 ], [ %555, %554 ], [ %566, %556 ]
  %567 = and i32 %.pre.i.i16, -97
  %568 = or i32 %new_hflags.0.i.i17, %567
  store i32 %568, i32* %.phi.trans.insert.i.i15, align 4
  %569 = load %struct.CPUX86State** @env, align 8
  %570 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 40
  %571 = load i64* %570, align 8
  %572 = add i64 %571, 1072
  %573 = tail call i32 @lduw_phys(i64 %572) nounwind
  %574 = add i64 %571, 1080
  %575 = tail call i64 @ldq_phys(i64 %574) nounwind
  %576 = trunc i64 %575 to i32
  %577 = add i64 %571, 1076
  %578 = tail call i32 @ldl_phys(i64 %577) nounwind
  %579 = add i64 %571, 1074
  %580 = tail call i32 @lduw_phys(i64 %579) nounwind
  %581 = shl i32 %580, 8
  %582 = and i32 %581, 65280
  %583 = shl i32 %580, 12
  %584 = and i32 %583, 15728640
  %585 = or i32 %582, %584
  %586 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 3, i32 0
  store i32 %573, i32* %586, align 4
  %587 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 3, i32 1
  store i32 %576, i32* %587, align 4
  %588 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 3, i32 2
  store i32 %578, i32* %588, align 4
  %589 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 3, i32 3
  store i32 %585, i32* %589, align 4
  %.phi.trans.insert.i.i19 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 7
  %.pre.i.i20 = load i32* %.phi.trans.insert.i.i19, align 4
  %590 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 2, i32 3
  %591 = load i32* %590, align 4
  %592 = lshr i32 %591, 17
  %593 = and i32 %592, 32
  %594 = and i32 %.pre.i.i20, 32768
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %596, label %svm_load_seg_cache.exit22

; <label>:596                                     ; preds = %svm_load_seg_cache.exit18
  %597 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 14, i64 0
  %598 = load i32* %597, align 4
  %599 = and i32 %598, 1
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %609, label %601

; <label>:601                                     ; preds = %596
  %602 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 2
  %603 = load i32* %602, align 4
  %604 = and i32 %603, 131072
  %605 = icmp eq i32 %604, 0
  br i1 %605, label %606, label %609

; <label>:606                                     ; preds = %601
  %607 = and i32 %.pre.i.i20, 16
  %608 = icmp eq i32 %607, 0
  br i1 %608, label %609, label %611

; <label>:609                                     ; preds = %606, %601, %596
  %610 = or i32 %593, 64
  br label %svm_load_seg_cache.exit22

; <label>:611                                     ; preds = %606
  %612 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 0, i32 1
  %613 = load i32* %612, align 4
  %614 = or i32 %613, %576
  %615 = getelementptr inbounds %struct.CPUX86State* %569, i64 0, i32 9, i64 2, i32 1
  %616 = load i32* %615, align 4
  %617 = or i32 %614, %616
  %618 = icmp ne i32 %617, 0
  %619 = zext i1 %618 to i32
  %620 = shl nuw nsw i32 %619, 6
  %621 = or i32 %620, %593
  br label %svm_load_seg_cache.exit22

svm_load_seg_cache.exit22:                        ; preds = %611, %609, %svm_load_seg_cache.exit18
  %new_hflags.0.i.i21 = phi i32 [ %593, %svm_load_seg_cache.exit18 ], [ %610, %609 ], [ %621, %611 ]
  %622 = and i32 %.pre.i.i20, -97
  %623 = or i32 %new_hflags.0.i.i21, %622
  store i32 %623, i32* %.phi.trans.insert.i.i19, align 4
  %624 = load %struct.CPUX86State** @env, align 8
  %625 = getelementptr inbounds %struct.CPUX86State* %624, i64 0, i32 40
  %626 = load i64* %625, align 8
  %627 = add i64 %626, 1400
  %628 = tail call i64 @ldq_phys(i64 %627) nounwind
  %629 = trunc i64 %628 to i32
  %630 = load %struct.CPUX86State** @env, align 8
  %631 = getelementptr inbounds %struct.CPUX86State* %630, i64 0, i32 1
  store i32 %629, i32* %631, align 4
  %632 = load %struct.CPUX86State** @env, align 8
  %633 = getelementptr inbounds %struct.CPUX86State* %632, i64 0, i32 40
  %634 = load i64* %633, align 8
  %635 = add i64 %634, 1496
  %636 = tail call i64 @ldq_phys(i64 %635) nounwind
  %637 = trunc i64 %636 to i32
  %638 = load %struct.CPUX86State** @env, align 8
  %639 = getelementptr inbounds %struct.CPUX86State* %638, i64 0, i32 0, i64 4
  store i32 %637, i32* %639, align 4
  %640 = load %struct.CPUX86State** @env, align 8
  %641 = getelementptr inbounds %struct.CPUX86State* %640, i64 0, i32 40
  %642 = load i64* %641, align 8
  %643 = add i64 %642, 1528
  %644 = tail call i64 @ldq_phys(i64 %643) nounwind
  %645 = trunc i64 %644 to i32
  %646 = load %struct.CPUX86State** @env, align 8
  %647 = getelementptr inbounds %struct.CPUX86State* %646, i64 0, i32 0, i64 0
  store i32 %645, i32* %647, align 4
  %648 = load %struct.CPUX86State** @env, align 8
  %649 = getelementptr inbounds %struct.CPUX86State* %648, i64 0, i32 40
  %650 = load i64* %649, align 8
  %651 = add i64 %650, 1376
  %652 = tail call i64 @ldq_phys(i64 %651) nounwind
  %653 = trunc i64 %652 to i32
  %654 = load %struct.CPUX86State** @env, align 8
  %655 = getelementptr inbounds %struct.CPUX86State* %654, i64 0, i32 59, i64 7
  store i32 %653, i32* %655, align 4
  %656 = load %struct.CPUX86State** @env, align 8
  %657 = getelementptr inbounds %struct.CPUX86State* %656, i64 0, i32 40
  %658 = load i64* %657, align 8
  %659 = add i64 %658, 1384
  %660 = tail call i64 @ldq_phys(i64 %659) nounwind
  %661 = trunc i64 %660 to i32
  %662 = load %struct.CPUX86State** @env, align 8
  %663 = getelementptr inbounds %struct.CPUX86State* %662, i64 0, i32 59, i64 6
  store i32 %661, i32* %663, align 4
  %664 = load %struct.CPUX86State** @env, align 8
  %665 = getelementptr inbounds %struct.CPUX86State* %664, i64 0, i32 40
  %666 = load i64* %665, align 8
  %667 = add i64 %666, 1227
  %668 = tail call i32 @ldub_phys(i64 %667) nounwind
  %669 = getelementptr inbounds %struct.CPUX86State* %664, i64 0, i32 7
  %670 = load i32* %669, align 4
  %671 = and i32 %670, -4
  %672 = or i32 %671, %668
  store i32 %672, i32* %669, align 4
  %673 = load %struct.CPUX86State** @env, align 8
  %674 = getelementptr inbounds %struct.CPUX86State* %673, i64 0, i32 40
  %675 = load i64* %674, align 8
  %676 = add i64 %675, 92
  %677 = tail call i32 @ldub_phys(i64 %676) nounwind
  %cond = icmp eq i32 %677, 1
  br i1 %cond, label %678, label %680

; <label>:678                                     ; preds = %svm_load_seg_cache.exit22
  %679 = load %struct.CPUX86State** @env, align 8
  tail call void @tlb_flush(%struct.CPUX86State* %679, i32 1) nounwind
  br label %680

; <label>:680                                     ; preds = %678, %svm_load_seg_cache.exit22
  %681 = load %struct.CPUX86State** @env, align 8
  %682 = getelementptr inbounds %struct.CPUX86State* %681, i64 0, i32 8
  %683 = load i32* %682, align 4
  %684 = or i32 %683, 1
  store i32 %684, i32* %682, align 4
  %685 = and i32 %338, 256
  %686 = icmp eq i32 %685, 0
  br i1 %686, label %692, label %687

; <label>:687                                     ; preds = %680
  %688 = load %struct.CPUX86State** @env, align 8
  %689 = getelementptr inbounds %struct.CPUX86State* %688, i64 0, i32 69
  %690 = load i32* %689, align 4
  %691 = or i32 %690, 256
  store i32 %691, i32* %689, align 4
  br label %692

; <label>:692                                     ; preds = %687, %680
  %693 = load %struct.CPUX86State** @env, align 8
  %694 = getelementptr inbounds %struct.CPUX86State* %693, i64 0, i32 40
  %695 = load i64* %694, align 8
  %696 = add i64 %695, 168
  %697 = tail call i32 @ldl_phys(i64 %696) nounwind
  %698 = icmp slt i32 %697, 0
  br i1 %698, label %699, label %799

; <label>:699                                     ; preds = %692
  %700 = load %struct.CPUX86State** @env, align 8
  %701 = getelementptr inbounds %struct.CPUX86State* %700, i64 0, i32 40
  %702 = load i64* %701, align 8
  %703 = add i64 %702, 172
  %704 = tail call i32 @ldl_phys(i64 %703) nounwind
  %705 = load i32* @loglevel, align 4
  %706 = and i32 %705, 2
  %707 = icmp eq i32 %706, 0
  br i1 %707, label %712, label %708

; <label>:708                                     ; preds = %699
  %709 = and i32 %697, 2048
  %710 = load %struct._IO_FILE** @logfile, align 8
  %711 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %710, i8* getelementptr inbounds ([18 x i8]* @.str6, i64 0, i64 0), i32 %709) nounwind
  br label %712

; <label>:712                                     ; preds = %708, %699
  %713 = and i32 %697, 1792
  switch i32 %713, label %._crit_edge [
    i32 0, label %714
    i32 512, label %731
    i32 768, label %750
    i32 1024, label %768
  ]

; <label>:714                                     ; preds = %712
  %715 = and i32 %697, 255
  %716 = load %struct.CPUX86State** @env, align 8
  %717 = getelementptr inbounds %struct.CPUX86State* %716, i64 0, i32 86
  store i32 %715, i32* %717, align 4
  %718 = load %struct.CPUX86State** @env, align 8
  %719 = getelementptr inbounds %struct.CPUX86State* %718, i64 0, i32 56
  store i32 %704, i32* %719, align 4
  %720 = load %struct.CPUX86State** @env, align 8
  %721 = getelementptr inbounds %struct.CPUX86State* %720, i64 0, i32 57
  store i32 0, i32* %721, align 4
  %722 = load %struct.CPUX86State** @env, align 8
  %723 = getelementptr inbounds %struct.CPUX86State* %722, i64 0, i32 58
  store i32 -1, i32* %723, align 4
  %724 = load i32* @loglevel, align 4
  %725 = and i32 %724, 2
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %730, label %727

; <label>:727                                     ; preds = %714
  %728 = load %struct._IO_FILE** @logfile, align 8
  %729 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8]* @.str7, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %728)
  br label %730

; <label>:730                                     ; preds = %727, %714
  tail call fastcc void @do_interrupt_all(i32 %715, i32 0, i32 0, i32 0, i32 1)
  br label %._crit_edge

; <label>:731                                     ; preds = %712
  %732 = load %struct.CPUX86State** @env, align 8
  %733 = getelementptr inbounds %struct.CPUX86State* %732, i64 0, i32 86
  store i32 2, i32* %733, align 4
  %734 = load %struct.CPUX86State** @env, align 8
  %735 = getelementptr inbounds %struct.CPUX86State* %734, i64 0, i32 56
  store i32 %704, i32* %735, align 4
  %736 = load %struct.CPUX86State** @env, align 8
  %737 = getelementptr inbounds %struct.CPUX86State* %736, i64 0, i32 57
  store i32 0, i32* %737, align 4
  %738 = load %struct.CPUX86State** @env, align 8
  %739 = getelementptr inbounds %struct.CPUX86State* %738, i64 0, i32 1
  %740 = load i32* %739, align 4
  %741 = getelementptr inbounds %struct.CPUX86State* %738, i64 0, i32 58
  store i32 %740, i32* %741, align 4
  %742 = load i32* @loglevel, align 4
  %743 = and i32 %742, 2
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %748, label %745

; <label>:745                                     ; preds = %731
  %746 = load %struct._IO_FILE** @logfile, align 8
  %747 = tail call i64 @fwrite(i8* getelementptr inbounds ([4 x i8]* @.str8, i64 0, i64 0), i64 3, i64 1, %struct._IO_FILE* %746)
  br label %748

; <label>:748                                     ; preds = %745, %731
  %749 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_loop_exit(%struct.CPUX86State* %749) noreturn nounwind
  unreachable

; <label>:750                                     ; preds = %712
  %751 = and i32 %697, 255
  %752 = load %struct.CPUX86State** @env, align 8
  %753 = getelementptr inbounds %struct.CPUX86State* %752, i64 0, i32 86
  store i32 %751, i32* %753, align 4
  %754 = load %struct.CPUX86State** @env, align 8
  %755 = getelementptr inbounds %struct.CPUX86State* %754, i64 0, i32 56
  store i32 %704, i32* %755, align 4
  %756 = load %struct.CPUX86State** @env, align 8
  %757 = getelementptr inbounds %struct.CPUX86State* %756, i64 0, i32 57
  store i32 0, i32* %757, align 4
  %758 = load %struct.CPUX86State** @env, align 8
  %759 = getelementptr inbounds %struct.CPUX86State* %758, i64 0, i32 58
  store i32 -1, i32* %759, align 4
  %760 = load i32* @loglevel, align 4
  %761 = and i32 %760, 2
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %766, label %763

; <label>:763                                     ; preds = %750
  %764 = load %struct._IO_FILE** @logfile, align 8
  %765 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str9, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %764)
  br label %766

; <label>:766                                     ; preds = %763, %750
  %767 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_loop_exit(%struct.CPUX86State* %767) noreturn nounwind
  unreachable

; <label>:768                                     ; preds = %712
  %769 = and i32 %697, 255
  %770 = load %struct.CPUX86State** @env, align 8
  %771 = getelementptr inbounds %struct.CPUX86State* %770, i64 0, i32 86
  store i32 %769, i32* %771, align 4
  %772 = load %struct.CPUX86State** @env, align 8
  %773 = getelementptr inbounds %struct.CPUX86State* %772, i64 0, i32 56
  store i32 %704, i32* %773, align 4
  %774 = load %struct.CPUX86State** @env, align 8
  %775 = getelementptr inbounds %struct.CPUX86State* %774, i64 0, i32 57
  store i32 1, i32* %775, align 4
  %776 = load %struct.CPUX86State** @env, align 8
  %777 = getelementptr inbounds %struct.CPUX86State* %776, i64 0, i32 1
  %778 = load i32* %777, align 4
  %779 = getelementptr inbounds %struct.CPUX86State* %776, i64 0, i32 58
  store i32 %778, i32* %779, align 4
  %780 = load i32* @loglevel, align 4
  %781 = and i32 %780, 2
  %782 = icmp eq i32 %781, 0
  br i1 %782, label %786, label %783

; <label>:783                                     ; preds = %768
  %784 = load %struct._IO_FILE** @logfile, align 8
  %785 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8]* @.str10, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %784)
  br label %786

; <label>:786                                     ; preds = %783, %768
  %787 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_loop_exit(%struct.CPUX86State* %787) noreturn nounwind
  unreachable

._crit_edge:                                      ; preds = %730, %712
  %788 = load i32* @loglevel, align 4
  %789 = and i32 %788, 2
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %799, label %791

; <label>:791                                     ; preds = %._crit_edge
  %792 = load %struct._IO_FILE** @logfile, align 8
  %793 = load %struct.CPUX86State** @env, align 8
  %794 = getelementptr inbounds %struct.CPUX86State* %793, i64 0, i32 86
  %795 = load i32* %794, align 4
  %796 = getelementptr inbounds %struct.CPUX86State* %793, i64 0, i32 56
  %797 = load i32* %796, align 4
  %798 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %792, i8* getelementptr inbounds ([10 x i8]* @.str11, i64 0, i64 0), i32 %795, i32 %797) nounwind
  br label %799

; <label>:799                                     ; preds = %791, %._crit_edge, %692
  ret void
}

declare void @stq_phys(i64, i64)

declare i64 @ldq_phys(i64)

declare i32 @lduw_phys(i64)

declare i32 @ldub_phys(i64)

declare void @tlb_flush(%struct.CPUX86State*, i32)

define void @helper_vmmcall() noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 8589934592
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 129, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  tail call fastcc void @raise_exception(i32 6) noreturn
  unreachable
}

define void @helper_vmload(i32 %aflag) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 17179869184
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 130, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %12 = load i32* %11, align 4
  %13 = load i32* @loglevel, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %helper_svm_check_intercept_param.exit._crit_edge, label %16

helper_svm_check_intercept_param.exit._crit_edge: ; preds = %helper_svm_check_intercept_param.exit
  %.pre14 = zext i32 %12 to i64
  %.pre15 = add i64 %.pre14, 1096
  br label %25

; <label>:16                                      ; preds = %helper_svm_check_intercept_param.exit
  %17 = load %struct._IO_FILE** @logfile, align 8
  %18 = zext i32 %12 to i64
  %19 = add i64 %18, 1096
  %20 = tail call i64 @ldq_phys(i64 %19) nounwind
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 9, i64 4, i32 1
  %23 = load i32* %22, align 4
  %24 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([32 x i8]* @.str12, i64 0, i64 0), i32 %12, i64 %20, i32 %23) nounwind
  %.pre = load %struct.CPUX86State** @env, align 8
  br label %25

; <label>:25                                      ; preds = %16, %helper_svm_check_intercept_param.exit._crit_edge
  %.pre-phi16 = phi i64 [ %.pre15, %helper_svm_check_intercept_param.exit._crit_edge ], [ %19, %16 ]
  %.pre-phi = phi i64 [ %.pre14, %helper_svm_check_intercept_param.exit._crit_edge ], [ %18, %16 ]
  %26 = phi %struct.CPUX86State* [ %1, %helper_svm_check_intercept_param.exit._crit_edge ], [ %.pre, %16 ]
  %27 = add i64 %.pre-phi, 1088
  %28 = tail call i32 @lduw_phys(i64 %27) nounwind
  %29 = tail call i64 @ldq_phys(i64 %.pre-phi16) nounwind
  %30 = trunc i64 %29 to i32
  %31 = add i64 %.pre-phi, 1092
  %32 = tail call i32 @ldl_phys(i64 %31) nounwind
  %33 = add i64 %.pre-phi, 1090
  %34 = tail call i32 @lduw_phys(i64 %33) nounwind
  %35 = shl i32 %34, 8
  %36 = and i32 %35, 65280
  %37 = shl i32 %34, 12
  %38 = and i32 %37, 15728640
  %39 = or i32 %36, %38
  %40 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 0
  store i32 %28, i32* %40, align 4
  %41 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 1
  store i32 %30, i32* %41, align 4
  %42 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 2
  store i32 %32, i32* %42, align 4
  %43 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 3
  store i32 %39, i32* %43, align 4
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 7
  %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4
  %44 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 2, i32 3
  %45 = load i32* %44, align 4
  %46 = lshr i32 %45, 17
  %47 = and i32 %46, 32
  %48 = and i32 %.pre.i.i, 32768
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %svm_load_seg_cache.exit

; <label>:50                                      ; preds = %25
  %51 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 14, i64 0
  %52 = load i32* %51, align 4
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %63, label %55

; <label>:55                                      ; preds = %50
  %56 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 2
  %57 = load i32* %56, align 4
  %58 = and i32 %57, 131072
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %63

; <label>:60                                      ; preds = %55
  %61 = and i32 %.pre.i.i, 16
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

; <label>:63                                      ; preds = %60, %55, %50
  %64 = or i32 %47, 64
  br label %svm_load_seg_cache.exit

; <label>:65                                      ; preds = %60
  %66 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 3, i32 1
  %67 = load i32* %66, align 4
  %68 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 0, i32 1
  %69 = load i32* %68, align 4
  %70 = or i32 %69, %67
  %71 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 2, i32 1
  %72 = load i32* %71, align 4
  %73 = or i32 %70, %72
  %74 = icmp ne i32 %73, 0
  %75 = zext i1 %74 to i32
  %76 = shl nuw nsw i32 %75, 6
  %77 = or i32 %76, %47
  br label %svm_load_seg_cache.exit

svm_load_seg_cache.exit:                          ; preds = %65, %63, %25
  %new_hflags.0.i.i = phi i32 [ %47, %25 ], [ %64, %63 ], [ %77, %65 ]
  %78 = and i32 %.pre.i.i, -97
  %79 = or i32 %new_hflags.0.i.i, %78
  store i32 %79, i32* %.phi.trans.insert.i.i, align 4
  %80 = add i64 %.pre-phi, 1104
  %81 = load %struct.CPUX86State** @env, align 8
  %82 = tail call i32 @lduw_phys(i64 %80) nounwind
  %83 = add i64 %.pre-phi, 1112
  %84 = tail call i64 @ldq_phys(i64 %83) nounwind
  %85 = trunc i64 %84 to i32
  %86 = add i64 %.pre-phi, 1108
  %87 = tail call i32 @ldl_phys(i64 %86) nounwind
  %88 = add i64 %.pre-phi, 1106
  %89 = tail call i32 @lduw_phys(i64 %88) nounwind
  %90 = shl i32 %89, 8
  %91 = and i32 %90, 65280
  %92 = shl i32 %89, 12
  %93 = and i32 %92, 15728640
  %94 = or i32 %91, %93
  %95 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 5, i32 0
  store i32 %82, i32* %95, align 4
  %96 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 5, i32 1
  store i32 %85, i32* %96, align 4
  %97 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 5, i32 2
  store i32 %87, i32* %97, align 4
  %98 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 5, i32 3
  store i32 %94, i32* %98, align 4
  %.phi.trans.insert.i.i10 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 7
  %.pre.i.i11 = load i32* %.phi.trans.insert.i.i10, align 4
  %99 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 2, i32 3
  %100 = load i32* %99, align 4
  %101 = lshr i32 %100, 17
  %102 = and i32 %101, 32
  %103 = and i32 %.pre.i.i11, 32768
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %svm_load_seg_cache.exit13

; <label>:105                                     ; preds = %svm_load_seg_cache.exit
  %106 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 14, i64 0
  %107 = load i32* %106, align 4
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %118, label %110

; <label>:110                                     ; preds = %105
  %111 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 2
  %112 = load i32* %111, align 4
  %113 = and i32 %112, 131072
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %118

; <label>:115                                     ; preds = %110
  %116 = and i32 %.pre.i.i11, 16
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %120

; <label>:118                                     ; preds = %115, %110, %105
  %119 = or i32 %102, 64
  br label %svm_load_seg_cache.exit13

; <label>:120                                     ; preds = %115
  %121 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 3, i32 1
  %122 = load i32* %121, align 4
  %123 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 0, i32 1
  %124 = load i32* %123, align 4
  %125 = or i32 %124, %122
  %126 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 9, i64 2, i32 1
  %127 = load i32* %126, align 4
  %128 = or i32 %125, %127
  %129 = icmp ne i32 %128, 0
  %130 = zext i1 %129 to i32
  %131 = shl nuw nsw i32 %130, 6
  %132 = or i32 %131, %102
  br label %svm_load_seg_cache.exit13

svm_load_seg_cache.exit13:                        ; preds = %120, %118, %svm_load_seg_cache.exit
  %new_hflags.0.i.i12 = phi i32 [ %102, %svm_load_seg_cache.exit ], [ %119, %118 ], [ %132, %120 ]
  %133 = and i32 %.pre.i.i11, -97
  %134 = or i32 %new_hflags.0.i.i12, %133
  store i32 %134, i32* %.phi.trans.insert.i.i10, align 4
  %135 = add i64 %.pre-phi, 1168
  %136 = load %struct.CPUX86State** @env, align 8
  %137 = tail call i32 @lduw_phys(i64 %135) nounwind
  %138 = getelementptr inbounds %struct.CPUX86State* %136, i64 0, i32 11, i32 0
  store i32 %137, i32* %138, align 4
  %139 = add i64 %.pre-phi, 1176
  %140 = tail call i64 @ldq_phys(i64 %139) nounwind
  %141 = trunc i64 %140 to i32
  %142 = getelementptr inbounds %struct.CPUX86State* %136, i64 0, i32 11, i32 1
  store i32 %141, i32* %142, align 4
  %143 = add i64 %.pre-phi, 1172
  %144 = tail call i32 @ldl_phys(i64 %143) nounwind
  %145 = getelementptr inbounds %struct.CPUX86State* %136, i64 0, i32 11, i32 2
  store i32 %144, i32* %145, align 4
  %146 = add i64 %.pre-phi, 1170
  %147 = tail call i32 @lduw_phys(i64 %146) nounwind
  %148 = shl i32 %147, 8
  %149 = and i32 %148, 65280
  %150 = shl i32 %147, 12
  %151 = and i32 %150, 15728640
  %152 = or i32 %149, %151
  %153 = getelementptr inbounds %struct.CPUX86State* %136, i64 0, i32 11, i32 3
  store i32 %152, i32* %153, align 4
  %154 = add i64 %.pre-phi, 1136
  %155 = load %struct.CPUX86State** @env, align 8
  %156 = tail call i32 @lduw_phys(i64 %154) nounwind
  %157 = getelementptr inbounds %struct.CPUX86State* %155, i64 0, i32 10, i32 0
  store i32 %156, i32* %157, align 4
  %158 = add i64 %.pre-phi, 1144
  %159 = tail call i64 @ldq_phys(i64 %158) nounwind
  %160 = trunc i64 %159 to i32
  %161 = getelementptr inbounds %struct.CPUX86State* %155, i64 0, i32 10, i32 1
  store i32 %160, i32* %161, align 4
  %162 = add i64 %.pre-phi, 1140
  %163 = tail call i32 @ldl_phys(i64 %162) nounwind
  %164 = getelementptr inbounds %struct.CPUX86State* %155, i64 0, i32 10, i32 2
  store i32 %163, i32* %164, align 4
  %165 = add i64 %.pre-phi, 1138
  %166 = tail call i32 @lduw_phys(i64 %165) nounwind
  %167 = shl i32 %166, 8
  %168 = and i32 %167, 65280
  %169 = shl i32 %166, 12
  %170 = and i32 %169, 15728640
  %171 = or i32 %168, %170
  %172 = getelementptr inbounds %struct.CPUX86State* %155, i64 0, i32 10, i32 3
  store i32 %171, i32* %172, align 4
  %173 = add i64 %.pre-phi, 1536
  %174 = tail call i64 @ldq_phys(i64 %173) nounwind
  %175 = load %struct.CPUX86State** @env, align 8
  %176 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 38
  store i64 %174, i64* %176, align 8
  %177 = add i64 %.pre-phi, 1576
  %178 = tail call i64 @ldq_phys(i64 %177) nounwind
  %179 = trunc i64 %178 to i32
  %180 = load %struct.CPUX86State** @env, align 8
  %181 = getelementptr inbounds %struct.CPUX86State* %180, i64 0, i32 34
  store i32 %179, i32* %181, align 4
  %182 = add i64 %.pre-phi, 1584
  %183 = tail call i64 @ldq_phys(i64 %182) nounwind
  %184 = trunc i64 %183 to i32
  %185 = load %struct.CPUX86State** @env, align 8
  %186 = getelementptr inbounds %struct.CPUX86State* %185, i64 0, i32 35
  store i32 %184, i32* %186, align 4
  %187 = add i64 %.pre-phi, 1592
  %188 = tail call i64 @ldq_phys(i64 %187) nounwind
  %189 = trunc i64 %188 to i32
  %190 = load %struct.CPUX86State** @env, align 8
  %191 = getelementptr inbounds %struct.CPUX86State* %190, i64 0, i32 36
  store i32 %189, i32* %191, align 4
  ret void
}

define void @helper_vmsave(i32 %aflag) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 34359738368
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 131, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %12 = load i32* %11, align 4
  %13 = load i32* @loglevel, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %helper_svm_check_intercept_param.exit._crit_edge, label %16

helper_svm_check_intercept_param.exit._crit_edge: ; preds = %helper_svm_check_intercept_param.exit
  %.pre10 = zext i32 %12 to i64
  %.pre11 = add i64 %.pre10, 1096
  br label %25

; <label>:16                                      ; preds = %helper_svm_check_intercept_param.exit
  %17 = load %struct._IO_FILE** @logfile, align 8
  %18 = zext i32 %12 to i64
  %19 = add i64 %18, 1096
  %20 = tail call i64 @ldq_phys(i64 %19) nounwind
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 9, i64 4, i32 1
  %23 = load i32* %22, align 4
  %24 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([32 x i8]* @.str13, i64 0, i64 0), i32 %12, i64 %20, i32 %23) nounwind
  %.pre = load %struct.CPUX86State** @env, align 8
  br label %25

; <label>:25                                      ; preds = %16, %helper_svm_check_intercept_param.exit._crit_edge
  %.pre-phi12 = phi i64 [ %.pre11, %helper_svm_check_intercept_param.exit._crit_edge ], [ %19, %16 ]
  %.pre-phi = phi i64 [ %.pre10, %helper_svm_check_intercept_param.exit._crit_edge ], [ %18, %16 ]
  %26 = phi %struct.CPUX86State* [ %1, %helper_svm_check_intercept_param.exit._crit_edge ], [ %.pre, %16 ]
  %27 = add i64 %.pre-phi, 1088
  %28 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 0
  %29 = load i32* %28, align 4
  tail call void @stw_phys(i64 %27, i32 %29) nounwind
  %30 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 1
  %31 = load i32* %30, align 4
  %32 = zext i32 %31 to i64
  tail call void @stq_phys(i64 %.pre-phi12, i64 %32) nounwind
  %33 = add i64 %.pre-phi, 1092
  %34 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 2
  %35 = load i32* %34, align 4
  tail call void @stl_phys(i64 %33, i32 %35) nounwind
  %36 = add i64 %.pre-phi, 1090
  %37 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 9, i64 4, i32 3
  %38 = load i32* %37, align 4
  %39 = lshr i32 %38, 8
  %40 = and i32 %39, 255
  %41 = lshr i32 %38, 12
  %42 = and i32 %41, 3840
  %43 = or i32 %40, %42
  tail call void @stw_phys(i64 %36, i32 %43) nounwind
  %44 = add i64 %.pre-phi, 1104
  %45 = load %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 9, i64 5, i32 0
  %47 = load i32* %46, align 4
  tail call void @stw_phys(i64 %44, i32 %47) nounwind
  %48 = add i64 %.pre-phi, 1112
  %49 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 9, i64 5, i32 1
  %50 = load i32* %49, align 4
  %51 = zext i32 %50 to i64
  tail call void @stq_phys(i64 %48, i64 %51) nounwind
  %52 = add i64 %.pre-phi, 1108
  %53 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 9, i64 5, i32 2
  %54 = load i32* %53, align 4
  tail call void @stl_phys(i64 %52, i32 %54) nounwind
  %55 = add i64 %.pre-phi, 1106
  %56 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 9, i64 5, i32 3
  %57 = load i32* %56, align 4
  %58 = lshr i32 %57, 8
  %59 = and i32 %58, 255
  %60 = lshr i32 %57, 12
  %61 = and i32 %60, 3840
  %62 = or i32 %59, %61
  tail call void @stw_phys(i64 %55, i32 %62) nounwind
  %63 = add i64 %.pre-phi, 1168
  %64 = load %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State* %64, i64 0, i32 11, i32 0
  %66 = load i32* %65, align 4
  tail call void @stw_phys(i64 %63, i32 %66) nounwind
  %67 = add i64 %.pre-phi, 1176
  %68 = getelementptr inbounds %struct.CPUX86State* %64, i64 0, i32 11, i32 1
  %69 = load i32* %68, align 4
  %70 = zext i32 %69 to i64
  tail call void @stq_phys(i64 %67, i64 %70) nounwind
  %71 = add i64 %.pre-phi, 1172
  %72 = getelementptr inbounds %struct.CPUX86State* %64, i64 0, i32 11, i32 2
  %73 = load i32* %72, align 4
  tail call void @stl_phys(i64 %71, i32 %73) nounwind
  %74 = add i64 %.pre-phi, 1170
  %75 = getelementptr inbounds %struct.CPUX86State* %64, i64 0, i32 11, i32 3
  %76 = load i32* %75, align 4
  %77 = lshr i32 %76, 8
  %78 = and i32 %77, 255
  %79 = lshr i32 %76, 12
  %80 = and i32 %79, 3840
  %81 = or i32 %78, %80
  tail call void @stw_phys(i64 %74, i32 %81) nounwind
  %82 = add i64 %.pre-phi, 1136
  %83 = load %struct.CPUX86State** @env, align 8
  %84 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 10, i32 0
  %85 = load i32* %84, align 4
  tail call void @stw_phys(i64 %82, i32 %85) nounwind
  %86 = add i64 %.pre-phi, 1144
  %87 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 10, i32 1
  %88 = load i32* %87, align 4
  %89 = zext i32 %88 to i64
  tail call void @stq_phys(i64 %86, i64 %89) nounwind
  %90 = add i64 %.pre-phi, 1140
  %91 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 10, i32 2
  %92 = load i32* %91, align 4
  tail call void @stl_phys(i64 %90, i32 %92) nounwind
  %93 = add i64 %.pre-phi, 1138
  %94 = getelementptr inbounds %struct.CPUX86State* %83, i64 0, i32 10, i32 3
  %95 = load i32* %94, align 4
  %96 = lshr i32 %95, 8
  %97 = and i32 %96, 255
  %98 = lshr i32 %95, 12
  %99 = and i32 %98, 3840
  %100 = or i32 %97, %99
  tail call void @stw_phys(i64 %93, i32 %100) nounwind
  %101 = add i64 %.pre-phi, 1536
  %102 = load %struct.CPUX86State** @env, align 8
  %103 = getelementptr inbounds %struct.CPUX86State* %102, i64 0, i32 38
  %104 = load i64* %103, align 8
  tail call void @stq_phys(i64 %101, i64 %104) nounwind
  %105 = add i64 %.pre-phi, 1576
  %106 = load %struct.CPUX86State** @env, align 8
  %107 = getelementptr inbounds %struct.CPUX86State* %106, i64 0, i32 34
  %108 = load i32* %107, align 4
  %109 = zext i32 %108 to i64
  tail call void @stq_phys(i64 %105, i64 %109) nounwind
  %110 = add i64 %.pre-phi, 1584
  %111 = load %struct.CPUX86State** @env, align 8
  %112 = getelementptr inbounds %struct.CPUX86State* %111, i64 0, i32 35
  %113 = load i32* %112, align 4
  %114 = zext i32 %113 to i64
  tail call void @stq_phys(i64 %110, i64 %114) nounwind
  %115 = add i64 %.pre-phi, 1592
  %116 = load %struct.CPUX86State** @env, align 8
  %117 = getelementptr inbounds %struct.CPUX86State* %116, i64 0, i32 36
  %118 = load i32* %117, align 4
  %119 = zext i32 %118 to i64
  tail call void @stq_phys(i64 %115, i64 %119) nounwind
  ret void
}

define void @helper_stgi() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 68719476736
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 132, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 8
  %12 = load i32* %11, align 4
  %13 = or i32 %12, 1
  store i32 %13, i32* %11, align 4
  ret void
}

define void @helper_clgi() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 137438953472
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 133, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 8
  %12 = load i32* %11, align 4
  %13 = and i32 %12, -2
  store i32 %13, i32* %11, align 4
  ret void
}

define void @helper_skinit() noreturn nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 274877906944
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 134, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  tail call fastcc void @raise_exception(i32 6) noreturn
  unreachable
}

define void @helper_invlpga(i32 %aflag) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i32* %2, align 4
  %.lobit.i = and i32 %3, 2097152
  %4 = icmp eq i32 %.lobit.i, 0
  br i1 %4, label %helper_svm_check_intercept_param.exit, label %5, !prof !0

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %7 = load i64* %6, align 8
  %8 = and i64 %7, 67108864
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %helper_svm_check_intercept_param.exit, label %10

; <label>:10                                      ; preds = %5
  tail call void @helper_vmexit(i32 122, i64 0) nounwind
  unreachable

helper_svm_check_intercept_param.exit:            ; preds = %5, %0
  %11 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %12 = load i32* %11, align 4
  tail call void @tlb_flush_page(%struct.CPUX86State* %1, i32 %12) nounwind
  ret void
}

define void @helper_vmexit(i32 %exit_code, i64 %exit_info_1) noreturn nounwind uwtable {
  %1 = load i32* @loglevel, align 4
  %2 = and i32 %1, 2
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %15, label %4

; <label>:4                                       ; preds = %0
  %5 = load %struct._IO_FILE** @logfile, align 8
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 40
  %8 = load i64* %7, align 8
  %9 = add i64 %8, 128
  %10 = tail call i64 @ldq_phys(i64 %9) nounwind
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 1
  %13 = load i32* %12, align 4
  %14 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([37 x i8]* @.str14, i64 0, i64 0), i32 %exit_code, i64 %exit_info_1, i64 %10, i32 %13) nounwind
  br label %15

; <label>:15                                      ; preds = %4, %0
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 7
  %18 = load i32* %17, align 4
  %19 = and i32 %18, 8
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 40
  %22 = load i64* %21, align 8
  %23 = add i64 %22, 104
  br i1 %20, label %29, label %24

; <label>:24                                      ; preds = %15
  tail call void @stl_phys(i64 %23, i32 1) nounwind
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 7
  %27 = load i32* %26, align 4
  %28 = and i32 %27, -9
  store i32 %28, i32* %26, align 4
  br label %30

; <label>:29                                      ; preds = %15
  tail call void @stl_phys(i64 %23, i32 0) nounwind
  br label %30

; <label>:30                                      ; preds = %29, %24
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 40
  %33 = load i64* %32, align 8
  %34 = add i64 %33, 1024
  %35 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 9, i64 0, i32 0
  %36 = load i32* %35, align 4
  tail call void @stw_phys(i64 %34, i32 %36) nounwind
  %37 = add i64 %33, 1032
  %38 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 9, i64 0, i32 1
  %39 = load i32* %38, align 4
  %40 = zext i32 %39 to i64
  tail call void @stq_phys(i64 %37, i64 %40) nounwind
  %41 = add i64 %33, 1028
  %42 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 9, i64 0, i32 2
  %43 = load i32* %42, align 4
  tail call void @stl_phys(i64 %41, i32 %43) nounwind
  %44 = add i64 %33, 1026
  %45 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 9, i64 0, i32 3
  %46 = load i32* %45, align 4
  %47 = lshr i32 %46, 8
  %48 = and i32 %47, 255
  %49 = lshr i32 %46, 12
  %50 = and i32 %49, 3840
  %51 = or i32 %48, %50
  tail call void @stw_phys(i64 %44, i32 %51) nounwind
  %52 = load %struct.CPUX86State** @env, align 8
  %53 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 40
  %54 = load i64* %53, align 8
  %55 = add i64 %54, 1040
  %56 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 9, i64 1, i32 0
  %57 = load i32* %56, align 4
  tail call void @stw_phys(i64 %55, i32 %57) nounwind
  %58 = add i64 %54, 1048
  %59 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 9, i64 1, i32 1
  %60 = load i32* %59, align 4
  %61 = zext i32 %60 to i64
  tail call void @stq_phys(i64 %58, i64 %61) nounwind
  %62 = add i64 %54, 1044
  %63 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 9, i64 1, i32 2
  %64 = load i32* %63, align 4
  tail call void @stl_phys(i64 %62, i32 %64) nounwind
  %65 = add i64 %54, 1042
  %66 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 9, i64 1, i32 3
  %67 = load i32* %66, align 4
  %68 = lshr i32 %67, 8
  %69 = and i32 %68, 255
  %70 = lshr i32 %67, 12
  %71 = and i32 %70, 3840
  %72 = or i32 %69, %71
  tail call void @stw_phys(i64 %65, i32 %72) nounwind
  %73 = load %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 40
  %75 = load i64* %74, align 8
  %76 = add i64 %75, 1056
  %77 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 9, i64 2, i32 0
  %78 = load i32* %77, align 4
  tail call void @stw_phys(i64 %76, i32 %78) nounwind
  %79 = add i64 %75, 1064
  %80 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 9, i64 2, i32 1
  %81 = load i32* %80, align 4
  %82 = zext i32 %81 to i64
  tail call void @stq_phys(i64 %79, i64 %82) nounwind
  %83 = add i64 %75, 1060
  %84 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 9, i64 2, i32 2
  %85 = load i32* %84, align 4
  tail call void @stl_phys(i64 %83, i32 %85) nounwind
  %86 = add i64 %75, 1058
  %87 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 9, i64 2, i32 3
  %88 = load i32* %87, align 4
  %89 = lshr i32 %88, 8
  %90 = and i32 %89, 255
  %91 = lshr i32 %88, 12
  %92 = and i32 %91, 3840
  %93 = or i32 %90, %92
  tail call void @stw_phys(i64 %86, i32 %93) nounwind
  %94 = load %struct.CPUX86State** @env, align 8
  %95 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 40
  %96 = load i64* %95, align 8
  %97 = add i64 %96, 1072
  %98 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 9, i64 3, i32 0
  %99 = load i32* %98, align 4
  tail call void @stw_phys(i64 %97, i32 %99) nounwind
  %100 = add i64 %96, 1080
  %101 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 9, i64 3, i32 1
  %102 = load i32* %101, align 4
  %103 = zext i32 %102 to i64
  tail call void @stq_phys(i64 %100, i64 %103) nounwind
  %104 = add i64 %96, 1076
  %105 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 9, i64 3, i32 2
  %106 = load i32* %105, align 4
  tail call void @stl_phys(i64 %104, i32 %106) nounwind
  %107 = add i64 %96, 1074
  %108 = getelementptr inbounds %struct.CPUX86State* %94, i64 0, i32 9, i64 3, i32 3
  %109 = load i32* %108, align 4
  %110 = lshr i32 %109, 8
  %111 = and i32 %110, 255
  %112 = lshr i32 %109, 12
  %113 = and i32 %112, 3840
  %114 = or i32 %111, %113
  tail call void @stw_phys(i64 %107, i32 %114) nounwind
  %115 = load %struct.CPUX86State** @env, align 8
  %116 = getelementptr inbounds %struct.CPUX86State* %115, i64 0, i32 40
  %117 = load i64* %116, align 8
  %118 = add i64 %117, 1128
  %119 = getelementptr inbounds %struct.CPUX86State* %115, i64 0, i32 12, i32 1
  %120 = load i32* %119, align 4
  %121 = zext i32 %120 to i64
  tail call void @stq_phys(i64 %118, i64 %121) nounwind
  %122 = load %struct.CPUX86State** @env, align 8
  %123 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 40
  %124 = load i64* %123, align 8
  %125 = add i64 %124, 1124
  %126 = getelementptr inbounds %struct.CPUX86State* %122, i64 0, i32 12, i32 2
  %127 = load i32* %126, align 4
  tail call void @stl_phys(i64 %125, i32 %127) nounwind
  %128 = load %struct.CPUX86State** @env, align 8
  %129 = getelementptr inbounds %struct.CPUX86State* %128, i64 0, i32 40
  %130 = load i64* %129, align 8
  %131 = add i64 %130, 1160
  %132 = getelementptr inbounds %struct.CPUX86State* %128, i64 0, i32 13, i32 1
  %133 = load i32* %132, align 4
  %134 = zext i32 %133 to i64
  tail call void @stq_phys(i64 %131, i64 %134) nounwind
  %135 = load %struct.CPUX86State** @env, align 8
  %136 = getelementptr inbounds %struct.CPUX86State* %135, i64 0, i32 40
  %137 = load i64* %136, align 8
  %138 = add i64 %137, 1156
  %139 = getelementptr inbounds %struct.CPUX86State* %135, i64 0, i32 13, i32 2
  %140 = load i32* %139, align 4
  tail call void @stl_phys(i64 %138, i32 %140) nounwind
  %141 = load %struct.CPUX86State** @env, align 8
  %142 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 40
  %143 = load i64* %142, align 8
  %144 = add i64 %143, 1232
  %145 = getelementptr inbounds %struct.CPUX86State* %141, i64 0, i32 37
  %146 = load i64* %145, align 8
  tail call void @stq_phys(i64 %144, i64 %146) nounwind
  %147 = load %struct.CPUX86State** @env, align 8
  %148 = getelementptr inbounds %struct.CPUX86State* %147, i64 0, i32 40
  %149 = load i64* %148, align 8
  %150 = add i64 %149, 1368
  %151 = getelementptr inbounds %struct.CPUX86State* %147, i64 0, i32 14, i64 0
  %152 = load i32* %151, align 4
  %153 = zext i32 %152 to i64
  tail call void @stq_phys(i64 %150, i64 %153) nounwind
  %154 = load %struct.CPUX86State** @env, align 8
  %155 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 40
  %156 = load i64* %155, align 8
  %157 = add i64 %156, 1600
  %158 = getelementptr inbounds %struct.CPUX86State* %154, i64 0, i32 14, i64 2
  %159 = load i32* %158, align 4
  %160 = zext i32 %159 to i64
  tail call void @stq_phys(i64 %157, i64 %160) nounwind
  %161 = load %struct.CPUX86State** @env, align 8
  %162 = getelementptr inbounds %struct.CPUX86State* %161, i64 0, i32 40
  %163 = load i64* %162, align 8
  %164 = add i64 %163, 1360
  %165 = getelementptr inbounds %struct.CPUX86State* %161, i64 0, i32 14, i64 3
  %166 = load i32* %165, align 4
  %167 = zext i32 %166 to i64
  tail call void @stq_phys(i64 %164, i64 %167) nounwind
  %168 = load %struct.CPUX86State** @env, align 8
  %169 = getelementptr inbounds %struct.CPUX86State* %168, i64 0, i32 40
  %170 = load i64* %169, align 8
  %171 = add i64 %170, 1352
  %172 = getelementptr inbounds %struct.CPUX86State* %168, i64 0, i32 14, i64 4
  %173 = load i32* %172, align 4
  %174 = zext i32 %173 to i64
  tail call void @stq_phys(i64 %171, i64 %174) nounwind
  %175 = load %struct.CPUX86State** @env, align 8
  %176 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 40
  %177 = load i64* %176, align 8
  %178 = add i64 %177, 96
  %179 = tail call i32 @ldl_phys(i64 %178) nounwind
  %180 = and i32 %179, -272
  %181 = load %struct.CPUX86State** @env, align 8
  %182 = getelementptr inbounds %struct.CPUX86State* %181, i64 0, i32 48
  %183 = load i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = and i32 %184, 15
  %186 = or i32 %185, %180
  %187 = getelementptr inbounds %struct.CPUX86State* %181, i64 0, i32 69
  %188 = load i32* %187, align 4
  %189 = and i32 %188, 256
  %190 = icmp eq i32 %189, 0
  %191 = or i32 %186, 256
  %int_ctl.0 = select i1 %190, i32 %186, i32 %191
  %192 = getelementptr inbounds %struct.CPUX86State* %181, i64 0, i32 40
  %193 = load i64* %192, align 8
  %194 = add i64 %193, 96
  tail call void @stl_phys(i64 %194, i32 %int_ctl.0) nounwind
  %195 = load %struct.CPUX86State** @env, align 8
  %196 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 40
  %197 = load i64* %196, align 8
  %198 = add i64 %197, 1392
  %199 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 2
  %200 = load i32* %199, align 4
  %201 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 5
  %202 = load i32* %201, align 4
  %203 = tail call i32 @helper_cc_compute_all(i32 %202) nounwind
  %204 = or i32 %203, %200
  %205 = getelementptr inbounds %struct.CPUX86State* %195, i64 0, i32 6
  %206 = load i32* %205, align 4
  %207 = and i32 %206, 1024
  %208 = or i32 %204, %207
  %209 = zext i32 %208 to i64
  tail call void @stq_phys(i64 %198, i64 %209) nounwind
  %210 = load %struct.CPUX86State** @env, align 8
  %211 = getelementptr inbounds %struct.CPUX86State* %210, i64 0, i32 40
  %212 = load i64* %211, align 8
  %213 = add i64 %212, 1400
  %214 = getelementptr inbounds %struct.CPUX86State* %210, i64 0, i32 1
  %215 = load i32* %214, align 4
  %216 = zext i32 %215 to i64
  tail call void @stq_phys(i64 %213, i64 %216) nounwind
  %217 = load %struct.CPUX86State** @env, align 8
  %218 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 40
  %219 = load i64* %218, align 8
  %220 = add i64 %219, 1496
  %221 = getelementptr inbounds %struct.CPUX86State* %217, i64 0, i32 0, i64 4
  %222 = load i32* %221, align 4
  %223 = zext i32 %222 to i64
  tail call void @stq_phys(i64 %220, i64 %223) nounwind
  %224 = load %struct.CPUX86State** @env, align 8
  %225 = getelementptr inbounds %struct.CPUX86State* %224, i64 0, i32 40
  %226 = load i64* %225, align 8
  %227 = add i64 %226, 1528
  %228 = getelementptr inbounds %struct.CPUX86State* %224, i64 0, i32 0, i64 0
  %229 = load i32* %228, align 4
  %230 = zext i32 %229 to i64
  tail call void @stq_phys(i64 %227, i64 %230) nounwind
  %231 = load %struct.CPUX86State** @env, align 8
  %232 = getelementptr inbounds %struct.CPUX86State* %231, i64 0, i32 40
  %233 = load i64* %232, align 8
  %234 = add i64 %233, 1376
  %235 = getelementptr inbounds %struct.CPUX86State* %231, i64 0, i32 59, i64 7
  %236 = load i32* %235, align 4
  %237 = zext i32 %236 to i64
  tail call void @stq_phys(i64 %234, i64 %237) nounwind
  %238 = load %struct.CPUX86State** @env, align 8
  %239 = getelementptr inbounds %struct.CPUX86State* %238, i64 0, i32 40
  %240 = load i64* %239, align 8
  %241 = add i64 %240, 1384
  %242 = getelementptr inbounds %struct.CPUX86State* %238, i64 0, i32 59, i64 6
  %243 = load i32* %242, align 4
  %244 = zext i32 %243 to i64
  tail call void @stq_phys(i64 %241, i64 %244) nounwind
  %245 = load %struct.CPUX86State** @env, align 8
  %246 = getelementptr inbounds %struct.CPUX86State* %245, i64 0, i32 40
  %247 = load i64* %246, align 8
  %248 = add i64 %247, 1227
  %249 = getelementptr inbounds %struct.CPUX86State* %245, i64 0, i32 7
  %250 = load i32* %249, align 4
  %251 = and i32 %250, 3
  tail call void @stb_phys(i64 %248, i32 %251) nounwind
  %252 = load %struct.CPUX86State** @env, align 8
  %253 = getelementptr inbounds %struct.CPUX86State* %252, i64 0, i32 8
  %254 = load i32* %253, align 4
  %255 = and i32 %254, -11
  store i32 %255, i32* %253, align 4
  %256 = load %struct.CPUX86State** @env, align 8
  %257 = getelementptr inbounds %struct.CPUX86State* %256, i64 0, i32 7
  %258 = load i32* %257, align 4
  %259 = and i32 %258, -2097153
  store i32 %259, i32* %257, align 4
  %260 = load %struct.CPUX86State** @env, align 8
  %261 = getelementptr inbounds %struct.CPUX86State* %260, i64 0, i32 42
  store i64 0, i64* %261, align 8
  %262 = load %struct.CPUX86State** @env, align 8
  %263 = getelementptr inbounds %struct.CPUX86State* %262, i64 0, i32 47
  store i32 0, i32* %263, align 4
  %264 = load %struct.CPUX86State** @env, align 8
  %265 = getelementptr inbounds %struct.CPUX86State* %264, i64 0, i32 69
  %266 = load i32* %265, align 4
  %267 = and i32 %266, -257
  store i32 %267, i32* %265, align 4
  %268 = load %struct.CPUX86State** @env, align 8
  %269 = getelementptr inbounds %struct.CPUX86State* %268, i64 0, i32 41
  store i64 0, i64* %269, align 8
  %270 = load %struct.CPUX86State** @env, align 8
  %271 = getelementptr inbounds %struct.CPUX86State* %270, i64 0, i32 39
  %272 = load i64* %271, align 8
  %273 = add i64 %272, 1128
  %274 = tail call i64 @ldq_phys(i64 %273) nounwind
  %275 = trunc i64 %274 to i32
  %276 = load %struct.CPUX86State** @env, align 8
  %277 = getelementptr inbounds %struct.CPUX86State* %276, i64 0, i32 12, i32 1
  store i32 %275, i32* %277, align 4
  %278 = load %struct.CPUX86State** @env, align 8
  %279 = getelementptr inbounds %struct.CPUX86State* %278, i64 0, i32 39
  %280 = load i64* %279, align 8
  %281 = add i64 %280, 1124
  %282 = tail call i32 @ldl_phys(i64 %281) nounwind
  %283 = load %struct.CPUX86State** @env, align 8
  %284 = getelementptr inbounds %struct.CPUX86State* %283, i64 0, i32 12, i32 2
  store i32 %282, i32* %284, align 4
  %285 = load %struct.CPUX86State** @env, align 8
  %286 = getelementptr inbounds %struct.CPUX86State* %285, i64 0, i32 39
  %287 = load i64* %286, align 8
  %288 = add i64 %287, 1160
  %289 = tail call i64 @ldq_phys(i64 %288) nounwind
  %290 = trunc i64 %289 to i32
  %291 = load %struct.CPUX86State** @env, align 8
  %292 = getelementptr inbounds %struct.CPUX86State* %291, i64 0, i32 13, i32 1
  store i32 %290, i32* %292, align 4
  %293 = load %struct.CPUX86State** @env, align 8
  %294 = getelementptr inbounds %struct.CPUX86State* %293, i64 0, i32 39
  %295 = load i64* %294, align 8
  %296 = add i64 %295, 1156
  %297 = tail call i32 @ldl_phys(i64 %296) nounwind
  %298 = load %struct.CPUX86State** @env, align 8
  %299 = getelementptr inbounds %struct.CPUX86State* %298, i64 0, i32 13, i32 2
  store i32 %297, i32* %299, align 4
  %300 = load %struct.CPUX86State** @env, align 8
  %301 = getelementptr inbounds %struct.CPUX86State* %300, i64 0, i32 39
  %302 = load i64* %301, align 8
  %303 = add i64 %302, 1368
  %304 = tail call i64 @ldq_phys(i64 %303) nounwind
  %305 = or i64 %304, 1
  %306 = trunc i64 %305 to i32
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %300, i32 %306) nounwind
  %307 = load %struct.CPUX86State** @env, align 8
  %308 = getelementptr inbounds %struct.CPUX86State* %307, i64 0, i32 39
  %309 = load i64* %308, align 8
  %310 = add i64 %309, 1352
  %311 = tail call i64 @ldq_phys(i64 %310) nounwind
  %312 = trunc i64 %311 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %307, i32 %312) nounwind
  %313 = load %struct.CPUX86State** @env, align 8
  %314 = getelementptr inbounds %struct.CPUX86State* %313, i64 0, i32 39
  %315 = load i64* %314, align 8
  %316 = add i64 %315, 1360
  %317 = tail call i64 @ldq_phys(i64 %316) nounwind
  %318 = trunc i64 %317 to i32
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %313, i32 %318) nounwind
  %319 = load %struct.CPUX86State** @env, align 8
  %320 = getelementptr inbounds %struct.CPUX86State* %319, i64 0, i32 39
  %321 = load i64* %320, align 8
  %322 = add i64 %321, 1232
  %323 = tail call i64 @ldq_phys(i64 %322) nounwind
  %324 = getelementptr inbounds %struct.CPUX86State* %319, i64 0, i32 37
  store i64 %323, i64* %324, align 8
  %325 = getelementptr inbounds %struct.CPUX86State* %319, i64 0, i32 7
  %326 = load i32* %325, align 4
  %327 = and i32 %326, -1064961
  %328 = and i64 %323, 1024
  %329 = icmp eq i64 %328, 0
  %330 = or i32 %327, 16384
  %storemerge.i = select i1 %329, i32 %327, i32 %330
  %331 = and i64 %323, 4096
  %332 = icmp eq i64 %331, 0
  %333 = or i32 %storemerge.i, 1048576
  %storemerge..i = select i1 %332, i32 %storemerge.i, i32 %333
  store i32 %storemerge..i, i32* %325, align 4
  %334 = load %struct.CPUX86State** @env, align 8
  %335 = getelementptr inbounds %struct.CPUX86State* %334, i64 0, i32 2
  store i32 0, i32* %335, align 4
  %336 = load %struct.CPUX86State** @env, align 8
  %337 = getelementptr inbounds %struct.CPUX86State* %336, i64 0, i32 39
  %338 = load i64* %337, align 8
  %339 = add i64 %338, 1392
  %340 = tail call i64 @ldq_phys(i64 %339) nounwind
  %341 = trunc i64 %340 to i32
  %342 = and i32 %341, 2261
  %343 = load %struct.CPUX86State** @env, align 8
  %344 = getelementptr inbounds %struct.CPUX86State* %343, i64 0, i32 3
  store i32 %342, i32* %344, align 4
  %345 = lshr i32 %341, 10
  %346 = shl nuw nsw i32 %345, 1
  %347 = and i32 %346, 2
  %348 = sub nsw i32 1, %347
  %349 = load %struct.CPUX86State** @env, align 8
  %350 = getelementptr inbounds %struct.CPUX86State* %349, i64 0, i32 6
  store i32 %348, i32* %350, align 4
  %351 = load %struct.CPUX86State** @env, align 8
  %352 = getelementptr inbounds %struct.CPUX86State* %351, i64 0, i32 2
  %353 = load i32* %352, align 4
  %354 = and i32 %353, 3285
  %355 = and i32 %341, -3288
  %356 = or i32 %355, %354
  %357 = or i32 %356, 2
  store i32 %357, i32* %352, align 4
  %358 = load %struct.CPUX86State** @env, align 8
  %359 = getelementptr inbounds %struct.CPUX86State* %358, i64 0, i32 5
  store i32 1, i32* %359, align 4
  %360 = load %struct.CPUX86State** @env, align 8
  %361 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 39
  %362 = load i64* %361, align 8
  %363 = add i64 %362, 1024
  %364 = tail call i32 @lduw_phys(i64 %363) nounwind
  %365 = add i64 %362, 1032
  %366 = tail call i64 @ldq_phys(i64 %365) nounwind
  %367 = trunc i64 %366 to i32
  %368 = add i64 %362, 1028
  %369 = tail call i32 @ldl_phys(i64 %368) nounwind
  %370 = add i64 %362, 1026
  %371 = tail call i32 @lduw_phys(i64 %370) nounwind
  %372 = shl i32 %371, 8
  %373 = and i32 %372, 65280
  %374 = shl i32 %371, 12
  %375 = and i32 %374, 15728640
  %376 = or i32 %373, %375
  %377 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 0, i32 0
  store i32 %364, i32* %377, align 4
  %378 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 0, i32 1
  store i32 %367, i32* %378, align 4
  %379 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 0, i32 2
  store i32 %369, i32* %379, align 4
  %380 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 0, i32 3
  store i32 %376, i32* %380, align 4
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 7
  %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4
  %381 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 2, i32 3
  %382 = load i32* %381, align 4
  %383 = lshr i32 %382, 17
  %384 = and i32 %383, 32
  %385 = and i32 %.pre.i.i, 32768
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %svm_load_seg_cache.exit

; <label>:387                                     ; preds = %30
  %388 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 14, i64 0
  %389 = load i32* %388, align 4
  %390 = and i32 %389, 1
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %400, label %392

; <label>:392                                     ; preds = %387
  %393 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 2
  %394 = load i32* %393, align 4
  %395 = and i32 %394, 131072
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %397, label %400

; <label>:397                                     ; preds = %392
  %398 = and i32 %.pre.i.i, 16
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %400, label %402

; <label>:400                                     ; preds = %397, %392, %387
  %401 = or i32 %384, 64
  br label %svm_load_seg_cache.exit

; <label>:402                                     ; preds = %397
  %403 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 3, i32 1
  %404 = load i32* %403, align 4
  %405 = or i32 %367, %404
  %406 = getelementptr inbounds %struct.CPUX86State* %360, i64 0, i32 9, i64 2, i32 1
  %407 = load i32* %406, align 4
  %408 = or i32 %405, %407
  %409 = icmp ne i32 %408, 0
  %410 = zext i1 %409 to i32
  %411 = shl nuw nsw i32 %410, 6
  %412 = or i32 %411, %384
  br label %svm_load_seg_cache.exit

svm_load_seg_cache.exit:                          ; preds = %402, %400, %30
  %new_hflags.0.i.i = phi i32 [ %384, %30 ], [ %401, %400 ], [ %412, %402 ]
  %413 = and i32 %.pre.i.i, -97
  %414 = or i32 %new_hflags.0.i.i, %413
  store i32 %414, i32* %.phi.trans.insert.i.i, align 4
  %415 = load %struct.CPUX86State** @env, align 8
  %416 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 39
  %417 = load i64* %416, align 8
  %418 = add i64 %417, 1040
  %419 = tail call i32 @lduw_phys(i64 %418) nounwind
  %420 = add i64 %417, 1048
  %421 = tail call i64 @ldq_phys(i64 %420) nounwind
  %422 = trunc i64 %421 to i32
  %423 = add i64 %417, 1044
  %424 = tail call i32 @ldl_phys(i64 %423) nounwind
  %425 = add i64 %417, 1042
  %426 = tail call i32 @lduw_phys(i64 %425) nounwind
  %427 = shl i32 %426, 8
  %428 = and i32 %427, 65280
  %429 = shl i32 %426, 12
  %430 = and i32 %429, 15728640
  %431 = or i32 %428, %430
  %432 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 1, i32 0
  store i32 %419, i32* %432, align 4
  %433 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 1, i32 1
  store i32 %422, i32* %433, align 4
  %434 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 1, i32 2
  store i32 %424, i32* %434, align 4
  %435 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 1, i32 3
  store i32 %431, i32* %435, align 4
  %436 = lshr exact i32 %430, 18
  %437 = and i32 %436, 16
  %438 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 7
  %439 = load i32* %438, align 4
  %440 = and i32 %439, -32785
  %441 = or i32 %437, %440
  store i32 %441, i32* %438, align 4
  %442 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 2, i32 3
  %443 = load i32* %442, align 4
  %444 = lshr i32 %443, 17
  %445 = and i32 %444, 32
  %446 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 14, i64 0
  %447 = load i32* %446, align 4
  %448 = and i32 %447, 1
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %456, label %450

; <label>:450                                     ; preds = %svm_load_seg_cache.exit
  %451 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 2
  %452 = load i32* %451, align 4
  %453 = and i32 %452, 131072
  %454 = icmp ne i32 %453, 0
  %455 = icmp eq i32 %437, 0
  %or.cond = or i1 %454, %455
  br i1 %or.cond, label %456, label %458

; <label>:456                                     ; preds = %450, %svm_load_seg_cache.exit
  %457 = or i32 %445, 64
  br label %svm_load_seg_cache.exit8

; <label>:458                                     ; preds = %450
  %459 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 3, i32 1
  %460 = load i32* %459, align 4
  %461 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 0, i32 1
  %462 = load i32* %461, align 4
  %463 = or i32 %462, %460
  %464 = getelementptr inbounds %struct.CPUX86State* %415, i64 0, i32 9, i64 2, i32 1
  %465 = load i32* %464, align 4
  %466 = or i32 %463, %465
  %467 = icmp ne i32 %466, 0
  %468 = zext i1 %467 to i32
  %469 = shl nuw nsw i32 %468, 6
  %470 = or i32 %469, %445
  br label %svm_load_seg_cache.exit8

svm_load_seg_cache.exit8:                         ; preds = %458, %456
  %new_hflags.0.i.i7 = phi i32 [ %457, %456 ], [ %470, %458 ]
  %471 = and i32 %441, -32865
  %472 = or i32 %new_hflags.0.i.i7, %471
  store i32 %472, i32* %438, align 4
  %473 = load %struct.CPUX86State** @env, align 8
  %474 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 39
  %475 = load i64* %474, align 8
  %476 = add i64 %475, 1056
  %477 = tail call i32 @lduw_phys(i64 %476) nounwind
  %478 = add i64 %475, 1064
  %479 = tail call i64 @ldq_phys(i64 %478) nounwind
  %480 = trunc i64 %479 to i32
  %481 = add i64 %475, 1060
  %482 = tail call i32 @ldl_phys(i64 %481) nounwind
  %483 = add i64 %475, 1058
  %484 = tail call i32 @lduw_phys(i64 %483) nounwind
  %485 = shl i32 %484, 8
  %486 = and i32 %485, 65280
  %487 = shl i32 %484, 12
  %488 = and i32 %487, 15728640
  %489 = or i32 %486, %488
  %490 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 9, i64 2, i32 0
  store i32 %477, i32* %490, align 4
  %491 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 9, i64 2, i32 1
  store i32 %480, i32* %491, align 4
  %492 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 9, i64 2, i32 2
  store i32 %482, i32* %492, align 4
  %493 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 9, i64 2, i32 3
  store i32 %489, i32* %493, align 4
  %.phi.trans.insert.i.i9 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 7
  %.pre.i.i10 = load i32* %.phi.trans.insert.i.i9, align 4
  %494 = lshr exact i32 %488, 17
  %495 = and i32 %494, 32
  %496 = and i32 %.pre.i.i10, 32768
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %498, label %svm_load_seg_cache.exit12

; <label>:498                                     ; preds = %svm_load_seg_cache.exit8
  %499 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 14, i64 0
  %500 = load i32* %499, align 4
  %501 = and i32 %500, 1
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %511, label %503

; <label>:503                                     ; preds = %498
  %504 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 2
  %505 = load i32* %504, align 4
  %506 = and i32 %505, 131072
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %508, label %511

; <label>:508                                     ; preds = %503
  %509 = and i32 %.pre.i.i10, 16
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %513

; <label>:511                                     ; preds = %508, %503, %498
  %512 = or i32 %495, 64
  br label %svm_load_seg_cache.exit12

; <label>:513                                     ; preds = %508
  %514 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 9, i64 3, i32 1
  %515 = load i32* %514, align 4
  %516 = getelementptr inbounds %struct.CPUX86State* %473, i64 0, i32 9, i64 0, i32 1
  %517 = load i32* %516, align 4
  %518 = or i32 %517, %515
  %519 = or i32 %518, %480
  %520 = icmp ne i32 %519, 0
  %521 = zext i1 %520 to i32
  %522 = shl nuw nsw i32 %521, 6
  %523 = or i32 %522, %495
  br label %svm_load_seg_cache.exit12

svm_load_seg_cache.exit12:                        ; preds = %513, %511, %svm_load_seg_cache.exit8
  %new_hflags.0.i.i11 = phi i32 [ %495, %svm_load_seg_cache.exit8 ], [ %512, %511 ], [ %523, %513 ]
  %524 = and i32 %.pre.i.i10, -97
  %525 = or i32 %new_hflags.0.i.i11, %524
  store i32 %525, i32* %.phi.trans.insert.i.i9, align 4
  %526 = load %struct.CPUX86State** @env, align 8
  %527 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 39
  %528 = load i64* %527, align 8
  %529 = add i64 %528, 1072
  %530 = tail call i32 @lduw_phys(i64 %529) nounwind
  %531 = add i64 %528, 1080
  %532 = tail call i64 @ldq_phys(i64 %531) nounwind
  %533 = trunc i64 %532 to i32
  %534 = add i64 %528, 1076
  %535 = tail call i32 @ldl_phys(i64 %534) nounwind
  %536 = add i64 %528, 1074
  %537 = tail call i32 @lduw_phys(i64 %536) nounwind
  %538 = shl i32 %537, 8
  %539 = and i32 %538, 65280
  %540 = shl i32 %537, 12
  %541 = and i32 %540, 15728640
  %542 = or i32 %539, %541
  %543 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 3, i32 0
  store i32 %530, i32* %543, align 4
  %544 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 3, i32 1
  store i32 %533, i32* %544, align 4
  %545 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 3, i32 2
  store i32 %535, i32* %545, align 4
  %546 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 3, i32 3
  store i32 %542, i32* %546, align 4
  %.phi.trans.insert.i.i13 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 7
  %.pre.i.i14 = load i32* %.phi.trans.insert.i.i13, align 4
  %547 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 2, i32 3
  %548 = load i32* %547, align 4
  %549 = lshr i32 %548, 17
  %550 = and i32 %549, 32
  %551 = and i32 %.pre.i.i14, 32768
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %553, label %svm_load_seg_cache.exit16

; <label>:553                                     ; preds = %svm_load_seg_cache.exit12
  %554 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 14, i64 0
  %555 = load i32* %554, align 4
  %556 = and i32 %555, 1
  %557 = icmp eq i32 %556, 0
  br i1 %557, label %566, label %558

; <label>:558                                     ; preds = %553
  %559 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 2
  %560 = load i32* %559, align 4
  %561 = and i32 %560, 131072
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %563, label %566

; <label>:563                                     ; preds = %558
  %564 = and i32 %.pre.i.i14, 16
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %566, label %568

; <label>:566                                     ; preds = %563, %558, %553
  %567 = or i32 %550, 64
  br label %svm_load_seg_cache.exit16

; <label>:568                                     ; preds = %563
  %569 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 0, i32 1
  %570 = load i32* %569, align 4
  %571 = or i32 %570, %533
  %572 = getelementptr inbounds %struct.CPUX86State* %526, i64 0, i32 9, i64 2, i32 1
  %573 = load i32* %572, align 4
  %574 = or i32 %571, %573
  %575 = icmp ne i32 %574, 0
  %576 = zext i1 %575 to i32
  %577 = shl nuw nsw i32 %576, 6
  %578 = or i32 %577, %550
  br label %svm_load_seg_cache.exit16

svm_load_seg_cache.exit16:                        ; preds = %568, %566, %svm_load_seg_cache.exit12
  %new_hflags.0.i.i15 = phi i32 [ %550, %svm_load_seg_cache.exit12 ], [ %567, %566 ], [ %578, %568 ]
  %579 = and i32 %.pre.i.i14, -97
  %580 = or i32 %new_hflags.0.i.i15, %579
  store i32 %580, i32* %.phi.trans.insert.i.i13, align 4
  %581 = load %struct.CPUX86State** @env, align 8
  %582 = getelementptr inbounds %struct.CPUX86State* %581, i64 0, i32 39
  %583 = load i64* %582, align 8
  %584 = add i64 %583, 1400
  %585 = tail call i64 @ldq_phys(i64 %584) nounwind
  %586 = trunc i64 %585 to i32
  %587 = load %struct.CPUX86State** @env, align 8
  %588 = getelementptr inbounds %struct.CPUX86State* %587, i64 0, i32 1
  store i32 %586, i32* %588, align 4
  %589 = load %struct.CPUX86State** @env, align 8
  %590 = getelementptr inbounds %struct.CPUX86State* %589, i64 0, i32 39
  %591 = load i64* %590, align 8
  %592 = add i64 %591, 1496
  %593 = tail call i64 @ldq_phys(i64 %592) nounwind
  %594 = trunc i64 %593 to i32
  %595 = load %struct.CPUX86State** @env, align 8
  %596 = getelementptr inbounds %struct.CPUX86State* %595, i64 0, i32 0, i64 4
  store i32 %594, i32* %596, align 4
  %597 = load %struct.CPUX86State** @env, align 8
  %598 = getelementptr inbounds %struct.CPUX86State* %597, i64 0, i32 39
  %599 = load i64* %598, align 8
  %600 = add i64 %599, 1528
  %601 = tail call i64 @ldq_phys(i64 %600) nounwind
  %602 = trunc i64 %601 to i32
  %603 = load %struct.CPUX86State** @env, align 8
  %604 = getelementptr inbounds %struct.CPUX86State* %603, i64 0, i32 0, i64 0
  store i32 %602, i32* %604, align 4
  %605 = load %struct.CPUX86State** @env, align 8
  %606 = getelementptr inbounds %struct.CPUX86State* %605, i64 0, i32 39
  %607 = load i64* %606, align 8
  %608 = add i64 %607, 1384
  %609 = tail call i64 @ldq_phys(i64 %608) nounwind
  %610 = trunc i64 %609 to i32
  %611 = load %struct.CPUX86State** @env, align 8
  %612 = getelementptr inbounds %struct.CPUX86State* %611, i64 0, i32 59, i64 6
  store i32 %610, i32* %612, align 4
  %613 = load %struct.CPUX86State** @env, align 8
  %614 = getelementptr inbounds %struct.CPUX86State* %613, i64 0, i32 39
  %615 = load i64* %614, align 8
  %616 = add i64 %615, 1376
  %617 = tail call i64 @ldq_phys(i64 %616) nounwind
  %618 = trunc i64 %617 to i32
  %619 = load %struct.CPUX86State** @env, align 8
  %620 = getelementptr inbounds %struct.CPUX86State* %619, i64 0, i32 59, i64 7
  store i32 %618, i32* %620, align 4
  %621 = load %struct.CPUX86State** @env, align 8
  %622 = getelementptr inbounds %struct.CPUX86State* %621, i64 0, i32 7
  %623 = load i32* %622, align 4
  %624 = and i32 %623, -4
  store i32 %624, i32* %622, align 4
  %625 = load %struct.CPUX86State** @env, align 8
  %626 = getelementptr inbounds %struct.CPUX86State* %625, i64 0, i32 40
  %627 = load i64* %626, align 8
  %628 = add i64 %627, 112
  %629 = zext i32 %exit_code to i64
  tail call void @stq_phys(i64 %628, i64 %629) nounwind
  %630 = load %struct.CPUX86State** @env, align 8
  %631 = getelementptr inbounds %struct.CPUX86State* %630, i64 0, i32 40
  %632 = load i64* %631, align 8
  %633 = add i64 %632, 120
  tail call void @stq_phys(i64 %633, i64 %exit_info_1) nounwind
  %634 = load %struct.CPUX86State** @env, align 8
  %635 = getelementptr inbounds %struct.CPUX86State* %634, i64 0, i32 40
  %636 = load i64* %635, align 8
  %637 = add i64 %636, 136
  %638 = add i64 %636, 168
  %639 = tail call i32 @ldl_phys(i64 %638) nounwind
  tail call void @stl_phys(i64 %637, i32 %639) nounwind
  %640 = load %struct.CPUX86State** @env, align 8
  %641 = getelementptr inbounds %struct.CPUX86State* %640, i64 0, i32 40
  %642 = load i64* %641, align 8
  %643 = add i64 %642, 140
  %644 = add i64 %642, 172
  %645 = tail call i32 @ldl_phys(i64 %644) nounwind
  tail call void @stl_phys(i64 %643, i32 %645) nounwind
  %646 = load %struct.CPUX86State** @env, align 8
  %647 = getelementptr inbounds %struct.CPUX86State* %646, i64 0, i32 40
  %648 = load i64* %647, align 8
  %649 = add i64 %648, 168
  tail call void @stl_phys(i64 %649, i32 0) nounwind
  %650 = load %struct.CPUX86State** @env, align 8
  %651 = getelementptr inbounds %struct.CPUX86State* %650, i64 0, i32 8
  %652 = load i32* %651, align 4
  %653 = and i32 %652, -2
  store i32 %653, i32* %651, align 4
  %654 = load %struct.CPUX86State** @env, align 8
  %655 = getelementptr inbounds %struct.CPUX86State* %654, i64 0, i32 14, i64 0
  %656 = load i32* %655, align 4
  %657 = or i32 %656, 1
  store i32 %657, i32* %655, align 4
  %658 = load %struct.CPUX86State** @env, align 8
  %659 = getelementptr inbounds %struct.CPUX86State* %658, i64 0, i32 2
  %660 = load i32* %659, align 4
  %661 = and i32 %660, -131073
  store i32 %661, i32* %659, align 4
  %662 = load %struct.CPUX86State** @env, align 8
  %663 = getelementptr inbounds %struct.CPUX86State* %662, i64 0, i32 86
  store i32 -1, i32* %663, align 4
  %664 = load %struct.CPUX86State** @env, align 8
  %665 = getelementptr inbounds %struct.CPUX86State* %664, i64 0, i32 56
  store i32 0, i32* %665, align 4
  %666 = load %struct.CPUX86State** @env, align 8
  %667 = getelementptr inbounds %struct.CPUX86State* %666, i64 0, i32 62
  store i32 -1, i32* %667, align 4
  %668 = load %struct.CPUX86State** @env, align 8
  tail call void @cpu_loop_exit(%struct.CPUX86State* %668) noreturn nounwind
  unreachable
}

define void @svm_check_intercept(%struct.CPUX86State* %env1, i32 %type) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %env1, %struct.CPUX86State** @env, align 8
  tail call void @helper_svm_check_intercept_param(i32 %type, i64 0)
  store %struct.CPUX86State* %1, %struct.CPUX86State** @env, align 8
  ret void
}

define void @helper_svm_check_io(i32 %port, i32 %param, i32 %next_eip_addend) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 42
  %3 = load i64* %2, align 8
  %4 = and i64 %3, 134217728
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %36, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 40
  %8 = load i64* %7, align 8
  %9 = add i64 %8, 64
  %10 = tail call i64 @ldq_phys(i64 %9) nounwind
  %11 = lshr i32 %param, 4
  %12 = and i32 %11, 7
  %13 = shl i32 1, %12
  %14 = add nsw i32 %13, 65535
  %15 = lshr i32 %port, 3
  %16 = zext i32 %15 to i64
  %17 = add i64 %10, %16
  %18 = tail call i32 @lduw_phys(i64 %17) nounwind
  %19 = and i32 %14, 65535
  %20 = and i32 %port, 7
  %21 = shl i32 %19, %20
  %22 = and i32 %18, %21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %36, label %24

; <label>:24                                      ; preds = %6
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 40
  %27 = load i64* %26, align 8
  %28 = add i64 %27, 128
  %29 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 1
  %30 = load i32* %29, align 4
  %31 = add i32 %30, %next_eip_addend
  %32 = zext i32 %31 to i64
  tail call void @stq_phys(i64 %28, i64 %32) nounwind
  %33 = shl i32 %port, 16
  %34 = or i32 %33, %param
  %35 = zext i32 %34 to i64
  tail call void @helper_vmexit(i32 123, i64 %35)
  unreachable

; <label>:36                                      ; preds = %6, %0
  ret void
}

declare void @stb_phys(i64, i32)

define void @helper_enter_mmx() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 16
  store i32 0, i32* %2, align 4
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 19, i64 0
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 19, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 0, i32* %8, align 4
  ret void
}

define void @helper_emms() nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 19, i64 0
  %3 = bitcast i8* %2 to i32*
  store i32 16843009, i32* %3, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 19, i64 4
  %6 = bitcast i8* %5 to i32*
  store i32 16843009, i32* %6, align 4
  ret void
}

define void @helper_movq(i8* nocapture %d, i8* nocapture %s) nounwind uwtable {
  %1 = bitcast i8* %s to i64*
  %2 = load i64* %1, align 8
  %3 = bitcast i8* %d to i64*
  store i64 %2, i64* %3, align 8
  ret void
}

define void @helper_psrlw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.MMXReg*
  %2 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 15
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to %union.MMXReg*
  %7 = getelementptr inbounds %union.MMXReg* %6, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %34

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [8 x i8]*
  %10 = getelementptr inbounds [8 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = inttoptr i64 %du to [4 x i16]*
  %14 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 0
  %15 = load i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = lshr i32 %16, %12
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %14, align 2
  %19 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 1
  %20 = load i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = lshr i32 %21, %12
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 2
  %24 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 2
  %25 = load i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = lshr i32 %26, %12
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  %29 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 3
  %30 = load i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = lshr i32 %31, %12
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %29, align 2
  br label %34

; <label>:34                                      ; preds = %8, %5
  ret void
}

define void @helper_psraw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.MMXReg*
  %2 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 15
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %su to [8 x i8]*
  %7 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  br label %10

; <label>:10                                      ; preds = %5, %0
  %shift.0 = phi i32 [ %9, %5 ], [ 15, %0 ]
  %11 = inttoptr i64 %du to [4 x i16]*
  %12 = getelementptr inbounds [4 x i16]* %11, i64 0, i64 0
  %13 = load i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = ashr i32 %14, %shift.0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %12, align 2
  %17 = getelementptr inbounds [4 x i16]* %11, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = ashr i32 %19, %shift.0
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %17, align 2
  %22 = getelementptr inbounds [4 x i16]* %11, i64 0, i64 2
  %23 = load i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = ashr i32 %24, %shift.0
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %22, align 2
  %27 = getelementptr inbounds [4 x i16]* %11, i64 0, i64 3
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = ashr i32 %29, %shift.0
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %27, align 2
  ret void
}

define void @helper_psllw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.MMXReg*
  %2 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 15
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to %union.MMXReg*
  %7 = getelementptr inbounds %union.MMXReg* %6, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %34

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [8 x i8]*
  %10 = getelementptr inbounds [8 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = inttoptr i64 %du to [4 x i16]*
  %14 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 0
  %15 = load i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = shl i32 %16, %12
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %14, align 2
  %19 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 1
  %20 = load i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = shl i32 %21, %12
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 2
  %24 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 2
  %25 = load i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = shl i32 %26, %12
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  %29 = getelementptr inbounds [4 x i16]* %13, i64 0, i64 3
  %30 = load i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = shl i32 %31, %12
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %29, align 2
  br label %34

; <label>:34                                      ; preds = %8, %5
  ret void
}

define void @helper_psrld_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.MMXReg*
  %2 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 31
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to %union.MMXReg*
  %7 = getelementptr inbounds %union.MMXReg* %6, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %20

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [8 x i8]*
  %10 = getelementptr inbounds [8 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = inttoptr i64 %du to [2 x i32]*
  %14 = getelementptr inbounds [2 x i32]* %13, i64 0, i64 0
  %15 = load i32* %14, align 4
  %16 = lshr i32 %15, %12
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds [2 x i32]* %13, i64 0, i64 1
  %18 = load i32* %17, align 4
  %19 = lshr i32 %18, %12
  store i32 %19, i32* %17, align 4
  br label %20

; <label>:20                                      ; preds = %8, %5
  ret void
}

define void @helper_psrad_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.MMXReg*
  %2 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 31
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %su to [8 x i8]*
  %7 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  br label %10

; <label>:10                                      ; preds = %5, %0
  %shift.0 = phi i32 [ %9, %5 ], [ 31, %0 ]
  %11 = inttoptr i64 %du to [2 x i32]*
  %12 = getelementptr inbounds [2 x i32]* %11, i64 0, i64 0
  %13 = load i32* %12, align 4
  %14 = ashr i32 %13, %shift.0
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds [2 x i32]* %11, i64 0, i64 1
  %16 = load i32* %15, align 4
  %17 = ashr i32 %16, %shift.0
  store i32 %17, i32* %15, align 4
  ret void
}

define void @helper_pslld_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.MMXReg*
  %2 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 31
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to %union.MMXReg*
  %7 = getelementptr inbounds %union.MMXReg* %6, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %20

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [8 x i8]*
  %10 = getelementptr inbounds [8 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = inttoptr i64 %du to [2 x i32]*
  %14 = getelementptr inbounds [2 x i32]* %13, i64 0, i64 0
  %15 = load i32* %14, align 4
  %16 = shl i32 %15, %12
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds [2 x i32]* %13, i64 0, i64 1
  %18 = load i32* %17, align 4
  %19 = shl i32 %18, %12
  store i32 %19, i32* %17, align 4
  br label %20

; <label>:20                                      ; preds = %8, %5
  ret void
}

define void @helper_psrlq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %16

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [8 x i8]*
  %10 = getelementptr inbounds [8 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %13 = load i64* %12, align 8
  %14 = zext i8 %11 to i64
  %15 = lshr i64 %13, %14
  store i64 %15, i64* %12, align 8
  br label %16

; <label>:16                                      ; preds = %8, %6
  ret void
}

define void @helper_psllq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %16

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [8 x i8]*
  %10 = getelementptr inbounds [8 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %13 = load i64* %12, align 8
  %14 = zext i8 %11 to i64
  %15 = shl i64 %13, %14
  store i64 %15, i64* %12, align 8
  br label %16

; <label>:16                                      ; preds = %8, %6
  ret void
}

define void @helper_paddb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = add i8 %6, %3
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = add i8 %11, %9
  store i8 %12, i8* %8, align 1
  %13 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = add i8 %16, %14
  store i8 %17, i8* %13, align 1
  %18 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = add i8 %21, %19
  store i8 %22, i8* %18, align 1
  %23 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = add i8 %26, %24
  store i8 %27, i8* %23, align 1
  %28 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = add i8 %31, %29
  store i8 %32, i8* %28, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = add i8 %36, %34
  store i8 %37, i8* %33, align 1
  %38 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = add i8 %41, %39
  store i8 %42, i8* %38, align 1
  ret void
}

define void @helper_paddw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = add i16 %6, %3
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = add i16 %11, %9
  store i16 %12, i16* %8, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = add i16 %16, %14
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = add i16 %21, %19
  store i16 %22, i16* %18, align 2
  ret void
}

define void @helper_paddl_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = add i32 %6, %3
  store i32 %7, i32* %2, align 4
  %8 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = add i32 %11, %9
  store i32 %12, i32* %8, align 4
  ret void
}

define void @helper_paddq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %6 = load i64* %5, align 8
  %7 = add i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

define void @helper_psubb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = sub i8 %3, %6
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = sub i8 %9, %11
  store i8 %12, i8* %8, align 1
  %13 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = sub i8 %14, %16
  store i8 %17, i8* %13, align 1
  %18 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = sub i8 %19, %21
  store i8 %22, i8* %18, align 1
  %23 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = sub i8 %24, %26
  store i8 %27, i8* %23, align 1
  %28 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = sub i8 %29, %31
  store i8 %32, i8* %28, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = sub i8 %34, %36
  store i8 %37, i8* %33, align 1
  %38 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = sub i8 %39, %41
  store i8 %42, i8* %38, align 1
  ret void
}

define void @helper_psubw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = sub i16 %3, %6
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = sub i16 %9, %11
  store i16 %12, i16* %8, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = sub i16 %14, %16
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = sub i16 %19, %21
  store i16 %22, i16* %18, align 2
  ret void
}

define void @helper_psubl_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = sub i32 %3, %6
  store i32 %7, i32* %2, align 4
  %8 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = sub i32 %9, %11
  store i32 %12, i32* %8, align 4
  ret void
}

define void @helper_psubq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %6 = load i64* %5, align 8
  %7 = sub i64 %4, %6
  store i64 %7, i64* %3, align 8
  ret void
}

define void @helper_paddusb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %su to [8 x i8]*
  %6 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp sgt i32 %9, 255
  %11 = trunc i32 %9 to i8
  %12 = select i1 %10, i8 -1, i8 %11
  store i8 %12, i8* %2, align 1
  %13 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = icmp sgt i32 %19, 255
  %21 = trunc i32 %19 to i8
  %22 = select i1 %20, i8 -1, i8 %21
  store i8 %22, i8* %13, align 1
  %23 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 2
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nsw i32 %28, %25
  %30 = icmp sgt i32 %29, 255
  %31 = trunc i32 %29 to i8
  %32 = select i1 %30, i8 -1, i8 %31
  store i8 %32, i8* %23, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %38, %35
  %40 = icmp sgt i32 %39, 255
  %41 = trunc i32 %39 to i8
  %42 = select i1 %40, i8 -1, i8 %41
  store i8 %42, i8* %33, align 1
  %43 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 4
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nsw i32 %48, %45
  %50 = icmp sgt i32 %49, 255
  %51 = trunc i32 %49 to i8
  %52 = select i1 %50, i8 -1, i8 %51
  store i8 %52, i8* %43, align 1
  %53 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 5
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nsw i32 %58, %55
  %60 = icmp sgt i32 %59, 255
  %61 = trunc i32 %59 to i8
  %62 = select i1 %60, i8 -1, i8 %61
  store i8 %62, i8* %53, align 1
  %63 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 6
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 %68, %65
  %70 = icmp sgt i32 %69, 255
  %71 = trunc i32 %69 to i8
  %72 = select i1 %70, i8 -1, i8 %71
  store i8 %72, i8* %63, align 1
  %73 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 7
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nsw i32 %78, %75
  %80 = icmp sgt i32 %79, 255
  %81 = trunc i32 %79 to i8
  %82 = select i1 %80, i8 -1, i8 %81
  store i8 %82, i8* %73, align 1
  ret void
}

define void @helper_paddsb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %su to [8 x i8]*
  %6 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp slt i32 %9, -128
  br i1 %10, label %satsb.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 127
  %13 = trunc i32 %9 to i8
  %phitmp = select i1 %12, i8 127, i8 %13
  br label %satsb.exit

satsb.exit:                                       ; preds = %11, %0
  %.0.i = phi i8 [ -128, %0 ], [ %phitmp, %11 ]
  store i8 %.0.i, i8* %2, align 1
  %14 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %15 = load i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = add nsw i32 %19, %16
  %21 = icmp slt i32 %20, -128
  br i1 %21, label %satsb.exit44, label %22

; <label>:22                                      ; preds = %satsb.exit
  %23 = icmp sgt i32 %20, 127
  %24 = trunc i32 %20 to i8
  %phitmp45 = select i1 %23, i8 127, i8 %24
  br label %satsb.exit44

satsb.exit44:                                     ; preds = %22, %satsb.exit
  %.0.i43 = phi i8 [ -128, %satsb.exit ], [ %phitmp45, %22 ]
  store i8 %.0.i43, i8* %14, align 1
  %25 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %26 = load i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 2
  %29 = load i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = add nsw i32 %30, %27
  %32 = icmp slt i32 %31, -128
  br i1 %32, label %satsb.exit41, label %33

; <label>:33                                      ; preds = %satsb.exit44
  %34 = icmp sgt i32 %31, 127
  %35 = trunc i32 %31 to i8
  %phitmp46 = select i1 %34, i8 127, i8 %35
  br label %satsb.exit41

satsb.exit41:                                     ; preds = %33, %satsb.exit44
  %.0.i40 = phi i8 [ -128, %satsb.exit44 ], [ %phitmp46, %33 ]
  store i8 %.0.i40, i8* %25, align 1
  %36 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = add nsw i32 %41, %38
  %43 = icmp slt i32 %42, -128
  br i1 %43, label %satsb.exit38, label %44

; <label>:44                                      ; preds = %satsb.exit41
  %45 = icmp sgt i32 %42, 127
  %46 = trunc i32 %42 to i8
  %phitmp47 = select i1 %45, i8 127, i8 %46
  br label %satsb.exit38

satsb.exit38:                                     ; preds = %44, %satsb.exit41
  %.0.i37 = phi i8 [ -128, %satsb.exit41 ], [ %phitmp47, %44 ]
  store i8 %.0.i37, i8* %36, align 1
  %47 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 4
  %51 = load i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = add nsw i32 %52, %49
  %54 = icmp slt i32 %53, -128
  br i1 %54, label %satsb.exit35, label %55

; <label>:55                                      ; preds = %satsb.exit38
  %56 = icmp sgt i32 %53, 127
  %57 = trunc i32 %53 to i8
  %phitmp48 = select i1 %56, i8 127, i8 %57
  br label %satsb.exit35

satsb.exit35:                                     ; preds = %55, %satsb.exit38
  %.0.i34 = phi i8 [ -128, %satsb.exit38 ], [ %phitmp48, %55 ]
  store i8 %.0.i34, i8* %47, align 1
  %58 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %59 = load i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 5
  %62 = load i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = add nsw i32 %63, %60
  %65 = icmp slt i32 %64, -128
  br i1 %65, label %satsb.exit32, label %66

; <label>:66                                      ; preds = %satsb.exit35
  %67 = icmp sgt i32 %64, 127
  %68 = trunc i32 %64 to i8
  %phitmp49 = select i1 %67, i8 127, i8 %68
  br label %satsb.exit32

satsb.exit32:                                     ; preds = %66, %satsb.exit35
  %.0.i31 = phi i8 [ -128, %satsb.exit35 ], [ %phitmp49, %66 ]
  store i8 %.0.i31, i8* %58, align 1
  %69 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %70 = load i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 6
  %73 = load i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = add nsw i32 %74, %71
  %76 = icmp slt i32 %75, -128
  br i1 %76, label %satsb.exit29, label %77

; <label>:77                                      ; preds = %satsb.exit32
  %78 = icmp sgt i32 %75, 127
  %79 = trunc i32 %75 to i8
  %phitmp50 = select i1 %78, i8 127, i8 %79
  br label %satsb.exit29

satsb.exit29:                                     ; preds = %77, %satsb.exit32
  %.0.i28 = phi i8 [ -128, %satsb.exit32 ], [ %phitmp50, %77 ]
  store i8 %.0.i28, i8* %69, align 1
  %80 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %81 = load i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 7
  %84 = load i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = add nsw i32 %85, %82
  %87 = icmp slt i32 %86, -128
  br i1 %87, label %satsb.exit26, label %88

; <label>:88                                      ; preds = %satsb.exit29
  %89 = icmp sgt i32 %86, 127
  %90 = trunc i32 %86 to i8
  %phitmp51 = select i1 %89, i8 127, i8 %90
  br label %satsb.exit26

satsb.exit26:                                     ; preds = %88, %satsb.exit29
  %.0.i25 = phi i8 [ -128, %satsb.exit29 ], [ %phitmp51, %88 ]
  store i8 %.0.i25, i8* %80, align 1
  ret void
}

define void @helper_psubusb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %su to [8 x i8]*
  %6 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %satub.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 255
  %13 = trunc i32 %9 to i8
  %phitmp = select i1 %12, i8 -1, i8 %13
  br label %satub.exit

satub.exit:                                       ; preds = %11, %0
  %.0.i = phi i8 [ 0, %0 ], [ %phitmp, %11 ]
  store i8 %.0.i, i8* %2, align 1
  %14 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %15 = load i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %satub.exit44, label %22

; <label>:22                                      ; preds = %satub.exit
  %23 = icmp sgt i32 %20, 255
  %24 = trunc i32 %20 to i8
  %phitmp45 = select i1 %23, i8 -1, i8 %24
  br label %satub.exit44

satub.exit44:                                     ; preds = %22, %satub.exit
  %.0.i43 = phi i8 [ 0, %satub.exit ], [ %phitmp45, %22 ]
  store i8 %.0.i43, i8* %14, align 1
  %25 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %26 = load i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 2
  %29 = load i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %satub.exit41, label %33

; <label>:33                                      ; preds = %satub.exit44
  %34 = icmp sgt i32 %31, 255
  %35 = trunc i32 %31 to i8
  %phitmp46 = select i1 %34, i8 -1, i8 %35
  br label %satub.exit41

satub.exit41:                                     ; preds = %33, %satub.exit44
  %.0.i40 = phi i8 [ 0, %satub.exit44 ], [ %phitmp46, %33 ]
  store i8 %.0.i40, i8* %25, align 1
  %36 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %satub.exit38, label %44

; <label>:44                                      ; preds = %satub.exit41
  %45 = icmp sgt i32 %42, 255
  %46 = trunc i32 %42 to i8
  %phitmp47 = select i1 %45, i8 -1, i8 %46
  br label %satub.exit38

satub.exit38:                                     ; preds = %44, %satub.exit41
  %.0.i37 = phi i8 [ 0, %satub.exit41 ], [ %phitmp47, %44 ]
  store i8 %.0.i37, i8* %36, align 1
  %47 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 4
  %51 = load i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %satub.exit35, label %55

; <label>:55                                      ; preds = %satub.exit38
  %56 = icmp sgt i32 %53, 255
  %57 = trunc i32 %53 to i8
  %phitmp48 = select i1 %56, i8 -1, i8 %57
  br label %satub.exit35

satub.exit35:                                     ; preds = %55, %satub.exit38
  %.0.i34 = phi i8 [ 0, %satub.exit38 ], [ %phitmp48, %55 ]
  store i8 %.0.i34, i8* %47, align 1
  %58 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %59 = load i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 5
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %satub.exit32, label %66

; <label>:66                                      ; preds = %satub.exit35
  %67 = icmp sgt i32 %64, 255
  %68 = trunc i32 %64 to i8
  %phitmp49 = select i1 %67, i8 -1, i8 %68
  br label %satub.exit32

satub.exit32:                                     ; preds = %66, %satub.exit35
  %.0.i31 = phi i8 [ 0, %satub.exit35 ], [ %phitmp49, %66 ]
  store i8 %.0.i31, i8* %58, align 1
  %69 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %70 = load i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 6
  %73 = load i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %satub.exit29, label %77

; <label>:77                                      ; preds = %satub.exit32
  %78 = icmp sgt i32 %75, 255
  %79 = trunc i32 %75 to i8
  %phitmp50 = select i1 %78, i8 -1, i8 %79
  br label %satub.exit29

satub.exit29:                                     ; preds = %77, %satub.exit32
  %.0.i28 = phi i8 [ 0, %satub.exit32 ], [ %phitmp50, %77 ]
  store i8 %.0.i28, i8* %69, align 1
  %80 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %81 = load i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 7
  %84 = load i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %satub.exit26, label %88

; <label>:88                                      ; preds = %satub.exit29
  %89 = icmp sgt i32 %86, 255
  %90 = trunc i32 %86 to i8
  %phitmp51 = select i1 %89, i8 -1, i8 %90
  br label %satub.exit26

satub.exit26:                                     ; preds = %88, %satub.exit29
  %.0.i25 = phi i8 [ 0, %satub.exit29 ], [ %phitmp51, %88 ]
  store i8 %.0.i25, i8* %80, align 1
  ret void
}

define void @helper_psubsb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %su to [8 x i8]*
  %6 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, -128
  br i1 %10, label %satsb.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 127
  %13 = trunc i32 %9 to i8
  %phitmp = select i1 %12, i8 127, i8 %13
  br label %satsb.exit

satsb.exit:                                       ; preds = %11, %0
  %.0.i = phi i8 [ -128, %0 ], [ %phitmp, %11 ]
  store i8 %.0.i, i8* %2, align 1
  %14 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %15 = load i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, -128
  br i1 %21, label %satsb.exit44, label %22

; <label>:22                                      ; preds = %satsb.exit
  %23 = icmp sgt i32 %20, 127
  %24 = trunc i32 %20 to i8
  %phitmp45 = select i1 %23, i8 127, i8 %24
  br label %satsb.exit44

satsb.exit44:                                     ; preds = %22, %satsb.exit
  %.0.i43 = phi i8 [ -128, %satsb.exit ], [ %phitmp45, %22 ]
  store i8 %.0.i43, i8* %14, align 1
  %25 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %26 = load i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 2
  %29 = load i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, -128
  br i1 %32, label %satsb.exit41, label %33

; <label>:33                                      ; preds = %satsb.exit44
  %34 = icmp sgt i32 %31, 127
  %35 = trunc i32 %31 to i8
  %phitmp46 = select i1 %34, i8 127, i8 %35
  br label %satsb.exit41

satsb.exit41:                                     ; preds = %33, %satsb.exit44
  %.0.i40 = phi i8 [ -128, %satsb.exit44 ], [ %phitmp46, %33 ]
  store i8 %.0.i40, i8* %25, align 1
  %36 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, -128
  br i1 %43, label %satsb.exit38, label %44

; <label>:44                                      ; preds = %satsb.exit41
  %45 = icmp sgt i32 %42, 127
  %46 = trunc i32 %42 to i8
  %phitmp47 = select i1 %45, i8 127, i8 %46
  br label %satsb.exit38

satsb.exit38:                                     ; preds = %44, %satsb.exit41
  %.0.i37 = phi i8 [ -128, %satsb.exit41 ], [ %phitmp47, %44 ]
  store i8 %.0.i37, i8* %36, align 1
  %47 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 4
  %51 = load i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, -128
  br i1 %54, label %satsb.exit35, label %55

; <label>:55                                      ; preds = %satsb.exit38
  %56 = icmp sgt i32 %53, 127
  %57 = trunc i32 %53 to i8
  %phitmp48 = select i1 %56, i8 127, i8 %57
  br label %satsb.exit35

satsb.exit35:                                     ; preds = %55, %satsb.exit38
  %.0.i34 = phi i8 [ -128, %satsb.exit38 ], [ %phitmp48, %55 ]
  store i8 %.0.i34, i8* %47, align 1
  %58 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %59 = load i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 5
  %62 = load i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, -128
  br i1 %65, label %satsb.exit32, label %66

; <label>:66                                      ; preds = %satsb.exit35
  %67 = icmp sgt i32 %64, 127
  %68 = trunc i32 %64 to i8
  %phitmp49 = select i1 %67, i8 127, i8 %68
  br label %satsb.exit32

satsb.exit32:                                     ; preds = %66, %satsb.exit35
  %.0.i31 = phi i8 [ -128, %satsb.exit35 ], [ %phitmp49, %66 ]
  store i8 %.0.i31, i8* %58, align 1
  %69 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %70 = load i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 6
  %73 = load i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, -128
  br i1 %76, label %satsb.exit29, label %77

; <label>:77                                      ; preds = %satsb.exit32
  %78 = icmp sgt i32 %75, 127
  %79 = trunc i32 %75 to i8
  %phitmp50 = select i1 %78, i8 127, i8 %79
  br label %satsb.exit29

satsb.exit29:                                     ; preds = %77, %satsb.exit32
  %.0.i28 = phi i8 [ -128, %satsb.exit32 ], [ %phitmp50, %77 ]
  store i8 %.0.i28, i8* %69, align 1
  %80 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %81 = load i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 7
  %84 = load i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, -128
  br i1 %87, label %satsb.exit26, label %88

; <label>:88                                      ; preds = %satsb.exit29
  %89 = icmp sgt i32 %86, 127
  %90 = trunc i32 %86 to i8
  %phitmp51 = select i1 %89, i8 127, i8 %90
  br label %satsb.exit26

satsb.exit26:                                     ; preds = %88, %satsb.exit29
  %.0.i25 = phi i8 [ -128, %satsb.exit29 ], [ %phitmp51, %88 ]
  store i8 %.0.i25, i8* %80, align 1
  ret void
}

define void @helper_paddusw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp sgt i32 %9, 65535
  %11 = trunc i32 %9 to i16
  %12 = select i1 %10, i16 -1, i16 %11
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = icmp sgt i32 %19, 65535
  %21 = trunc i32 %19 to i16
  %22 = select i1 %20, i16 -1, i16 %21
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %28, %25
  %30 = icmp sgt i32 %29, 65535
  %31 = trunc i32 %29 to i16
  %32 = select i1 %30, i16 -1, i16 %31
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %38, %35
  %40 = icmp sgt i32 %39, 65535
  %41 = trunc i32 %39 to i16
  %42 = select i1 %40, i16 -1, i16 %41
  store i16 %42, i16* %33, align 2
  ret void
}

define void @helper_paddsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp slt i32 %9, -32768
  br i1 %10, label %satsw.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 32767
  %13 = trunc i32 %9 to i16
  %phitmp = select i1 %12, i16 32767, i16 %13
  br label %satsw.exit

satsw.exit:                                       ; preds = %11, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %11 ]
  store i16 %.0.i, i16* %2, align 2
  %14 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = add nsw i32 %19, %16
  %21 = icmp slt i32 %20, -32768
  br i1 %21, label %satsw.exit20, label %22

; <label>:22                                      ; preds = %satsw.exit
  %23 = icmp sgt i32 %20, 32767
  %24 = trunc i32 %20 to i16
  %phitmp21 = select i1 %23, i16 32767, i16 %24
  br label %satsw.exit20

satsw.exit20:                                     ; preds = %22, %satsw.exit
  %.0.i19 = phi i16 [ -32768, %satsw.exit ], [ %phitmp21, %22 ]
  store i16 %.0.i19, i16* %14, align 2
  %25 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = add nsw i32 %30, %27
  %32 = icmp slt i32 %31, -32768
  br i1 %32, label %satsw.exit17, label %33

; <label>:33                                      ; preds = %satsw.exit20
  %34 = icmp sgt i32 %31, 32767
  %35 = trunc i32 %31 to i16
  %phitmp22 = select i1 %34, i16 32767, i16 %35
  br label %satsw.exit17

satsw.exit17:                                     ; preds = %33, %satsw.exit20
  %.0.i16 = phi i16 [ -32768, %satsw.exit20 ], [ %phitmp22, %33 ]
  store i16 %.0.i16, i16* %25, align 2
  %36 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = add nsw i32 %41, %38
  %43 = icmp slt i32 %42, -32768
  br i1 %43, label %satsw.exit14, label %44

; <label>:44                                      ; preds = %satsw.exit17
  %45 = icmp sgt i32 %42, 32767
  %46 = trunc i32 %42 to i16
  %phitmp23 = select i1 %45, i16 32767, i16 %46
  br label %satsw.exit14

satsw.exit14:                                     ; preds = %44, %satsw.exit17
  %.0.i13 = phi i16 [ -32768, %satsw.exit17 ], [ %phitmp23, %44 ]
  store i16 %.0.i13, i16* %36, align 2
  ret void
}

define void @helper_psubusw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %satuw.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 65535
  %13 = trunc i32 %9 to i16
  %phitmp = select i1 %12, i16 -1, i16 %13
  br label %satuw.exit

satuw.exit:                                       ; preds = %11, %0
  %.0.i = phi i16 [ 0, %0 ], [ %phitmp, %11 ]
  store i16 %.0.i, i16* %2, align 2
  %14 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %satuw.exit20, label %22

; <label>:22                                      ; preds = %satuw.exit
  %23 = icmp sgt i32 %20, 65535
  %24 = trunc i32 %20 to i16
  %phitmp21 = select i1 %23, i16 -1, i16 %24
  br label %satuw.exit20

satuw.exit20:                                     ; preds = %22, %satuw.exit
  %.0.i19 = phi i16 [ 0, %satuw.exit ], [ %phitmp21, %22 ]
  store i16 %.0.i19, i16* %14, align 2
  %25 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %26 = load i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %satuw.exit17, label %33

; <label>:33                                      ; preds = %satuw.exit20
  %34 = icmp sgt i32 %31, 65535
  %35 = trunc i32 %31 to i16
  %phitmp22 = select i1 %34, i16 -1, i16 %35
  br label %satuw.exit17

satuw.exit17:                                     ; preds = %33, %satuw.exit20
  %.0.i16 = phi i16 [ 0, %satuw.exit20 ], [ %phitmp22, %33 ]
  store i16 %.0.i16, i16* %25, align 2
  %36 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %satuw.exit14, label %44

; <label>:44                                      ; preds = %satuw.exit17
  %45 = icmp sgt i32 %42, 65535
  %46 = trunc i32 %42 to i16
  %phitmp23 = select i1 %45, i16 -1, i16 %46
  br label %satuw.exit14

satuw.exit14:                                     ; preds = %44, %satuw.exit17
  %.0.i13 = phi i16 [ 0, %satuw.exit17 ], [ %phitmp23, %44 ]
  store i16 %.0.i13, i16* %36, align 2
  ret void
}

define void @helper_psubsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, -32768
  br i1 %10, label %satsw.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 32767
  %13 = trunc i32 %9 to i16
  %phitmp = select i1 %12, i16 32767, i16 %13
  br label %satsw.exit

satsw.exit:                                       ; preds = %11, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %11 ]
  store i16 %.0.i, i16* %2, align 2
  %14 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, -32768
  br i1 %21, label %satsw.exit20, label %22

; <label>:22                                      ; preds = %satsw.exit
  %23 = icmp sgt i32 %20, 32767
  %24 = trunc i32 %20 to i16
  %phitmp21 = select i1 %23, i16 32767, i16 %24
  br label %satsw.exit20

satsw.exit20:                                     ; preds = %22, %satsw.exit
  %.0.i19 = phi i16 [ -32768, %satsw.exit ], [ %phitmp21, %22 ]
  store i16 %.0.i19, i16* %14, align 2
  %25 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, -32768
  br i1 %32, label %satsw.exit17, label %33

; <label>:33                                      ; preds = %satsw.exit20
  %34 = icmp sgt i32 %31, 32767
  %35 = trunc i32 %31 to i16
  %phitmp22 = select i1 %34, i16 32767, i16 %35
  br label %satsw.exit17

satsw.exit17:                                     ; preds = %33, %satsw.exit20
  %.0.i16 = phi i16 [ -32768, %satsw.exit20 ], [ %phitmp22, %33 ]
  store i16 %.0.i16, i16* %25, align 2
  %36 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, -32768
  br i1 %43, label %satsw.exit14, label %44

; <label>:44                                      ; preds = %satsw.exit17
  %45 = icmp sgt i32 %42, 32767
  %46 = trunc i32 %42 to i16
  %phitmp23 = select i1 %45, i16 32767, i16 %46
  br label %satsw.exit14

satsw.exit14:                                     ; preds = %44, %satsw.exit17
  %.0.i13 = phi i16 [ -32768, %satsw.exit17 ], [ %phitmp23, %44 ]
  store i16 %.0.i13, i16* %36, align 2
  ret void
}

define void @helper_pminub_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp ult i8 %3, %6
  %. = select i1 %7, i8 %3, i8 %6
  store i8 %., i8* %2, align 1
  %8 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = icmp ult i8 %9, %11
  %.sink1 = select i1 %12, i8 %9, i8 %11
  store i8 %.sink1, i8* %8, align 1
  %13 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp ult i8 %14, %16
  %.47 = select i1 %17, i8 %14, i8 %16
  store i8 %.47, i8* %13, align 1
  %18 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = icmp ult i8 %19, %21
  %.sink3 = select i1 %22, i8 %19, i8 %21
  store i8 %.sink3, i8* %18, align 1
  %23 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %.48 = select i1 %27, i8 %24, i8 %26
  store i8 %.48, i8* %23, align 1
  %28 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = icmp ult i8 %29, %31
  %.sink5 = select i1 %32, i8 %29, i8 %31
  store i8 %.sink5, i8* %28, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = icmp ult i8 %34, %36
  %.49 = select i1 %37, i8 %34, i8 %36
  store i8 %.49, i8* %33, align 1
  %38 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = icmp ult i8 %39, %41
  %.sink7 = select i1 %42, i8 %39, i8 %41
  store i8 %.sink7, i8* %38, align 1
  ret void
}

define void @helper_pmaxub_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp ugt i8 %3, %6
  %. = select i1 %7, i8 %3, i8 %6
  store i8 %., i8* %2, align 1
  %8 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = icmp ugt i8 %9, %11
  %.sink1 = select i1 %12, i8 %9, i8 %11
  store i8 %.sink1, i8* %8, align 1
  %13 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp ugt i8 %14, %16
  %.47 = select i1 %17, i8 %14, i8 %16
  store i8 %.47, i8* %13, align 1
  %18 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = icmp ugt i8 %19, %21
  %.sink3 = select i1 %22, i8 %19, i8 %21
  store i8 %.sink3, i8* %18, align 1
  %23 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = icmp ugt i8 %24, %26
  %.48 = select i1 %27, i8 %24, i8 %26
  store i8 %.48, i8* %23, align 1
  %28 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = icmp ugt i8 %29, %31
  %.sink5 = select i1 %32, i8 %29, i8 %31
  store i8 %.sink5, i8* %28, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = icmp ugt i8 %34, %36
  %.49 = select i1 %37, i8 %34, i8 %36
  store i8 %.49, i8* %33, align 1
  %38 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = icmp ugt i8 %39, %41
  %.sink7 = select i1 %42, i8 %39, i8 %41
  store i8 %.sink7, i8* %38, align 1
  ret void
}

define void @helper_pminsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp slt i16 %3, %6
  %. = select i1 %7, i16 %3, i16 %6
  store i16 %., i16* %2, align 2
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = icmp slt i16 %9, %11
  %.sink1 = select i1 %12, i16 %9, i16 %11
  store i16 %.sink1, i16* %8, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp slt i16 %14, %16
  %.23 = select i1 %17, i16 %14, i16 %16
  store i16 %.23, i16* %13, align 2
  %18 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp slt i16 %19, %21
  %.sink3 = select i1 %22, i16 %19, i16 %21
  store i16 %.sink3, i16* %18, align 2
  ret void
}

define void @helper_pmaxsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp sgt i16 %3, %6
  %. = select i1 %7, i16 %3, i16 %6
  store i16 %., i16* %2, align 2
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = icmp sgt i16 %9, %11
  %.sink1 = select i1 %12, i16 %9, i16 %11
  store i16 %.sink1, i16* %8, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp sgt i16 %14, %16
  %.23 = select i1 %17, i16 %14, i16 %16
  store i16 %.23, i16* %13, align 2
  %18 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp sgt i16 %19, %21
  %.sink3 = select i1 %22, i16 %19, i16 %21
  store i16 %.sink3, i16* %18, align 2
  ret void
}

define void @helper_pand_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %6 = load i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

define void @helper_pandn_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = xor i64 %4, -1
  %6 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %7 = load i64* %6, align 8
  %8 = and i64 %7, %5
  store i64 %8, i64* %3, align 8
  ret void
}

define void @helper_por_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %6 = load i64* %5, align 8
  %7 = or i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

define void @helper_pxor_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %6 = load i64* %5, align 8
  %7 = xor i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

define void @helper_pcmpgtb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp sgt i8 %3, %6
  %8 = sext i1 %7 to i8
  store i8 %8, i8* %2, align 1
  %9 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %12 = load i8* %11, align 1
  %13 = icmp sgt i8 %10, %12
  %14 = sext i1 %13 to i8
  store i8 %14, i8* %9, align 1
  %15 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %18 = load i8* %17, align 1
  %19 = icmp sgt i8 %16, %18
  %20 = sext i1 %19 to i8
  store i8 %20, i8* %15, align 1
  %21 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %22 = load i8* %21, align 1
  %23 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %24 = load i8* %23, align 1
  %25 = icmp sgt i8 %22, %24
  %26 = sext i1 %25 to i8
  store i8 %26, i8* %21, align 1
  %27 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %28 = load i8* %27, align 1
  %29 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %30 = load i8* %29, align 1
  %31 = icmp sgt i8 %28, %30
  %32 = sext i1 %31 to i8
  store i8 %32, i8* %27, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %36 = load i8* %35, align 1
  %37 = icmp sgt i8 %34, %36
  %38 = sext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  %39 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %40 = load i8* %39, align 1
  %41 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %42 = load i8* %41, align 1
  %43 = icmp sgt i8 %40, %42
  %44 = sext i1 %43 to i8
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %46 = load i8* %45, align 1
  %47 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %48 = load i8* %47, align 1
  %49 = icmp sgt i8 %46, %48
  %50 = sext i1 %49 to i8
  store i8 %50, i8* %45, align 1
  ret void
}

define void @helper_pcmpgtw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp sgt i16 %3, %6
  %8 = sext i1 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %12 = load i16* %11, align 2
  %13 = icmp sgt i16 %10, %12
  %14 = sext i1 %13 to i16
  store i16 %14, i16* %9, align 2
  %15 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %18 = load i16* %17, align 2
  %19 = icmp sgt i16 %16, %18
  %20 = sext i1 %19 to i16
  store i16 %20, i16* %15, align 2
  %21 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %24 = load i16* %23, align 2
  %25 = icmp sgt i16 %22, %24
  %26 = sext i1 %25 to i16
  store i16 %26, i16* %21, align 2
  ret void
}

define void @helper_pcmpgtl_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp sgt i32 %3, %6
  %8 = sext i1 %7 to i32
  store i32 %8, i32* %2, align 4
  %9 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = icmp sgt i32 %10, %12
  %14 = sext i1 %13 to i32
  store i32 %14, i32* %9, align 4
  ret void
}

define void @helper_pcmpeqb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp eq i8 %3, %6
  %8 = sext i1 %7 to i8
  store i8 %8, i8* %2, align 1
  %9 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %12 = load i8* %11, align 1
  %13 = icmp eq i8 %10, %12
  %14 = sext i1 %13 to i8
  store i8 %14, i8* %9, align 1
  %15 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %18 = load i8* %17, align 1
  %19 = icmp eq i8 %16, %18
  %20 = sext i1 %19 to i8
  store i8 %20, i8* %15, align 1
  %21 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %22 = load i8* %21, align 1
  %23 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %24 = load i8* %23, align 1
  %25 = icmp eq i8 %22, %24
  %26 = sext i1 %25 to i8
  store i8 %26, i8* %21, align 1
  %27 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %28 = load i8* %27, align 1
  %29 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %30 = load i8* %29, align 1
  %31 = icmp eq i8 %28, %30
  %32 = sext i1 %31 to i8
  store i8 %32, i8* %27, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %36 = load i8* %35, align 1
  %37 = icmp eq i8 %34, %36
  %38 = sext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  %39 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %40 = load i8* %39, align 1
  %41 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %42 = load i8* %41, align 1
  %43 = icmp eq i8 %40, %42
  %44 = sext i1 %43 to i8
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %46 = load i8* %45, align 1
  %47 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %48 = load i8* %47, align 1
  %49 = icmp eq i8 %46, %48
  %50 = sext i1 %49 to i8
  store i8 %50, i8* %45, align 1
  ret void
}

define void @helper_pcmpeqw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp eq i16 %3, %6
  %8 = sext i1 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %12 = load i16* %11, align 2
  %13 = icmp eq i16 %10, %12
  %14 = sext i1 %13 to i16
  store i16 %14, i16* %9, align 2
  %15 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %18 = load i16* %17, align 2
  %19 = icmp eq i16 %16, %18
  %20 = sext i1 %19 to i16
  store i16 %20, i16* %15, align 2
  %21 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %24 = load i16* %23, align 2
  %25 = icmp eq i16 %22, %24
  %26 = sext i1 %25 to i16
  store i16 %26, i16* %21, align 2
  ret void
}

define void @helper_pcmpeql_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp eq i32 %3, %6
  %8 = sext i1 %7 to i32
  store i32 %8, i32* %2, align 4
  %9 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  %14 = sext i1 %13 to i32
  store i32 %14, i32* %9, align 4
  ret void
}

define void @helper_pmullw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = mul i16 %6, %3
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = mul i16 %11, %9
  store i16 %12, i16* %8, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = mul i16 %16, %14
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = mul i16 %21, %19
  store i16 %22, i16* %18, align 2
  ret void
}

define void @helper_pmulhrw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = add nsw i32 %9, 32768
  %11 = lshr i32 %10, 16
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = mul nsw i32 %18, %15
  %20 = add nsw i32 %19, 32768
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = add nsw i32 %29, 32768
  %31 = lshr i32 %30, 16
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = mul nsw i32 %38, %35
  %40 = add nsw i32 %39, 32768
  %41 = lshr i32 %40, 16
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %33, align 2
  ret void
}

define void @helper_pmulhuw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = lshr i32 %9, 16
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %2, align 2
  %12 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %13 = load i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = lshr i32 %18, 16
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %12, align 2
  %21 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %22 = load i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %25 = load i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = mul nsw i32 %26, %23
  %28 = lshr i32 %27, 16
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %21, align 2
  %30 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nsw i32 %35, %32
  %37 = lshr i32 %36, 16
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %30, align 2
  ret void
}

define void @helper_pmulhw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = lshr i32 %9, 16
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %2, align 2
  %12 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %13 = load i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = lshr i32 %18, 16
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %12, align 2
  %21 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %22 = load i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %25 = load i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %23
  %28 = lshr i32 %27, 16
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %21, align 2
  %30 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = mul nsw i32 %35, %32
  %37 = lshr i32 %36, 16
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %30, align 2
  ret void
}

define void @helper_pavgb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %su to [8 x i8]*
  %6 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add i32 %4, 1
  %10 = add i32 %9, %8
  %11 = lshr i32 %10, 1
  %12 = trunc i32 %11 to i8
  store i8 %12, i8* %2, align 1
  %13 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add i32 %15, 1
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 1
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %13, align 1
  %23 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 2
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add i32 %25, 1
  %30 = add i32 %29, %28
  %31 = lshr i32 %30, 1
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %23, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add i32 %35, 1
  %40 = add i32 %39, %38
  %41 = lshr i32 %40, 1
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %33, align 1
  %43 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 4
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add i32 %45, 1
  %50 = add i32 %49, %48
  %51 = lshr i32 %50, 1
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %43, align 1
  %53 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 5
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add i32 %55, 1
  %60 = add i32 %59, %58
  %61 = lshr i32 %60, 1
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %53, align 1
  %63 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 6
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add i32 %65, 1
  %70 = add i32 %69, %68
  %71 = lshr i32 %70, 1
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %63, align 1
  %73 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 7
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add i32 %75, 1
  %80 = add i32 %79, %78
  %81 = lshr i32 %80, 1
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %73, align 1
  ret void
}

define void @helper_pavgw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = add i32 %4, 1
  %10 = add i32 %9, %8
  %11 = lshr i32 %10, 1
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = add i32 %15, 1
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 1
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = add i32 %25, 1
  %30 = add i32 %29, %28
  %31 = lshr i32 %30, 1
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add i32 %35, 1
  %40 = add i32 %39, %38
  %41 = lshr i32 %40, 1
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %33, align 2
  ret void
}

define void @helper_pmuludq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to [2 x i32]*
  %3 = getelementptr inbounds [2 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = inttoptr i64 %du to [2 x i32]*
  %7 = getelementptr inbounds [2 x i32]* %6, i64 0, i64 0
  %8 = load i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = mul i64 %9, %5
  %11 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  store i64 %10, i64* %11, align 8
  ret void
}

define void @helper_pmaddwd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i16]*
  %2 = inttoptr i64 %du to [4 x i16]*
  %3 = inttoptr i64 %du to [2 x i32]*
  %4 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %5 = load i16* %4, align 2
  %6 = sext i16 %5 to i32
  %7 = getelementptr inbounds [4 x i16]* %2, i64 0, i64 0
  %8 = load i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = mul nsw i32 %9, %6
  %11 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %12 = load i16* %11, align 2
  %13 = sext i16 %12 to i32
  %14 = getelementptr inbounds [4 x i16]* %2, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = mul nsw i32 %16, %13
  %18 = add nsw i32 %17, %10
  %19 = getelementptr inbounds [2 x i32]* %3, i64 0, i64 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %21 = load i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = getelementptr inbounds [4 x i16]* %2, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = mul nsw i32 %25, %22
  %27 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = getelementptr inbounds [4 x i16]* %2, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = mul nsw i32 %32, %29
  %34 = add nsw i32 %33, %26
  %35 = getelementptr inbounds [2 x i32]* %3, i64 0, i64 1
  store i32 %34, i32* %35, align 4
  ret void
}

define void @helper_psadbw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %du to [8 x i8]*
  %3 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 0
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = inttoptr i64 %su to [8 x i8]*
  %7 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = sub nsw i32 %5, %9
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 0, %10
  %.0.i = select i1 %11, i32 %12, i32 %10
  %13 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %.0.i31 = select i1 %20, i32 %21, i32 %19
  %22 = add i32 %.0.i31, %.0.i
  %23 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 2
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 2
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub nsw i32 %25, %28
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %.0.i30 = select i1 %30, i32 %31, i32 %29
  %32 = add i32 %22, %.0.i30
  %33 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 3
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 %35, %38
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %.0.i29 = select i1 %40, i32 %41, i32 %39
  %42 = add i32 %32, %.0.i29
  %43 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 4
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 4
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = sub nsw i32 %45, %48
  %50 = icmp slt i32 %49, 0
  %51 = sub nsw i32 0, %49
  %.0.i28 = select i1 %50, i32 %51, i32 %49
  %52 = add i32 %42, %.0.i28
  %53 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 5
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 5
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %55, %58
  %60 = icmp slt i32 %59, 0
  %61 = sub nsw i32 0, %59
  %.0.i27 = select i1 %60, i32 %61, i32 %59
  %62 = add i32 %52, %.0.i27
  %63 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 6
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 6
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = sub nsw i32 %65, %68
  %70 = icmp slt i32 %69, 0
  %71 = sub nsw i32 0, %69
  %.0.i26 = select i1 %70, i32 %71, i32 %69
  %72 = add i32 %62, %.0.i26
  %73 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 7
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [8 x i8]* %6, i64 0, i64 7
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = sub nsw i32 %75, %78
  %80 = icmp slt i32 %79, 0
  %81 = sub nsw i32 0, %79
  %.0.i25 = select i1 %80, i32 %81, i32 %79
  %82 = add i32 %72, %.0.i25
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  store i64 %83, i64* %84, align 8
  ret void
}

define void @helper_maskmov_mmx(i64 %du, i64 %su, i32 %a0) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i8]*
  %2 = inttoptr i64 %du to [8 x i8]*
  br label %3

; <label>:3                                       ; preds = %stb_data.exit, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %stb_data.exit ]
  %sext = shl i64 %indvars.iv, 32
  %4 = ashr exact i64 %sext, 32
  %5 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 %4
  %6 = load i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %stb_data.exit

; <label>:8                                       ; preds = %3
  %9 = trunc i64 %indvars.iv to i32
  %10 = add i32 %9, %a0
  %11 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %4
  %12 = load i8* %11, align 1
  %13 = lshr i32 %10, 12
  %14 = and i32 %13, 255
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 7
  %17 = load i32* %16, align 4
  %18 = and i32 %17, 3
  %19 = icmp eq i32 %18, 3
  %20 = zext i32 %14 to i64
  %21 = zext i1 %19 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 1
  %23 = load i32* %22, align 4
  %24 = and i32 %10, -4096
  %25 = icmp eq i32 %23, %24
  %26 = zext i32 %10 to i64
  br i1 %25, label %29, label %27, !prof !0

; <label>:27                                      ; preds = %8
  %28 = inttoptr i64 %26 to i8*
  store i8 %12, i8* %28, align 1
  br label %stb_data.exit

; <label>:29                                      ; preds = %8
  %30 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %26
  %33 = inttoptr i64 %32 to i8*
  store i8 %12, i8* %33, align 1
  br label %stb_data.exit

stb_data.exit:                                    ; preds = %29, %27, %3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 8
  br i1 %exitcond, label %34, label %3

; <label>:34                                      ; preds = %stb_data.exit
  ret void
}

define void @helper_movl_mm_T0_mmx(i64 %du, i32 %val) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  store i32 %val, i32* %2, align 4
  %3 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  store i32 0, i32* %3, align 4
  ret void
}

define void @helper_pshufw_mmx(i64 %du, i64 %su, i32 %order) nounwind uwtable {
  %1 = and i32 %order, 3
  %2 = zext i32 %1 to i64
  %3 = inttoptr i64 %su to [4 x i16]*
  %4 = getelementptr inbounds [4 x i16]* %3, i64 0, i64 %2
  %5 = load i16* %4, align 2
  %6 = lshr i32 %order, 2
  %7 = and i32 %6, 3
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [4 x i16]* %3, i64 0, i64 %8
  %10 = load i16* %9, align 2
  %11 = lshr i32 %order, 4
  %12 = and i32 %11, 3
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [4 x i16]* %3, i64 0, i64 %13
  %15 = load i16* %14, align 2
  %16 = lshr i32 %order, 6
  %17 = and i32 %16, 3
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [4 x i16]* %3, i64 0, i64 %18
  %20 = load i16* %19, align 2
  %21 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %5, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %21, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %10, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %21, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %15, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %21, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %20, i16* %r.sroa.3.6..cast, align 2
  ret void
}

define i32 @helper_pmovmskb_mmx(i64 %su) nounwind uwtable readonly {
  %1 = inttoptr i64 %su to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = lshr i32 %4, 7
  %6 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = lshr i32 %8, 6
  %10 = and i32 %9, 2
  %11 = or i32 %10, %5
  %12 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %13 = load i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = lshr i32 %14, 5
  %16 = and i32 %15, 4
  %17 = or i32 %11, %16
  %18 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = lshr i32 %20, 4
  %22 = and i32 %21, 8
  %23 = or i32 %17, %22
  %24 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %25 = load i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = lshr i32 %26, 3
  %28 = and i32 %27, 16
  %29 = or i32 %23, %28
  %30 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = lshr i32 %32, 2
  %34 = and i32 %33, 32
  %35 = or i32 %29, %34
  %36 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = lshr i32 %38, 1
  %40 = and i32 %39, 64
  %41 = or i32 %35, %40
  %42 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %43 = load i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %44, 128
  %46 = or i32 %41, %45
  ret i32 %46
}

define void @helper_packsswb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = icmp slt i16 %3, -128
  br i1 %4, label %satsb.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = icmp sgt i16 %3, 127
  %7 = trunc i16 %3 to i8
  %phitmp = select i1 %6, i8 127, i8 %7
  br label %satsb.exit

satsb.exit:                                       ; preds = %5, %0
  %.0.i = phi i8 [ -128, %0 ], [ %phitmp, %5 ]
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = icmp slt i16 %9, -128
  br i1 %10, label %satsb.exit29, label %11

; <label>:11                                      ; preds = %satsb.exit
  %12 = icmp sgt i16 %9, 127
  %13 = trunc i16 %9 to i8
  %phitmp30 = select i1 %12, i8 127, i8 %13
  br label %satsb.exit29

satsb.exit29:                                     ; preds = %11, %satsb.exit
  %.0.i28 = phi i8 [ -128, %satsb.exit ], [ %phitmp30, %11 ]
  %14 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %15 = load i16* %14, align 2
  %16 = icmp slt i16 %15, -128
  br i1 %16, label %satsb.exit26, label %17

; <label>:17                                      ; preds = %satsb.exit29
  %18 = icmp sgt i16 %15, 127
  %19 = trunc i16 %15 to i8
  %phitmp31 = select i1 %18, i8 127, i8 %19
  br label %satsb.exit26

satsb.exit26:                                     ; preds = %17, %satsb.exit29
  %.0.i25 = phi i8 [ -128, %satsb.exit29 ], [ %phitmp31, %17 ]
  %20 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp slt i16 %21, -128
  br i1 %22, label %satsb.exit23, label %23

; <label>:23                                      ; preds = %satsb.exit26
  %24 = icmp sgt i16 %21, 127
  %25 = trunc i16 %21 to i8
  %phitmp32 = select i1 %24, i8 127, i8 %25
  br label %satsb.exit23

satsb.exit23:                                     ; preds = %23, %satsb.exit26
  %.0.i22 = phi i8 [ -128, %satsb.exit26 ], [ %phitmp32, %23 ]
  %26 = inttoptr i64 %su to [4 x i16]*
  %27 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 0
  %28 = load i16* %27, align 2
  %29 = icmp slt i16 %28, -128
  br i1 %29, label %satsb.exit20, label %30

; <label>:30                                      ; preds = %satsb.exit23
  %31 = icmp sgt i16 %28, 127
  %32 = trunc i16 %28 to i8
  %phitmp33 = select i1 %31, i8 127, i8 %32
  br label %satsb.exit20

satsb.exit20:                                     ; preds = %30, %satsb.exit23
  %.0.i19 = phi i8 [ -128, %satsb.exit23 ], [ %phitmp33, %30 ]
  %33 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 1
  %34 = load i16* %33, align 2
  %35 = icmp slt i16 %34, -128
  br i1 %35, label %satsb.exit17, label %36

; <label>:36                                      ; preds = %satsb.exit20
  %37 = icmp sgt i16 %34, 127
  %38 = trunc i16 %34 to i8
  %phitmp34 = select i1 %37, i8 127, i8 %38
  br label %satsb.exit17

satsb.exit17:                                     ; preds = %36, %satsb.exit20
  %.0.i16 = phi i8 [ -128, %satsb.exit20 ], [ %phitmp34, %36 ]
  %39 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 2
  %40 = load i16* %39, align 2
  %41 = icmp slt i16 %40, -128
  br i1 %41, label %satsb.exit14, label %42

; <label>:42                                      ; preds = %satsb.exit17
  %43 = icmp sgt i16 %40, 127
  %44 = trunc i16 %40 to i8
  %phitmp35 = select i1 %43, i8 127, i8 %44
  br label %satsb.exit14

satsb.exit14:                                     ; preds = %42, %satsb.exit17
  %.0.i13 = phi i8 [ -128, %satsb.exit17 ], [ %phitmp35, %42 ]
  %45 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 3
  %46 = load i16* %45, align 2
  %47 = icmp slt i16 %46, -128
  br i1 %47, label %satsb.exit11, label %48

; <label>:48                                      ; preds = %satsb.exit14
  %49 = icmp sgt i16 %46, 127
  %50 = trunc i16 %46 to i8
  %phitmp36 = select i1 %49, i8 127, i8 %50
  br label %satsb.exit11

satsb.exit11:                                     ; preds = %48, %satsb.exit14
  %.0.i10 = phi i8 [ -128, %satsb.exit14 ], [ %phitmp36, %48 ]
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %.0.i, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %.0.i28, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %.0.i25, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %.0.i22, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %.0.i19, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %.0.i16, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %.0.i13, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %.0.i10, i8* %r.sroa.7.7..raw_idx, align 1
  ret void
}

define void @helper_packuswb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = icmp slt i16 %3, 0
  br i1 %4, label %satub.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = icmp sgt i16 %3, 255
  %7 = trunc i16 %3 to i8
  %phitmp = select i1 %6, i8 -1, i8 %7
  br label %satub.exit

satub.exit:                                       ; preds = %5, %0
  %.0.i = phi i8 [ 0, %0 ], [ %phitmp, %5 ]
  %8 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = icmp slt i16 %9, 0
  br i1 %10, label %satub.exit29, label %11

; <label>:11                                      ; preds = %satub.exit
  %12 = icmp sgt i16 %9, 255
  %13 = trunc i16 %9 to i8
  %phitmp30 = select i1 %12, i8 -1, i8 %13
  br label %satub.exit29

satub.exit29:                                     ; preds = %11, %satub.exit
  %.0.i28 = phi i8 [ 0, %satub.exit ], [ %phitmp30, %11 ]
  %14 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %15 = load i16* %14, align 2
  %16 = icmp slt i16 %15, 0
  br i1 %16, label %satub.exit26, label %17

; <label>:17                                      ; preds = %satub.exit29
  %18 = icmp sgt i16 %15, 255
  %19 = trunc i16 %15 to i8
  %phitmp31 = select i1 %18, i8 -1, i8 %19
  br label %satub.exit26

satub.exit26:                                     ; preds = %17, %satub.exit29
  %.0.i25 = phi i8 [ 0, %satub.exit29 ], [ %phitmp31, %17 ]
  %20 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp slt i16 %21, 0
  br i1 %22, label %satub.exit23, label %23

; <label>:23                                      ; preds = %satub.exit26
  %24 = icmp sgt i16 %21, 255
  %25 = trunc i16 %21 to i8
  %phitmp32 = select i1 %24, i8 -1, i8 %25
  br label %satub.exit23

satub.exit23:                                     ; preds = %23, %satub.exit26
  %.0.i22 = phi i8 [ 0, %satub.exit26 ], [ %phitmp32, %23 ]
  %26 = inttoptr i64 %su to [4 x i16]*
  %27 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 0
  %28 = load i16* %27, align 2
  %29 = icmp slt i16 %28, 0
  br i1 %29, label %satub.exit20, label %30

; <label>:30                                      ; preds = %satub.exit23
  %31 = icmp sgt i16 %28, 255
  %32 = trunc i16 %28 to i8
  %phitmp33 = select i1 %31, i8 -1, i8 %32
  br label %satub.exit20

satub.exit20:                                     ; preds = %30, %satub.exit23
  %.0.i19 = phi i8 [ 0, %satub.exit23 ], [ %phitmp33, %30 ]
  %33 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 1
  %34 = load i16* %33, align 2
  %35 = icmp slt i16 %34, 0
  br i1 %35, label %satub.exit17, label %36

; <label>:36                                      ; preds = %satub.exit20
  %37 = icmp sgt i16 %34, 255
  %38 = trunc i16 %34 to i8
  %phitmp34 = select i1 %37, i8 -1, i8 %38
  br label %satub.exit17

satub.exit17:                                     ; preds = %36, %satub.exit20
  %.0.i16 = phi i8 [ 0, %satub.exit20 ], [ %phitmp34, %36 ]
  %39 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 2
  %40 = load i16* %39, align 2
  %41 = icmp slt i16 %40, 0
  br i1 %41, label %satub.exit14, label %42

; <label>:42                                      ; preds = %satub.exit17
  %43 = icmp sgt i16 %40, 255
  %44 = trunc i16 %40 to i8
  %phitmp35 = select i1 %43, i8 -1, i8 %44
  br label %satub.exit14

satub.exit14:                                     ; preds = %42, %satub.exit17
  %.0.i13 = phi i8 [ 0, %satub.exit17 ], [ %phitmp35, %42 ]
  %45 = getelementptr inbounds [4 x i16]* %26, i64 0, i64 3
  %46 = load i16* %45, align 2
  %47 = icmp slt i16 %46, 0
  br i1 %47, label %satub.exit11, label %48

; <label>:48                                      ; preds = %satub.exit14
  %49 = icmp sgt i16 %46, 255
  %50 = trunc i16 %46 to i8
  %phitmp36 = select i1 %49, i8 -1, i8 %50
  br label %satub.exit11

satub.exit11:                                     ; preds = %48, %satub.exit14
  %.0.i10 = phi i8 [ 0, %satub.exit14 ], [ %phitmp36, %48 ]
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %.0.i, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %.0.i28, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %.0.i25, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %.0.i22, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %.0.i19, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %.0.i16, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %.0.i13, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %.0.i10, i8* %r.sroa.7.7..raw_idx, align 1
  ret void
}

define void @helper_packssdw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp slt i32 %3, -32768
  br i1 %4, label %satsw.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = icmp sgt i32 %3, 32767
  %7 = trunc i32 %3 to i16
  %phitmp = select i1 %6, i16 32767, i16 %7
  br label %satsw.exit

satsw.exit:                                       ; preds = %5, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %5 ]
  %8 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = icmp slt i32 %9, -32768
  br i1 %10, label %satsw.exit13, label %11

; <label>:11                                      ; preds = %satsw.exit
  %12 = icmp sgt i32 %9, 32767
  %13 = trunc i32 %9 to i16
  %phitmp14 = select i1 %12, i16 32767, i16 %13
  br label %satsw.exit13

satsw.exit13:                                     ; preds = %11, %satsw.exit
  %.0.i12 = phi i16 [ -32768, %satsw.exit ], [ %phitmp14, %11 ]
  %14 = inttoptr i64 %su to [2 x i32]*
  %15 = getelementptr inbounds [2 x i32]* %14, i64 0, i64 0
  %16 = load i32* %15, align 4
  %17 = icmp slt i32 %16, -32768
  br i1 %17, label %satsw.exit10, label %18

; <label>:18                                      ; preds = %satsw.exit13
  %19 = icmp sgt i32 %16, 32767
  %20 = trunc i32 %16 to i16
  %phitmp15 = select i1 %19, i16 32767, i16 %20
  br label %satsw.exit10

satsw.exit10:                                     ; preds = %18, %satsw.exit13
  %.0.i9 = phi i16 [ -32768, %satsw.exit13 ], [ %phitmp15, %18 ]
  %21 = getelementptr inbounds [2 x i32]* %14, i64 0, i64 1
  %22 = load i32* %21, align 4
  %23 = icmp slt i32 %22, -32768
  br i1 %23, label %satsw.exit7, label %24

; <label>:24                                      ; preds = %satsw.exit10
  %25 = icmp sgt i32 %22, 32767
  %26 = trunc i32 %22 to i16
  %phitmp16 = select i1 %25, i16 32767, i16 %26
  br label %satsw.exit7

satsw.exit7:                                      ; preds = %24, %satsw.exit10
  %.0.i6 = phi i16 [ -32768, %satsw.exit10 ], [ %phitmp16, %24 ]
  %27 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %.0.i, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %27, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %.0.i12, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %27, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %.0.i9, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %27, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %.0.i6, i16* %r.sroa.3.6..cast, align 2
  ret void
}

define void @helper_punpcklbw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %12 = load i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %16 = load i8* %15, align 1
  %17 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 3
  %18 = load i8* %17, align 1
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %3, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %6, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %8, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %10, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %12, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %14, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %16, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %18, i8* %r.sroa.7.7..raw_idx, align 1
  ret void
}

define void @helper_punpcklwd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %3, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %11, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %6, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %11, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %8, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %11, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %10, i16* %r.sroa.3.6..cast, align 2
  ret void
}

define void @helper_punpckldq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %3, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %7, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %6, i32* %r.sroa.1.4..cast, align 4
  ret void
}

define void @helper_punpckhbw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [8 x i8]*
  %5 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 4
  %6 = load i8* %5, align 1
  %7 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %8 = load i8* %7, align 1
  %9 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 5
  %10 = load i8* %9, align 1
  %11 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %12 = load i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 6
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %16 = load i8* %15, align 1
  %17 = getelementptr inbounds [8 x i8]* %4, i64 0, i64 7
  %18 = load i8* %17, align 1
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %3, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %6, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %8, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %10, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %12, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %14, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %16, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %18, i8* %r.sroa.7.7..raw_idx, align 1
  ret void
}

define void @helper_punpckhwd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [4 x i16]*
  %5 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 2
  %6 = load i16* %5, align 2
  %7 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [4 x i16]* %4, i64 0, i64 3
  %10 = load i16* %9, align 2
  %11 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %3, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %11, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %6, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %11, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %8, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %11, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %10, i16* %r.sroa.3.6..cast, align 2
  ret void
}

define void @helper_punpckhdq_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %6 = load i32* %5, align 4
  %7 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %3, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %7, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %6, i32* %r.sroa.1.4..cast, align 4
  ret void
}

define void @helper_pi2fd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 27
  %6 = tail call i32 @int32_to_float32(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [2 x i32]*
  %8 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 27
  %13 = tail call i32 @int32_to_float32(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

declare i32 @int32_to_float32(i32, %struct.float_status*)

define void @helper_pi2fw(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 27
  %7 = tail call i32 @int32_to_float32(i32 %4, %struct.float_status* %6) nounwind
  %8 = inttoptr i64 %du to [2 x i32]*
  %9 = getelementptr inbounds [2 x i32]* %8, i64 0, i64 0
  store i32 %7, i32* %9, align 4
  %10 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %11 = load i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 27
  %15 = tail call i32 @int32_to_float32(i32 %12, %struct.float_status* %14) nounwind
  %16 = getelementptr inbounds [2 x i32]* %8, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

define void @helper_pf2id(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 27
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [2 x i32]*
  %8 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 27
  %13 = tail call i32 @float32_to_int32_round_to_zero(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

declare i32 @float32_to_int32_round_to_zero(i32, %struct.float_status*)

define void @helper_pf2iw(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 27
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 %3, %struct.float_status* %5) nounwind
  %7 = icmp slt i32 %6, -32768
  br i1 %7, label %satsw.exit, label %8

; <label>:8                                       ; preds = %0
  %9 = icmp sgt i32 %6, 32767
  %.x.i = select i1 %9, i32 32767, i32 %6
  br label %satsw.exit

satsw.exit:                                       ; preds = %8, %0
  %.0.i = phi i32 [ -32768, %0 ], [ %.x.i, %8 ]
  %10 = inttoptr i64 %du to [2 x i32]*
  %11 = getelementptr inbounds [2 x i32]* %10, i64 0, i64 0
  store i32 %.0.i, i32* %11, align 4
  %12 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_to_int32_round_to_zero(i32 %13, %struct.float_status* %15) nounwind
  %17 = icmp slt i32 %16, -32768
  br i1 %17, label %satsw.exit6, label %18

; <label>:18                                      ; preds = %satsw.exit
  %19 = icmp sgt i32 %16, 32767
  %.x.i4 = select i1 %19, i32 32767, i32 %16
  br label %satsw.exit6

satsw.exit6:                                      ; preds = %18, %satsw.exit
  %.0.i5 = phi i32 [ -32768, %satsw.exit ], [ %.x.i4, %18 ]
  %20 = getelementptr inbounds [2 x i32]* %10, i64 0, i64 1
  store i32 %.0.i5, i32* %20, align 4
  ret void
}

define void @helper_pfacc(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 27
  %8 = tail call i32 @float32_add(i32 %3, i32 %5, %struct.float_status* %7) nounwind
  %9 = inttoptr i64 %su to [2 x i32]*
  %10 = getelementptr inbounds [2 x i32]* %9, i64 0, i64 0
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %9, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_add(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  %17 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %8, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %17, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %16, i32* %r.sroa.1.4..cast, align 4
  ret void
}

declare i32 @float32_add(i32, i32, %struct.float_status*)

define void @helper_pfadd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_add(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_add(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  ret void
}

define void @helper_pfcmpeq(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_eq_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  %12 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 27
  %18 = tail call i32 @float32_eq_quiet(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %12, align 4
  ret void
}

declare i32 @float32_eq_quiet(i32, i32, %struct.float_status*)

define void @helper_pfcmpge(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %du to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_le(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %5, align 4
  %12 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 27
  %18 = tail call i32 @float32_le(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %14, align 4
  ret void
}

declare i32 @float32_le(i32, i32, %struct.float_status*)

define void @helper_pfcmpgt(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %du to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %5, align 4
  %12 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 27
  %18 = tail call i32 @float32_lt(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %14, align 4
  ret void
}

declare i32 @float32_lt(i32, i32, %struct.float_status*)

define void @helper_pfmax(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %0
  %12 = load i32* %5, align 4
  store i32 %12, i32* %2, align 4
  br label %13

; <label>:13                                      ; preds = %11, %0
  %14 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %17 = load i32* %16, align 4
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 27
  %20 = tail call i32 @float32_lt(i32 %15, i32 %17, %struct.float_status* %19) nounwind
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

; <label>:22                                      ; preds = %13
  %23 = load i32* %16, align 4
  store i32 %23, i32* %14, align 4
  br label %24

; <label>:24                                      ; preds = %22, %13
  ret void
}

define void @helper_pfmin(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %du to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %0
  %12 = load i32* %2, align 4
  store i32 %12, i32* %5, align 4
  br label %13

; <label>:13                                      ; preds = %11, %0
  %14 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %17 = load i32* %16, align 4
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 27
  %20 = tail call i32 @float32_lt(i32 %15, i32 %17, %struct.float_status* %19) nounwind
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

; <label>:22                                      ; preds = %13
  %23 = load i32* %14, align 4
  store i32 %23, i32* %16, align 4
  br label %24

; <label>:24                                      ; preds = %22, %13
  ret void
}

define void @helper_pfmul(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_mul(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_mul(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  ret void
}

declare i32 @float32_mul(i32, i32, %struct.float_status*)

define void @helper_pfnacc(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 27
  %8 = tail call i32 @float32_sub(i32 %3, i32 %5, %struct.float_status* %7) nounwind
  %9 = inttoptr i64 %su to [2 x i32]*
  %10 = getelementptr inbounds [2 x i32]* %9, i64 0, i64 0
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %9, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_sub(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  %17 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %8, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %17, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %16, i32* %r.sroa.1.4..cast, align 4
  ret void
}

declare i32 @float32_sub(i32, i32, %struct.float_status*)

define void @helper_pfpnacc(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 27
  %8 = tail call i32 @float32_sub(i32 %3, i32 %5, %struct.float_status* %7) nounwind
  %9 = inttoptr i64 %su to [2 x i32]*
  %10 = getelementptr inbounds [2 x i32]* %9, i64 0, i64 0
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %9, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_add(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  %17 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %8, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %17, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %16, i32* %r.sroa.1.4..cast, align 4
  ret void
}

define void @helper_pfrcp(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 27
  %6 = tail call i32 @float32_div(i32 1065353216, i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [2 x i32]*
  %8 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 1
  store i32 %6, i32* %9, align 4
  ret void
}

declare i32 @float32_div(i32, i32, %struct.float_status*)

define void @helper_pfrsqrt(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = and i32 %3, 2147483647
  %5 = inttoptr i64 %du to [2 x i32]*
  %6 = getelementptr inbounds [2 x i32]* %5, i64 0, i64 1
  store i32 %4, i32* %6, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_sqrt(i32 %4, %struct.float_status* %8) nounwind
  %10 = load %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State* %10, i64 0, i32 27
  %12 = tail call i32 @float32_div(i32 1065353216, i32 %9, %struct.float_status* %11) nounwind
  store i32 %12, i32* %6, align 4
  %13 = load i32* %2, align 4
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  store i32 %15, i32* %6, align 4
  %16 = getelementptr inbounds [2 x i32]* %5, i64 0, i64 0
  store i32 %15, i32* %16, align 4
  ret void
}

declare i32 @float32_sqrt(i32, %struct.float_status*)

define void @helper_pfsub(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_sub(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_sub(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  ret void
}

define void @helper_pfsubr(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %du to [2 x i32]*
  %5 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 27
  %9 = tail call i32 @float32_sub(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %5, align 4
  %10 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 27
  %16 = tail call i32 @float32_sub(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %12, align 4
  ret void
}

define void @helper_pswapd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %5 = load i32* %4, align 4
  %6 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %3, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %6, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %5, i32* %r.sroa.1.4..cast, align 4
  ret void
}

define void @helper_pshufb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %r = alloca %union.MMXReg, align 8
  %1 = inttoptr i64 %su to [8 x i8]*
  %2 = inttoptr i64 %du to [8 x i8]*
  %3 = bitcast %union.MMXReg* %r to [8 x i8]*
  %4 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %5 = load i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = and i32 %6, 128
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %14

; <label>:9                                       ; preds = %0
  %10 = and i32 %6, 7
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %11
  %13 = load i8* %12, align 1
  br label %14

; <label>:14                                      ; preds = %9, %0
  %15 = phi i8 [ %13, %9 ], [ 0, %0 ]
  %16 = bitcast %union.MMXReg* %r to i8*
  store i8 %15, i8* %16, align 8
  %17 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = and i32 %19, 128
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %27

; <label>:22                                      ; preds = %14
  %23 = and i32 %19, 7
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %24
  %26 = load i8* %25, align 1
  br label %27

; <label>:27                                      ; preds = %22, %14
  %28 = phi i8 [ %26, %22 ], [ 0, %14 ]
  %29 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 1
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = and i32 %32, 128
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

; <label>:35                                      ; preds = %27
  %36 = and i32 %32, 7
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %37
  %39 = load i8* %38, align 1
  br label %40

; <label>:40                                      ; preds = %35, %27
  %41 = phi i8 [ %39, %35 ], [ 0, %27 ]
  %42 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 2
  store i8 %41, i8* %42, align 2
  %43 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = and i32 %45, 128
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %40
  %49 = and i32 %45, 7
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %50
  %52 = load i8* %51, align 1
  br label %53

; <label>:53                                      ; preds = %48, %40
  %54 = phi i8 [ %52, %48 ], [ 0, %40 ]
  %55 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 3
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = and i32 %58, 128
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %66

; <label>:61                                      ; preds = %53
  %62 = and i32 %58, 7
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %63
  %65 = load i8* %64, align 1
  br label %66

; <label>:66                                      ; preds = %61, %53
  %67 = phi i8 [ %65, %61 ], [ 0, %53 ]
  %68 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 4
  store i8 %67, i8* %68, align 4
  %69 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %70 = load i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = and i32 %71, 128
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %79

; <label>:74                                      ; preds = %66
  %75 = and i32 %71, 7
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %76
  %78 = load i8* %77, align 1
  br label %79

; <label>:79                                      ; preds = %74, %66
  %80 = phi i8 [ %78, %74 ], [ 0, %66 ]
  %81 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 5
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %83 = load i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = and i32 %84, 128
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %92

; <label>:87                                      ; preds = %79
  %88 = and i32 %84, 7
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %89
  %91 = load i8* %90, align 1
  br label %92

; <label>:92                                      ; preds = %87, %79
  %93 = phi i8 [ %91, %87 ], [ 0, %79 ]
  %94 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 6
  store i8 %93, i8* %94, align 2
  %95 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %96 = load i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = and i32 %97, 128
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %105

; <label>:100                                     ; preds = %92
  %101 = and i32 %97, 7
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [8 x i8]* %2, i64 0, i64 %102
  %104 = load i8* %103, align 1
  br label %105

; <label>:105                                     ; preds = %100, %92
  %106 = phi i8 [ %104, %100 ], [ 0, %92 ]
  %107 = getelementptr inbounds [8 x i8]* %3, i64 0, i64 7
  store i8 %106, i8* %107, align 1
  %108 = getelementptr inbounds %union.MMXReg* %r, i64 0, i32 0
  %109 = inttoptr i64 %du to i64*
  %110 = load i64* %108, align 8
  store i64 %110, i64* %109, align 8
  ret void
}

define void @helper_phaddw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %5 = load i16* %4, align 2
  %6 = add i16 %5, %3
  store i16 %6, i16* %2, align 2
  %7 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %10 = load i16* %9, align 2
  %11 = add i16 %10, %8
  store i16 %11, i16* %4, align 2
  %12 = inttoptr i64 %su to [4 x i16]*
  %13 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 0
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = add i16 %16, %14
  store i16 %17, i16* %7, align 2
  %18 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 2
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = add i16 %21, %19
  store i16 %22, i16* %9, align 2
  ret void
}

define void @helper_phaddd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = add nsw i32 %5, %3
  store i32 %6, i32* %2, align 4
  %7 = inttoptr i64 %su to [2 x i32]*
  %8 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 0
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = add nsw i32 %11, %9
  store i32 %12, i32* %4, align 4
  ret void
}

define void @helper_phaddsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %6 = load i16* %5, align 2
  %7 = sext i16 %6 to i32
  %8 = add nsw i32 %7, %4
  %9 = icmp slt i32 %8, -32768
  br i1 %9, label %satsw.exit, label %10

; <label>:10                                      ; preds = %0
  %11 = icmp sgt i32 %8, 32767
  %12 = trunc i32 %8 to i16
  %phitmp = select i1 %11, i16 32767, i16 %12
  br label %satsw.exit

satsw.exit:                                       ; preds = %10, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %10 ]
  store i16 %.0.i, i16* %2, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = icmp slt i32 %19, -32768
  br i1 %20, label %satsw.exit20, label %21

; <label>:21                                      ; preds = %satsw.exit
  %22 = icmp sgt i32 %19, 32767
  %23 = trunc i32 %19 to i16
  %phitmp21 = select i1 %22, i16 32767, i16 %23
  br label %satsw.exit20

satsw.exit20:                                     ; preds = %21, %satsw.exit
  %.0.i19 = phi i16 [ -32768, %satsw.exit ], [ %phitmp21, %21 ]
  store i16 %.0.i19, i16* %5, align 2
  %24 = inttoptr i64 %su to [4 x i16]*
  %25 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 0
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 1
  %29 = load i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = add nsw i32 %30, %27
  %32 = icmp slt i32 %31, -32768
  br i1 %32, label %satsw.exit17, label %33

; <label>:33                                      ; preds = %satsw.exit20
  %34 = icmp sgt i32 %31, 32767
  %35 = trunc i32 %31 to i16
  %phitmp22 = select i1 %34, i16 32767, i16 %35
  br label %satsw.exit17

satsw.exit17:                                     ; preds = %33, %satsw.exit20
  %.0.i16 = phi i16 [ -32768, %satsw.exit20 ], [ %phitmp22, %33 ]
  store i16 %.0.i16, i16* %13, align 2
  %36 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 2
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = add nsw i32 %41, %38
  %43 = icmp slt i32 %42, -32768
  br i1 %43, label %satsw.exit14, label %44

; <label>:44                                      ; preds = %satsw.exit17
  %45 = icmp sgt i32 %42, 32767
  %46 = trunc i32 %42 to i16
  %phitmp23 = select i1 %45, i16 32767, i16 %46
  br label %satsw.exit14

satsw.exit14:                                     ; preds = %44, %satsw.exit17
  %.0.i13 = phi i16 [ -32768, %satsw.exit17 ], [ %phitmp23, %44 ]
  store i16 %.0.i13, i16* %16, align 2
  ret void
}

define void @helper_pmaddubsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %du to [8 x i8]*
  %6 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = mul nsw i32 %15, %12
  %17 = add nsw i32 %16, %9
  %18 = icmp slt i32 %17, -32768
  br i1 %18, label %satsw.exit, label %19

; <label>:19                                      ; preds = %0
  %20 = icmp sgt i32 %17, 32767
  %21 = trunc i32 %17 to i16
  %phitmp = select i1 %20, i16 32767, i16 %21
  br label %satsw.exit

satsw.exit:                                       ; preds = %19, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %19 ]
  %22 = inttoptr i64 %du to [4 x i16]*
  %23 = getelementptr inbounds [4 x i16]* %22, i64 0, i64 0
  store i16 %.0.i, i16* %23, align 2
  %24 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %25 = load i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 2
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = mul nsw i32 %29, %26
  %31 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 3
  %35 = load i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nsw i32 %36, %33
  %38 = add nsw i32 %37, %30
  %39 = icmp slt i32 %38, -32768
  br i1 %39, label %satsw.exit28, label %40

; <label>:40                                      ; preds = %satsw.exit
  %41 = icmp sgt i32 %38, 32767
  %42 = trunc i32 %38 to i16
  %phitmp29 = select i1 %41, i16 32767, i16 %42
  br label %satsw.exit28

satsw.exit28:                                     ; preds = %40, %satsw.exit
  %.0.i27 = phi i16 [ -32768, %satsw.exit ], [ %phitmp29, %40 ]
  %43 = getelementptr inbounds [4 x i16]* %22, i64 0, i64 1
  store i16 %.0.i27, i16* %43, align 2
  %44 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %45 = load i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = mul nsw i32 %49, %46
  %51 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %52 = load i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 5
  %55 = load i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nsw i32 %56, %53
  %58 = add nsw i32 %57, %50
  %59 = icmp slt i32 %58, -32768
  br i1 %59, label %satsw.exit25, label %60

; <label>:60                                      ; preds = %satsw.exit28
  %61 = icmp sgt i32 %58, 32767
  %62 = trunc i32 %58 to i16
  %phitmp30 = select i1 %61, i16 32767, i16 %62
  br label %satsw.exit25

satsw.exit25:                                     ; preds = %60, %satsw.exit28
  %.0.i24 = phi i16 [ -32768, %satsw.exit28 ], [ %phitmp30, %60 ]
  %63 = getelementptr inbounds [4 x i16]* %22, i64 0, i64 2
  store i16 %.0.i24, i16* %63, align 2
  %64 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %65 = load i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 6
  %68 = load i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nsw i32 %69, %66
  %71 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %72 = load i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = getelementptr inbounds [8 x i8]* %5, i64 0, i64 7
  %75 = load i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = mul nsw i32 %76, %73
  %78 = add nsw i32 %77, %70
  %79 = icmp slt i32 %78, -32768
  br i1 %79, label %satsw.exit22, label %80

; <label>:80                                      ; preds = %satsw.exit25
  %81 = icmp sgt i32 %78, 32767
  %82 = trunc i32 %78 to i16
  %phitmp31 = select i1 %81, i16 32767, i16 %82
  br label %satsw.exit22

satsw.exit22:                                     ; preds = %80, %satsw.exit25
  %.0.i21 = phi i16 [ -32768, %satsw.exit25 ], [ %phitmp31, %80 ]
  %83 = getelementptr inbounds [4 x i16]* %22, i64 0, i64 3
  store i16 %.0.i21, i16* %83, align 2
  ret void
}

define void @helper_phsubw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %5 = load i16* %4, align 2
  %6 = sub i16 %3, %5
  store i16 %6, i16* %2, align 2
  %7 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %10 = load i16* %9, align 2
  %11 = sub i16 %8, %10
  store i16 %11, i16* %4, align 2
  %12 = inttoptr i64 %su to [4 x i16]*
  %13 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 0
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = sub i16 %14, %16
  store i16 %17, i16* %7, align 2
  %18 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 2
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16]* %12, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = sub i16 %19, %21
  store i16 %22, i16* %9, align 2
  ret void
}

define void @helper_phsubd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = sub nsw i32 %3, %5
  store i32 %6, i32* %2, align 4
  %7 = inttoptr i64 %su to [2 x i32]*
  %8 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 0
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = sub nsw i32 %9, %11
  store i32 %12, i32* %4, align 4
  ret void
}

define void @helper_phsubsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %6 = load i16* %5, align 2
  %7 = sext i16 %6 to i32
  %8 = sub nsw i32 %4, %7
  %9 = icmp slt i32 %8, -32768
  br i1 %9, label %satsw.exit, label %10

; <label>:10                                      ; preds = %0
  %11 = icmp sgt i32 %8, 32767
  %12 = trunc i32 %8 to i16
  %phitmp = select i1 %11, i16 32767, i16 %12
  br label %satsw.exit

satsw.exit:                                       ; preds = %10, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %10 ]
  store i16 %.0.i, i16* %2, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = icmp slt i32 %19, -32768
  br i1 %20, label %satsw.exit20, label %21

; <label>:21                                      ; preds = %satsw.exit
  %22 = icmp sgt i32 %19, 32767
  %23 = trunc i32 %19 to i16
  %phitmp21 = select i1 %22, i16 32767, i16 %23
  br label %satsw.exit20

satsw.exit20:                                     ; preds = %21, %satsw.exit
  %.0.i19 = phi i16 [ -32768, %satsw.exit ], [ %phitmp21, %21 ]
  store i16 %.0.i19, i16* %5, align 2
  %24 = inttoptr i64 %su to [4 x i16]*
  %25 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 0
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 1
  %29 = load i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, -32768
  br i1 %32, label %satsw.exit17, label %33

; <label>:33                                      ; preds = %satsw.exit20
  %34 = icmp sgt i32 %31, 32767
  %35 = trunc i32 %31 to i16
  %phitmp22 = select i1 %34, i16 32767, i16 %35
  br label %satsw.exit17

satsw.exit17:                                     ; preds = %33, %satsw.exit20
  %.0.i16 = phi i16 [ -32768, %satsw.exit20 ], [ %phitmp22, %33 ]
  store i16 %.0.i16, i16* %13, align 2
  %36 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 2
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [4 x i16]* %24, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, -32768
  br i1 %43, label %satsw.exit14, label %44

; <label>:44                                      ; preds = %satsw.exit17
  %45 = icmp sgt i32 %42, 32767
  %46 = trunc i32 %42 to i16
  %phitmp23 = select i1 %45, i16 32767, i16 %46
  br label %satsw.exit14

satsw.exit14:                                     ; preds = %44, %satsw.exit17
  %.0.i13 = phi i16 [ -32768, %satsw.exit17 ], [ %phitmp23, %44 ]
  store i16 %.0.i13, i16* %16, align 2
  ret void
}

define void @helper_pabsb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = icmp slt i8 %3, 0
  %5 = sub i8 0, %3
  %6 = select i1 %4, i8 %5, i8 %3
  %7 = inttoptr i64 %du to [8 x i8]*
  %8 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 0
  store i8 %6, i8* %8, align 1
  %9 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = sub i8 0, %10
  %13 = select i1 %11, i8 %12, i8 %10
  %14 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 1
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = sub i8 0, %16
  %19 = select i1 %17, i8 %18, i8 %16
  %20 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 2
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %22 = load i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = sub i8 0, %22
  %25 = select i1 %23, i8 %24, i8 %22
  %26 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %28 = load i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = sub i8 0, %28
  %31 = select i1 %29, i8 %30, i8 %28
  %32 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 4
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %34 = load i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  %36 = sub i8 0, %34
  %37 = select i1 %35, i8 %36, i8 %34
  %38 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 5
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %40 = load i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  %42 = sub i8 0, %40
  %43 = select i1 %41, i8 %42, i8 %40
  %44 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 6
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %46 = load i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  %48 = sub i8 0, %46
  %49 = select i1 %47, i8 %48, i8 %46
  %50 = getelementptr inbounds [8 x i8]* %7, i64 0, i64 7
  store i8 %49, i8* %50, align 1
  ret void
}

define void @helper_pabsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = icmp slt i16 %3, 0
  %5 = sub i16 0, %3
  %6 = select i1 %4, i16 %5, i16 %3
  %7 = inttoptr i64 %du to [4 x i16]*
  %8 = getelementptr inbounds [4 x i16]* %7, i64 0, i64 0
  store i16 %6, i16* %8, align 2
  %9 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = icmp slt i16 %10, 0
  %12 = sub i16 0, %10
  %13 = select i1 %11, i16 %12, i16 %10
  %14 = getelementptr inbounds [4 x i16]* %7, i64 0, i64 1
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp slt i16 %16, 0
  %18 = sub i16 0, %16
  %19 = select i1 %17, i16 %18, i16 %16
  %20 = getelementptr inbounds [4 x i16]* %7, i64 0, i64 2
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = icmp slt i16 %22, 0
  %24 = sub i16 0, %22
  %25 = select i1 %23, i16 %24, i16 %22
  %26 = getelementptr inbounds [4 x i16]* %7, i64 0, i64 3
  store i16 %25, i16* %26, align 2
  ret void
}

define void @helper_pabsd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  %5 = sub nsw i32 0, %3
  %6 = select i1 %4, i32 %5, i32 %3
  %7 = inttoptr i64 %du to [2 x i32]*
  %8 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 0, %10
  %13 = select i1 %11, i32 %12, i32 %10
  %14 = getelementptr inbounds [2 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

define void @helper_pmulhrsw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [4 x i16]*
  %6 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = add nsw i32 %9, 16384
  %11 = lshr i32 %10, 15
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = mul nsw i32 %18, %15
  %20 = add nsw i32 %19, 16384
  %21 = lshr i32 %20, 15
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = add nsw i32 %29, 16384
  %31 = lshr i32 %30, 15
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds [4 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = mul nsw i32 %38, %35
  %40 = add nsw i32 %39, 16384
  %41 = lshr i32 %40, 15
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %33, align 2
  ret void
}

define void @helper_psignb_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i8]*
  %2 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = icmp sgt i8 %3, -1
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = icmp eq i8 %3, 0
  %.pre = inttoptr i64 %du to [8 x i8]*
  %.pre47 = getelementptr inbounds [8 x i8]* %.pre, i64 0, i64 0
  br i1 %6, label %._crit_edge46, label %7

; <label>:7                                       ; preds = %5
  %8 = load i8* %.pre47, align 1
  br label %._crit_edge46

; <label>:9                                       ; preds = %0
  %10 = inttoptr i64 %du to [8 x i8]*
  %11 = getelementptr inbounds [8 x i8]* %10, i64 0, i64 0
  %12 = load i8* %11, align 1
  %13 = sub i8 0, %12
  br label %._crit_edge46

._crit_edge46:                                    ; preds = %9, %7, %5
  %.pre-phi48 = phi i8* [ %.pre47, %7 ], [ %11, %9 ], [ %.pre47, %5 ]
  %.pre-phi = phi [8 x i8]* [ %.pre, %7 ], [ %10, %9 ], [ %.pre, %5 ]
  %14 = phi i8 [ %8, %7 ], [ %13, %9 ], [ 0, %5 ]
  store i8 %14, i8* %.pre-phi48, align 1
  %15 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 1
  %16 = load i8* %15, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %._crit_edge46
  %19 = icmp eq i8 %16, 0
  %.pre49 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 1
  br i1 %19, label %._crit_edge45, label %20

; <label>:20                                      ; preds = %18
  %21 = load i8* %.pre49, align 1
  br label %._crit_edge45

; <label>:22                                      ; preds = %._crit_edge46
  %23 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 1
  %24 = load i8* %23, align 1
  %25 = sub i8 0, %24
  br label %._crit_edge45

._crit_edge45:                                    ; preds = %22, %20, %18
  %.pre-phi50 = phi i8* [ %.pre49, %20 ], [ %23, %22 ], [ %.pre49, %18 ]
  %26 = phi i8 [ %21, %20 ], [ %25, %22 ], [ 0, %18 ]
  store i8 %26, i8* %.pre-phi50, align 1
  %27 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 2
  %28 = load i8* %27, align 1
  %29 = icmp sgt i8 %28, -1
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %._crit_edge45
  %31 = icmp eq i8 %28, 0
  %.pre51 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 2
  br i1 %31, label %._crit_edge44, label %32

; <label>:32                                      ; preds = %30
  %33 = load i8* %.pre51, align 1
  br label %._crit_edge44

; <label>:34                                      ; preds = %._crit_edge45
  %35 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 2
  %36 = load i8* %35, align 1
  %37 = sub i8 0, %36
  br label %._crit_edge44

._crit_edge44:                                    ; preds = %34, %32, %30
  %.pre-phi52 = phi i8* [ %.pre51, %32 ], [ %35, %34 ], [ %.pre51, %30 ]
  %38 = phi i8 [ %33, %32 ], [ %37, %34 ], [ 0, %30 ]
  store i8 %38, i8* %.pre-phi52, align 1
  %39 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = icmp sgt i8 %40, -1
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %._crit_edge44
  %43 = icmp eq i8 %40, 0
  %.pre53 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 3
  br i1 %43, label %._crit_edge43, label %44

; <label>:44                                      ; preds = %42
  %45 = load i8* %.pre53, align 1
  br label %._crit_edge43

; <label>:46                                      ; preds = %._crit_edge44
  %47 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 3
  %48 = load i8* %47, align 1
  %49 = sub i8 0, %48
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %46, %44, %42
  %.pre-phi54 = phi i8* [ %.pre53, %44 ], [ %47, %46 ], [ %.pre53, %42 ]
  %50 = phi i8 [ %45, %44 ], [ %49, %46 ], [ 0, %42 ]
  store i8 %50, i8* %.pre-phi54, align 1
  %51 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 4
  %52 = load i8* %51, align 1
  %53 = icmp sgt i8 %52, -1
  br i1 %53, label %54, label %58

; <label>:54                                      ; preds = %._crit_edge43
  %55 = icmp eq i8 %52, 0
  %.pre55 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 4
  br i1 %55, label %._crit_edge42, label %56

; <label>:56                                      ; preds = %54
  %57 = load i8* %.pre55, align 1
  br label %._crit_edge42

; <label>:58                                      ; preds = %._crit_edge43
  %59 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 4
  %60 = load i8* %59, align 1
  %61 = sub i8 0, %60
  br label %._crit_edge42

._crit_edge42:                                    ; preds = %58, %56, %54
  %.pre-phi56 = phi i8* [ %.pre55, %56 ], [ %59, %58 ], [ %.pre55, %54 ]
  %62 = phi i8 [ %57, %56 ], [ %61, %58 ], [ 0, %54 ]
  store i8 %62, i8* %.pre-phi56, align 1
  %63 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 5
  %64 = load i8* %63, align 1
  %65 = icmp sgt i8 %64, -1
  br i1 %65, label %66, label %70

; <label>:66                                      ; preds = %._crit_edge42
  %67 = icmp eq i8 %64, 0
  %.pre57 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 5
  br i1 %67, label %._crit_edge41, label %68

; <label>:68                                      ; preds = %66
  %69 = load i8* %.pre57, align 1
  br label %._crit_edge41

; <label>:70                                      ; preds = %._crit_edge42
  %71 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 5
  %72 = load i8* %71, align 1
  %73 = sub i8 0, %72
  br label %._crit_edge41

._crit_edge41:                                    ; preds = %70, %68, %66
  %.pre-phi58 = phi i8* [ %.pre57, %68 ], [ %71, %70 ], [ %.pre57, %66 ]
  %74 = phi i8 [ %69, %68 ], [ %73, %70 ], [ 0, %66 ]
  store i8 %74, i8* %.pre-phi58, align 1
  %75 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 6
  %76 = load i8* %75, align 1
  %77 = icmp sgt i8 %76, -1
  br i1 %77, label %78, label %82

; <label>:78                                      ; preds = %._crit_edge41
  %79 = icmp eq i8 %76, 0
  %.pre59 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 6
  br i1 %79, label %._crit_edge40, label %80

; <label>:80                                      ; preds = %78
  %81 = load i8* %.pre59, align 1
  br label %._crit_edge40

; <label>:82                                      ; preds = %._crit_edge41
  %83 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 6
  %84 = load i8* %83, align 1
  %85 = sub i8 0, %84
  br label %._crit_edge40

._crit_edge40:                                    ; preds = %82, %80, %78
  %.pre-phi60 = phi i8* [ %.pre59, %80 ], [ %83, %82 ], [ %.pre59, %78 ]
  %86 = phi i8 [ %81, %80 ], [ %85, %82 ], [ 0, %78 ]
  store i8 %86, i8* %.pre-phi60, align 1
  %87 = getelementptr inbounds [8 x i8]* %1, i64 0, i64 7
  %88 = load i8* %87, align 1
  %89 = icmp sgt i8 %88, -1
  br i1 %89, label %90, label %94

; <label>:90                                      ; preds = %._crit_edge40
  %91 = icmp eq i8 %88, 0
  %.pre61 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 7
  br i1 %91, label %._crit_edge, label %92

; <label>:92                                      ; preds = %90
  %93 = load i8* %.pre61, align 1
  br label %._crit_edge

; <label>:94                                      ; preds = %._crit_edge40
  %95 = getelementptr inbounds [8 x i8]* %.pre-phi, i64 0, i64 7
  %96 = load i8* %95, align 1
  %97 = sub i8 0, %96
  br label %._crit_edge

._crit_edge:                                      ; preds = %94, %92, %90
  %.pre-phi62 = phi i8* [ %.pre61, %92 ], [ %95, %94 ], [ %.pre61, %90 ]
  %98 = phi i8 [ %93, %92 ], [ %97, %94 ], [ 0, %90 ]
  store i8 %98, i8* %.pre-phi62, align 1
  ret void
}

define void @helper_psignw_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i16]*
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = icmp sgt i16 %3, -1
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = icmp eq i16 %3, 0
  %.pre = inttoptr i64 %du to [4 x i16]*
  %.pre23 = getelementptr inbounds [4 x i16]* %.pre, i64 0, i64 0
  br i1 %6, label %._crit_edge22, label %7

; <label>:7                                       ; preds = %5
  %8 = load i16* %.pre23, align 2
  br label %._crit_edge22

; <label>:9                                       ; preds = %0
  %10 = inttoptr i64 %du to [4 x i16]*
  %11 = getelementptr inbounds [4 x i16]* %10, i64 0, i64 0
  %12 = load i16* %11, align 2
  %13 = sub i16 0, %12
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %9, %7, %5
  %.pre-phi24 = phi i16* [ %.pre23, %7 ], [ %11, %9 ], [ %.pre23, %5 ]
  %.pre-phi = phi [4 x i16]* [ %.pre, %7 ], [ %10, %9 ], [ %.pre, %5 ]
  %14 = phi i16 [ %8, %7 ], [ %13, %9 ], [ 0, %5 ]
  store i16 %14, i16* %.pre-phi24, align 2
  %15 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = icmp sgt i16 %16, -1
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %._crit_edge22
  %19 = icmp eq i16 %16, 0
  %.pre25 = getelementptr inbounds [4 x i16]* %.pre-phi, i64 0, i64 1
  br i1 %19, label %._crit_edge21, label %20

; <label>:20                                      ; preds = %18
  %21 = load i16* %.pre25, align 2
  br label %._crit_edge21

; <label>:22                                      ; preds = %._crit_edge22
  %23 = getelementptr inbounds [4 x i16]* %.pre-phi, i64 0, i64 1
  %24 = load i16* %23, align 2
  %25 = sub i16 0, %24
  br label %._crit_edge21

._crit_edge21:                                    ; preds = %22, %20, %18
  %.pre-phi26 = phi i16* [ %.pre25, %20 ], [ %23, %22 ], [ %.pre25, %18 ]
  %26 = phi i16 [ %21, %20 ], [ %25, %22 ], [ 0, %18 ]
  store i16 %26, i16* %.pre-phi26, align 2
  %27 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 2
  %28 = load i16* %27, align 2
  %29 = icmp sgt i16 %28, -1
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %._crit_edge21
  %31 = icmp eq i16 %28, 0
  %.pre27 = getelementptr inbounds [4 x i16]* %.pre-phi, i64 0, i64 2
  br i1 %31, label %._crit_edge20, label %32

; <label>:32                                      ; preds = %30
  %33 = load i16* %.pre27, align 2
  br label %._crit_edge20

; <label>:34                                      ; preds = %._crit_edge21
  %35 = getelementptr inbounds [4 x i16]* %.pre-phi, i64 0, i64 2
  %36 = load i16* %35, align 2
  %37 = sub i16 0, %36
  br label %._crit_edge20

._crit_edge20:                                    ; preds = %34, %32, %30
  %.pre-phi28 = phi i16* [ %.pre27, %32 ], [ %35, %34 ], [ %.pre27, %30 ]
  %38 = phi i16 [ %33, %32 ], [ %37, %34 ], [ 0, %30 ]
  store i16 %38, i16* %.pre-phi28, align 2
  %39 = getelementptr inbounds [4 x i16]* %1, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = icmp sgt i16 %40, -1
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %._crit_edge20
  %43 = icmp eq i16 %40, 0
  %.pre29 = getelementptr inbounds [4 x i16]* %.pre-phi, i64 0, i64 3
  br i1 %43, label %._crit_edge, label %44

; <label>:44                                      ; preds = %42
  %45 = load i16* %.pre29, align 2
  br label %._crit_edge

; <label>:46                                      ; preds = %._crit_edge20
  %47 = getelementptr inbounds [4 x i16]* %.pre-phi, i64 0, i64 3
  %48 = load i16* %47, align 2
  %49 = sub i16 0, %48
  br label %._crit_edge

._crit_edge:                                      ; preds = %46, %44, %42
  %.pre-phi30 = phi i16* [ %.pre29, %44 ], [ %47, %46 ], [ %.pre29, %42 ]
  %50 = phi i16 [ %45, %44 ], [ %49, %46 ], [ 0, %42 ]
  store i16 %50, i16* %.pre-phi30, align 2
  ret void
}

define void @helper_psignd_mmx(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [2 x i32]*
  %2 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %3, 0
  %.pre = inttoptr i64 %du to [2 x i32]*
  %.pre11 = getelementptr inbounds [2 x i32]* %.pre, i64 0, i64 0
  br i1 %6, label %._crit_edge10, label %7

; <label>:7                                       ; preds = %5
  %8 = load i32* %.pre11, align 4
  br label %._crit_edge10

; <label>:9                                       ; preds = %0
  %10 = inttoptr i64 %du to [2 x i32]*
  %11 = getelementptr inbounds [2 x i32]* %10, i64 0, i64 0
  %12 = load i32* %11, align 4
  %13 = sub nsw i32 0, %12
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %9, %7, %5
  %.pre-phi12 = phi i32* [ %.pre11, %7 ], [ %11, %9 ], [ %.pre11, %5 ]
  %.pre-phi = phi [2 x i32]* [ %.pre, %7 ], [ %10, %9 ], [ %.pre, %5 ]
  %14 = phi i32 [ %8, %7 ], [ %13, %9 ], [ 0, %5 ]
  store i32 %14, i32* %.pre-phi12, align 4
  %15 = getelementptr inbounds [2 x i32]* %1, i64 0, i64 1
  %16 = load i32* %15, align 4
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %._crit_edge10
  %19 = icmp eq i32 %16, 0
  %.pre13 = getelementptr inbounds [2 x i32]* %.pre-phi, i64 0, i64 1
  br i1 %19, label %._crit_edge, label %20

; <label>:20                                      ; preds = %18
  %21 = load i32* %.pre13, align 4
  br label %._crit_edge

; <label>:22                                      ; preds = %._crit_edge10
  %23 = getelementptr inbounds [2 x i32]* %.pre-phi, i64 0, i64 1
  %24 = load i32* %23, align 4
  %25 = sub nsw i32 0, %24
  br label %._crit_edge

._crit_edge:                                      ; preds = %22, %20, %18
  %.pre-phi14 = phi i32* [ %.pre13, %20 ], [ %23, %22 ], [ %.pre13, %18 ]
  %26 = phi i32 [ %21, %20 ], [ %25, %22 ], [ 0, %18 ]
  store i32 %26, i32* %.pre-phi14, align 4
  ret void
}

define void @helper_palignr_mmx(i64 %du, i64 %su, i32 %shift) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.MMXReg*
  %2 = inttoptr i64 %su to %union.MMXReg*
  %3 = icmp sgt i32 %shift, 15
  br i1 %3, label %37, label %4

; <label>:4                                       ; preds = %0
  %5 = shl i32 %shift, 3
  %.off = add i32 %5, 63
  %6 = icmp ult i32 %.off, 127
  br i1 %6, label %7, label %17

; <label>:7                                       ; preds = %4
  %8 = icmp sgt i32 %5, 0
  %9 = getelementptr inbounds %union.MMXReg* %2, i64 0, i32 0
  %10 = load i64* %9, align 8
  br i1 %8, label %11, label %.thread

; <label>:11                                      ; preds = %7
  %12 = zext i32 %5 to i64
  %13 = lshr i64 %10, %12
  br label %17

.thread:                                          ; preds = %7
  %14 = sub nsw i32 0, %5
  %15 = zext i32 %14 to i64
  %16 = shl i64 %10, %15
  br label %33

; <label>:17                                      ; preds = %11, %4
  %18 = phi i64 [ %13, %11 ], [ 0, %4 ]
  %19 = add nsw i32 %5, -64
  %20 = icmp slt i32 %19, 64
  %21 = icmp sgt i32 %5, 0
  %or.cond13 = and i1 %20, %21
  br i1 %or.cond13, label %22, label %33

; <label>:22                                      ; preds = %17
  %23 = icmp sgt i32 %19, 0
  %24 = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  %25 = load i64* %24, align 8
  br i1 %23, label %26, label %29

; <label>:26                                      ; preds = %22
  %27 = zext i32 %19 to i64
  %28 = lshr i64 %25, %27
  br label %33

; <label>:29                                      ; preds = %22
  %30 = sub i32 64, %5
  %31 = zext i32 %30 to i64
  %32 = shl i64 %25, %31
  br label %33

; <label>:33                                      ; preds = %29, %26, %17, %.thread
  %34 = phi i64 [ %18, %26 ], [ %18, %29 ], [ %18, %17 ], [ %16, %.thread ]
  %35 = phi i64 [ %28, %26 ], [ %32, %29 ], [ 0, %17 ], [ 0, %.thread ]
  %36 = or i64 %35, %34
  br label %37

; <label>:37                                      ; preds = %33, %0
  %r.sroa.0.0 = phi i64 [ %36, %33 ], [ 0, %0 ]
  %r.sroa.0.0..idx = getelementptr inbounds %union.MMXReg* %1, i64 0, i32 0
  store i64 %r.sroa.0.0, i64* %r.sroa.0.0..idx, align 8
  ret void
}

define void @helper_psrlw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 15
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  br label %53

; <label>:7                                       ; preds = %0
  %8 = inttoptr i64 %su to [16 x i8]*
  %9 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 0
  %10 = load i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = inttoptr i64 %du to [8 x i16]*
  %13 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 0
  %14 = load i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = lshr i32 %15, %11
  %17 = trunc i32 %16 to i16
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 1
  %19 = load i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = lshr i32 %20, %11
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = lshr i32 %25, %11
  %27 = trunc i32 %26 to i16
  store i16 %27, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 3
  %29 = load i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = lshr i32 %30, %11
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 4
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = lshr i32 %35, %11
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 5
  %39 = load i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = lshr i32 %40, %11
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 2
  %43 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 6
  %44 = load i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = lshr i32 %45, %11
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 2
  %48 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 7
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = lshr i32 %50, %11
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %48, align 2
  br label %53

; <label>:53                                      ; preds = %7, %5
  ret void
}

define void @helper_psraw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 15
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %su to [16 x i8]*
  %7 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  br label %10

; <label>:10                                      ; preds = %5, %0
  %shift.0 = phi i32 [ %9, %5 ], [ 15, %0 ]
  %11 = inttoptr i64 %du to [8 x i16]*
  %12 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 0
  %13 = load i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = ashr i32 %14, %shift.0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %12, align 2
  %17 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = ashr i32 %19, %shift.0
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %17, align 2
  %22 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 2
  %23 = load i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = ashr i32 %24, %shift.0
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %22, align 2
  %27 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 3
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = ashr i32 %29, %shift.0
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %27, align 2
  %32 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 4
  %33 = load i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = ashr i32 %34, %shift.0
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 5
  %38 = load i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = ashr i32 %39, %shift.0
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %37, align 2
  %42 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 6
  %43 = load i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = ashr i32 %44, %shift.0
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %42, align 2
  %47 = getelementptr inbounds [8 x i16]* %11, i64 0, i64 7
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = ashr i32 %49, %shift.0
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %47, align 2
  ret void
}

define void @helper_psllw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 15
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  br label %53

; <label>:7                                       ; preds = %0
  %8 = inttoptr i64 %su to [16 x i8]*
  %9 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 0
  %10 = load i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = inttoptr i64 %du to [8 x i16]*
  %13 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 0
  %14 = load i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = shl i32 %15, %11
  %17 = trunc i32 %16 to i16
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 1
  %19 = load i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = shl i32 %20, %11
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = shl i32 %25, %11
  %27 = trunc i32 %26 to i16
  store i16 %27, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 3
  %29 = load i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = shl i32 %30, %11
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 4
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = shl i32 %35, %11
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 5
  %39 = load i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = shl i32 %40, %11
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 2
  %43 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 6
  %44 = load i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = shl i32 %45, %11
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 2
  %48 = getelementptr inbounds [8 x i16]* %12, i64 0, i64 7
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = shl i32 %50, %11
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %48, align 2
  br label %53

; <label>:53                                      ; preds = %7, %5
  ret void
}

define void @helper_psrld_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 31
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  br label %25

; <label>:7                                       ; preds = %0
  %8 = inttoptr i64 %su to [16 x i8]*
  %9 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 0
  %10 = load i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = inttoptr i64 %du to [4 x i32]*
  %13 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 0
  %14 = load i32* %13, align 4
  %15 = lshr i32 %14, %11
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 1
  %17 = load i32* %16, align 4
  %18 = lshr i32 %17, %11
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = lshr i32 %20, %11
  store i32 %21, i32* %19, align 4
  %22 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 3
  %23 = load i32* %22, align 4
  %24 = lshr i32 %23, %11
  store i32 %24, i32* %22, align 4
  br label %25

; <label>:25                                      ; preds = %7, %5
  ret void
}

define void @helper_psrad_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 31
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %su to [16 x i8]*
  %7 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  br label %10

; <label>:10                                      ; preds = %5, %0
  %shift.0 = phi i32 [ %9, %5 ], [ 31, %0 ]
  %11 = inttoptr i64 %du to [4 x i32]*
  %12 = getelementptr inbounds [4 x i32]* %11, i64 0, i64 0
  %13 = load i32* %12, align 4
  %14 = ashr i32 %13, %shift.0
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds [4 x i32]* %11, i64 0, i64 1
  %16 = load i32* %15, align 4
  %17 = ashr i32 %16, %shift.0
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds [4 x i32]* %11, i64 0, i64 2
  %19 = load i32* %18, align 4
  %20 = ashr i32 %19, %shift.0
  store i32 %20, i32* %18, align 4
  %21 = getelementptr inbounds [4 x i32]* %11, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = ashr i32 %22, %shift.0
  store i32 %23, i32* %21, align 4
  ret void
}

define void @helper_pslld_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp ugt i64 %3, 31
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = inttoptr i64 %du to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  br label %25

; <label>:7                                       ; preds = %0
  %8 = inttoptr i64 %su to [16 x i8]*
  %9 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 0
  %10 = load i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = inttoptr i64 %du to [4 x i32]*
  %13 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 0
  %14 = load i32* %13, align 4
  %15 = shl i32 %14, %11
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 1
  %17 = load i32* %16, align 4
  %18 = shl i32 %17, %11
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = shl i32 %20, %11
  store i32 %21, i32* %19, align 4
  %22 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 3
  %23 = load i32* %22, align 4
  %24 = shl i32 %23, %11
  store i32 %24, i32* %22, align 4
  br label %25

; <label>:25                                      ; preds = %7, %5
  ret void
}

define void @helper_psrlq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = inttoptr i64 %du to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i32 8, i1 false)
  br label %19

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [16 x i8]*
  %10 = getelementptr inbounds [16 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %13 = load i64* %12, align 8
  %14 = zext i8 %11 to i64
  %15 = lshr i64 %13, %14
  store i64 %15, i64* %12, align 8
  %16 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %17 = load i64* %16, align 8
  %18 = lshr i64 %17, %14
  store i64 %18, i64* %16, align 8
  br label %19

; <label>:19                                      ; preds = %8, %6
  ret void
}

define void @helper_psllq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = inttoptr i64 %du to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i32 8, i1 false)
  br label %19

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [16 x i8]*
  %10 = getelementptr inbounds [16 x i8]* %9, i64 0, i64 0
  %11 = load i8* %10, align 1
  %12 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %13 = load i64* %12, align 8
  %14 = zext i8 %11 to i64
  %15 = shl i64 %13, %14
  store i64 %15, i64* %12, align 8
  %16 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %17 = load i64* %16, align 8
  %18 = shl i64 %17, %14
  store i64 %18, i64* %16, align 8
  br label %19

; <label>:19                                      ; preds = %8, %6
  ret void
}

define void @helper_psrldq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp sgt i32 %3, 16
  %. = select i1 %4, i32 16, i32 %3
  %5 = sub nsw i32 16, %.
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %.lr.ph16, label %.preheader

.lr.ph16:                                         ; preds = %0
  %7 = inttoptr i64 %du to [16 x i8]*
  %8 = sext i32 %. to i64
  br label %21

.preheader:                                       ; preds = %21, %0
  %9 = icmp sgt i32 %., 0
  br i1 %9, label %.lr.ph, label %28

.lr.ph:                                           ; preds = %.preheader
  %10 = inttoptr i64 %du to [16 x i8]*
  %11 = xor i32 %3, -1
  %12 = icmp sgt i32 %11, -17
  %smax = select i1 %12, i32 %11, i32 -17
  %13 = add i32 %smax, 17
  %14 = sext i32 %13 to i64
  %scevgep = getelementptr [16 x i8]* %10, i64 0, i64 %14
  %15 = add i32 %smax, 18
  %16 = icmp sgt i32 %15, 16
  %17 = select i1 %16, i32 %smax, i32 -2
  %18 = sub i32 %17, %smax
  %19 = zext i32 %18 to i64
  %20 = add i64 %19, 1
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %20, i32 1, i1 false)
  br label %28

; <label>:21                                      ; preds = %21, %.lr.ph16
  %indvars.iv = phi i64 [ 0, %.lr.ph16 ], [ %indvars.iv.next, %21 ]
  %22 = add nsw i64 %indvars.iv, %8
  %23 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 %22
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 %indvars.iv
  store i8 %24, i8* %25, align 1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %26 = trunc i64 %indvars.iv.next to i32
  %27 = icmp slt i32 %26, %5
  br i1 %27, label %21, label %.preheader

; <label>:28                                      ; preds = %.lr.ph, %.preheader
  ret void
}

define void @helper_pslldq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp sgt i32 %3, 16
  %. = select i1 %4, i32 16, i32 %3
  %5 = icmp sgt i32 %., 15
  br i1 %5, label %.lr.ph, label %.lr.ph16

.lr.ph16:                                         ; preds = %0
  %6 = inttoptr i64 %du to [16 x i8]*
  br label %13

.preheader:                                       ; preds = %13
  %7 = icmp sgt i32 %., 0
  br i1 %7, label %.lr.ph, label %22

.lr.ph:                                           ; preds = %.preheader, %0
  %8 = inttoptr i64 %du to [16 x i8]*
  %9 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 0
  %10 = icmp slt i32 %3, 16
  %.op = add i32 %3, -1
  %11 = zext i32 %.op to i64
  %.op18 = add i64 %11, 1
  %12 = select i1 %10, i64 %.op18, i64 16
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 %12, i32 1, i1 false)
  br label %22

; <label>:13                                      ; preds = %13, %.lr.ph16
  %indvars.iv = phi i64 [ 15, %.lr.ph16 ], [ %indvars.iv.next, %13 ]
  %14 = trunc i64 %indvars.iv to i32
  %15 = sub nsw i32 %14, %.
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 %16
  %18 = load i8* %17, align 1
  %19 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 %indvars.iv
  store i8 %18, i8* %19, align 1
  %indvars.iv.next = add i64 %indvars.iv, -1
  %20 = trunc i64 %indvars.iv.next to i32
  %21 = icmp slt i32 %20, %.
  br i1 %21, label %.preheader, label %13

; <label>:22                                      ; preds = %.lr.ph, %.preheader
  ret void
}

define void @helper_paddb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = add i8 %6, %3
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = add i8 %11, %9
  store i8 %12, i8* %8, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = add i8 %16, %14
  store i8 %17, i8* %13, align 1
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = add i8 %21, %19
  store i8 %22, i8* %18, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = add i8 %26, %24
  store i8 %27, i8* %23, align 1
  %28 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = add i8 %31, %29
  store i8 %32, i8* %28, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = add i8 %36, %34
  store i8 %37, i8* %33, align 1
  %38 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = add i8 %41, %39
  store i8 %42, i8* %38, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %46 = load i8* %45, align 1
  %47 = add i8 %46, %44
  store i8 %47, i8* %43, align 1
  %48 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %49 = load i8* %48, align 1
  %50 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %51 = load i8* %50, align 1
  %52 = add i8 %51, %49
  store i8 %52, i8* %48, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %54 = load i8* %53, align 1
  %55 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %56 = load i8* %55, align 1
  %57 = add i8 %56, %54
  store i8 %57, i8* %53, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %59 = load i8* %58, align 1
  %60 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %61 = load i8* %60, align 1
  %62 = add i8 %61, %59
  store i8 %62, i8* %58, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %66 = load i8* %65, align 1
  %67 = add i8 %66, %64
  store i8 %67, i8* %63, align 1
  %68 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %69 = load i8* %68, align 1
  %70 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %71 = load i8* %70, align 1
  %72 = add i8 %71, %69
  store i8 %72, i8* %68, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %74 = load i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %76 = load i8* %75, align 1
  %77 = add i8 %76, %74
  store i8 %77, i8* %73, align 1
  %78 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %79 = load i8* %78, align 1
  %80 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %81 = load i8* %80, align 1
  %82 = add i8 %81, %79
  store i8 %82, i8* %78, align 1
  ret void
}

define void @helper_paddw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = add i16 %6, %3
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = add i16 %11, %9
  store i16 %12, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = add i16 %16, %14
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = add i16 %21, %19
  store i16 %22, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = add i16 %26, %24
  store i16 %27, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = add i16 %31, %29
  store i16 %32, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = add i16 %36, %34
  store i16 %37, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = add i16 %41, %39
  store i16 %42, i16* %38, align 2
  ret void
}

define void @helper_paddl_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = add i32 %6, %3
  store i32 %7, i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = add i32 %11, %9
  store i32 %12, i32* %8, align 4
  %13 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %14 = load i32* %13, align 4
  %15 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = add i32 %16, %14
  store i32 %17, i32* %13, align 4
  %18 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %21 = load i32* %20, align 4
  %22 = add i32 %21, %19
  store i32 %22, i32* %18, align 4
  ret void
}

define void @helper_paddq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = add i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = add i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

define void @helper_psubb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = sub i8 %3, %6
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = sub i8 %9, %11
  store i8 %12, i8* %8, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = sub i8 %14, %16
  store i8 %17, i8* %13, align 1
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = sub i8 %19, %21
  store i8 %22, i8* %18, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = sub i8 %24, %26
  store i8 %27, i8* %23, align 1
  %28 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = sub i8 %29, %31
  store i8 %32, i8* %28, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = sub i8 %34, %36
  store i8 %37, i8* %33, align 1
  %38 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = sub i8 %39, %41
  store i8 %42, i8* %38, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %46 = load i8* %45, align 1
  %47 = sub i8 %44, %46
  store i8 %47, i8* %43, align 1
  %48 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %49 = load i8* %48, align 1
  %50 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %51 = load i8* %50, align 1
  %52 = sub i8 %49, %51
  store i8 %52, i8* %48, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %54 = load i8* %53, align 1
  %55 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %56 = load i8* %55, align 1
  %57 = sub i8 %54, %56
  store i8 %57, i8* %53, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %59 = load i8* %58, align 1
  %60 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %61 = load i8* %60, align 1
  %62 = sub i8 %59, %61
  store i8 %62, i8* %58, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %66 = load i8* %65, align 1
  %67 = sub i8 %64, %66
  store i8 %67, i8* %63, align 1
  %68 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %69 = load i8* %68, align 1
  %70 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %71 = load i8* %70, align 1
  %72 = sub i8 %69, %71
  store i8 %72, i8* %68, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %74 = load i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %76 = load i8* %75, align 1
  %77 = sub i8 %74, %76
  store i8 %77, i8* %73, align 1
  %78 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %79 = load i8* %78, align 1
  %80 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %81 = load i8* %80, align 1
  %82 = sub i8 %79, %81
  store i8 %82, i8* %78, align 1
  ret void
}

define void @helper_psubw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = sub i16 %3, %6
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = sub i16 %9, %11
  store i16 %12, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = sub i16 %14, %16
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = sub i16 %19, %21
  store i16 %22, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = sub i16 %24, %26
  store i16 %27, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = sub i16 %29, %31
  store i16 %32, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = sub i16 %34, %36
  store i16 %37, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = sub i16 %39, %41
  store i16 %42, i16* %38, align 2
  ret void
}

define void @helper_psubl_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = sub i32 %3, %6
  store i32 %7, i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = sub i32 %9, %11
  store i32 %12, i32* %8, align 4
  %13 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %14 = load i32* %13, align 4
  %15 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = sub i32 %14, %16
  store i32 %17, i32* %13, align 4
  %18 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %21 = load i32* %20, align 4
  %22 = sub i32 %19, %21
  store i32 %22, i32* %18, align 4
  ret void
}

define void @helper_psubq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = sub i64 %4, %6
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = sub i64 %9, %11
  store i64 %12, i64* %8, align 8
  ret void
}

define void @helper_paddusb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp sgt i32 %9, 255
  %11 = trunc i32 %9 to i8
  %12 = select i1 %10, i8 -1, i8 %11
  store i8 %12, i8* %2, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = icmp sgt i32 %19, 255
  %21 = trunc i32 %19 to i8
  %22 = select i1 %20, i8 -1, i8 %21
  store i8 %22, i8* %13, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nsw i32 %28, %25
  %30 = icmp sgt i32 %29, 255
  %31 = trunc i32 %29 to i8
  %32 = select i1 %30, i8 -1, i8 %31
  store i8 %32, i8* %23, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %38, %35
  %40 = icmp sgt i32 %39, 255
  %41 = trunc i32 %39 to i8
  %42 = select i1 %40, i8 -1, i8 %41
  store i8 %42, i8* %33, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nsw i32 %48, %45
  %50 = icmp sgt i32 %49, 255
  %51 = trunc i32 %49 to i8
  %52 = select i1 %50, i8 -1, i8 %51
  store i8 %52, i8* %43, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nsw i32 %58, %55
  %60 = icmp sgt i32 %59, 255
  %61 = trunc i32 %59 to i8
  %62 = select i1 %60, i8 -1, i8 %61
  store i8 %62, i8* %53, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 %68, %65
  %70 = icmp sgt i32 %69, 255
  %71 = trunc i32 %69 to i8
  %72 = select i1 %70, i8 -1, i8 %71
  store i8 %72, i8* %63, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nsw i32 %78, %75
  %80 = icmp sgt i32 %79, 255
  %81 = trunc i32 %79 to i8
  %82 = select i1 %80, i8 -1, i8 %81
  store i8 %82, i8* %73, align 1
  %83 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %84 = load i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add nsw i32 %88, %85
  %90 = icmp sgt i32 %89, 255
  %91 = trunc i32 %89 to i8
  %92 = select i1 %90, i8 -1, i8 %91
  store i8 %92, i8* %83, align 1
  %93 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %94 = load i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %97 = load i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nsw i32 %98, %95
  %100 = icmp sgt i32 %99, 255
  %101 = trunc i32 %99 to i8
  %102 = select i1 %100, i8 -1, i8 %101
  store i8 %102, i8* %93, align 1
  %103 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %104 = load i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %107 = load i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = add nsw i32 %108, %105
  %110 = icmp sgt i32 %109, 255
  %111 = trunc i32 %109 to i8
  %112 = select i1 %110, i8 -1, i8 %111
  store i8 %112, i8* %103, align 1
  %113 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %114 = load i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %117 = load i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nsw i32 %118, %115
  %120 = icmp sgt i32 %119, 255
  %121 = trunc i32 %119 to i8
  %122 = select i1 %120, i8 -1, i8 %121
  store i8 %122, i8* %113, align 1
  %123 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %124 = load i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %127 = load i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = add nsw i32 %128, %125
  %130 = icmp sgt i32 %129, 255
  %131 = trunc i32 %129 to i8
  %132 = select i1 %130, i8 -1, i8 %131
  store i8 %132, i8* %123, align 1
  %133 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %134 = load i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %137 = load i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add nsw i32 %138, %135
  %140 = icmp sgt i32 %139, 255
  %141 = trunc i32 %139 to i8
  %142 = select i1 %140, i8 -1, i8 %141
  store i8 %142, i8* %133, align 1
  %143 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %144 = load i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %147 = load i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = add nsw i32 %148, %145
  %150 = icmp sgt i32 %149, 255
  %151 = trunc i32 %149 to i8
  %152 = select i1 %150, i8 -1, i8 %151
  store i8 %152, i8* %143, align 1
  %153 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %154 = load i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %157 = load i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nsw i32 %158, %155
  %160 = icmp sgt i32 %159, 255
  %161 = trunc i32 %159 to i8
  %162 = select i1 %160, i8 -1, i8 %161
  store i8 %162, i8* %153, align 1
  ret void
}

define void @helper_paddsb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp slt i32 %9, -128
  br i1 %10, label %satsb.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 127
  %13 = trunc i32 %9 to i8
  %phitmp = select i1 %12, i8 127, i8 %13
  br label %satsb.exit

satsb.exit:                                       ; preds = %11, %0
  %.0.i = phi i8 [ -128, %0 ], [ %phitmp, %11 ]
  store i8 %.0.i, i8* %2, align 1
  %14 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %15 = load i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = add nsw i32 %19, %16
  %21 = icmp slt i32 %20, -128
  br i1 %21, label %satsb.exit92, label %22

; <label>:22                                      ; preds = %satsb.exit
  %23 = icmp sgt i32 %20, 127
  %24 = trunc i32 %20 to i8
  %phitmp93 = select i1 %23, i8 127, i8 %24
  br label %satsb.exit92

satsb.exit92:                                     ; preds = %22, %satsb.exit
  %.0.i91 = phi i8 [ -128, %satsb.exit ], [ %phitmp93, %22 ]
  store i8 %.0.i91, i8* %14, align 1
  %25 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %26 = load i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %29 = load i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = add nsw i32 %30, %27
  %32 = icmp slt i32 %31, -128
  br i1 %32, label %satsb.exit89, label %33

; <label>:33                                      ; preds = %satsb.exit92
  %34 = icmp sgt i32 %31, 127
  %35 = trunc i32 %31 to i8
  %phitmp94 = select i1 %34, i8 127, i8 %35
  br label %satsb.exit89

satsb.exit89:                                     ; preds = %33, %satsb.exit92
  %.0.i88 = phi i8 [ -128, %satsb.exit92 ], [ %phitmp94, %33 ]
  store i8 %.0.i88, i8* %25, align 1
  %36 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = add nsw i32 %41, %38
  %43 = icmp slt i32 %42, -128
  br i1 %43, label %satsb.exit86, label %44

; <label>:44                                      ; preds = %satsb.exit89
  %45 = icmp sgt i32 %42, 127
  %46 = trunc i32 %42 to i8
  %phitmp95 = select i1 %45, i8 127, i8 %46
  br label %satsb.exit86

satsb.exit86:                                     ; preds = %44, %satsb.exit89
  %.0.i85 = phi i8 [ -128, %satsb.exit89 ], [ %phitmp95, %44 ]
  store i8 %.0.i85, i8* %36, align 1
  %47 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %51 = load i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = add nsw i32 %52, %49
  %54 = icmp slt i32 %53, -128
  br i1 %54, label %satsb.exit83, label %55

; <label>:55                                      ; preds = %satsb.exit86
  %56 = icmp sgt i32 %53, 127
  %57 = trunc i32 %53 to i8
  %phitmp96 = select i1 %56, i8 127, i8 %57
  br label %satsb.exit83

satsb.exit83:                                     ; preds = %55, %satsb.exit86
  %.0.i82 = phi i8 [ -128, %satsb.exit86 ], [ %phitmp96, %55 ]
  store i8 %.0.i82, i8* %47, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %59 = load i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %62 = load i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = add nsw i32 %63, %60
  %65 = icmp slt i32 %64, -128
  br i1 %65, label %satsb.exit80, label %66

; <label>:66                                      ; preds = %satsb.exit83
  %67 = icmp sgt i32 %64, 127
  %68 = trunc i32 %64 to i8
  %phitmp97 = select i1 %67, i8 127, i8 %68
  br label %satsb.exit80

satsb.exit80:                                     ; preds = %66, %satsb.exit83
  %.0.i79 = phi i8 [ -128, %satsb.exit83 ], [ %phitmp97, %66 ]
  store i8 %.0.i79, i8* %58, align 1
  %69 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %70 = load i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %73 = load i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = add nsw i32 %74, %71
  %76 = icmp slt i32 %75, -128
  br i1 %76, label %satsb.exit77, label %77

; <label>:77                                      ; preds = %satsb.exit80
  %78 = icmp sgt i32 %75, 127
  %79 = trunc i32 %75 to i8
  %phitmp98 = select i1 %78, i8 127, i8 %79
  br label %satsb.exit77

satsb.exit77:                                     ; preds = %77, %satsb.exit80
  %.0.i76 = phi i8 [ -128, %satsb.exit80 ], [ %phitmp98, %77 ]
  store i8 %.0.i76, i8* %69, align 1
  %80 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %81 = load i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %84 = load i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = add nsw i32 %85, %82
  %87 = icmp slt i32 %86, -128
  br i1 %87, label %satsb.exit74, label %88

; <label>:88                                      ; preds = %satsb.exit77
  %89 = icmp sgt i32 %86, 127
  %90 = trunc i32 %86 to i8
  %phitmp99 = select i1 %89, i8 127, i8 %90
  br label %satsb.exit74

satsb.exit74:                                     ; preds = %88, %satsb.exit77
  %.0.i73 = phi i8 [ -128, %satsb.exit77 ], [ %phitmp99, %88 ]
  store i8 %.0.i73, i8* %80, align 1
  %91 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %92 = load i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %95 = load i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = add nsw i32 %96, %93
  %98 = icmp slt i32 %97, -128
  br i1 %98, label %satsb.exit71, label %99

; <label>:99                                      ; preds = %satsb.exit74
  %100 = icmp sgt i32 %97, 127
  %101 = trunc i32 %97 to i8
  %phitmp100 = select i1 %100, i8 127, i8 %101
  br label %satsb.exit71

satsb.exit71:                                     ; preds = %99, %satsb.exit74
  %.0.i70 = phi i8 [ -128, %satsb.exit74 ], [ %phitmp100, %99 ]
  store i8 %.0.i70, i8* %91, align 1
  %102 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %103 = load i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %106 = load i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = add nsw i32 %107, %104
  %109 = icmp slt i32 %108, -128
  br i1 %109, label %satsb.exit68, label %110

; <label>:110                                     ; preds = %satsb.exit71
  %111 = icmp sgt i32 %108, 127
  %112 = trunc i32 %108 to i8
  %phitmp101 = select i1 %111, i8 127, i8 %112
  br label %satsb.exit68

satsb.exit68:                                     ; preds = %110, %satsb.exit71
  %.0.i67 = phi i8 [ -128, %satsb.exit71 ], [ %phitmp101, %110 ]
  store i8 %.0.i67, i8* %102, align 1
  %113 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %114 = load i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %117 = load i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = add nsw i32 %118, %115
  %120 = icmp slt i32 %119, -128
  br i1 %120, label %satsb.exit65, label %121

; <label>:121                                     ; preds = %satsb.exit68
  %122 = icmp sgt i32 %119, 127
  %123 = trunc i32 %119 to i8
  %phitmp102 = select i1 %122, i8 127, i8 %123
  br label %satsb.exit65

satsb.exit65:                                     ; preds = %121, %satsb.exit68
  %.0.i64 = phi i8 [ -128, %satsb.exit68 ], [ %phitmp102, %121 ]
  store i8 %.0.i64, i8* %113, align 1
  %124 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %125 = load i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %128 = load i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = add nsw i32 %129, %126
  %131 = icmp slt i32 %130, -128
  br i1 %131, label %satsb.exit62, label %132

; <label>:132                                     ; preds = %satsb.exit65
  %133 = icmp sgt i32 %130, 127
  %134 = trunc i32 %130 to i8
  %phitmp103 = select i1 %133, i8 127, i8 %134
  br label %satsb.exit62

satsb.exit62:                                     ; preds = %132, %satsb.exit65
  %.0.i61 = phi i8 [ -128, %satsb.exit65 ], [ %phitmp103, %132 ]
  store i8 %.0.i61, i8* %124, align 1
  %135 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %136 = load i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %139 = load i8* %138, align 1
  %140 = sext i8 %139 to i32
  %141 = add nsw i32 %140, %137
  %142 = icmp slt i32 %141, -128
  br i1 %142, label %satsb.exit59, label %143

; <label>:143                                     ; preds = %satsb.exit62
  %144 = icmp sgt i32 %141, 127
  %145 = trunc i32 %141 to i8
  %phitmp104 = select i1 %144, i8 127, i8 %145
  br label %satsb.exit59

satsb.exit59:                                     ; preds = %143, %satsb.exit62
  %.0.i58 = phi i8 [ -128, %satsb.exit62 ], [ %phitmp104, %143 ]
  store i8 %.0.i58, i8* %135, align 1
  %146 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %147 = load i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %150 = load i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = add nsw i32 %151, %148
  %153 = icmp slt i32 %152, -128
  br i1 %153, label %satsb.exit56, label %154

; <label>:154                                     ; preds = %satsb.exit59
  %155 = icmp sgt i32 %152, 127
  %156 = trunc i32 %152 to i8
  %phitmp105 = select i1 %155, i8 127, i8 %156
  br label %satsb.exit56

satsb.exit56:                                     ; preds = %154, %satsb.exit59
  %.0.i55 = phi i8 [ -128, %satsb.exit59 ], [ %phitmp105, %154 ]
  store i8 %.0.i55, i8* %146, align 1
  %157 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %158 = load i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %161 = load i8* %160, align 1
  %162 = sext i8 %161 to i32
  %163 = add nsw i32 %162, %159
  %164 = icmp slt i32 %163, -128
  br i1 %164, label %satsb.exit53, label %165

; <label>:165                                     ; preds = %satsb.exit56
  %166 = icmp sgt i32 %163, 127
  %167 = trunc i32 %163 to i8
  %phitmp106 = select i1 %166, i8 127, i8 %167
  br label %satsb.exit53

satsb.exit53:                                     ; preds = %165, %satsb.exit56
  %.0.i52 = phi i8 [ -128, %satsb.exit56 ], [ %phitmp106, %165 ]
  store i8 %.0.i52, i8* %157, align 1
  %168 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %169 = load i8* %168, align 1
  %170 = sext i8 %169 to i32
  %171 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %172 = load i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = add nsw i32 %173, %170
  %175 = icmp slt i32 %174, -128
  br i1 %175, label %satsb.exit50, label %176

; <label>:176                                     ; preds = %satsb.exit53
  %177 = icmp sgt i32 %174, 127
  %178 = trunc i32 %174 to i8
  %phitmp107 = select i1 %177, i8 127, i8 %178
  br label %satsb.exit50

satsb.exit50:                                     ; preds = %176, %satsb.exit53
  %.0.i49 = phi i8 [ -128, %satsb.exit53 ], [ %phitmp107, %176 ]
  store i8 %.0.i49, i8* %168, align 1
  ret void
}

define void @helper_psubusb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %satub.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 255
  %13 = trunc i32 %9 to i8
  %phitmp = select i1 %12, i8 -1, i8 %13
  br label %satub.exit

satub.exit:                                       ; preds = %11, %0
  %.0.i = phi i8 [ 0, %0 ], [ %phitmp, %11 ]
  store i8 %.0.i, i8* %2, align 1
  %14 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %15 = load i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %satub.exit92, label %22

; <label>:22                                      ; preds = %satub.exit
  %23 = icmp sgt i32 %20, 255
  %24 = trunc i32 %20 to i8
  %phitmp93 = select i1 %23, i8 -1, i8 %24
  br label %satub.exit92

satub.exit92:                                     ; preds = %22, %satub.exit
  %.0.i91 = phi i8 [ 0, %satub.exit ], [ %phitmp93, %22 ]
  store i8 %.0.i91, i8* %14, align 1
  %25 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %26 = load i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %29 = load i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %satub.exit89, label %33

; <label>:33                                      ; preds = %satub.exit92
  %34 = icmp sgt i32 %31, 255
  %35 = trunc i32 %31 to i8
  %phitmp94 = select i1 %34, i8 -1, i8 %35
  br label %satub.exit89

satub.exit89:                                     ; preds = %33, %satub.exit92
  %.0.i88 = phi i8 [ 0, %satub.exit92 ], [ %phitmp94, %33 ]
  store i8 %.0.i88, i8* %25, align 1
  %36 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %satub.exit86, label %44

; <label>:44                                      ; preds = %satub.exit89
  %45 = icmp sgt i32 %42, 255
  %46 = trunc i32 %42 to i8
  %phitmp95 = select i1 %45, i8 -1, i8 %46
  br label %satub.exit86

satub.exit86:                                     ; preds = %44, %satub.exit89
  %.0.i85 = phi i8 [ 0, %satub.exit89 ], [ %phitmp95, %44 ]
  store i8 %.0.i85, i8* %36, align 1
  %47 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %51 = load i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %satub.exit83, label %55

; <label>:55                                      ; preds = %satub.exit86
  %56 = icmp sgt i32 %53, 255
  %57 = trunc i32 %53 to i8
  %phitmp96 = select i1 %56, i8 -1, i8 %57
  br label %satub.exit83

satub.exit83:                                     ; preds = %55, %satub.exit86
  %.0.i82 = phi i8 [ 0, %satub.exit86 ], [ %phitmp96, %55 ]
  store i8 %.0.i82, i8* %47, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %59 = load i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %satub.exit80, label %66

; <label>:66                                      ; preds = %satub.exit83
  %67 = icmp sgt i32 %64, 255
  %68 = trunc i32 %64 to i8
  %phitmp97 = select i1 %67, i8 -1, i8 %68
  br label %satub.exit80

satub.exit80:                                     ; preds = %66, %satub.exit83
  %.0.i79 = phi i8 [ 0, %satub.exit83 ], [ %phitmp97, %66 ]
  store i8 %.0.i79, i8* %58, align 1
  %69 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %70 = load i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %73 = load i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %satub.exit77, label %77

; <label>:77                                      ; preds = %satub.exit80
  %78 = icmp sgt i32 %75, 255
  %79 = trunc i32 %75 to i8
  %phitmp98 = select i1 %78, i8 -1, i8 %79
  br label %satub.exit77

satub.exit77:                                     ; preds = %77, %satub.exit80
  %.0.i76 = phi i8 [ 0, %satub.exit80 ], [ %phitmp98, %77 ]
  store i8 %.0.i76, i8* %69, align 1
  %80 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %81 = load i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %84 = load i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %satub.exit74, label %88

; <label>:88                                      ; preds = %satub.exit77
  %89 = icmp sgt i32 %86, 255
  %90 = trunc i32 %86 to i8
  %phitmp99 = select i1 %89, i8 -1, i8 %90
  br label %satub.exit74

satub.exit74:                                     ; preds = %88, %satub.exit77
  %.0.i73 = phi i8 [ 0, %satub.exit77 ], [ %phitmp99, %88 ]
  store i8 %.0.i73, i8* %80, align 1
  %91 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %92 = load i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %95 = load i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = sub nsw i32 %93, %96
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %satub.exit71, label %99

; <label>:99                                      ; preds = %satub.exit74
  %100 = icmp sgt i32 %97, 255
  %101 = trunc i32 %97 to i8
  %phitmp100 = select i1 %100, i8 -1, i8 %101
  br label %satub.exit71

satub.exit71:                                     ; preds = %99, %satub.exit74
  %.0.i70 = phi i8 [ 0, %satub.exit74 ], [ %phitmp100, %99 ]
  store i8 %.0.i70, i8* %91, align 1
  %102 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %103 = load i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %106 = load i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = sub nsw i32 %104, %107
  %109 = icmp slt i32 %108, 0
  br i1 %109, label %satub.exit68, label %110

; <label>:110                                     ; preds = %satub.exit71
  %111 = icmp sgt i32 %108, 255
  %112 = trunc i32 %108 to i8
  %phitmp101 = select i1 %111, i8 -1, i8 %112
  br label %satub.exit68

satub.exit68:                                     ; preds = %110, %satub.exit71
  %.0.i67 = phi i8 [ 0, %satub.exit71 ], [ %phitmp101, %110 ]
  store i8 %.0.i67, i8* %102, align 1
  %113 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %114 = load i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %117 = load i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = sub nsw i32 %115, %118
  %120 = icmp slt i32 %119, 0
  br i1 %120, label %satub.exit65, label %121

; <label>:121                                     ; preds = %satub.exit68
  %122 = icmp sgt i32 %119, 255
  %123 = trunc i32 %119 to i8
  %phitmp102 = select i1 %122, i8 -1, i8 %123
  br label %satub.exit65

satub.exit65:                                     ; preds = %121, %satub.exit68
  %.0.i64 = phi i8 [ 0, %satub.exit68 ], [ %phitmp102, %121 ]
  store i8 %.0.i64, i8* %113, align 1
  %124 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %125 = load i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %128 = load i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = sub nsw i32 %126, %129
  %131 = icmp slt i32 %130, 0
  br i1 %131, label %satub.exit62, label %132

; <label>:132                                     ; preds = %satub.exit65
  %133 = icmp sgt i32 %130, 255
  %134 = trunc i32 %130 to i8
  %phitmp103 = select i1 %133, i8 -1, i8 %134
  br label %satub.exit62

satub.exit62:                                     ; preds = %132, %satub.exit65
  %.0.i61 = phi i8 [ 0, %satub.exit65 ], [ %phitmp103, %132 ]
  store i8 %.0.i61, i8* %124, align 1
  %135 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %136 = load i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %139 = load i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = sub nsw i32 %137, %140
  %142 = icmp slt i32 %141, 0
  br i1 %142, label %satub.exit59, label %143

; <label>:143                                     ; preds = %satub.exit62
  %144 = icmp sgt i32 %141, 255
  %145 = trunc i32 %141 to i8
  %phitmp104 = select i1 %144, i8 -1, i8 %145
  br label %satub.exit59

satub.exit59:                                     ; preds = %143, %satub.exit62
  %.0.i58 = phi i8 [ 0, %satub.exit62 ], [ %phitmp104, %143 ]
  store i8 %.0.i58, i8* %135, align 1
  %146 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %147 = load i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %150 = load i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = sub nsw i32 %148, %151
  %153 = icmp slt i32 %152, 0
  br i1 %153, label %satub.exit56, label %154

; <label>:154                                     ; preds = %satub.exit59
  %155 = icmp sgt i32 %152, 255
  %156 = trunc i32 %152 to i8
  %phitmp105 = select i1 %155, i8 -1, i8 %156
  br label %satub.exit56

satub.exit56:                                     ; preds = %154, %satub.exit59
  %.0.i55 = phi i8 [ 0, %satub.exit59 ], [ %phitmp105, %154 ]
  store i8 %.0.i55, i8* %146, align 1
  %157 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %158 = load i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %161 = load i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = sub nsw i32 %159, %162
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %satub.exit53, label %165

; <label>:165                                     ; preds = %satub.exit56
  %166 = icmp sgt i32 %163, 255
  %167 = trunc i32 %163 to i8
  %phitmp106 = select i1 %166, i8 -1, i8 %167
  br label %satub.exit53

satub.exit53:                                     ; preds = %165, %satub.exit56
  %.0.i52 = phi i8 [ 0, %satub.exit56 ], [ %phitmp106, %165 ]
  store i8 %.0.i52, i8* %157, align 1
  %168 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %169 = load i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %172 = load i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = sub nsw i32 %170, %173
  %175 = icmp slt i32 %174, 0
  br i1 %175, label %satub.exit50, label %176

; <label>:176                                     ; preds = %satub.exit53
  %177 = icmp sgt i32 %174, 255
  %178 = trunc i32 %174 to i8
  %phitmp107 = select i1 %177, i8 -1, i8 %178
  br label %satub.exit50

satub.exit50:                                     ; preds = %176, %satub.exit53
  %.0.i49 = phi i8 [ 0, %satub.exit53 ], [ %phitmp107, %176 ]
  store i8 %.0.i49, i8* %168, align 1
  ret void
}

define void @helper_psubsb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, -128
  br i1 %10, label %satsb.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 127
  %13 = trunc i32 %9 to i8
  %phitmp = select i1 %12, i8 127, i8 %13
  br label %satsb.exit

satsb.exit:                                       ; preds = %11, %0
  %.0.i = phi i8 [ -128, %0 ], [ %phitmp, %11 ]
  store i8 %.0.i, i8* %2, align 1
  %14 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %15 = load i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %18 = load i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, -128
  br i1 %21, label %satsb.exit92, label %22

; <label>:22                                      ; preds = %satsb.exit
  %23 = icmp sgt i32 %20, 127
  %24 = trunc i32 %20 to i8
  %phitmp93 = select i1 %23, i8 127, i8 %24
  br label %satsb.exit92

satsb.exit92:                                     ; preds = %22, %satsb.exit
  %.0.i91 = phi i8 [ -128, %satsb.exit ], [ %phitmp93, %22 ]
  store i8 %.0.i91, i8* %14, align 1
  %25 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %26 = load i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %29 = load i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, -128
  br i1 %32, label %satsb.exit89, label %33

; <label>:33                                      ; preds = %satsb.exit92
  %34 = icmp sgt i32 %31, 127
  %35 = trunc i32 %31 to i8
  %phitmp94 = select i1 %34, i8 127, i8 %35
  br label %satsb.exit89

satsb.exit89:                                     ; preds = %33, %satsb.exit92
  %.0.i88 = phi i8 [ -128, %satsb.exit92 ], [ %phitmp94, %33 ]
  store i8 %.0.i88, i8* %25, align 1
  %36 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, -128
  br i1 %43, label %satsb.exit86, label %44

; <label>:44                                      ; preds = %satsb.exit89
  %45 = icmp sgt i32 %42, 127
  %46 = trunc i32 %42 to i8
  %phitmp95 = select i1 %45, i8 127, i8 %46
  br label %satsb.exit86

satsb.exit86:                                     ; preds = %44, %satsb.exit89
  %.0.i85 = phi i8 [ -128, %satsb.exit89 ], [ %phitmp95, %44 ]
  store i8 %.0.i85, i8* %36, align 1
  %47 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %51 = load i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, -128
  br i1 %54, label %satsb.exit83, label %55

; <label>:55                                      ; preds = %satsb.exit86
  %56 = icmp sgt i32 %53, 127
  %57 = trunc i32 %53 to i8
  %phitmp96 = select i1 %56, i8 127, i8 %57
  br label %satsb.exit83

satsb.exit83:                                     ; preds = %55, %satsb.exit86
  %.0.i82 = phi i8 [ -128, %satsb.exit86 ], [ %phitmp96, %55 ]
  store i8 %.0.i82, i8* %47, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %59 = load i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %62 = load i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, -128
  br i1 %65, label %satsb.exit80, label %66

; <label>:66                                      ; preds = %satsb.exit83
  %67 = icmp sgt i32 %64, 127
  %68 = trunc i32 %64 to i8
  %phitmp97 = select i1 %67, i8 127, i8 %68
  br label %satsb.exit80

satsb.exit80:                                     ; preds = %66, %satsb.exit83
  %.0.i79 = phi i8 [ -128, %satsb.exit83 ], [ %phitmp97, %66 ]
  store i8 %.0.i79, i8* %58, align 1
  %69 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %70 = load i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %73 = load i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, -128
  br i1 %76, label %satsb.exit77, label %77

; <label>:77                                      ; preds = %satsb.exit80
  %78 = icmp sgt i32 %75, 127
  %79 = trunc i32 %75 to i8
  %phitmp98 = select i1 %78, i8 127, i8 %79
  br label %satsb.exit77

satsb.exit77:                                     ; preds = %77, %satsb.exit80
  %.0.i76 = phi i8 [ -128, %satsb.exit80 ], [ %phitmp98, %77 ]
  store i8 %.0.i76, i8* %69, align 1
  %80 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %81 = load i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %84 = load i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, -128
  br i1 %87, label %satsb.exit74, label %88

; <label>:88                                      ; preds = %satsb.exit77
  %89 = icmp sgt i32 %86, 127
  %90 = trunc i32 %86 to i8
  %phitmp99 = select i1 %89, i8 127, i8 %90
  br label %satsb.exit74

satsb.exit74:                                     ; preds = %88, %satsb.exit77
  %.0.i73 = phi i8 [ -128, %satsb.exit77 ], [ %phitmp99, %88 ]
  store i8 %.0.i73, i8* %80, align 1
  %91 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %92 = load i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %95 = load i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = sub nsw i32 %93, %96
  %98 = icmp slt i32 %97, -128
  br i1 %98, label %satsb.exit71, label %99

; <label>:99                                      ; preds = %satsb.exit74
  %100 = icmp sgt i32 %97, 127
  %101 = trunc i32 %97 to i8
  %phitmp100 = select i1 %100, i8 127, i8 %101
  br label %satsb.exit71

satsb.exit71:                                     ; preds = %99, %satsb.exit74
  %.0.i70 = phi i8 [ -128, %satsb.exit74 ], [ %phitmp100, %99 ]
  store i8 %.0.i70, i8* %91, align 1
  %102 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %103 = load i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %106 = load i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = sub nsw i32 %104, %107
  %109 = icmp slt i32 %108, -128
  br i1 %109, label %satsb.exit68, label %110

; <label>:110                                     ; preds = %satsb.exit71
  %111 = icmp sgt i32 %108, 127
  %112 = trunc i32 %108 to i8
  %phitmp101 = select i1 %111, i8 127, i8 %112
  br label %satsb.exit68

satsb.exit68:                                     ; preds = %110, %satsb.exit71
  %.0.i67 = phi i8 [ -128, %satsb.exit71 ], [ %phitmp101, %110 ]
  store i8 %.0.i67, i8* %102, align 1
  %113 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %114 = load i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %117 = load i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = sub nsw i32 %115, %118
  %120 = icmp slt i32 %119, -128
  br i1 %120, label %satsb.exit65, label %121

; <label>:121                                     ; preds = %satsb.exit68
  %122 = icmp sgt i32 %119, 127
  %123 = trunc i32 %119 to i8
  %phitmp102 = select i1 %122, i8 127, i8 %123
  br label %satsb.exit65

satsb.exit65:                                     ; preds = %121, %satsb.exit68
  %.0.i64 = phi i8 [ -128, %satsb.exit68 ], [ %phitmp102, %121 ]
  store i8 %.0.i64, i8* %113, align 1
  %124 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %125 = load i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %128 = load i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = sub nsw i32 %126, %129
  %131 = icmp slt i32 %130, -128
  br i1 %131, label %satsb.exit62, label %132

; <label>:132                                     ; preds = %satsb.exit65
  %133 = icmp sgt i32 %130, 127
  %134 = trunc i32 %130 to i8
  %phitmp103 = select i1 %133, i8 127, i8 %134
  br label %satsb.exit62

satsb.exit62:                                     ; preds = %132, %satsb.exit65
  %.0.i61 = phi i8 [ -128, %satsb.exit65 ], [ %phitmp103, %132 ]
  store i8 %.0.i61, i8* %124, align 1
  %135 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %136 = load i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %139 = load i8* %138, align 1
  %140 = sext i8 %139 to i32
  %141 = sub nsw i32 %137, %140
  %142 = icmp slt i32 %141, -128
  br i1 %142, label %satsb.exit59, label %143

; <label>:143                                     ; preds = %satsb.exit62
  %144 = icmp sgt i32 %141, 127
  %145 = trunc i32 %141 to i8
  %phitmp104 = select i1 %144, i8 127, i8 %145
  br label %satsb.exit59

satsb.exit59:                                     ; preds = %143, %satsb.exit62
  %.0.i58 = phi i8 [ -128, %satsb.exit62 ], [ %phitmp104, %143 ]
  store i8 %.0.i58, i8* %135, align 1
  %146 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %147 = load i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %150 = load i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = sub nsw i32 %148, %151
  %153 = icmp slt i32 %152, -128
  br i1 %153, label %satsb.exit56, label %154

; <label>:154                                     ; preds = %satsb.exit59
  %155 = icmp sgt i32 %152, 127
  %156 = trunc i32 %152 to i8
  %phitmp105 = select i1 %155, i8 127, i8 %156
  br label %satsb.exit56

satsb.exit56:                                     ; preds = %154, %satsb.exit59
  %.0.i55 = phi i8 [ -128, %satsb.exit59 ], [ %phitmp105, %154 ]
  store i8 %.0.i55, i8* %146, align 1
  %157 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %158 = load i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %161 = load i8* %160, align 1
  %162 = sext i8 %161 to i32
  %163 = sub nsw i32 %159, %162
  %164 = icmp slt i32 %163, -128
  br i1 %164, label %satsb.exit53, label %165

; <label>:165                                     ; preds = %satsb.exit56
  %166 = icmp sgt i32 %163, 127
  %167 = trunc i32 %163 to i8
  %phitmp106 = select i1 %166, i8 127, i8 %167
  br label %satsb.exit53

satsb.exit53:                                     ; preds = %165, %satsb.exit56
  %.0.i52 = phi i8 [ -128, %satsb.exit56 ], [ %phitmp106, %165 ]
  store i8 %.0.i52, i8* %157, align 1
  %168 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %169 = load i8* %168, align 1
  %170 = sext i8 %169 to i32
  %171 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %172 = load i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = sub nsw i32 %170, %173
  %175 = icmp slt i32 %174, -128
  br i1 %175, label %satsb.exit50, label %176

; <label>:176                                     ; preds = %satsb.exit53
  %177 = icmp sgt i32 %174, 127
  %178 = trunc i32 %174 to i8
  %phitmp107 = select i1 %177, i8 127, i8 %178
  br label %satsb.exit50

satsb.exit50:                                     ; preds = %176, %satsb.exit53
  %.0.i49 = phi i8 [ -128, %satsb.exit53 ], [ %phitmp107, %176 ]
  store i8 %.0.i49, i8* %168, align 1
  ret void
}

define void @helper_paddusw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp sgt i32 %9, 65535
  %11 = trunc i32 %9 to i16
  %12 = select i1 %10, i16 -1, i16 %11
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = icmp sgt i32 %19, 65535
  %21 = trunc i32 %19 to i16
  %22 = select i1 %20, i16 -1, i16 %21
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %28, %25
  %30 = icmp sgt i32 %29, 65535
  %31 = trunc i32 %29 to i16
  %32 = select i1 %30, i16 -1, i16 %31
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %38, %35
  %40 = icmp sgt i32 %39, 65535
  %41 = trunc i32 %39 to i16
  %42 = select i1 %40, i16 -1, i16 %41
  store i16 %42, i16* %33, align 2
  %43 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %44 = load i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %47 = load i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = add nsw i32 %48, %45
  %50 = icmp sgt i32 %49, 65535
  %51 = trunc i32 %49 to i16
  %52 = select i1 %50, i16 -1, i16 %51
  store i16 %52, i16* %43, align 2
  %53 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %54 = load i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %57 = load i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = add nsw i32 %58, %55
  %60 = icmp sgt i32 %59, 65535
  %61 = trunc i32 %59 to i16
  %62 = select i1 %60, i16 -1, i16 %61
  store i16 %62, i16* %53, align 2
  %63 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %64 = load i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %67 = load i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = add nsw i32 %68, %65
  %70 = icmp sgt i32 %69, 65535
  %71 = trunc i32 %69 to i16
  %72 = select i1 %70, i16 -1, i16 %71
  store i16 %72, i16* %63, align 2
  %73 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %74 = load i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %77 = load i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = add nsw i32 %78, %75
  %80 = icmp sgt i32 %79, 65535
  %81 = trunc i32 %79 to i16
  %82 = select i1 %80, i16 -1, i16 %81
  store i16 %82, i16* %73, align 2
  ret void
}

define void @helper_paddsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = add nsw i32 %8, %4
  %10 = icmp slt i32 %9, -32768
  br i1 %10, label %satsw.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 32767
  %13 = trunc i32 %9 to i16
  %phitmp = select i1 %12, i16 32767, i16 %13
  br label %satsw.exit

satsw.exit:                                       ; preds = %11, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %11 ]
  store i16 %.0.i, i16* %2, align 2
  %14 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = add nsw i32 %19, %16
  %21 = icmp slt i32 %20, -32768
  br i1 %21, label %satsw.exit44, label %22

; <label>:22                                      ; preds = %satsw.exit
  %23 = icmp sgt i32 %20, 32767
  %24 = trunc i32 %20 to i16
  %phitmp45 = select i1 %23, i16 32767, i16 %24
  br label %satsw.exit44

satsw.exit44:                                     ; preds = %22, %satsw.exit
  %.0.i43 = phi i16 [ -32768, %satsw.exit ], [ %phitmp45, %22 ]
  store i16 %.0.i43, i16* %14, align 2
  %25 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = add nsw i32 %30, %27
  %32 = icmp slt i32 %31, -32768
  br i1 %32, label %satsw.exit41, label %33

; <label>:33                                      ; preds = %satsw.exit44
  %34 = icmp sgt i32 %31, 32767
  %35 = trunc i32 %31 to i16
  %phitmp46 = select i1 %34, i16 32767, i16 %35
  br label %satsw.exit41

satsw.exit41:                                     ; preds = %33, %satsw.exit44
  %.0.i40 = phi i16 [ -32768, %satsw.exit44 ], [ %phitmp46, %33 ]
  store i16 %.0.i40, i16* %25, align 2
  %36 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = add nsw i32 %41, %38
  %43 = icmp slt i32 %42, -32768
  br i1 %43, label %satsw.exit38, label %44

; <label>:44                                      ; preds = %satsw.exit41
  %45 = icmp sgt i32 %42, 32767
  %46 = trunc i32 %42 to i16
  %phitmp47 = select i1 %45, i16 32767, i16 %46
  br label %satsw.exit38

satsw.exit38:                                     ; preds = %44, %satsw.exit41
  %.0.i37 = phi i16 [ -32768, %satsw.exit41 ], [ %phitmp47, %44 ]
  store i16 %.0.i37, i16* %36, align 2
  %47 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %51 = load i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = add nsw i32 %52, %49
  %54 = icmp slt i32 %53, -32768
  br i1 %54, label %satsw.exit35, label %55

; <label>:55                                      ; preds = %satsw.exit38
  %56 = icmp sgt i32 %53, 32767
  %57 = trunc i32 %53 to i16
  %phitmp48 = select i1 %56, i16 32767, i16 %57
  br label %satsw.exit35

satsw.exit35:                                     ; preds = %55, %satsw.exit38
  %.0.i34 = phi i16 [ -32768, %satsw.exit38 ], [ %phitmp48, %55 ]
  store i16 %.0.i34, i16* %47, align 2
  %58 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %59 = load i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %62 = load i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = add nsw i32 %63, %60
  %65 = icmp slt i32 %64, -32768
  br i1 %65, label %satsw.exit32, label %66

; <label>:66                                      ; preds = %satsw.exit35
  %67 = icmp sgt i32 %64, 32767
  %68 = trunc i32 %64 to i16
  %phitmp49 = select i1 %67, i16 32767, i16 %68
  br label %satsw.exit32

satsw.exit32:                                     ; preds = %66, %satsw.exit35
  %.0.i31 = phi i16 [ -32768, %satsw.exit35 ], [ %phitmp49, %66 ]
  store i16 %.0.i31, i16* %58, align 2
  %69 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %70 = load i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %73 = load i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = add nsw i32 %74, %71
  %76 = icmp slt i32 %75, -32768
  br i1 %76, label %satsw.exit29, label %77

; <label>:77                                      ; preds = %satsw.exit32
  %78 = icmp sgt i32 %75, 32767
  %79 = trunc i32 %75 to i16
  %phitmp50 = select i1 %78, i16 32767, i16 %79
  br label %satsw.exit29

satsw.exit29:                                     ; preds = %77, %satsw.exit32
  %.0.i28 = phi i16 [ -32768, %satsw.exit32 ], [ %phitmp50, %77 ]
  store i16 %.0.i28, i16* %69, align 2
  %80 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %81 = load i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %84 = load i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = add nsw i32 %85, %82
  %87 = icmp slt i32 %86, -32768
  br i1 %87, label %satsw.exit26, label %88

; <label>:88                                      ; preds = %satsw.exit29
  %89 = icmp sgt i32 %86, 32767
  %90 = trunc i32 %86 to i16
  %phitmp51 = select i1 %89, i16 32767, i16 %90
  br label %satsw.exit26

satsw.exit26:                                     ; preds = %88, %satsw.exit29
  %.0.i25 = phi i16 [ -32768, %satsw.exit29 ], [ %phitmp51, %88 ]
  store i16 %.0.i25, i16* %80, align 2
  ret void
}

define void @helper_psubusw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %satuw.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 65535
  %13 = trunc i32 %9 to i16
  %phitmp = select i1 %12, i16 -1, i16 %13
  br label %satuw.exit

satuw.exit:                                       ; preds = %11, %0
  %.0.i = phi i16 [ 0, %0 ], [ %phitmp, %11 ]
  store i16 %.0.i, i16* %2, align 2
  %14 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %satuw.exit44, label %22

; <label>:22                                      ; preds = %satuw.exit
  %23 = icmp sgt i32 %20, 65535
  %24 = trunc i32 %20 to i16
  %phitmp45 = select i1 %23, i16 -1, i16 %24
  br label %satuw.exit44

satuw.exit44:                                     ; preds = %22, %satuw.exit
  %.0.i43 = phi i16 [ 0, %satuw.exit ], [ %phitmp45, %22 ]
  store i16 %.0.i43, i16* %14, align 2
  %25 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %26 = load i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %satuw.exit41, label %33

; <label>:33                                      ; preds = %satuw.exit44
  %34 = icmp sgt i32 %31, 65535
  %35 = trunc i32 %31 to i16
  %phitmp46 = select i1 %34, i16 -1, i16 %35
  br label %satuw.exit41

satuw.exit41:                                     ; preds = %33, %satuw.exit44
  %.0.i40 = phi i16 [ 0, %satuw.exit44 ], [ %phitmp46, %33 ]
  store i16 %.0.i40, i16* %25, align 2
  %36 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %satuw.exit38, label %44

; <label>:44                                      ; preds = %satuw.exit41
  %45 = icmp sgt i32 %42, 65535
  %46 = trunc i32 %42 to i16
  %phitmp47 = select i1 %45, i16 -1, i16 %46
  br label %satuw.exit38

satuw.exit38:                                     ; preds = %44, %satuw.exit41
  %.0.i37 = phi i16 [ 0, %satuw.exit41 ], [ %phitmp47, %44 ]
  store i16 %.0.i37, i16* %36, align 2
  %47 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %48 = load i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %51 = load i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %satuw.exit35, label %55

; <label>:55                                      ; preds = %satuw.exit38
  %56 = icmp sgt i32 %53, 65535
  %57 = trunc i32 %53 to i16
  %phitmp48 = select i1 %56, i16 -1, i16 %57
  br label %satuw.exit35

satuw.exit35:                                     ; preds = %55, %satuw.exit38
  %.0.i34 = phi i16 [ 0, %satuw.exit38 ], [ %phitmp48, %55 ]
  store i16 %.0.i34, i16* %47, align 2
  %58 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %59 = load i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %62 = load i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %satuw.exit32, label %66

; <label>:66                                      ; preds = %satuw.exit35
  %67 = icmp sgt i32 %64, 65535
  %68 = trunc i32 %64 to i16
  %phitmp49 = select i1 %67, i16 -1, i16 %68
  br label %satuw.exit32

satuw.exit32:                                     ; preds = %66, %satuw.exit35
  %.0.i31 = phi i16 [ 0, %satuw.exit35 ], [ %phitmp49, %66 ]
  store i16 %.0.i31, i16* %58, align 2
  %69 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %70 = load i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %73 = load i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %satuw.exit29, label %77

; <label>:77                                      ; preds = %satuw.exit32
  %78 = icmp sgt i32 %75, 65535
  %79 = trunc i32 %75 to i16
  %phitmp50 = select i1 %78, i16 -1, i16 %79
  br label %satuw.exit29

satuw.exit29:                                     ; preds = %77, %satuw.exit32
  %.0.i28 = phi i16 [ 0, %satuw.exit32 ], [ %phitmp50, %77 ]
  store i16 %.0.i28, i16* %69, align 2
  %80 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %81 = load i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %84 = load i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %satuw.exit26, label %88

; <label>:88                                      ; preds = %satuw.exit29
  %89 = icmp sgt i32 %86, 65535
  %90 = trunc i32 %86 to i16
  %phitmp51 = select i1 %89, i16 -1, i16 %90
  br label %satuw.exit26

satuw.exit26:                                     ; preds = %88, %satuw.exit29
  %.0.i25 = phi i16 [ 0, %satuw.exit29 ], [ %phitmp51, %88 ]
  store i16 %.0.i25, i16* %80, align 2
  ret void
}

define void @helper_psubsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = sub nsw i32 %4, %8
  %10 = icmp slt i32 %9, -32768
  br i1 %10, label %satsw.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp sgt i32 %9, 32767
  %13 = trunc i32 %9 to i16
  %phitmp = select i1 %12, i16 32767, i16 %13
  br label %satsw.exit

satsw.exit:                                       ; preds = %11, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %11 ]
  store i16 %.0.i, i16* %2, align 2
  %14 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %18 = load i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = icmp slt i32 %20, -32768
  br i1 %21, label %satsw.exit44, label %22

; <label>:22                                      ; preds = %satsw.exit
  %23 = icmp sgt i32 %20, 32767
  %24 = trunc i32 %20 to i16
  %phitmp45 = select i1 %23, i16 32767, i16 %24
  br label %satsw.exit44

satsw.exit44:                                     ; preds = %22, %satsw.exit
  %.0.i43 = phi i16 [ -32768, %satsw.exit ], [ %phitmp45, %22 ]
  store i16 %.0.i43, i16* %14, align 2
  %25 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = icmp slt i32 %31, -32768
  br i1 %32, label %satsw.exit41, label %33

; <label>:33                                      ; preds = %satsw.exit44
  %34 = icmp sgt i32 %31, 32767
  %35 = trunc i32 %31 to i16
  %phitmp46 = select i1 %34, i16 32767, i16 %35
  br label %satsw.exit41

satsw.exit41:                                     ; preds = %33, %satsw.exit44
  %.0.i40 = phi i16 [ -32768, %satsw.exit44 ], [ %phitmp46, %33 ]
  store i16 %.0.i40, i16* %25, align 2
  %36 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = sub nsw i32 %38, %41
  %43 = icmp slt i32 %42, -32768
  br i1 %43, label %satsw.exit38, label %44

; <label>:44                                      ; preds = %satsw.exit41
  %45 = icmp sgt i32 %42, 32767
  %46 = trunc i32 %42 to i16
  %phitmp47 = select i1 %45, i16 32767, i16 %46
  br label %satsw.exit38

satsw.exit38:                                     ; preds = %44, %satsw.exit41
  %.0.i37 = phi i16 [ -32768, %satsw.exit41 ], [ %phitmp47, %44 ]
  store i16 %.0.i37, i16* %36, align 2
  %47 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %51 = load i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, -32768
  br i1 %54, label %satsw.exit35, label %55

; <label>:55                                      ; preds = %satsw.exit38
  %56 = icmp sgt i32 %53, 32767
  %57 = trunc i32 %53 to i16
  %phitmp48 = select i1 %56, i16 32767, i16 %57
  br label %satsw.exit35

satsw.exit35:                                     ; preds = %55, %satsw.exit38
  %.0.i34 = phi i16 [ -32768, %satsw.exit38 ], [ %phitmp48, %55 ]
  store i16 %.0.i34, i16* %47, align 2
  %58 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %59 = load i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %62 = load i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, -32768
  br i1 %65, label %satsw.exit32, label %66

; <label>:66                                      ; preds = %satsw.exit35
  %67 = icmp sgt i32 %64, 32767
  %68 = trunc i32 %64 to i16
  %phitmp49 = select i1 %67, i16 32767, i16 %68
  br label %satsw.exit32

satsw.exit32:                                     ; preds = %66, %satsw.exit35
  %.0.i31 = phi i16 [ -32768, %satsw.exit35 ], [ %phitmp49, %66 ]
  store i16 %.0.i31, i16* %58, align 2
  %69 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %70 = load i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %73 = load i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, -32768
  br i1 %76, label %satsw.exit29, label %77

; <label>:77                                      ; preds = %satsw.exit32
  %78 = icmp sgt i32 %75, 32767
  %79 = trunc i32 %75 to i16
  %phitmp50 = select i1 %78, i16 32767, i16 %79
  br label %satsw.exit29

satsw.exit29:                                     ; preds = %77, %satsw.exit32
  %.0.i28 = phi i16 [ -32768, %satsw.exit32 ], [ %phitmp50, %77 ]
  store i16 %.0.i28, i16* %69, align 2
  %80 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %81 = load i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %84 = load i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, -32768
  br i1 %87, label %satsw.exit26, label %88

; <label>:88                                      ; preds = %satsw.exit29
  %89 = icmp sgt i32 %86, 32767
  %90 = trunc i32 %86 to i16
  %phitmp51 = select i1 %89, i16 32767, i16 %90
  br label %satsw.exit26

satsw.exit26:                                     ; preds = %88, %satsw.exit29
  %.0.i25 = phi i16 [ -32768, %satsw.exit29 ], [ %phitmp51, %88 ]
  store i16 %.0.i25, i16* %80, align 2
  ret void
}

define void @helper_pminub_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp ult i8 %3, %6
  %. = select i1 %7, i8 %3, i8 %6
  store i8 %., i8* %2, align 1
  %8 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = icmp ult i8 %9, %11
  %.sink1 = select i1 %12, i8 %9, i8 %11
  store i8 %.sink1, i8* %8, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp ult i8 %14, %16
  %.95 = select i1 %17, i8 %14, i8 %16
  store i8 %.95, i8* %13, align 1
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = icmp ult i8 %19, %21
  %.sink3 = select i1 %22, i8 %19, i8 %21
  store i8 %.sink3, i8* %18, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %.96 = select i1 %27, i8 %24, i8 %26
  store i8 %.96, i8* %23, align 1
  %28 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = icmp ult i8 %29, %31
  %.sink5 = select i1 %32, i8 %29, i8 %31
  store i8 %.sink5, i8* %28, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = icmp ult i8 %34, %36
  %.97 = select i1 %37, i8 %34, i8 %36
  store i8 %.97, i8* %33, align 1
  %38 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = icmp ult i8 %39, %41
  %.sink7 = select i1 %42, i8 %39, i8 %41
  store i8 %.sink7, i8* %38, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %46 = load i8* %45, align 1
  %47 = icmp ult i8 %44, %46
  %.98 = select i1 %47, i8 %44, i8 %46
  store i8 %.98, i8* %43, align 1
  %48 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %49 = load i8* %48, align 1
  %50 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %51 = load i8* %50, align 1
  %52 = icmp ult i8 %49, %51
  %.sink9 = select i1 %52, i8 %49, i8 %51
  store i8 %.sink9, i8* %48, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %54 = load i8* %53, align 1
  %55 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %56 = load i8* %55, align 1
  %57 = icmp ult i8 %54, %56
  %.99 = select i1 %57, i8 %54, i8 %56
  store i8 %.99, i8* %53, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %59 = load i8* %58, align 1
  %60 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %61 = load i8* %60, align 1
  %62 = icmp ult i8 %59, %61
  %.sink11 = select i1 %62, i8 %59, i8 %61
  store i8 %.sink11, i8* %58, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %66 = load i8* %65, align 1
  %67 = icmp ult i8 %64, %66
  %.100 = select i1 %67, i8 %64, i8 %66
  store i8 %.100, i8* %63, align 1
  %68 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %69 = load i8* %68, align 1
  %70 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %71 = load i8* %70, align 1
  %72 = icmp ult i8 %69, %71
  %.sink13 = select i1 %72, i8 %69, i8 %71
  store i8 %.sink13, i8* %68, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %74 = load i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %76 = load i8* %75, align 1
  %77 = icmp ult i8 %74, %76
  %.101 = select i1 %77, i8 %74, i8 %76
  store i8 %.101, i8* %73, align 1
  %78 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %79 = load i8* %78, align 1
  %80 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %81 = load i8* %80, align 1
  %82 = icmp ult i8 %79, %81
  %.sink15 = select i1 %82, i8 %79, i8 %81
  store i8 %.sink15, i8* %78, align 1
  ret void
}

define void @helper_pmaxub_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp ugt i8 %3, %6
  %. = select i1 %7, i8 %3, i8 %6
  store i8 %., i8* %2, align 1
  %8 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = icmp ugt i8 %9, %11
  %.sink1 = select i1 %12, i8 %9, i8 %11
  store i8 %.sink1, i8* %8, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp ugt i8 %14, %16
  %.95 = select i1 %17, i8 %14, i8 %16
  store i8 %.95, i8* %13, align 1
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = icmp ugt i8 %19, %21
  %.sink3 = select i1 %22, i8 %19, i8 %21
  store i8 %.sink3, i8* %18, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = icmp ugt i8 %24, %26
  %.96 = select i1 %27, i8 %24, i8 %26
  store i8 %.96, i8* %23, align 1
  %28 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = icmp ugt i8 %29, %31
  %.sink5 = select i1 %32, i8 %29, i8 %31
  store i8 %.sink5, i8* %28, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = icmp ugt i8 %34, %36
  %.97 = select i1 %37, i8 %34, i8 %36
  store i8 %.97, i8* %33, align 1
  %38 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = icmp ugt i8 %39, %41
  %.sink7 = select i1 %42, i8 %39, i8 %41
  store i8 %.sink7, i8* %38, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %46 = load i8* %45, align 1
  %47 = icmp ugt i8 %44, %46
  %.98 = select i1 %47, i8 %44, i8 %46
  store i8 %.98, i8* %43, align 1
  %48 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %49 = load i8* %48, align 1
  %50 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %51 = load i8* %50, align 1
  %52 = icmp ugt i8 %49, %51
  %.sink9 = select i1 %52, i8 %49, i8 %51
  store i8 %.sink9, i8* %48, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %54 = load i8* %53, align 1
  %55 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %56 = load i8* %55, align 1
  %57 = icmp ugt i8 %54, %56
  %.99 = select i1 %57, i8 %54, i8 %56
  store i8 %.99, i8* %53, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %59 = load i8* %58, align 1
  %60 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %61 = load i8* %60, align 1
  %62 = icmp ugt i8 %59, %61
  %.sink11 = select i1 %62, i8 %59, i8 %61
  store i8 %.sink11, i8* %58, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %66 = load i8* %65, align 1
  %67 = icmp ugt i8 %64, %66
  %.100 = select i1 %67, i8 %64, i8 %66
  store i8 %.100, i8* %63, align 1
  %68 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %69 = load i8* %68, align 1
  %70 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %71 = load i8* %70, align 1
  %72 = icmp ugt i8 %69, %71
  %.sink13 = select i1 %72, i8 %69, i8 %71
  store i8 %.sink13, i8* %68, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %74 = load i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %76 = load i8* %75, align 1
  %77 = icmp ugt i8 %74, %76
  %.101 = select i1 %77, i8 %74, i8 %76
  store i8 %.101, i8* %73, align 1
  %78 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %79 = load i8* %78, align 1
  %80 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %81 = load i8* %80, align 1
  %82 = icmp ugt i8 %79, %81
  %.sink15 = select i1 %82, i8 %79, i8 %81
  store i8 %.sink15, i8* %78, align 1
  ret void
}

define void @helper_pminsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp slt i16 %3, %6
  %. = select i1 %7, i16 %3, i16 %6
  store i16 %., i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = icmp slt i16 %9, %11
  %.sink1 = select i1 %12, i16 %9, i16 %11
  store i16 %.sink1, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp slt i16 %14, %16
  %.47 = select i1 %17, i16 %14, i16 %16
  store i16 %.47, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp slt i16 %19, %21
  %.sink3 = select i1 %22, i16 %19, i16 %21
  store i16 %.sink3, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = icmp slt i16 %24, %26
  %.48 = select i1 %27, i16 %24, i16 %26
  store i16 %.48, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = icmp slt i16 %29, %31
  %.sink5 = select i1 %32, i16 %29, i16 %31
  store i16 %.sink5, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = icmp slt i16 %34, %36
  %.49 = select i1 %37, i16 %34, i16 %36
  store i16 %.49, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = icmp slt i16 %39, %41
  %.sink7 = select i1 %42, i16 %39, i16 %41
  store i16 %.sink7, i16* %38, align 2
  ret void
}

define void @helper_pmaxsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp sgt i16 %3, %6
  %. = select i1 %7, i16 %3, i16 %6
  store i16 %., i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = icmp sgt i16 %9, %11
  %.sink1 = select i1 %12, i16 %9, i16 %11
  store i16 %.sink1, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp sgt i16 %14, %16
  %.47 = select i1 %17, i16 %14, i16 %16
  store i16 %.47, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp sgt i16 %19, %21
  %.sink3 = select i1 %22, i16 %19, i16 %21
  store i16 %.sink3, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %.48 = select i1 %27, i16 %24, i16 %26
  store i16 %.48, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = icmp sgt i16 %29, %31
  %.sink5 = select i1 %32, i16 %29, i16 %31
  store i16 %.sink5, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = icmp sgt i16 %34, %36
  %.49 = select i1 %37, i16 %34, i16 %36
  store i16 %.49, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = icmp sgt i16 %39, %41
  %.sink7 = select i1 %42, i16 %39, i16 %41
  store i16 %.sink7, i16* %38, align 2
  ret void
}

define void @helper_pand_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = and i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

define void @helper_pandn_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = xor i64 %4, -1
  %6 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %7 = load i64* %6, align 8
  %8 = and i64 %7, %5
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64* %9, align 8
  %11 = xor i64 %10, -1
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = and i64 %13, %11
  store i64 %14, i64* %9, align 8
  ret void
}

define void @helper_por_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = or i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = or i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

define void @helper_pxor_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = xor i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = xor i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

define void @helper_pcmpgtb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp sgt i8 %3, %6
  %8 = sext i1 %7 to i8
  store i8 %8, i8* %2, align 1
  %9 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %12 = load i8* %11, align 1
  %13 = icmp sgt i8 %10, %12
  %14 = sext i1 %13 to i8
  store i8 %14, i8* %9, align 1
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %18 = load i8* %17, align 1
  %19 = icmp sgt i8 %16, %18
  %20 = sext i1 %19 to i8
  store i8 %20, i8* %15, align 1
  %21 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %22 = load i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %24 = load i8* %23, align 1
  %25 = icmp sgt i8 %22, %24
  %26 = sext i1 %25 to i8
  store i8 %26, i8* %21, align 1
  %27 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %28 = load i8* %27, align 1
  %29 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %30 = load i8* %29, align 1
  %31 = icmp sgt i8 %28, %30
  %32 = sext i1 %31 to i8
  store i8 %32, i8* %27, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %36 = load i8* %35, align 1
  %37 = icmp sgt i8 %34, %36
  %38 = sext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  %39 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %40 = load i8* %39, align 1
  %41 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %42 = load i8* %41, align 1
  %43 = icmp sgt i8 %40, %42
  %44 = sext i1 %43 to i8
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %46 = load i8* %45, align 1
  %47 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %48 = load i8* %47, align 1
  %49 = icmp sgt i8 %46, %48
  %50 = sext i1 %49 to i8
  store i8 %50, i8* %45, align 1
  %51 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %52 = load i8* %51, align 1
  %53 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %54 = load i8* %53, align 1
  %55 = icmp sgt i8 %52, %54
  %56 = sext i1 %55 to i8
  store i8 %56, i8* %51, align 1
  %57 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %58 = load i8* %57, align 1
  %59 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %60 = load i8* %59, align 1
  %61 = icmp sgt i8 %58, %60
  %62 = sext i1 %61 to i8
  store i8 %62, i8* %57, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %66 = load i8* %65, align 1
  %67 = icmp sgt i8 %64, %66
  %68 = sext i1 %67 to i8
  store i8 %68, i8* %63, align 1
  %69 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %70 = load i8* %69, align 1
  %71 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %72 = load i8* %71, align 1
  %73 = icmp sgt i8 %70, %72
  %74 = sext i1 %73 to i8
  store i8 %74, i8* %69, align 1
  %75 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %76 = load i8* %75, align 1
  %77 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %78 = load i8* %77, align 1
  %79 = icmp sgt i8 %76, %78
  %80 = sext i1 %79 to i8
  store i8 %80, i8* %75, align 1
  %81 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %82 = load i8* %81, align 1
  %83 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %84 = load i8* %83, align 1
  %85 = icmp sgt i8 %82, %84
  %86 = sext i1 %85 to i8
  store i8 %86, i8* %81, align 1
  %87 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %88 = load i8* %87, align 1
  %89 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %90 = load i8* %89, align 1
  %91 = icmp sgt i8 %88, %90
  %92 = sext i1 %91 to i8
  store i8 %92, i8* %87, align 1
  %93 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %94 = load i8* %93, align 1
  %95 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %96 = load i8* %95, align 1
  %97 = icmp sgt i8 %94, %96
  %98 = sext i1 %97 to i8
  store i8 %98, i8* %93, align 1
  ret void
}

define void @helper_pcmpgtw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp sgt i16 %3, %6
  %8 = sext i1 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %12 = load i16* %11, align 2
  %13 = icmp sgt i16 %10, %12
  %14 = sext i1 %13 to i16
  store i16 %14, i16* %9, align 2
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %18 = load i16* %17, align 2
  %19 = icmp sgt i16 %16, %18
  %20 = sext i1 %19 to i16
  store i16 %20, i16* %15, align 2
  %21 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %24 = load i16* %23, align 2
  %25 = icmp sgt i16 %22, %24
  %26 = sext i1 %25 to i16
  store i16 %26, i16* %21, align 2
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %28 = load i16* %27, align 2
  %29 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %30 = load i16* %29, align 2
  %31 = icmp sgt i16 %28, %30
  %32 = sext i1 %31 to i16
  store i16 %32, i16* %27, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %36 = load i16* %35, align 2
  %37 = icmp sgt i16 %34, %36
  %38 = sext i1 %37 to i16
  store i16 %38, i16* %33, align 2
  %39 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %40 = load i16* %39, align 2
  %41 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %42 = load i16* %41, align 2
  %43 = icmp sgt i16 %40, %42
  %44 = sext i1 %43 to i16
  store i16 %44, i16* %39, align 2
  %45 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %46 = load i16* %45, align 2
  %47 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %48 = load i16* %47, align 2
  %49 = icmp sgt i16 %46, %48
  %50 = sext i1 %49 to i16
  store i16 %50, i16* %45, align 2
  ret void
}

define void @helper_pcmpgtl_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp sgt i32 %3, %6
  %8 = sext i1 %7 to i32
  store i32 %8, i32* %2, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = icmp sgt i32 %10, %12
  %14 = sext i1 %13 to i32
  store i32 %14, i32* %9, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = icmp sgt i32 %16, %18
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %15, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %24 = load i32* %23, align 4
  %25 = icmp sgt i32 %22, %24
  %26 = sext i1 %25 to i32
  store i32 %26, i32* %21, align 4
  ret void
}

define void @helper_pcmpeqb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp eq i8 %3, %6
  %8 = sext i1 %7 to i8
  store i8 %8, i8* %2, align 1
  %9 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %12 = load i8* %11, align 1
  %13 = icmp eq i8 %10, %12
  %14 = sext i1 %13 to i8
  store i8 %14, i8* %9, align 1
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %18 = load i8* %17, align 1
  %19 = icmp eq i8 %16, %18
  %20 = sext i1 %19 to i8
  store i8 %20, i8* %15, align 1
  %21 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %22 = load i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %24 = load i8* %23, align 1
  %25 = icmp eq i8 %22, %24
  %26 = sext i1 %25 to i8
  store i8 %26, i8* %21, align 1
  %27 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %28 = load i8* %27, align 1
  %29 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %30 = load i8* %29, align 1
  %31 = icmp eq i8 %28, %30
  %32 = sext i1 %31 to i8
  store i8 %32, i8* %27, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %36 = load i8* %35, align 1
  %37 = icmp eq i8 %34, %36
  %38 = sext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  %39 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %40 = load i8* %39, align 1
  %41 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %42 = load i8* %41, align 1
  %43 = icmp eq i8 %40, %42
  %44 = sext i1 %43 to i8
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %46 = load i8* %45, align 1
  %47 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %48 = load i8* %47, align 1
  %49 = icmp eq i8 %46, %48
  %50 = sext i1 %49 to i8
  store i8 %50, i8* %45, align 1
  %51 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %52 = load i8* %51, align 1
  %53 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %54 = load i8* %53, align 1
  %55 = icmp eq i8 %52, %54
  %56 = sext i1 %55 to i8
  store i8 %56, i8* %51, align 1
  %57 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %58 = load i8* %57, align 1
  %59 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %60 = load i8* %59, align 1
  %61 = icmp eq i8 %58, %60
  %62 = sext i1 %61 to i8
  store i8 %62, i8* %57, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %66 = load i8* %65, align 1
  %67 = icmp eq i8 %64, %66
  %68 = sext i1 %67 to i8
  store i8 %68, i8* %63, align 1
  %69 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %70 = load i8* %69, align 1
  %71 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %72 = load i8* %71, align 1
  %73 = icmp eq i8 %70, %72
  %74 = sext i1 %73 to i8
  store i8 %74, i8* %69, align 1
  %75 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %76 = load i8* %75, align 1
  %77 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %78 = load i8* %77, align 1
  %79 = icmp eq i8 %76, %78
  %80 = sext i1 %79 to i8
  store i8 %80, i8* %75, align 1
  %81 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %82 = load i8* %81, align 1
  %83 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %84 = load i8* %83, align 1
  %85 = icmp eq i8 %82, %84
  %86 = sext i1 %85 to i8
  store i8 %86, i8* %81, align 1
  %87 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %88 = load i8* %87, align 1
  %89 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %90 = load i8* %89, align 1
  %91 = icmp eq i8 %88, %90
  %92 = sext i1 %91 to i8
  store i8 %92, i8* %87, align 1
  %93 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %94 = load i8* %93, align 1
  %95 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %96 = load i8* %95, align 1
  %97 = icmp eq i8 %94, %96
  %98 = sext i1 %97 to i8
  store i8 %98, i8* %93, align 1
  ret void
}

define void @helper_pcmpeqw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp eq i16 %3, %6
  %8 = sext i1 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %12 = load i16* %11, align 2
  %13 = icmp eq i16 %10, %12
  %14 = sext i1 %13 to i16
  store i16 %14, i16* %9, align 2
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %18 = load i16* %17, align 2
  %19 = icmp eq i16 %16, %18
  %20 = sext i1 %19 to i16
  store i16 %20, i16* %15, align 2
  %21 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %24 = load i16* %23, align 2
  %25 = icmp eq i16 %22, %24
  %26 = sext i1 %25 to i16
  store i16 %26, i16* %21, align 2
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %28 = load i16* %27, align 2
  %29 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %30 = load i16* %29, align 2
  %31 = icmp eq i16 %28, %30
  %32 = sext i1 %31 to i16
  store i16 %32, i16* %27, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %36 = load i16* %35, align 2
  %37 = icmp eq i16 %34, %36
  %38 = sext i1 %37 to i16
  store i16 %38, i16* %33, align 2
  %39 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %40 = load i16* %39, align 2
  %41 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %42 = load i16* %41, align 2
  %43 = icmp eq i16 %40, %42
  %44 = sext i1 %43 to i16
  store i16 %44, i16* %39, align 2
  %45 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %46 = load i16* %45, align 2
  %47 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %48 = load i16* %47, align 2
  %49 = icmp eq i16 %46, %48
  %50 = sext i1 %49 to i16
  store i16 %50, i16* %45, align 2
  ret void
}

define void @helper_pcmpeql_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp eq i32 %3, %6
  %8 = sext i1 %7 to i32
  store i32 %8, i32* %2, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  %14 = sext i1 %13 to i32
  store i32 %14, i32* %9, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %15, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %24 = load i32* %23, align 4
  %25 = icmp eq i32 %22, %24
  %26 = sext i1 %25 to i32
  store i32 %26, i32* %21, align 4
  ret void
}

define void @helper_pmullw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = mul i16 %6, %3
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = mul i16 %11, %9
  store i16 %12, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = mul i16 %16, %14
  store i16 %17, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = mul i16 %21, %19
  store i16 %22, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = mul i16 %26, %24
  store i16 %27, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = mul i16 %31, %29
  store i16 %32, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = mul i16 %36, %34
  store i16 %37, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = mul i16 %41, %39
  store i16 %42, i16* %38, align 2
  ret void
}

define void @helper_pmulhuw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = lshr i32 %9, 16
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %2, align 2
  %12 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %13 = load i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = lshr i32 %18, 16
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %12, align 2
  %21 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %22 = load i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %25 = load i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = mul nsw i32 %26, %23
  %28 = lshr i32 %27, 16
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %21, align 2
  %30 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nsw i32 %35, %32
  %37 = lshr i32 %36, 16
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %30, align 2
  %39 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %43 = load i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nsw i32 %44, %41
  %46 = lshr i32 %45, 16
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %39, align 2
  %48 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %52 = load i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = lshr i32 %54, 16
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %48, align 2
  %57 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %58 = load i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %61 = load i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nsw i32 %62, %59
  %64 = lshr i32 %63, 16
  %65 = trunc i32 %64 to i16
  store i16 %65, i16* %57, align 2
  %66 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %67 = load i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %70 = load i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = mul nsw i32 %71, %68
  %73 = lshr i32 %72, 16
  %74 = trunc i32 %73 to i16
  store i16 %74, i16* %66, align 2
  ret void
}

define void @helper_pmulhw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = lshr i32 %9, 16
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %2, align 2
  %12 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %13 = load i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = lshr i32 %18, 16
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %12, align 2
  %21 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %22 = load i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %25 = load i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %23
  %28 = lshr i32 %27, 16
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %21, align 2
  %30 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = mul nsw i32 %35, %32
  %37 = lshr i32 %36, 16
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %30, align 2
  %39 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %43 = load i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = mul nsw i32 %44, %41
  %46 = lshr i32 %45, 16
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %39, align 2
  %48 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %49 = load i16* %48, align 2
  %50 = sext i16 %49 to i32
  %51 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %52 = load i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = lshr i32 %54, 16
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %48, align 2
  %57 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %58 = load i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %61 = load i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, %59
  %64 = lshr i32 %63, 16
  %65 = trunc i32 %64 to i16
  store i16 %65, i16* %57, align 2
  %66 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %67 = load i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %70 = load i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %68
  %73 = lshr i32 %72, 16
  %74 = trunc i32 %73 to i16
  store i16 %74, i16* %66, align 2
  ret void
}

define void @helper_pavgb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add i32 %4, 1
  %10 = add i32 %9, %8
  %11 = lshr i32 %10, 1
  %12 = trunc i32 %11 to i8
  store i8 %12, i8* %2, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add i32 %15, 1
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 1
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %13, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add i32 %25, 1
  %30 = add i32 %29, %28
  %31 = lshr i32 %30, 1
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %23, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add i32 %35, 1
  %40 = add i32 %39, %38
  %41 = lshr i32 %40, 1
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %33, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add i32 %45, 1
  %50 = add i32 %49, %48
  %51 = lshr i32 %50, 1
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %43, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add i32 %55, 1
  %60 = add i32 %59, %58
  %61 = lshr i32 %60, 1
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %53, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add i32 %65, 1
  %70 = add i32 %69, %68
  %71 = lshr i32 %70, 1
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %63, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add i32 %75, 1
  %80 = add i32 %79, %78
  %81 = lshr i32 %80, 1
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %73, align 1
  %83 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %84 = load i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add i32 %85, 1
  %90 = add i32 %89, %88
  %91 = lshr i32 %90, 1
  %92 = trunc i32 %91 to i8
  store i8 %92, i8* %83, align 1
  %93 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %94 = load i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %97 = load i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add i32 %95, 1
  %100 = add i32 %99, %98
  %101 = lshr i32 %100, 1
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %93, align 1
  %103 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %104 = load i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %107 = load i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = add i32 %105, 1
  %110 = add i32 %109, %108
  %111 = lshr i32 %110, 1
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %103, align 1
  %113 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %114 = load i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %117 = load i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add i32 %115, 1
  %120 = add i32 %119, %118
  %121 = lshr i32 %120, 1
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %113, align 1
  %123 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %124 = load i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %127 = load i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = add i32 %125, 1
  %130 = add i32 %129, %128
  %131 = lshr i32 %130, 1
  %132 = trunc i32 %131 to i8
  store i8 %132, i8* %123, align 1
  %133 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %134 = load i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %137 = load i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add i32 %135, 1
  %140 = add i32 %139, %138
  %141 = lshr i32 %140, 1
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %133, align 1
  %143 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %144 = load i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %147 = load i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = add i32 %145, 1
  %150 = add i32 %149, %148
  %151 = lshr i32 %150, 1
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %143, align 1
  %153 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %154 = load i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %157 = load i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add i32 %155, 1
  %160 = add i32 %159, %158
  %161 = lshr i32 %160, 1
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %153, align 1
  ret void
}

define void @helper_pavgw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = add i32 %4, 1
  %10 = add i32 %9, %8
  %11 = lshr i32 %10, 1
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = add i32 %15, 1
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 1
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = add i32 %25, 1
  %30 = add i32 %29, %28
  %31 = lshr i32 %30, 1
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add i32 %35, 1
  %40 = add i32 %39, %38
  %41 = lshr i32 %40, 1
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %33, align 2
  %43 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %44 = load i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %47 = load i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = add i32 %45, 1
  %50 = add i32 %49, %48
  %51 = lshr i32 %50, 1
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %43, align 2
  %53 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %54 = load i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %57 = load i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = add i32 %55, 1
  %60 = add i32 %59, %58
  %61 = lshr i32 %60, 1
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %53, align 2
  %63 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %64 = load i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %67 = load i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = add i32 %65, 1
  %70 = add i32 %69, %68
  %71 = lshr i32 %70, 1
  %72 = trunc i32 %71 to i16
  store i16 %72, i16* %63, align 2
  %73 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %74 = load i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %77 = load i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = add i32 %75, 1
  %80 = add i32 %79, %78
  %81 = lshr i32 %80, 1
  %82 = trunc i32 %81 to i16
  store i16 %82, i16* %73, align 2
  ret void
}

define void @helper_pmuludq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = inttoptr i64 %du to [4 x i32]*
  %7 = getelementptr inbounds [4 x i32]* %6, i64 0, i64 0
  %8 = load i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = mul i64 %9, %5
  %11 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 2
  %13 = load i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [4 x i32]* %6, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = mul i64 %17, %14
  %19 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %18, i64* %19, align 8
  ret void
}

define void @helper_pmaddwd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i16]*
  %2 = inttoptr i64 %du to [8 x i16]*
  %3 = inttoptr i64 %du to [4 x i32]*
  %4 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %5 = load i16* %4, align 2
  %6 = sext i16 %5 to i32
  %7 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 0
  %8 = load i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = mul nsw i32 %9, %6
  %11 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %12 = load i16* %11, align 2
  %13 = sext i16 %12 to i32
  %14 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 1
  %15 = load i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = mul nsw i32 %16, %13
  %18 = add nsw i32 %17, %10
  %19 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %21 = load i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = mul nsw i32 %25, %22
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = mul nsw i32 %32, %29
  %34 = add nsw i32 %33, %26
  %35 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 1
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 4
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %38
  %43 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %44 = load i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 5
  %47 = load i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = mul nsw i32 %48, %45
  %50 = add nsw i32 %49, %42
  %51 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 2
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %53 = load i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 6
  %56 = load i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, %54
  %59 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %60 = load i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 7
  %63 = load i16* %62, align 2
  %64 = sext i16 %63 to i32
  %65 = mul nsw i32 %64, %61
  %66 = add nsw i32 %65, %58
  %67 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 3
  store i32 %66, i32* %67, align 4
  ret void
}

define void @helper_psadbw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [16 x i8]*
  %3 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 0
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = inttoptr i64 %su to [16 x i8]*
  %7 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = sub nsw i32 %5, %9
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 0, %10
  %.0.i = select i1 %11, i32 %12, i32 %10
  %13 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 1
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %.0.i65 = select i1 %20, i32 %21, i32 %19
  %22 = add i32 %.0.i65, %.0.i
  %23 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 2
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 2
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub nsw i32 %25, %28
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %.0.i64 = select i1 %30, i32 %31, i32 %29
  %32 = add i32 %22, %.0.i64
  %33 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 3
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 3
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 %35, %38
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %.0.i63 = select i1 %40, i32 %41, i32 %39
  %42 = add i32 %32, %.0.i63
  %43 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 4
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 4
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = sub nsw i32 %45, %48
  %50 = icmp slt i32 %49, 0
  %51 = sub nsw i32 0, %49
  %.0.i62 = select i1 %50, i32 %51, i32 %49
  %52 = add i32 %42, %.0.i62
  %53 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 5
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 5
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %55, %58
  %60 = icmp slt i32 %59, 0
  %61 = sub nsw i32 0, %59
  %.0.i61 = select i1 %60, i32 %61, i32 %59
  %62 = add i32 %52, %.0.i61
  %63 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 6
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 6
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = sub nsw i32 %65, %68
  %70 = icmp slt i32 %69, 0
  %71 = sub nsw i32 0, %69
  %.0.i60 = select i1 %70, i32 %71, i32 %69
  %72 = add i32 %62, %.0.i60
  %73 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 7
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 7
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = sub nsw i32 %75, %78
  %80 = icmp slt i32 %79, 0
  %81 = sub nsw i32 0, %79
  %.0.i59 = select i1 %80, i32 %81, i32 %79
  %82 = add i32 %72, %.0.i59
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 8
  %86 = load i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 8
  %89 = load i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 %87, %90
  %92 = icmp slt i32 %91, 0
  %93 = sub nsw i32 0, %91
  %.0.i58 = select i1 %92, i32 %93, i32 %91
  %94 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 9
  %95 = load i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 9
  %98 = load i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = sub nsw i32 %96, %99
  %101 = icmp slt i32 %100, 0
  %102 = sub nsw i32 0, %100
  %.0.i57 = select i1 %101, i32 %102, i32 %100
  %103 = add i32 %.0.i57, %.0.i58
  %104 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 10
  %105 = load i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 10
  %108 = load i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = sub nsw i32 %106, %109
  %111 = icmp slt i32 %110, 0
  %112 = sub nsw i32 0, %110
  %.0.i56 = select i1 %111, i32 %112, i32 %110
  %113 = add i32 %103, %.0.i56
  %114 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 11
  %115 = load i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 11
  %118 = load i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = sub nsw i32 %116, %119
  %121 = icmp slt i32 %120, 0
  %122 = sub nsw i32 0, %120
  %.0.i55 = select i1 %121, i32 %122, i32 %120
  %123 = add i32 %113, %.0.i55
  %124 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 12
  %125 = load i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 12
  %128 = load i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = sub nsw i32 %126, %129
  %131 = icmp slt i32 %130, 0
  %132 = sub nsw i32 0, %130
  %.0.i54 = select i1 %131, i32 %132, i32 %130
  %133 = add i32 %123, %.0.i54
  %134 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 13
  %135 = load i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 13
  %138 = load i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = sub nsw i32 %136, %139
  %141 = icmp slt i32 %140, 0
  %142 = sub nsw i32 0, %140
  %.0.i53 = select i1 %141, i32 %142, i32 %140
  %143 = add i32 %133, %.0.i53
  %144 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 14
  %145 = load i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 14
  %148 = load i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %146, %149
  %151 = icmp slt i32 %150, 0
  %152 = sub nsw i32 0, %150
  %.0.i52 = select i1 %151, i32 %152, i32 %150
  %153 = add i32 %143, %.0.i52
  %154 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 15
  %155 = load i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 15
  %158 = load i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = sub nsw i32 %156, %159
  %161 = icmp slt i32 %160, 0
  %162 = sub nsw i32 0, %160
  %.0.i51 = select i1 %161, i32 %162, i32 %160
  %163 = add i32 %153, %.0.i51
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %164, i64* %165, align 8
  ret void
}

define void @helper_maskmov_xmm(i64 %du, i64 %su, i32 %a0) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = inttoptr i64 %du to [16 x i8]*
  br label %3

; <label>:3                                       ; preds = %stb_data.exit, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %stb_data.exit ]
  %sext = shl i64 %indvars.iv, 32
  %4 = ashr exact i64 %sext, 32
  %5 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 %4
  %6 = load i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %stb_data.exit

; <label>:8                                       ; preds = %3
  %9 = trunc i64 %indvars.iv to i32
  %10 = add i32 %9, %a0
  %11 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 %4
  %12 = load i8* %11, align 1
  %13 = lshr i32 %10, 12
  %14 = and i32 %13, 255
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 7
  %17 = load i32* %16, align 4
  %18 = and i32 %17, 3
  %19 = icmp eq i32 %18, 3
  %20 = zext i32 %14 to i64
  %21 = zext i1 %19 to i64
  %22 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 1
  %23 = load i32* %22, align 4
  %24 = and i32 %10, -4096
  %25 = icmp eq i32 %23, %24
  %26 = zext i32 %10 to i64
  br i1 %25, label %29, label %27, !prof !0

; <label>:27                                      ; preds = %8
  %28 = inttoptr i64 %26 to i8*
  store i8 %12, i8* %28, align 1
  br label %stb_data.exit

; <label>:29                                      ; preds = %8
  %30 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 71, i64 %21, i64 %20, i32 3
  %31 = load i64* %30, align 8
  %32 = add i64 %31, %26
  %33 = inttoptr i64 %32 to i8*
  store i8 %12, i8* %33, align 1
  br label %stb_data.exit

stb_data.exit:                                    ; preds = %29, %27, %3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 16
  br i1 %exitcond, label %34, label %3

; <label>:34                                      ; preds = %stb_data.exit
  ret void
}

define void @helper_movl_mm_T0_xmm(i64 %du, i32 %val) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  store i32 %val, i32* %3, align 4
  %4 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %5, align 8
  ret void
}

define void @helper_shufps(i64 %du, i64 %su, i32 %order) nounwind uwtable {
  %1 = and i32 %order, 3
  %2 = zext i32 %1 to i64
  %3 = inttoptr i64 %du to [4 x i32]*
  %4 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 %2
  %5 = load i32* %4, align 4
  %6 = lshr i32 %order, 2
  %7 = and i32 %6, 3
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 %8
  %10 = load i32* %9, align 4
  %11 = lshr i32 %order, 4
  %12 = and i32 %11, 3
  %13 = zext i32 %12 to i64
  %14 = inttoptr i64 %su to [4 x i32]*
  %15 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 %13
  %16 = load i32* %15, align 4
  %17 = lshr i32 %order, 6
  %18 = and i32 %17, 3
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 %19
  %21 = load i32* %20, align 4
  %22 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %5, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %22, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %10, i32* %r.sroa.1.4..cast, align 4
  %r.sroa.2.8..idx = getelementptr inbounds i8* %22, i64 8
  %r.sroa.2.8..cast = bitcast i8* %r.sroa.2.8..idx to i32*
  store i32 %16, i32* %r.sroa.2.8..cast, align 8
  %r.sroa.3.12..idx = getelementptr inbounds i8* %22, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i32*
  store i32 %21, i32* %r.sroa.3.12..cast, align 4
  ret void
}

define void @helper_shufpd(i64 %du, i64 %su, i32 %order) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = and i32 %order, 1
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 %4
  %6 = load i64* %5, align 8
  %7 = lshr i32 %order, 1
  %8 = and i32 %7, 1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 %9
  %11 = load i64* %10, align 8
  %r.sroa.0.0..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %6, i64* %r.sroa.0.0..idx, align 8
  %r.sroa.1.8..idx1 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %11, i64* %r.sroa.1.8..idx1, align 8
  ret void
}

define void @helper_pshufd_xmm(i64 %du, i64 %su, i32 %order) nounwind uwtable {
  %1 = and i32 %order, 3
  %2 = zext i32 %1 to i64
  %3 = inttoptr i64 %su to [4 x i32]*
  %4 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 %2
  %5 = load i32* %4, align 4
  %6 = lshr i32 %order, 2
  %7 = and i32 %6, 3
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 %8
  %10 = load i32* %9, align 4
  %11 = lshr i32 %order, 4
  %12 = and i32 %11, 3
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 %13
  %15 = load i32* %14, align 4
  %16 = lshr i32 %order, 6
  %17 = and i32 %16, 3
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [4 x i32]* %3, i64 0, i64 %18
  %20 = load i32* %19, align 4
  %21 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %5, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %21, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %10, i32* %r.sroa.1.4..cast, align 4
  %r.sroa.2.8..idx = getelementptr inbounds i8* %21, i64 8
  %r.sroa.2.8..cast = bitcast i8* %r.sroa.2.8..idx to i32*
  store i32 %15, i32* %r.sroa.2.8..cast, align 8
  %r.sroa.3.12..idx = getelementptr inbounds i8* %21, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i32*
  store i32 %20, i32* %r.sroa.3.12..cast, align 4
  ret void
}

define void @helper_pshuflw_xmm(i64 %du, i64 %su, i32 %order) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = and i32 %order, 3
  %4 = zext i32 %3 to i64
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 %4
  %7 = load i16* %6, align 2
  %8 = lshr i32 %order, 2
  %9 = and i32 %8, 3
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 %10
  %12 = load i16* %11, align 2
  %13 = lshr i32 %order, 4
  %14 = and i32 %13, 3
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 %15
  %17 = load i16* %16, align 2
  %18 = lshr i32 %order, 6
  %19 = and i32 %18, 3
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 %20
  %22 = load i16* %21, align 2
  %23 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %24 = load i64* %23, align 8
  %25 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %7, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %25, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %12, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %25, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %17, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %25, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %22, i16* %r.sroa.3.6..cast, align 2
  %r.sroa.4.8..idx1 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %24, i64* %r.sroa.4.8..idx1, align 8
  ret void
}

define void @helper_pshufhw_xmm(i64 %du, i64 %su, i32 %order) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = and i32 %order, 3
  %6 = or i32 %5, 4
  %7 = zext i32 %6 to i64
  %8 = inttoptr i64 %su to [8 x i16]*
  %9 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 %7
  %10 = load i16* %9, align 2
  %11 = lshr i32 %order, 2
  %12 = and i32 %11, 3
  %13 = or i32 %12, 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 %14
  %16 = load i16* %15, align 2
  %17 = lshr i32 %order, 4
  %18 = and i32 %17, 3
  %19 = or i32 %18, 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 %20
  %22 = load i16* %21, align 2
  %23 = lshr i32 %order, 6
  %24 = and i32 %23, 3
  %25 = or i32 %24, 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 %26
  %28 = load i16* %27, align 2
  %29 = inttoptr i64 %du to i8*
  %r.sroa.0.0..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %4, i64* %r.sroa.0.0..idx, align 8
  %r.sroa.1.8..idx = getelementptr inbounds i8* %29, i64 8
  %r.sroa.1.8..cast = bitcast i8* %r.sroa.1.8..idx to i16*
  store i16 %10, i16* %r.sroa.1.8..cast, align 8
  %r.sroa.2.10..idx = getelementptr inbounds i8* %29, i64 10
  %r.sroa.2.10..cast = bitcast i8* %r.sroa.2.10..idx to i16*
  store i16 %16, i16* %r.sroa.2.10..cast, align 2
  %r.sroa.3.12..idx = getelementptr inbounds i8* %29, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i16*
  store i16 %22, i16* %r.sroa.3.12..cast, align 4
  %r.sroa.4.14..idx = getelementptr inbounds i8* %29, i64 14
  %r.sroa.4.14..cast = bitcast i8* %r.sroa.4.14..idx to i16*
  store i16 %28, i16* %r.sroa.4.14..cast, align 2
  ret void
}

define void @helper_addps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_add(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i32 @float32_add(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  %17 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_add(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  store i32 %23, i32* %17, align 4
  %24 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_add(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  store i32 %30, i32* %24, align 4
  ret void
}

define void @helper_addss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_add(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  ret void
}

define void @helper_addpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_add(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_add(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %16, i64* %10, align 8
  ret void
}

declare i64 @float64_add(i64, i64, %struct.float_status*)

define void @helper_addsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_add(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  ret void
}

define void @helper_subps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_sub(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i32 @float32_sub(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  %17 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_sub(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  store i32 %23, i32* %17, align 4
  %24 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_sub(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  store i32 %30, i32* %24, align 4
  ret void
}

define void @helper_subss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_sub(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  ret void
}

define void @helper_subpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_sub(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %16, i64* %10, align 8
  ret void
}

declare i64 @float64_sub(i64, i64, %struct.float_status*)

define void @helper_subsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  ret void
}

define void @helper_mulps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_mul(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i32 @float32_mul(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  %17 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_mul(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  store i32 %23, i32* %17, align 4
  %24 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_mul(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  store i32 %30, i32* %24, align 4
  ret void
}

define void @helper_mulss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_mul(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  ret void
}

define void @helper_mulpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_mul(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_mul(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %16, i64* %10, align 8
  ret void
}

declare i64 @float64_mul(i64, i64, %struct.float_status*)

define void @helper_mulsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_mul(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  ret void
}

define void @helper_divps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_div(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i32 @float32_div(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  %17 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_div(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  store i32 %23, i32* %17, align 4
  %24 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_div(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  store i32 %30, i32* %24, align 4
  ret void
}

define void @helper_divss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_div(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  ret void
}

define void @helper_divpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_div(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_div(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %16, i64* %10, align 8
  ret void
}

declare i64 @float64_div(i64, i64, %struct.float_status*)

define void @helper_divsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_div(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  ret void
}

define void @helper_minps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp ult i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp ult i32 %9, %11
  %13 = select i1 %12, i32 %9, i32 %11
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %17 = load i32* %16, align 4
  %18 = icmp ult i32 %15, %17
  %.20 = select i1 %18, i32 %15, i32 %17
  store i32 %.20, i32* %14, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp ult i32 %20, %22
  %24 = select i1 %23, i32 %20, i32 %22
  store i32 %24, i32* %19, align 4
  ret void
}

define void @helper_minss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp ult i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  ret void
}

define void @helper_minpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = icmp ult i64 %4, %6
  %. = select i1 %7, i64 %4, i64 %6
  store i64 %., i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = icmp ult i64 %9, %11
  %13 = select i1 %12, i64 %9, i64 %11
  store i64 %13, i64* %8, align 8
  ret void
}

define void @helper_minsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = icmp ult i64 %4, %6
  %. = select i1 %7, i64 %4, i64 %6
  store i64 %., i64* %3, align 8
  ret void
}

define void @helper_maxps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp ugt i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp ugt i32 %9, %11
  %13 = select i1 %12, i32 %9, i32 %11
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %17 = load i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  %.20 = select i1 %18, i32 %15, i32 %17
  store i32 %.20, i32* %14, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = select i1 %23, i32 %20, i32 %22
  store i32 %24, i32* %19, align 4
  ret void
}

define void @helper_maxss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp ugt i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  ret void
}

define void @helper_maxpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = icmp ugt i64 %4, %6
  %. = select i1 %7, i64 %4, i64 %6
  store i64 %., i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = icmp ugt i64 %9, %11
  %13 = select i1 %12, i64 %9, i64 %11
  store i64 %13, i64* %8, align 8
  ret void
}

define void @helper_maxsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = icmp ugt i64 %4, %6
  %. = select i1 %7, i64 %4, i64 %6
  store i64 %., i64* %3, align 8
  ret void
}

define void @helper_sqrtps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_sqrt(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float32_sqrt(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 28
  %19 = tail call i32 @float32_sqrt(i32 %16, %struct.float_status* %18) nounwind
  %20 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_sqrt(i32 %22, %struct.float_status* %24) nounwind
  %26 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

define void @helper_sqrtss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_sqrt(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  ret void
}

define void @helper_sqrtpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i64 @float64_sqrt(i64 %4, %struct.float_status* %6) nounwind
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %10 = load i64* %9, align 8
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i64 @float64_sqrt(i64 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

declare i64 @float64_sqrt(i64, %struct.float_status*)

define void @helper_sqrtsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i64 @float64_sqrt(i64 %4, %struct.float_status* %6) nounwind
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  ret void
}

define void @helper_cvtps2pd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 1
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float32_to_float64(i32 %4, %struct.float_status* %8) nounwind
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i64 @float32_to_float64(i32 %6, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

declare i64 @float32_to_float64(i32, %struct.float_status*)

define void @helper_cvtpd2ps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i32 @float64_to_float32(i64 %4, %struct.float_status* %6) nounwind
  %8 = inttoptr i64 %du to [4 x i32]*
  %9 = getelementptr inbounds [4 x i32]* %8, i64 0, i64 0
  store i32 %7, i32* %9, align 4
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 28
  %14 = tail call i32 @float64_to_float32(i64 %11, %struct.float_status* %13) nounwind
  %15 = getelementptr inbounds [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

declare i32 @float64_to_float32(i64, %struct.float_status*)

define void @helper_cvtss2sd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i64 @float32_to_float64(i32 %4, %struct.float_status* %6) nounwind
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  ret void
}

define void @helper_cvtsd2ss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float64_to_float32(i64 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  ret void
}

define void @helper_cvtdq2ps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @int32_to_float32(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @int32_to_float32(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 28
  %19 = tail call i32 @int32_to_float32(i32 %16, %struct.float_status* %18) nounwind
  %20 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @int32_to_float32(i32 %22, %struct.float_status* %24) nounwind
  %26 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

define void @helper_cvtdq2pd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 1
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @int32_to_float64(i32 %4, %struct.float_status* %8) nounwind
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i64 @int32_to_float64(i32 %6, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

declare i64 @int32_to_float64(i32, %struct.float_status*)

define void @helper_cvtpi2ps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @int32_to_float32(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @int32_to_float32(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

define void @helper_cvtpi2pd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i64 @int32_to_float64(i32 %4, %struct.float_status* %6) nounwind
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i64 @int32_to_float64(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

define void @helper_cvtsi2ss(i64 %du, i32 %val) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 28
  %3 = tail call i32 @int32_to_float32(i32 %val, %struct.float_status* %2) nounwind
  %4 = inttoptr i64 %du to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  store i32 %3, i32* %5, align 4
  ret void
}

define void @helper_cvtsi2sd(i64 %du, i32 %val) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = load %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 28
  %4 = tail call i64 @int32_to_float64(i32 %val, %struct.float_status* %3) nounwind
  %5 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %4, i64* %5, align 8
  ret void
}

define void @helper_cvtps2dq(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_to_int32(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float32_to_int32(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 28
  %19 = tail call i32 @float32_to_int32(i32 %16, %struct.float_status* %18) nounwind
  %20 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_to_int32(i32 %22, %struct.float_status* %24) nounwind
  %26 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

declare i32 @float32_to_int32(i32, %struct.float_status*)

define void @helper_cvtpd2dq(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i32 @float64_to_int32(i64 %4, %struct.float_status* %6) nounwind
  %8 = inttoptr i64 %du to [4 x i32]*
  %9 = getelementptr inbounds [4 x i32]* %8, i64 0, i64 0
  store i32 %7, i32* %9, align 4
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 28
  %14 = tail call i32 @float64_to_int32(i64 %11, %struct.float_status* %13) nounwind
  %15 = getelementptr inbounds [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

declare i32 @float64_to_int32(i64, %struct.float_status*)

define void @helper_cvtps2pi(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_to_int32(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float32_to_int32(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

define void @helper_cvtpd2pi(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float64_to_int32(i64 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64* %9, align 8
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float64_to_int32(i64 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

define i32 @helper_cvtss2si(i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_to_int32(i32 %3, %struct.float_status* %5) nounwind
  ret i32 %6
}

define i32 @helper_cvtsd2si(i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float64_to_int32(i64 %3, %struct.float_status* %5) nounwind
  ret i32 %6
}

define void @helper_cvttps2dq(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float32_to_int32_round_to_zero(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 28
  %19 = tail call i32 @float32_to_int32_round_to_zero(i32 %16, %struct.float_status* %18) nounwind
  %20 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_to_int32_round_to_zero(i32 %22, %struct.float_status* %24) nounwind
  %26 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

define void @helper_cvttpd2dq(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = load %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State* %5, i64 0, i32 28
  %7 = tail call i32 @float64_to_int32_round_to_zero(i64 %4, %struct.float_status* %6) nounwind
  %8 = inttoptr i64 %du to [4 x i32]*
  %9 = getelementptr inbounds [4 x i32]* %8, i64 0, i64 0
  store i32 %7, i32* %9, align 4
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = load %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State* %12, i64 0, i32 28
  %14 = tail call i32 @float64_to_int32_round_to_zero(i64 %11, %struct.float_status* %13) nounwind
  %15 = getelementptr inbounds [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

declare i32 @float64_to_int32_round_to_zero(i64, %struct.float_status*)

define void @helper_cvttps2pi(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float32_to_int32_round_to_zero(i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

define void @helper_cvttpd2pi(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float64_to_int32_round_to_zero(i64 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64* %9, align 8
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float64_to_int32_round_to_zero(i64 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  ret void
}

define i32 @helper_cvttss2si(i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 %3, %struct.float_status* %5) nounwind
  ret i32 %6
}

define i32 @helper_cvttsd2si(i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float64_to_int32_round_to_zero(i64 %3, %struct.float_status* %5) nounwind
  ret i32 %6
}

define void @helper_rsqrtps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_sqrt(i32 %3, %struct.float_status* %5) nounwind
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_div(i32 1065353216, i32 %6, %struct.float_status* %8) nounwind
  %10 = inttoptr i64 %du to [4 x i32]*
  %11 = getelementptr inbounds [4 x i32]* %10, i64 0, i64 0
  store i32 %9, i32* %11, align 4
  %12 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i32 @float32_sqrt(i32 %13, %struct.float_status* %15) nounwind
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 28
  %19 = tail call i32 @float32_div(i32 1065353216, i32 %16, %struct.float_status* %18) nounwind
  %20 = getelementptr inbounds [4 x i32]* %10, i64 0, i64 1
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_sqrt(i32 %22, %struct.float_status* %24) nounwind
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 28
  %28 = tail call i32 @float32_div(i32 1065353216, i32 %25, %struct.float_status* %27) nounwind
  %29 = getelementptr inbounds [4 x i32]* %10, i64 0, i64 2
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %31 = load i32* %30, align 4
  %32 = load %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State* %32, i64 0, i32 28
  %34 = tail call i32 @float32_sqrt(i32 %31, %struct.float_status* %33) nounwind
  %35 = load %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 28
  %37 = tail call i32 @float32_div(i32 1065353216, i32 %34, %struct.float_status* %36) nounwind
  %38 = getelementptr inbounds [4 x i32]* %10, i64 0, i64 3
  store i32 %37, i32* %38, align 4
  ret void
}

define void @helper_rsqrtss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_sqrt(i32 %3, %struct.float_status* %5) nounwind
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_div(i32 1065353216, i32 %6, %struct.float_status* %8) nounwind
  %10 = inttoptr i64 %du to [4 x i32]*
  %11 = getelementptr inbounds [4 x i32]* %10, i64 0, i64 0
  store i32 %9, i32* %11, align 4
  ret void
}

define void @helper_rcpps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_div(i32 1065353216, i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = load %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State* %11, i64 0, i32 28
  %13 = tail call i32 @float32_div(i32 1065353216, i32 %10, %struct.float_status* %12) nounwind
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = load %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State* %17, i64 0, i32 28
  %19 = tail call i32 @float32_div(i32 1065353216, i32 %16, %struct.float_status* %18) nounwind
  %20 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_div(i32 1065353216, i32 %22, %struct.float_status* %24) nounwind
  %26 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

define void @helper_rcpss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = load %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State* %4, i64 0, i32 28
  %6 = tail call i32 @float32_div(i32 1065353216, i32 %3, %struct.float_status* %5) nounwind
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  ret void
}

define void @helper_extrq_r(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %6 = load i8* %5, align 1
  %7 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %8 = load i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %helper_extrq.exit, label %10

; <label>:10                                      ; preds = %0
  %11 = zext i8 %8 to i64
  %12 = shl i64 1, %11
  %13 = add i64 %12, -1
  br label %helper_extrq.exit

helper_extrq.exit:                                ; preds = %10, %0
  %mask.0.i = phi i64 [ %13, %10 ], [ -1, %0 ]
  %14 = zext i8 %6 to i64
  %15 = lshr i64 %3, %14
  %16 = and i64 %mask.0.i, %15
  store i64 %16, i64* %2, align 8
  ret void
}

define void @helper_extrq_i(i64 %du, i32 %index, i32 %length) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp eq i32 %length, 0
  br i1 %4, label %helper_extrq.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = zext i32 %length to i64
  %7 = shl i64 1, %6
  %8 = add i64 %7, -1
  br label %helper_extrq.exit

helper_extrq.exit:                                ; preds = %5, %0
  %mask.0.i = phi i64 [ %8, %5 ], [ -1, %0 ]
  %9 = zext i32 %index to i64
  %10 = lshr i64 %3, %9
  %11 = and i64 %mask.0.i, %10
  store i64 %11, i64* %2, align 8
  ret void
}

define void @helper_insertq_r(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %7 = load i8* %6, align 1
  %8 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %9 = load i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %helper_insertq.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = zext i8 %9 to i64
  %13 = shl i64 1, %12
  %14 = add i64 %13, -1
  br label %helper_insertq.exit

helper_insertq.exit:                              ; preds = %11, %0
  %mask.0.i = phi i64 [ %14, %11 ], [ -1, %0 ]
  %15 = zext i8 %7 to i64
  %16 = shl i64 %mask.0.i, %15
  %17 = xor i64 %16, -1
  %18 = and i64 %4, %17
  %19 = and i64 %mask.0.i, %4
  %20 = shl i64 %19, %15
  %21 = or i64 %18, %20
  %22 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %21, i64* %22, align 8
  ret void
}

define void @helper_insertq_i(i64 %du, i32 %index, i32 %length) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %3 = load i64* %2, align 8
  %4 = icmp eq i32 %length, 0
  br i1 %4, label %helper_insertq.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = zext i32 %length to i64
  %7 = shl i64 1, %6
  %8 = add i64 %7, -1
  br label %helper_insertq.exit

helper_insertq.exit:                              ; preds = %5, %0
  %mask.0.i = phi i64 [ %8, %5 ], [ -1, %0 ]
  %9 = zext i32 %index to i64
  %10 = shl i64 %mask.0.i, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %3, %11
  %13 = and i64 %mask.0.i, %3
  %14 = shl i64 %13, %9
  %15 = or i64 %12, %14
  store i64 %15, i64* %2, align 8
  ret void
}

define void @helper_haddps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 28
  %8 = tail call i32 @float32_add(i32 %3, i32 %5, %struct.float_status* %7) nounwind
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %12 = load i32* %11, align 4
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 28
  %15 = tail call i32 @float32_add(i32 %10, i32 %12, %struct.float_status* %14) nounwind
  %16 = inttoptr i64 %su to [4 x i32]*
  %17 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 0
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 1
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_add(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  %24 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 2
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_add(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  %31 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %8, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %31, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %15, i32* %r.sroa.1.4..cast, align 4
  %r.sroa.2.8..idx = getelementptr inbounds i8* %31, i64 8
  %r.sroa.2.8..cast = bitcast i8* %r.sroa.2.8..idx to i32*
  store i32 %23, i32* %r.sroa.2.8..cast, align 8
  %r.sroa.3.12..idx = getelementptr inbounds i8* %31, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i32*
  store i32 %30, i32* %r.sroa.3.12..cast, align 4
  ret void
}

define void @helper_haddpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_add(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_add(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %9, i64* %3, align 8
  store i64 %16, i64* %5, align 8
  ret void
}

define void @helper_hsubps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 28
  %8 = tail call i32 @float32_sub(i32 %3, i32 %5, %struct.float_status* %7) nounwind
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %12 = load i32* %11, align 4
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 28
  %15 = tail call i32 @float32_sub(i32 %10, i32 %12, %struct.float_status* %14) nounwind
  %16 = inttoptr i64 %su to [4 x i32]*
  %17 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 0
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 1
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_sub(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  %24 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 2
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %16, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_sub(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  %31 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %8, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %31, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %15, i32* %r.sroa.1.4..cast, align 4
  %r.sroa.2.8..idx = getelementptr inbounds i8* %31, i64 8
  %r.sroa.2.8..cast = bitcast i8* %r.sroa.2.8..idx to i32*
  store i32 %23, i32* %r.sroa.2.8..cast, align 8
  %r.sroa.3.12..idx = getelementptr inbounds i8* %31, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i32*
  store i32 %30, i32* %r.sroa.3.12..cast, align 4
  ret void
}

define void @helper_hsubpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_sub(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %9, i64* %3, align 8
  store i64 %16, i64* %5, align 8
  ret void
}

define void @helper_addsubps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_sub(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i32 @float32_add(i32 %11, i32 %13, %struct.float_status* %15) nounwind
  store i32 %16, i32* %10, align 4
  %17 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = load %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State* %21, i64 0, i32 28
  %23 = tail call i32 @float32_sub(i32 %18, i32 %20, %struct.float_status* %22) nounwind
  store i32 %23, i32* %17, align 4
  %24 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %27 = load i32* %26, align 4
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28
  %30 = tail call i32 @float32_add(i32 %25, i32 %27, %struct.float_status* %29) nounwind
  store i32 %30, i32* %24, align 4
  ret void
}

define void @helper_addsubpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 28
  %16 = tail call i64 @float64_add(i64 %11, i64 %13, %struct.float_status* %15) nounwind
  store i64 %16, i64* %10, align 8
  ret void
}

define void @helper_cmpeqps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_eq_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  %12 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float32_eq_quiet(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %12, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %24 = load i32* %23, align 4
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 28
  %27 = tail call i32 @float32_eq_quiet(i32 %22, i32 %24, %struct.float_status* %26) nounwind
  %28 = icmp ne i32 %27, 0
  %29 = sext i1 %28 to i32
  store i32 %29, i32* %21, align 4
  %30 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %33 = load i32* %32, align 4
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 28
  %36 = tail call i32 @float32_eq_quiet(i32 %31, i32 %33, %struct.float_status* %35) nounwind
  %37 = icmp ne i32 %36, 0
  %38 = sext i1 %37 to i32
  store i32 %38, i32* %30, align 4
  ret void
}

define void @helper_cmpeqss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_eq_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  ret void
}

define void @helper_cmpeqpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %15 = load i64* %14, align 8
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float64_eq_quiet(i64 %13, i64 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

declare i32 @float64_eq_quiet(i64, i64, %struct.float_status*)

define void @helper_cmpeqsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

define void @helper_cmpltps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  %12 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float32_lt(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %12, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %24 = load i32* %23, align 4
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 28
  %27 = tail call i32 @float32_lt(i32 %22, i32 %24, %struct.float_status* %26) nounwind
  %28 = icmp ne i32 %27, 0
  %29 = sext i1 %28 to i32
  store i32 %29, i32* %21, align 4
  %30 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %33 = load i32* %32, align 4
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 28
  %36 = tail call i32 @float32_lt(i32 %31, i32 %33, %struct.float_status* %35) nounwind
  %37 = icmp ne i32 %36, 0
  %38 = sext i1 %37 to i32
  store i32 %38, i32* %30, align 4
  ret void
}

define void @helper_cmpltss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  ret void
}

define void @helper_cmpltpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %15 = load i64* %14, align 8
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float64_lt(i64 %13, i64 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

declare i32 @float64_lt(i64, i64, %struct.float_status*)

define void @helper_cmpltsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

define void @helper_cmpleps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_le(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  %12 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float32_le(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %12, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %24 = load i32* %23, align 4
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 28
  %27 = tail call i32 @float32_le(i32 %22, i32 %24, %struct.float_status* %26) nounwind
  %28 = icmp ne i32 %27, 0
  %29 = sext i1 %28 to i32
  store i32 %29, i32* %21, align 4
  %30 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %33 = load i32* %32, align 4
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 28
  %36 = tail call i32 @float32_le(i32 %31, i32 %33, %struct.float_status* %35) nounwind
  %37 = icmp ne i32 %36, 0
  %38 = sext i1 %37 to i32
  store i32 %38, i32* %30, align 4
  ret void
}

define void @helper_cmpless(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_le(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  ret void
}

define void @helper_cmplepd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %15 = load i64* %14, align 8
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float64_le(i64 %13, i64 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

declare i32 @float64_le(i64, i64, %struct.float_status*)

define void @helper_cmplesd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

define void @helper_cmpunordps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_unordered_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  %12 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %15 = load i32* %14, align 4
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float32_unordered_quiet(i32 %13, i32 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i32
  store i32 %20, i32* %12, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %24 = load i32* %23, align 4
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 28
  %27 = tail call i32 @float32_unordered_quiet(i32 %22, i32 %24, %struct.float_status* %26) nounwind
  %28 = icmp ne i32 %27, 0
  %29 = sext i1 %28 to i32
  store i32 %29, i32* %21, align 4
  %30 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %33 = load i32* %32, align 4
  %34 = load %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State* %34, i64 0, i32 28
  %36 = tail call i32 @float32_unordered_quiet(i32 %31, i32 %33, %struct.float_status* %35) nounwind
  %37 = icmp ne i32 %36, 0
  %38 = sext i1 %37 to i32
  store i32 %38, i32* %30, align 4
  ret void
}

declare i32 @float32_unordered_quiet(i32, i32, %struct.float_status*)

define void @helper_cmpunordss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_unordered_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %2, align 4
  ret void
}

define void @helper_cmpunordpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %15 = load i64* %14, align 8
  %16 = load %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State* %16, i64 0, i32 28
  %18 = tail call i32 @float64_unordered_quiet(i64 %13, i64 %15, %struct.float_status* %17) nounwind
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

declare i32 @float64_unordered_quiet(i64, i64, %struct.float_status*)

define void @helper_cmpunordsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

define void @helper_cmpneqps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_eq_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %14 = load i32* %13, align 4
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float32_eq_quiet(i32 %12, i32 %14, %struct.float_status* %16) nounwind
  %not.12 = icmp eq i32 %17, 0
  %18 = sext i1 %not.12 to i32
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_eq_quiet(i32 %20, i32 %22, %struct.float_status* %24) nounwind
  %not.13 = icmp eq i32 %25, 0
  %26 = sext i1 %not.13 to i32
  store i32 %26, i32* %19, align 4
  %27 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %30 = load i32* %29, align 4
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 28
  %33 = tail call i32 @float32_eq_quiet(i32 %28, i32 %30, %struct.float_status* %32) nounwind
  %not.14 = icmp eq i32 %33, 0
  %34 = sext i1 %not.14 to i32
  store i32 %34, i32* %27, align 4
  ret void
}

define void @helper_cmpneqss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_eq_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  ret void
}

define void @helper_cmpneqpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  %11 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %14 = load i64* %13, align 8
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float64_eq_quiet(i64 %12, i64 %14, %struct.float_status* %16) nounwind
  %not.6 = icmp eq i32 %17, 0
  %18 = sext i1 %not.6 to i64
  store i64 %18, i64* %11, align 8
  ret void
}

define void @helper_cmpneqsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  ret void
}

define void @helper_cmpnltps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %14 = load i32* %13, align 4
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float32_lt(i32 %12, i32 %14, %struct.float_status* %16) nounwind
  %not.12 = icmp eq i32 %17, 0
  %18 = sext i1 %not.12 to i32
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_lt(i32 %20, i32 %22, %struct.float_status* %24) nounwind
  %not.13 = icmp eq i32 %25, 0
  %26 = sext i1 %not.13 to i32
  store i32 %26, i32* %19, align 4
  %27 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %30 = load i32* %29, align 4
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 28
  %33 = tail call i32 @float32_lt(i32 %28, i32 %30, %struct.float_status* %32) nounwind
  %not.14 = icmp eq i32 %33, 0
  %34 = sext i1 %not.14 to i32
  store i32 %34, i32* %27, align 4
  ret void
}

define void @helper_cmpnltss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_lt(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  ret void
}

define void @helper_cmpnltpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  %11 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %14 = load i64* %13, align 8
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float64_lt(i64 %12, i64 %14, %struct.float_status* %16) nounwind
  %not.6 = icmp eq i32 %17, 0
  %18 = sext i1 %not.6 to i64
  store i64 %18, i64* %11, align 8
  ret void
}

define void @helper_cmpnltsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  ret void
}

define void @helper_cmpnleps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_le(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %14 = load i32* %13, align 4
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float32_le(i32 %12, i32 %14, %struct.float_status* %16) nounwind
  %not.12 = icmp eq i32 %17, 0
  %18 = sext i1 %not.12 to i32
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_le(i32 %20, i32 %22, %struct.float_status* %24) nounwind
  %not.13 = icmp eq i32 %25, 0
  %26 = sext i1 %not.13 to i32
  store i32 %26, i32* %19, align 4
  %27 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %30 = load i32* %29, align 4
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 28
  %33 = tail call i32 @float32_le(i32 %28, i32 %30, %struct.float_status* %32) nounwind
  %not.14 = icmp eq i32 %33, 0
  %34 = sext i1 %not.14 to i32
  store i32 %34, i32* %27, align 4
  ret void
}

define void @helper_cmpnless(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_le(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  ret void
}

define void @helper_cmpnlepd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  %11 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %14 = load i64* %13, align 8
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float64_le(i64 %12, i64 %14, %struct.float_status* %16) nounwind
  %not.6 = icmp eq i32 %17, 0
  %18 = sext i1 %not.6 to i64
  store i64 %18, i64* %11, align 8
  ret void
}

define void @helper_cmpnlesd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  ret void
}

define void @helper_cmpordps(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_unordered_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %12 = load i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %14 = load i32* %13, align 4
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float32_unordered_quiet(i32 %12, i32 %14, %struct.float_status* %16) nounwind
  %not.12 = icmp eq i32 %17, 0
  %18 = sext i1 %not.12 to i32
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %22 = load i32* %21, align 4
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i32 @float32_unordered_quiet(i32 %20, i32 %22, %struct.float_status* %24) nounwind
  %not.13 = icmp eq i32 %25, 0
  %26 = sext i1 %not.13 to i32
  store i32 %26, i32* %19, align 4
  %27 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %30 = load i32* %29, align 4
  %31 = load %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State* %31, i64 0, i32 28
  %33 = tail call i32 @float32_unordered_quiet(i32 %28, i32 %30, %struct.float_status* %32) nounwind
  %not.14 = icmp eq i32 %33, 0
  %34 = sext i1 %not.14 to i32
  store i32 %34, i32* %27, align 4
  ret void
}

define void @helper_cmpordss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_unordered_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i32
  store i32 %10, i32* %2, align 4
  ret void
}

define void @helper_cmpordpd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  %11 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %14 = load i64* %13, align 8
  %15 = load %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State* %15, i64 0, i32 28
  %17 = tail call i32 @float64_unordered_quiet(i64 %12, i64 %14, %struct.float_status* %16) nounwind
  %not.6 = icmp eq i32 %17, 0
  %18 = sext i1 %not.6 to i64
  store i64 %18, i64* %11, align 8
  ret void
}

define void @helper_cmpordsd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %not. = icmp eq i32 %9, 0
  %10 = sext i1 %not. to i64
  store i64 %10, i64* %3, align 8
  ret void
}

define void @helper_ucomiss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_compare_quiet(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 3
  store i32 %13, i32* %15, align 4
  ret void
}

declare i32 @float32_compare_quiet(i32, i32, %struct.float_status*)

define void @helper_comiss(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float32_compare(i32 %3, i32 %6, %struct.float_status* %8) nounwind
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 3
  store i32 %13, i32* %15, align 4
  ret void
}

declare i32 @float32_compare(i32, i32, %struct.float_status*)

define void @helper_ucomisd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_compare_quiet(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 3
  store i32 %13, i32* %15, align 4
  ret void
}

declare i32 @float64_compare_quiet(i64, i64, %struct.float_status*)

define void @helper_comisd(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 28
  %9 = tail call i32 @float64_compare(i64 %4, i64 %6, %struct.float_status* %8) nounwind
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32* %12, align 4
  %14 = load %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State* %14, i64 0, i32 3
  store i32 %13, i32* %15, align 4
  ret void
}

declare i32 @float64_compare(i64, i64, %struct.float_status*)

define i32 @helper_movmskps(i64 %su) nounwind uwtable readonly {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 31
  %5 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %6 = load i32* %5, align 4
  %7 = lshr i32 %6, 31
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %9 = load i32* %8, align 4
  %10 = lshr i32 %9, 31
  %11 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %12 = load i32* %11, align 4
  %13 = lshr i32 %12, 31
  %14 = shl nuw nsw i32 %7, 1
  %15 = or i32 %14, %4
  %16 = shl nuw nsw i32 %10, 2
  %17 = or i32 %15, %16
  %18 = shl nuw nsw i32 %13, 3
  %19 = or i32 %17, %18
  ret i32 %19
}

define i32 @helper_movmskpd(i64 %su) nounwind uwtable readonly {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 31
  %5 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %6 = load i32* %5, align 4
  %7 = lshr i32 %6, 31
  %8 = shl nuw nsw i32 %7, 1
  %9 = or i32 %8, %4
  ret i32 %9
}

define i32 @helper_pmovmskb_xmm(i64 %su) nounwind uwtable readonly {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = lshr i32 %4, 7
  %6 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = lshr i32 %8, 6
  %10 = and i32 %9, 2
  %11 = or i32 %10, %5
  %12 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %13 = load i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = lshr i32 %14, 5
  %16 = and i32 %15, 4
  %17 = or i32 %11, %16
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = lshr i32 %20, 4
  %22 = and i32 %21, 8
  %23 = or i32 %17, %22
  %24 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %25 = load i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = lshr i32 %26, 3
  %28 = and i32 %27, 16
  %29 = or i32 %23, %28
  %30 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = lshr i32 %32, 2
  %34 = and i32 %33, 32
  %35 = or i32 %29, %34
  %36 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = lshr i32 %38, 1
  %40 = and i32 %39, 64
  %41 = or i32 %35, %40
  %42 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %43 = load i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %44, 128
  %46 = or i32 %41, %45
  %47 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %49, 1
  %51 = and i32 %50, 256
  %52 = or i32 %46, %51
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = shl nuw nsw i32 %55, 2
  %57 = and i32 %56, 512
  %58 = or i32 %52, %57
  %59 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %60 = load i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, 3
  %63 = and i32 %62, 1024
  %64 = or i32 %58, %63
  %65 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %66 = load i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = shl nuw nsw i32 %67, 4
  %69 = and i32 %68, 2048
  %70 = or i32 %64, %69
  %71 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %72 = load i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw nsw i32 %73, 5
  %75 = and i32 %74, 4096
  %76 = or i32 %70, %75
  %77 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %78 = load i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = shl nuw nsw i32 %79, 6
  %81 = and i32 %80, 8192
  %82 = or i32 %76, %81
  %83 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %84 = load i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 7
  %87 = and i32 %86, 16384
  %88 = or i32 %82, %87
  %89 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %90 = load i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = shl nuw nsw i32 %91, 8
  %93 = and i32 %92, 32768
  %94 = or i32 %88, %93
  ret i32 %94
}

define void @helper_packsswb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [8 x i16]*
  %3 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 0
  %4 = load i16* %3, align 2
  %5 = icmp slt i16 %4, -128
  br i1 %5, label %satsb.exit, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp sgt i16 %4, 127
  %8 = trunc i16 %4 to i8
  %phitmp = select i1 %7, i8 127, i8 %8
  br label %satsb.exit

satsb.exit:                                       ; preds = %6, %0
  %.0.i = phi i8 [ -128, %0 ], [ %phitmp, %6 ]
  %9 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = icmp slt i16 %10, -128
  br i1 %11, label %satsb.exit61, label %12

; <label>:12                                      ; preds = %satsb.exit
  %13 = icmp sgt i16 %10, 127
  %14 = trunc i16 %10 to i8
  %phitmp62 = select i1 %13, i8 127, i8 %14
  br label %satsb.exit61

satsb.exit61:                                     ; preds = %12, %satsb.exit
  %.0.i60 = phi i8 [ -128, %satsb.exit ], [ %phitmp62, %12 ]
  %15 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp slt i16 %16, -128
  br i1 %17, label %satsb.exit58, label %18

; <label>:18                                      ; preds = %satsb.exit61
  %19 = icmp sgt i16 %16, 127
  %20 = trunc i16 %16 to i8
  %phitmp63 = select i1 %19, i8 127, i8 %20
  br label %satsb.exit58

satsb.exit58:                                     ; preds = %18, %satsb.exit61
  %.0.i57 = phi i8 [ -128, %satsb.exit61 ], [ %phitmp63, %18 ]
  %21 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = icmp slt i16 %22, -128
  br i1 %23, label %satsb.exit55, label %24

; <label>:24                                      ; preds = %satsb.exit58
  %25 = icmp sgt i16 %22, 127
  %26 = trunc i16 %22 to i8
  %phitmp64 = select i1 %25, i8 127, i8 %26
  br label %satsb.exit55

satsb.exit55:                                     ; preds = %24, %satsb.exit58
  %.0.i54 = phi i8 [ -128, %satsb.exit58 ], [ %phitmp64, %24 ]
  %27 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 4
  %28 = load i16* %27, align 2
  %29 = icmp slt i16 %28, -128
  br i1 %29, label %satsb.exit52, label %30

; <label>:30                                      ; preds = %satsb.exit55
  %31 = icmp sgt i16 %28, 127
  %32 = trunc i16 %28 to i8
  %phitmp65 = select i1 %31, i8 127, i8 %32
  br label %satsb.exit52

satsb.exit52:                                     ; preds = %30, %satsb.exit55
  %.0.i51 = phi i8 [ -128, %satsb.exit55 ], [ %phitmp65, %30 ]
  %33 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 5
  %34 = load i16* %33, align 2
  %35 = icmp slt i16 %34, -128
  br i1 %35, label %satsb.exit49, label %36

; <label>:36                                      ; preds = %satsb.exit52
  %37 = icmp sgt i16 %34, 127
  %38 = trunc i16 %34 to i8
  %phitmp66 = select i1 %37, i8 127, i8 %38
  br label %satsb.exit49

satsb.exit49:                                     ; preds = %36, %satsb.exit52
  %.0.i48 = phi i8 [ -128, %satsb.exit52 ], [ %phitmp66, %36 ]
  %39 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 6
  %40 = load i16* %39, align 2
  %41 = icmp slt i16 %40, -128
  br i1 %41, label %satsb.exit46, label %42

; <label>:42                                      ; preds = %satsb.exit49
  %43 = icmp sgt i16 %40, 127
  %44 = trunc i16 %40 to i8
  %phitmp67 = select i1 %43, i8 127, i8 %44
  br label %satsb.exit46

satsb.exit46:                                     ; preds = %42, %satsb.exit49
  %.0.i45 = phi i8 [ -128, %satsb.exit49 ], [ %phitmp67, %42 ]
  %45 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 7
  %46 = load i16* %45, align 2
  %47 = icmp slt i16 %46, -128
  br i1 %47, label %satsb.exit43, label %48

; <label>:48                                      ; preds = %satsb.exit46
  %49 = icmp sgt i16 %46, 127
  %50 = trunc i16 %46 to i8
  %phitmp68 = select i1 %49, i8 127, i8 %50
  br label %satsb.exit43

satsb.exit43:                                     ; preds = %48, %satsb.exit46
  %.0.i42 = phi i8 [ -128, %satsb.exit46 ], [ %phitmp68, %48 ]
  %51 = inttoptr i64 %su to [8 x i16]*
  %52 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 0
  %53 = load i16* %52, align 2
  %54 = icmp slt i16 %53, -128
  br i1 %54, label %satsb.exit40, label %55

; <label>:55                                      ; preds = %satsb.exit43
  %56 = icmp sgt i16 %53, 127
  %57 = trunc i16 %53 to i8
  %phitmp69 = select i1 %56, i8 127, i8 %57
  br label %satsb.exit40

satsb.exit40:                                     ; preds = %55, %satsb.exit43
  %.0.i39 = phi i8 [ -128, %satsb.exit43 ], [ %phitmp69, %55 ]
  %58 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 1
  %59 = load i16* %58, align 2
  %60 = icmp slt i16 %59, -128
  br i1 %60, label %satsb.exit37, label %61

; <label>:61                                      ; preds = %satsb.exit40
  %62 = icmp sgt i16 %59, 127
  %63 = trunc i16 %59 to i8
  %phitmp70 = select i1 %62, i8 127, i8 %63
  br label %satsb.exit37

satsb.exit37:                                     ; preds = %61, %satsb.exit40
  %.0.i36 = phi i8 [ -128, %satsb.exit40 ], [ %phitmp70, %61 ]
  %64 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 2
  %65 = load i16* %64, align 2
  %66 = icmp slt i16 %65, -128
  br i1 %66, label %satsb.exit34, label %67

; <label>:67                                      ; preds = %satsb.exit37
  %68 = icmp sgt i16 %65, 127
  %69 = trunc i16 %65 to i8
  %phitmp71 = select i1 %68, i8 127, i8 %69
  br label %satsb.exit34

satsb.exit34:                                     ; preds = %67, %satsb.exit37
  %.0.i33 = phi i8 [ -128, %satsb.exit37 ], [ %phitmp71, %67 ]
  %70 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 3
  %71 = load i16* %70, align 2
  %72 = icmp slt i16 %71, -128
  br i1 %72, label %satsb.exit31, label %73

; <label>:73                                      ; preds = %satsb.exit34
  %74 = icmp sgt i16 %71, 127
  %75 = trunc i16 %71 to i8
  %phitmp72 = select i1 %74, i8 127, i8 %75
  br label %satsb.exit31

satsb.exit31:                                     ; preds = %73, %satsb.exit34
  %.0.i30 = phi i8 [ -128, %satsb.exit34 ], [ %phitmp72, %73 ]
  %76 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 4
  %77 = load i16* %76, align 2
  %78 = icmp slt i16 %77, -128
  br i1 %78, label %satsb.exit28, label %79

; <label>:79                                      ; preds = %satsb.exit31
  %80 = icmp sgt i16 %77, 127
  %81 = trunc i16 %77 to i8
  %phitmp73 = select i1 %80, i8 127, i8 %81
  br label %satsb.exit28

satsb.exit28:                                     ; preds = %79, %satsb.exit31
  %.0.i27 = phi i8 [ -128, %satsb.exit31 ], [ %phitmp73, %79 ]
  %82 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 5
  %83 = load i16* %82, align 2
  %84 = icmp slt i16 %83, -128
  br i1 %84, label %satsb.exit25, label %85

; <label>:85                                      ; preds = %satsb.exit28
  %86 = icmp sgt i16 %83, 127
  %87 = trunc i16 %83 to i8
  %phitmp74 = select i1 %86, i8 127, i8 %87
  br label %satsb.exit25

satsb.exit25:                                     ; preds = %85, %satsb.exit28
  %.0.i24 = phi i8 [ -128, %satsb.exit28 ], [ %phitmp74, %85 ]
  %88 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 6
  %89 = load i16* %88, align 2
  %90 = icmp slt i16 %89, -128
  br i1 %90, label %satsb.exit22, label %91

; <label>:91                                      ; preds = %satsb.exit25
  %92 = icmp sgt i16 %89, 127
  %93 = trunc i16 %89 to i8
  %phitmp75 = select i1 %92, i8 127, i8 %93
  br label %satsb.exit22

satsb.exit22:                                     ; preds = %91, %satsb.exit25
  %.0.i21 = phi i8 [ -128, %satsb.exit25 ], [ %phitmp75, %91 ]
  %94 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 7
  %95 = load i16* %94, align 2
  %96 = icmp slt i16 %95, -128
  br i1 %96, label %satsb.exit19, label %97

; <label>:97                                      ; preds = %satsb.exit22
  %98 = icmp sgt i16 %95, 127
  %99 = trunc i16 %95 to i8
  %phitmp76 = select i1 %98, i8 127, i8 %99
  br label %satsb.exit19

satsb.exit19:                                     ; preds = %97, %satsb.exit22
  %.0.i18 = phi i8 [ -128, %satsb.exit22 ], [ %phitmp76, %97 ]
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %.0.i, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %.0.i60, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %.0.i57, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %.0.i54, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %.0.i51, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %.0.i48, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %.0.i45, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %.0.i42, i8* %r.sroa.7.7..raw_idx, align 1
  %r.sroa.8.8..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %r.sroa.8.8..cast = bitcast i64* %r.sroa.8.8..idx to i8*
  store i8 %.0.i39, i8* %r.sroa.8.8..cast, align 8
  %r.sroa.9.9..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 9
  store i8 %.0.i36, i8* %r.sroa.9.9..raw_idx, align 1
  %r.sroa.10.10..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 10
  store i8 %.0.i33, i8* %r.sroa.10.10..raw_idx, align 2
  %r.sroa.11.11..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 11
  store i8 %.0.i30, i8* %r.sroa.11.11..raw_idx, align 1
  %r.sroa.12.12..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 12
  store i8 %.0.i27, i8* %r.sroa.12.12..raw_idx, align 4
  %r.sroa.13.13..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 13
  store i8 %.0.i24, i8* %r.sroa.13.13..raw_idx, align 1
  %r.sroa.14.14..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 14
  store i8 %.0.i21, i8* %r.sroa.14.14..raw_idx, align 2
  %r.sroa.15.15..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 15
  store i8 %.0.i18, i8* %r.sroa.15.15..raw_idx, align 1
  ret void
}

define void @helper_packuswb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [8 x i16]*
  %3 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 0
  %4 = load i16* %3, align 2
  %5 = icmp slt i16 %4, 0
  br i1 %5, label %satub.exit, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp sgt i16 %4, 255
  %8 = trunc i16 %4 to i8
  %phitmp = select i1 %7, i8 -1, i8 %8
  br label %satub.exit

satub.exit:                                       ; preds = %6, %0
  %.0.i = phi i8 [ 0, %0 ], [ %phitmp, %6 ]
  %9 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = icmp slt i16 %10, 0
  br i1 %11, label %satub.exit61, label %12

; <label>:12                                      ; preds = %satub.exit
  %13 = icmp sgt i16 %10, 255
  %14 = trunc i16 %10 to i8
  %phitmp62 = select i1 %13, i8 -1, i8 %14
  br label %satub.exit61

satub.exit61:                                     ; preds = %12, %satub.exit
  %.0.i60 = phi i8 [ 0, %satub.exit ], [ %phitmp62, %12 ]
  %15 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp slt i16 %16, 0
  br i1 %17, label %satub.exit58, label %18

; <label>:18                                      ; preds = %satub.exit61
  %19 = icmp sgt i16 %16, 255
  %20 = trunc i16 %16 to i8
  %phitmp63 = select i1 %19, i8 -1, i8 %20
  br label %satub.exit58

satub.exit58:                                     ; preds = %18, %satub.exit61
  %.0.i57 = phi i8 [ 0, %satub.exit61 ], [ %phitmp63, %18 ]
  %21 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = icmp slt i16 %22, 0
  br i1 %23, label %satub.exit55, label %24

; <label>:24                                      ; preds = %satub.exit58
  %25 = icmp sgt i16 %22, 255
  %26 = trunc i16 %22 to i8
  %phitmp64 = select i1 %25, i8 -1, i8 %26
  br label %satub.exit55

satub.exit55:                                     ; preds = %24, %satub.exit58
  %.0.i54 = phi i8 [ 0, %satub.exit58 ], [ %phitmp64, %24 ]
  %27 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 4
  %28 = load i16* %27, align 2
  %29 = icmp slt i16 %28, 0
  br i1 %29, label %satub.exit52, label %30

; <label>:30                                      ; preds = %satub.exit55
  %31 = icmp sgt i16 %28, 255
  %32 = trunc i16 %28 to i8
  %phitmp65 = select i1 %31, i8 -1, i8 %32
  br label %satub.exit52

satub.exit52:                                     ; preds = %30, %satub.exit55
  %.0.i51 = phi i8 [ 0, %satub.exit55 ], [ %phitmp65, %30 ]
  %33 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 5
  %34 = load i16* %33, align 2
  %35 = icmp slt i16 %34, 0
  br i1 %35, label %satub.exit49, label %36

; <label>:36                                      ; preds = %satub.exit52
  %37 = icmp sgt i16 %34, 255
  %38 = trunc i16 %34 to i8
  %phitmp66 = select i1 %37, i8 -1, i8 %38
  br label %satub.exit49

satub.exit49:                                     ; preds = %36, %satub.exit52
  %.0.i48 = phi i8 [ 0, %satub.exit52 ], [ %phitmp66, %36 ]
  %39 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 6
  %40 = load i16* %39, align 2
  %41 = icmp slt i16 %40, 0
  br i1 %41, label %satub.exit46, label %42

; <label>:42                                      ; preds = %satub.exit49
  %43 = icmp sgt i16 %40, 255
  %44 = trunc i16 %40 to i8
  %phitmp67 = select i1 %43, i8 -1, i8 %44
  br label %satub.exit46

satub.exit46:                                     ; preds = %42, %satub.exit49
  %.0.i45 = phi i8 [ 0, %satub.exit49 ], [ %phitmp67, %42 ]
  %45 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 7
  %46 = load i16* %45, align 2
  %47 = icmp slt i16 %46, 0
  br i1 %47, label %satub.exit43, label %48

; <label>:48                                      ; preds = %satub.exit46
  %49 = icmp sgt i16 %46, 255
  %50 = trunc i16 %46 to i8
  %phitmp68 = select i1 %49, i8 -1, i8 %50
  br label %satub.exit43

satub.exit43:                                     ; preds = %48, %satub.exit46
  %.0.i42 = phi i8 [ 0, %satub.exit46 ], [ %phitmp68, %48 ]
  %51 = inttoptr i64 %su to [8 x i16]*
  %52 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 0
  %53 = load i16* %52, align 2
  %54 = icmp slt i16 %53, 0
  br i1 %54, label %satub.exit40, label %55

; <label>:55                                      ; preds = %satub.exit43
  %56 = icmp sgt i16 %53, 255
  %57 = trunc i16 %53 to i8
  %phitmp69 = select i1 %56, i8 -1, i8 %57
  br label %satub.exit40

satub.exit40:                                     ; preds = %55, %satub.exit43
  %.0.i39 = phi i8 [ 0, %satub.exit43 ], [ %phitmp69, %55 ]
  %58 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 1
  %59 = load i16* %58, align 2
  %60 = icmp slt i16 %59, 0
  br i1 %60, label %satub.exit37, label %61

; <label>:61                                      ; preds = %satub.exit40
  %62 = icmp sgt i16 %59, 255
  %63 = trunc i16 %59 to i8
  %phitmp70 = select i1 %62, i8 -1, i8 %63
  br label %satub.exit37

satub.exit37:                                     ; preds = %61, %satub.exit40
  %.0.i36 = phi i8 [ 0, %satub.exit40 ], [ %phitmp70, %61 ]
  %64 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 2
  %65 = load i16* %64, align 2
  %66 = icmp slt i16 %65, 0
  br i1 %66, label %satub.exit34, label %67

; <label>:67                                      ; preds = %satub.exit37
  %68 = icmp sgt i16 %65, 255
  %69 = trunc i16 %65 to i8
  %phitmp71 = select i1 %68, i8 -1, i8 %69
  br label %satub.exit34

satub.exit34:                                     ; preds = %67, %satub.exit37
  %.0.i33 = phi i8 [ 0, %satub.exit37 ], [ %phitmp71, %67 ]
  %70 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 3
  %71 = load i16* %70, align 2
  %72 = icmp slt i16 %71, 0
  br i1 %72, label %satub.exit31, label %73

; <label>:73                                      ; preds = %satub.exit34
  %74 = icmp sgt i16 %71, 255
  %75 = trunc i16 %71 to i8
  %phitmp72 = select i1 %74, i8 -1, i8 %75
  br label %satub.exit31

satub.exit31:                                     ; preds = %73, %satub.exit34
  %.0.i30 = phi i8 [ 0, %satub.exit34 ], [ %phitmp72, %73 ]
  %76 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 4
  %77 = load i16* %76, align 2
  %78 = icmp slt i16 %77, 0
  br i1 %78, label %satub.exit28, label %79

; <label>:79                                      ; preds = %satub.exit31
  %80 = icmp sgt i16 %77, 255
  %81 = trunc i16 %77 to i8
  %phitmp73 = select i1 %80, i8 -1, i8 %81
  br label %satub.exit28

satub.exit28:                                     ; preds = %79, %satub.exit31
  %.0.i27 = phi i8 [ 0, %satub.exit31 ], [ %phitmp73, %79 ]
  %82 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 5
  %83 = load i16* %82, align 2
  %84 = icmp slt i16 %83, 0
  br i1 %84, label %satub.exit25, label %85

; <label>:85                                      ; preds = %satub.exit28
  %86 = icmp sgt i16 %83, 255
  %87 = trunc i16 %83 to i8
  %phitmp74 = select i1 %86, i8 -1, i8 %87
  br label %satub.exit25

satub.exit25:                                     ; preds = %85, %satub.exit28
  %.0.i24 = phi i8 [ 0, %satub.exit28 ], [ %phitmp74, %85 ]
  %88 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 6
  %89 = load i16* %88, align 2
  %90 = icmp slt i16 %89, 0
  br i1 %90, label %satub.exit22, label %91

; <label>:91                                      ; preds = %satub.exit25
  %92 = icmp sgt i16 %89, 255
  %93 = trunc i16 %89 to i8
  %phitmp75 = select i1 %92, i8 -1, i8 %93
  br label %satub.exit22

satub.exit22:                                     ; preds = %91, %satub.exit25
  %.0.i21 = phi i8 [ 0, %satub.exit25 ], [ %phitmp75, %91 ]
  %94 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 7
  %95 = load i16* %94, align 2
  %96 = icmp slt i16 %95, 0
  br i1 %96, label %satub.exit19, label %97

; <label>:97                                      ; preds = %satub.exit22
  %98 = icmp sgt i16 %95, 255
  %99 = trunc i16 %95 to i8
  %phitmp76 = select i1 %98, i8 -1, i8 %99
  br label %satub.exit19

satub.exit19:                                     ; preds = %97, %satub.exit22
  %.0.i18 = phi i8 [ 0, %satub.exit22 ], [ %phitmp76, %97 ]
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %.0.i, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %.0.i60, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %.0.i57, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %.0.i54, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %.0.i51, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %.0.i48, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %.0.i45, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %.0.i42, i8* %r.sroa.7.7..raw_idx, align 1
  %r.sroa.8.8..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %r.sroa.8.8..cast = bitcast i64* %r.sroa.8.8..idx to i8*
  store i8 %.0.i39, i8* %r.sroa.8.8..cast, align 8
  %r.sroa.9.9..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 9
  store i8 %.0.i36, i8* %r.sroa.9.9..raw_idx, align 1
  %r.sroa.10.10..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 10
  store i8 %.0.i33, i8* %r.sroa.10.10..raw_idx, align 2
  %r.sroa.11.11..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 11
  store i8 %.0.i30, i8* %r.sroa.11.11..raw_idx, align 1
  %r.sroa.12.12..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 12
  store i8 %.0.i27, i8* %r.sroa.12.12..raw_idx, align 4
  %r.sroa.13.13..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 13
  store i8 %.0.i24, i8* %r.sroa.13.13..raw_idx, align 1
  %r.sroa.14.14..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 14
  store i8 %.0.i21, i8* %r.sroa.14.14..raw_idx, align 2
  %r.sroa.15.15..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 15
  store i8 %.0.i18, i8* %r.sroa.15.15..raw_idx, align 1
  ret void
}

define void @helper_packssdw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp slt i32 %3, -32768
  br i1 %4, label %satsw.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = icmp sgt i32 %3, 32767
  %7 = trunc i32 %3 to i16
  %phitmp = select i1 %6, i16 32767, i16 %7
  br label %satsw.exit

satsw.exit:                                       ; preds = %5, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %5 ]
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = icmp slt i32 %9, -32768
  br i1 %10, label %satsw.exit30, label %11

; <label>:11                                      ; preds = %satsw.exit
  %12 = icmp sgt i32 %9, 32767
  %13 = trunc i32 %9 to i16
  %phitmp31 = select i1 %12, i16 32767, i16 %13
  br label %satsw.exit30

satsw.exit30:                                     ; preds = %11, %satsw.exit
  %.0.i29 = phi i16 [ -32768, %satsw.exit ], [ %phitmp31, %11 ]
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = icmp slt i32 %15, -32768
  br i1 %16, label %satsw.exit27, label %17

; <label>:17                                      ; preds = %satsw.exit30
  %18 = icmp sgt i32 %15, 32767
  %19 = trunc i32 %15 to i16
  %phitmp32 = select i1 %18, i16 32767, i16 %19
  br label %satsw.exit27

satsw.exit27:                                     ; preds = %17, %satsw.exit30
  %.0.i26 = phi i16 [ -32768, %satsw.exit30 ], [ %phitmp32, %17 ]
  %20 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %21 = load i32* %20, align 4
  %22 = icmp slt i32 %21, -32768
  br i1 %22, label %satsw.exit24, label %23

; <label>:23                                      ; preds = %satsw.exit27
  %24 = icmp sgt i32 %21, 32767
  %25 = trunc i32 %21 to i16
  %phitmp33 = select i1 %24, i16 32767, i16 %25
  br label %satsw.exit24

satsw.exit24:                                     ; preds = %23, %satsw.exit27
  %.0.i23 = phi i16 [ -32768, %satsw.exit27 ], [ %phitmp33, %23 ]
  %26 = inttoptr i64 %su to [4 x i32]*
  %27 = getelementptr inbounds [4 x i32]* %26, i64 0, i64 0
  %28 = load i32* %27, align 4
  %29 = icmp slt i32 %28, -32768
  br i1 %29, label %satsw.exit21, label %30

; <label>:30                                      ; preds = %satsw.exit24
  %31 = icmp sgt i32 %28, 32767
  %32 = trunc i32 %28 to i16
  %phitmp34 = select i1 %31, i16 32767, i16 %32
  br label %satsw.exit21

satsw.exit21:                                     ; preds = %30, %satsw.exit24
  %.0.i20 = phi i16 [ -32768, %satsw.exit24 ], [ %phitmp34, %30 ]
  %33 = getelementptr inbounds [4 x i32]* %26, i64 0, i64 1
  %34 = load i32* %33, align 4
  %35 = icmp slt i32 %34, -32768
  br i1 %35, label %satsw.exit18, label %36

; <label>:36                                      ; preds = %satsw.exit21
  %37 = icmp sgt i32 %34, 32767
  %38 = trunc i32 %34 to i16
  %phitmp35 = select i1 %37, i16 32767, i16 %38
  br label %satsw.exit18

satsw.exit18:                                     ; preds = %36, %satsw.exit21
  %.0.i17 = phi i16 [ -32768, %satsw.exit21 ], [ %phitmp35, %36 ]
  %39 = getelementptr inbounds [4 x i32]* %26, i64 0, i64 2
  %40 = load i32* %39, align 4
  %41 = icmp slt i32 %40, -32768
  br i1 %41, label %satsw.exit15, label %42

; <label>:42                                      ; preds = %satsw.exit18
  %43 = icmp sgt i32 %40, 32767
  %44 = trunc i32 %40 to i16
  %phitmp36 = select i1 %43, i16 32767, i16 %44
  br label %satsw.exit15

satsw.exit15:                                     ; preds = %42, %satsw.exit18
  %.0.i14 = phi i16 [ -32768, %satsw.exit18 ], [ %phitmp36, %42 ]
  %45 = getelementptr inbounds [4 x i32]* %26, i64 0, i64 3
  %46 = load i32* %45, align 4
  %47 = icmp slt i32 %46, -32768
  br i1 %47, label %satsw.exit12, label %48

; <label>:48                                      ; preds = %satsw.exit15
  %49 = icmp sgt i32 %46, 32767
  %50 = trunc i32 %46 to i16
  %phitmp37 = select i1 %49, i16 32767, i16 %50
  br label %satsw.exit12

satsw.exit12:                                     ; preds = %48, %satsw.exit15
  %.0.i11 = phi i16 [ -32768, %satsw.exit15 ], [ %phitmp37, %48 ]
  %51 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %.0.i, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %51, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %.0.i29, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %51, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %.0.i26, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %51, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %.0.i23, i16* %r.sroa.3.6..cast, align 2
  %r.sroa.4.8..idx = getelementptr inbounds i8* %51, i64 8
  %r.sroa.4.8..cast = bitcast i8* %r.sroa.4.8..idx to i16*
  store i16 %.0.i20, i16* %r.sroa.4.8..cast, align 8
  %r.sroa.5.10..idx = getelementptr inbounds i8* %51, i64 10
  %r.sroa.5.10..cast = bitcast i8* %r.sroa.5.10..idx to i16*
  store i16 %.0.i17, i16* %r.sroa.5.10..cast, align 2
  %r.sroa.6.12..idx = getelementptr inbounds i8* %51, i64 12
  %r.sroa.6.12..cast = bitcast i8* %r.sroa.6.12..idx to i16*
  store i16 %.0.i14, i16* %r.sroa.6.12..cast, align 4
  %r.sroa.7.14..idx = getelementptr inbounds i8* %51, i64 14
  %r.sroa.7.14..cast = bitcast i8* %r.sroa.7.14..idx to i16*
  store i16 %.0.i11, i16* %r.sroa.7.14..cast, align 2
  ret void
}

define void @helper_punpcklbw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [16 x i8]*
  %3 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 0
  %4 = load i8* %3, align 1
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 2
  %13 = load i8* %12, align 1
  %14 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %15 = load i8* %14, align 1
  %16 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 3
  %17 = load i8* %16, align 1
  %18 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 4
  %21 = load i8* %20, align 1
  %22 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %23 = load i8* %22, align 1
  %24 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 5
  %25 = load i8* %24, align 1
  %26 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %27 = load i8* %26, align 1
  %28 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 6
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %31 = load i8* %30, align 1
  %32 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 7
  %33 = load i8* %32, align 1
  %34 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %35 = load i8* %34, align 1
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %4, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %7, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %9, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %11, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %13, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %15, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %17, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %19, i8* %r.sroa.7.7..raw_idx, align 1
  %r.sroa.8.8..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %r.sroa.8.8..cast = bitcast i64* %r.sroa.8.8..idx to i8*
  store i8 %21, i8* %r.sroa.8.8..cast, align 8
  %r.sroa.9.9..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 9
  store i8 %23, i8* %r.sroa.9.9..raw_idx, align 1
  %r.sroa.10.10..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 10
  store i8 %25, i8* %r.sroa.10.10..raw_idx, align 2
  %r.sroa.11.11..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 11
  store i8 %27, i8* %r.sroa.11.11..raw_idx, align 1
  %r.sroa.12.12..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 12
  store i8 %29, i8* %r.sroa.12.12..raw_idx, align 4
  %r.sroa.13.13..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 13
  store i8 %31, i8* %r.sroa.13.13..raw_idx, align 1
  %r.sroa.14.14..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 14
  store i8 %33, i8* %r.sroa.14.14..raw_idx, align 2
  %r.sroa.15.15..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 15
  store i8 %35, i8* %r.sroa.15.15..raw_idx, align 1
  ret void
}

define void @helper_punpcklwd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %12 = load i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %16 = load i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %18 = load i16* %17, align 2
  %19 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %3, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %19, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %6, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %19, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %8, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %19, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %10, i16* %r.sroa.3.6..cast, align 2
  %r.sroa.4.8..idx = getelementptr inbounds i8* %19, i64 8
  %r.sroa.4.8..cast = bitcast i8* %r.sroa.4.8..idx to i16*
  store i16 %12, i16* %r.sroa.4.8..cast, align 8
  %r.sroa.5.10..idx = getelementptr inbounds i8* %19, i64 10
  %r.sroa.5.10..cast = bitcast i8* %r.sroa.5.10..idx to i16*
  store i16 %14, i16* %r.sroa.5.10..cast, align 2
  %r.sroa.6.12..idx = getelementptr inbounds i8* %19, i64 12
  %r.sroa.6.12..cast = bitcast i8* %r.sroa.6.12..idx to i16*
  store i16 %16, i16* %r.sroa.6.12..cast, align 4
  %r.sroa.7.14..idx = getelementptr inbounds i8* %19, i64 14
  %r.sroa.7.14..cast = bitcast i8* %r.sroa.7.14..idx to i16*
  store i16 %18, i16* %r.sroa.7.14..cast, align 2
  ret void
}

define void @helper_punpckldq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %8 = load i32* %7, align 4
  %9 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %3, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %11, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %6, i32* %r.sroa.1.4..cast, align 4
  %r.sroa.2.8..idx = getelementptr inbounds i8* %11, i64 8
  %r.sroa.2.8..cast = bitcast i8* %r.sroa.2.8..idx to i32*
  store i32 %8, i32* %r.sroa.2.8..cast, align 8
  %r.sroa.3.12..idx = getelementptr inbounds i8* %11, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i32*
  store i32 %10, i32* %r.sroa.3.12..cast, align 4
  ret void
}

define void @helper_punpcklqdq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  store i64 %4, i64* %3, align 8
  %r.sroa.1.8..idx1 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %6, i64* %r.sroa.1.8..idx1, align 8
  ret void
}

define void @helper_punpckhbw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [16 x i8]*
  %3 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 8
  %4 = load i8* %3, align 1
  %5 = inttoptr i64 %su to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %7 = load i8* %6, align 1
  %8 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 9
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %11 = load i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 10
  %13 = load i8* %12, align 1
  %14 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %15 = load i8* %14, align 1
  %16 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 11
  %17 = load i8* %16, align 1
  %18 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 12
  %21 = load i8* %20, align 1
  %22 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %23 = load i8* %22, align 1
  %24 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 13
  %25 = load i8* %24, align 1
  %26 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %27 = load i8* %26, align 1
  %28 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 14
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %31 = load i8* %30, align 1
  %32 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 15
  %33 = load i8* %32, align 1
  %34 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %35 = load i8* %34, align 1
  %r.sroa.0.0..cast = inttoptr i64 %du to i8*
  store i8 %4, i8* %r.sroa.0.0..cast, align 8
  %r.sroa.1.1..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 1
  store i8 %7, i8* %r.sroa.1.1..raw_idx, align 1
  %r.sroa.2.2..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 2
  store i8 %9, i8* %r.sroa.2.2..raw_idx, align 2
  %r.sroa.3.3..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 3
  store i8 %11, i8* %r.sroa.3.3..raw_idx, align 1
  %r.sroa.4.4..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 4
  store i8 %13, i8* %r.sroa.4.4..raw_idx, align 4
  %r.sroa.5.5..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 5
  store i8 %15, i8* %r.sroa.5.5..raw_idx, align 1
  %r.sroa.6.6..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 6
  store i8 %17, i8* %r.sroa.6.6..raw_idx, align 2
  %r.sroa.7.7..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 7
  store i8 %19, i8* %r.sroa.7.7..raw_idx, align 1
  %r.sroa.8.8..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %r.sroa.8.8..cast = bitcast i64* %r.sroa.8.8..idx to i8*
  store i8 %21, i8* %r.sroa.8.8..cast, align 8
  %r.sroa.9.9..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 9
  store i8 %23, i8* %r.sroa.9.9..raw_idx, align 1
  %r.sroa.10.10..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 10
  store i8 %25, i8* %r.sroa.10.10..raw_idx, align 2
  %r.sroa.11.11..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 11
  store i8 %27, i8* %r.sroa.11.11..raw_idx, align 1
  %r.sroa.12.12..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 12
  store i8 %29, i8* %r.sroa.12.12..raw_idx, align 4
  %r.sroa.13.13..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 13
  store i8 %31, i8* %r.sroa.13.13..raw_idx, align 1
  %r.sroa.14.14..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 14
  store i8 %33, i8* %r.sroa.14.14..raw_idx, align 2
  %r.sroa.15.15..raw_idx = getelementptr inbounds i8* %r.sroa.0.0..cast, i64 15
  store i8 %35, i8* %r.sroa.15.15..raw_idx, align 1
  ret void
}

define void @helper_punpckhwd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %6 = load i16* %5, align 2
  %7 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %10 = load i16* %9, align 2
  %11 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %12 = load i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %16 = load i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %18 = load i16* %17, align 2
  %19 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i16*
  store i16 %3, i16* %r.sroa.0.0..cast, align 8
  %r.sroa.1.2..idx = getelementptr inbounds i8* %19, i64 2
  %r.sroa.1.2..cast = bitcast i8* %r.sroa.1.2..idx to i16*
  store i16 %6, i16* %r.sroa.1.2..cast, align 2
  %r.sroa.2.4..idx = getelementptr inbounds i8* %19, i64 4
  %r.sroa.2.4..cast = bitcast i8* %r.sroa.2.4..idx to i16*
  store i16 %8, i16* %r.sroa.2.4..cast, align 4
  %r.sroa.3.6..idx = getelementptr inbounds i8* %19, i64 6
  %r.sroa.3.6..cast = bitcast i8* %r.sroa.3.6..idx to i16*
  store i16 %10, i16* %r.sroa.3.6..cast, align 2
  %r.sroa.4.8..idx = getelementptr inbounds i8* %19, i64 8
  %r.sroa.4.8..cast = bitcast i8* %r.sroa.4.8..idx to i16*
  store i16 %12, i16* %r.sroa.4.8..cast, align 8
  %r.sroa.5.10..idx = getelementptr inbounds i8* %19, i64 10
  %r.sroa.5.10..cast = bitcast i8* %r.sroa.5.10..idx to i16*
  store i16 %14, i16* %r.sroa.5.10..cast, align 2
  %r.sroa.6.12..idx = getelementptr inbounds i8* %19, i64 12
  %r.sroa.6.12..cast = bitcast i8* %r.sroa.6.12..idx to i16*
  store i16 %16, i16* %r.sroa.6.12..cast, align 4
  %r.sroa.7.14..idx = getelementptr inbounds i8* %19, i64 14
  %r.sroa.7.14..cast = bitcast i8* %r.sroa.7.14..idx to i16*
  store i16 %18, i16* %r.sroa.7.14..cast, align 2
  ret void
}

define void @helper_punpckhdq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %6 = load i32* %5, align 4
  %7 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %8 = load i32* %7, align 4
  %9 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %10 = load i32* %9, align 4
  %11 = inttoptr i64 %du to i8*
  %r.sroa.0.0..cast = inttoptr i64 %du to i32*
  store i32 %3, i32* %r.sroa.0.0..cast, align 8
  %r.sroa.1.4..idx = getelementptr inbounds i8* %11, i64 4
  %r.sroa.1.4..cast = bitcast i8* %r.sroa.1.4..idx to i32*
  store i32 %6, i32* %r.sroa.1.4..cast, align 4
  %r.sroa.2.8..idx = getelementptr inbounds i8* %11, i64 8
  %r.sroa.2.8..cast = bitcast i8* %r.sroa.2.8..idx to i32*
  store i32 %8, i32* %r.sroa.2.8..cast, align 8
  %r.sroa.3.12..idx = getelementptr inbounds i8* %11, i64 12
  %r.sroa.3.12..cast = bitcast i8* %r.sroa.3.12..idx to i32*
  store i32 %10, i32* %r.sroa.3.12..cast, align 4
  ret void
}

define void @helper_punpckhqdq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %6 = load i64* %5, align 8
  %r.sroa.0.0..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %4, i64* %r.sroa.0.0..idx, align 8
  store i64 %6, i64* %3, align 8
  ret void
}

define void @helper_pshufb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %r = alloca %union.XMMReg, align 8
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = inttoptr i64 %du to [16 x i8]*
  %3 = bitcast %union.XMMReg* %r to [16 x i8]*
  br label %4

; <label>:4                                       ; preds = %15, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %15 ]
  %5 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 %indvars.iv
  %6 = load i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, 128
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %15

; <label>:10                                      ; preds = %4
  %11 = and i32 %7, 15
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 %12
  %14 = load i8* %13, align 1
  br label %15

; <label>:15                                      ; preds = %10, %4
  %16 = phi i8 [ %14, %10 ], [ 0, %4 ]
  %17 = getelementptr inbounds [16 x i8]* %3, i64 0, i64 %indvars.iv
  store i8 %16, i8* %17, align 1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 16
  br i1 %exitcond, label %18, label %4

; <label>:18                                      ; preds = %15
  %19 = inttoptr i64 %du to i8*
  %20 = bitcast %union.XMMReg* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  ret void
}

define void @helper_phaddw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %5 = load i16* %4, align 2
  %6 = add i16 %5, %3
  store i16 %6, i16* %2, align 2
  %7 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %10 = load i16* %9, align 2
  %11 = add i16 %10, %8
  store i16 %11, i16* %4, align 2
  %12 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %13 = load i16* %12, align 2
  %14 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %15 = load i16* %14, align 2
  %16 = add i16 %15, %13
  store i16 %16, i16* %7, align 2
  %17 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %18 = load i16* %17, align 2
  %19 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %20 = load i16* %19, align 2
  %21 = add i16 %20, %18
  store i16 %21, i16* %9, align 2
  %22 = inttoptr i64 %su to [8 x i16]*
  %23 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 0
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 1
  %26 = load i16* %25, align 2
  %27 = add i16 %26, %24
  store i16 %27, i16* %12, align 2
  %28 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = add i16 %31, %29
  store i16 %32, i16* %14, align 2
  %33 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 4
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 5
  %36 = load i16* %35, align 2
  %37 = add i16 %36, %34
  store i16 %37, i16* %17, align 2
  %38 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 6
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = add i16 %41, %39
  store i16 %42, i16* %19, align 2
  ret void
}

define void @helper_phaddd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = add nsw i32 %5, %3
  store i32 %6, i32* %2, align 4
  %7 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %8 = load i32* %7, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %10 = load i32* %9, align 4
  %11 = add nsw i32 %10, %8
  store i32 %11, i32* %4, align 4
  %12 = inttoptr i64 %su to [4 x i32]*
  %13 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 0
  %14 = load i32* %13, align 4
  %15 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 1
  %16 = load i32* %15, align 4
  %17 = add nsw i32 %16, %14
  store i32 %17, i32* %7, align 4
  %18 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 2
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 3
  %21 = load i32* %20, align 4
  %22 = add nsw i32 %21, %19
  store i32 %22, i32* %9, align 4
  ret void
}

define void @helper_phaddsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %6 = load i16* %5, align 2
  %7 = sext i16 %6 to i32
  %8 = add nsw i32 %7, %4
  %9 = icmp slt i32 %8, -32768
  br i1 %9, label %satsw.exit, label %10

; <label>:10                                      ; preds = %0
  %11 = icmp sgt i32 %8, 32767
  %12 = trunc i32 %8 to i16
  %phitmp = select i1 %11, i16 32767, i16 %12
  br label %satsw.exit

satsw.exit:                                       ; preds = %10, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %10 ]
  store i16 %.0.i, i16* %2, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = icmp slt i32 %19, -32768
  br i1 %20, label %satsw.exit44, label %21

; <label>:21                                      ; preds = %satsw.exit
  %22 = icmp sgt i32 %19, 32767
  %23 = trunc i32 %19 to i16
  %phitmp45 = select i1 %22, i16 32767, i16 %23
  br label %satsw.exit44

satsw.exit44:                                     ; preds = %21, %satsw.exit
  %.0.i43 = phi i16 [ -32768, %satsw.exit ], [ %phitmp45, %21 ]
  store i16 %.0.i43, i16* %5, align 2
  %24 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %25 = load i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = add nsw i32 %29, %26
  %31 = icmp slt i32 %30, -32768
  br i1 %31, label %satsw.exit41, label %32

; <label>:32                                      ; preds = %satsw.exit44
  %33 = icmp sgt i32 %30, 32767
  %34 = trunc i32 %30 to i16
  %phitmp46 = select i1 %33, i16 32767, i16 %34
  br label %satsw.exit41

satsw.exit41:                                     ; preds = %32, %satsw.exit44
  %.0.i40 = phi i16 [ -32768, %satsw.exit44 ], [ %phitmp46, %32 ]
  store i16 %.0.i40, i16* %13, align 2
  %35 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = add nsw i32 %40, %37
  %42 = icmp slt i32 %41, -32768
  br i1 %42, label %satsw.exit38, label %43

; <label>:43                                      ; preds = %satsw.exit41
  %44 = icmp sgt i32 %41, 32767
  %45 = trunc i32 %41 to i16
  %phitmp47 = select i1 %44, i16 32767, i16 %45
  br label %satsw.exit38

satsw.exit38:                                     ; preds = %43, %satsw.exit41
  %.0.i37 = phi i16 [ -32768, %satsw.exit41 ], [ %phitmp47, %43 ]
  store i16 %.0.i37, i16* %16, align 2
  %46 = inttoptr i64 %su to [8 x i16]*
  %47 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 0
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 1
  %51 = load i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = add nsw i32 %52, %49
  %54 = icmp slt i32 %53, -32768
  br i1 %54, label %satsw.exit35, label %55

; <label>:55                                      ; preds = %satsw.exit38
  %56 = icmp sgt i32 %53, 32767
  %57 = trunc i32 %53 to i16
  %phitmp48 = select i1 %56, i16 32767, i16 %57
  br label %satsw.exit35

satsw.exit35:                                     ; preds = %55, %satsw.exit38
  %.0.i34 = phi i16 [ -32768, %satsw.exit38 ], [ %phitmp48, %55 ]
  store i16 %.0.i34, i16* %24, align 2
  %58 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 2
  %59 = load i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 3
  %62 = load i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = add nsw i32 %63, %60
  %65 = icmp slt i32 %64, -32768
  br i1 %65, label %satsw.exit32, label %66

; <label>:66                                      ; preds = %satsw.exit35
  %67 = icmp sgt i32 %64, 32767
  %68 = trunc i32 %64 to i16
  %phitmp49 = select i1 %67, i16 32767, i16 %68
  br label %satsw.exit32

satsw.exit32:                                     ; preds = %66, %satsw.exit35
  %.0.i31 = phi i16 [ -32768, %satsw.exit35 ], [ %phitmp49, %66 ]
  store i16 %.0.i31, i16* %27, align 2
  %69 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 4
  %70 = load i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 5
  %73 = load i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = add nsw i32 %74, %71
  %76 = icmp slt i32 %75, -32768
  br i1 %76, label %satsw.exit29, label %77

; <label>:77                                      ; preds = %satsw.exit32
  %78 = icmp sgt i32 %75, 32767
  %79 = trunc i32 %75 to i16
  %phitmp50 = select i1 %78, i16 32767, i16 %79
  br label %satsw.exit29

satsw.exit29:                                     ; preds = %77, %satsw.exit32
  %.0.i28 = phi i16 [ -32768, %satsw.exit32 ], [ %phitmp50, %77 ]
  store i16 %.0.i28, i16* %35, align 2
  %80 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 6
  %81 = load i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 7
  %84 = load i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = add nsw i32 %85, %82
  %87 = icmp slt i32 %86, -32768
  br i1 %87, label %satsw.exit26, label %88

; <label>:88                                      ; preds = %satsw.exit29
  %89 = icmp sgt i32 %86, 32767
  %90 = trunc i32 %86 to i16
  %phitmp51 = select i1 %89, i16 32767, i16 %90
  br label %satsw.exit26

satsw.exit26:                                     ; preds = %88, %satsw.exit29
  %.0.i25 = phi i16 [ -32768, %satsw.exit29 ], [ %phitmp51, %88 ]
  store i16 %.0.i25, i16* %38, align 2
  ret void
}

define void @helper_pmaddubsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %du to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 0
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 1
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = mul nsw i32 %15, %12
  %17 = add nsw i32 %16, %9
  %18 = icmp slt i32 %17, -32768
  br i1 %18, label %satsw.exit, label %19

; <label>:19                                      ; preds = %0
  %20 = icmp sgt i32 %17, 32767
  %21 = trunc i32 %17 to i16
  %phitmp = select i1 %20, i16 32767, i16 %21
  br label %satsw.exit

satsw.exit:                                       ; preds = %19, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %19 ]
  %22 = inttoptr i64 %du to [8 x i16]*
  %23 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 0
  store i16 %.0.i, i16* %23, align 2
  %24 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %25 = load i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 2
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = mul nsw i32 %29, %26
  %31 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 3
  %35 = load i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nsw i32 %36, %33
  %38 = add nsw i32 %37, %30
  %39 = icmp slt i32 %38, -32768
  br i1 %39, label %satsw.exit60, label %40

; <label>:40                                      ; preds = %satsw.exit
  %41 = icmp sgt i32 %38, 32767
  %42 = trunc i32 %38 to i16
  %phitmp61 = select i1 %41, i16 32767, i16 %42
  br label %satsw.exit60

satsw.exit60:                                     ; preds = %40, %satsw.exit
  %.0.i59 = phi i16 [ -32768, %satsw.exit ], [ %phitmp61, %40 ]
  %43 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 1
  store i16 %.0.i59, i16* %43, align 2
  %44 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %45 = load i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 4
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = mul nsw i32 %49, %46
  %51 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %52 = load i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 5
  %55 = load i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nsw i32 %56, %53
  %58 = add nsw i32 %57, %50
  %59 = icmp slt i32 %58, -32768
  br i1 %59, label %satsw.exit57, label %60

; <label>:60                                      ; preds = %satsw.exit60
  %61 = icmp sgt i32 %58, 32767
  %62 = trunc i32 %58 to i16
  %phitmp62 = select i1 %61, i16 32767, i16 %62
  br label %satsw.exit57

satsw.exit57:                                     ; preds = %60, %satsw.exit60
  %.0.i56 = phi i16 [ -32768, %satsw.exit60 ], [ %phitmp62, %60 ]
  %63 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 2
  store i16 %.0.i56, i16* %63, align 2
  %64 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %65 = load i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 6
  %68 = load i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nsw i32 %69, %66
  %71 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %72 = load i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 7
  %75 = load i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = mul nsw i32 %76, %73
  %78 = add nsw i32 %77, %70
  %79 = icmp slt i32 %78, -32768
  br i1 %79, label %satsw.exit54, label %80

; <label>:80                                      ; preds = %satsw.exit57
  %81 = icmp sgt i32 %78, 32767
  %82 = trunc i32 %78 to i16
  %phitmp63 = select i1 %81, i16 32767, i16 %82
  br label %satsw.exit54

satsw.exit54:                                     ; preds = %80, %satsw.exit57
  %.0.i53 = phi i16 [ -32768, %satsw.exit57 ], [ %phitmp63, %80 ]
  %83 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 3
  store i16 %.0.i53, i16* %83, align 2
  %84 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %85 = load i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 8
  %88 = load i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nsw i32 %89, %86
  %91 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %92 = load i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 9
  %95 = load i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = mul nsw i32 %96, %93
  %98 = add nsw i32 %97, %90
  %99 = icmp slt i32 %98, -32768
  br i1 %99, label %satsw.exit51, label %100

; <label>:100                                     ; preds = %satsw.exit54
  %101 = icmp sgt i32 %98, 32767
  %102 = trunc i32 %98 to i16
  %phitmp64 = select i1 %101, i16 32767, i16 %102
  br label %satsw.exit51

satsw.exit51:                                     ; preds = %100, %satsw.exit54
  %.0.i50 = phi i16 [ -32768, %satsw.exit54 ], [ %phitmp64, %100 ]
  %103 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 4
  store i16 %.0.i50, i16* %103, align 2
  %104 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %105 = load i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 10
  %108 = load i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nsw i32 %109, %106
  %111 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %112 = load i8* %111, align 1
  %113 = sext i8 %112 to i32
  %114 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 11
  %115 = load i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nsw i32 %116, %113
  %118 = add nsw i32 %117, %110
  %119 = icmp slt i32 %118, -32768
  br i1 %119, label %satsw.exit48, label %120

; <label>:120                                     ; preds = %satsw.exit51
  %121 = icmp sgt i32 %118, 32767
  %122 = trunc i32 %118 to i16
  %phitmp65 = select i1 %121, i16 32767, i16 %122
  br label %satsw.exit48

satsw.exit48:                                     ; preds = %120, %satsw.exit51
  %.0.i47 = phi i16 [ -32768, %satsw.exit51 ], [ %phitmp65, %120 ]
  %123 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 5
  store i16 %.0.i47, i16* %123, align 2
  %124 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %125 = load i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 12
  %128 = load i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = mul nsw i32 %129, %126
  %131 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %132 = load i8* %131, align 1
  %133 = sext i8 %132 to i32
  %134 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 13
  %135 = load i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = mul nsw i32 %136, %133
  %138 = add nsw i32 %137, %130
  %139 = icmp slt i32 %138, -32768
  br i1 %139, label %satsw.exit45, label %140

; <label>:140                                     ; preds = %satsw.exit48
  %141 = icmp sgt i32 %138, 32767
  %142 = trunc i32 %138 to i16
  %phitmp66 = select i1 %141, i16 32767, i16 %142
  br label %satsw.exit45

satsw.exit45:                                     ; preds = %140, %satsw.exit48
  %.0.i44 = phi i16 [ -32768, %satsw.exit48 ], [ %phitmp66, %140 ]
  %143 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 6
  store i16 %.0.i44, i16* %143, align 2
  %144 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %145 = load i8* %144, align 1
  %146 = sext i8 %145 to i32
  %147 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 14
  %148 = load i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = mul nsw i32 %149, %146
  %151 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %152 = load i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 15
  %155 = load i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = mul nsw i32 %156, %153
  %158 = add nsw i32 %157, %150
  %159 = icmp slt i32 %158, -32768
  br i1 %159, label %satsw.exit42, label %160

; <label>:160                                     ; preds = %satsw.exit45
  %161 = icmp sgt i32 %158, 32767
  %162 = trunc i32 %158 to i16
  %phitmp67 = select i1 %161, i16 32767, i16 %162
  br label %satsw.exit42

satsw.exit42:                                     ; preds = %160, %satsw.exit45
  %.0.i41 = phi i16 [ -32768, %satsw.exit45 ], [ %phitmp67, %160 ]
  %163 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 7
  store i16 %.0.i41, i16* %163, align 2
  ret void
}

define void @helper_phsubw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %5 = load i16* %4, align 2
  %6 = sub i16 %3, %5
  store i16 %6, i16* %2, align 2
  %7 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %8 = load i16* %7, align 2
  %9 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %10 = load i16* %9, align 2
  %11 = sub i16 %8, %10
  store i16 %11, i16* %4, align 2
  %12 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %13 = load i16* %12, align 2
  %14 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %15 = load i16* %14, align 2
  %16 = sub i16 %13, %15
  store i16 %16, i16* %7, align 2
  %17 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %18 = load i16* %17, align 2
  %19 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %20 = load i16* %19, align 2
  %21 = sub i16 %18, %20
  store i16 %21, i16* %9, align 2
  %22 = inttoptr i64 %su to [8 x i16]*
  %23 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 0
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 1
  %26 = load i16* %25, align 2
  %27 = sub i16 %24, %26
  store i16 %27, i16* %12, align 2
  %28 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 2
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 3
  %31 = load i16* %30, align 2
  %32 = sub i16 %29, %31
  store i16 %32, i16* %14, align 2
  %33 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 4
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 5
  %36 = load i16* %35, align 2
  %37 = sub i16 %34, %36
  store i16 %37, i16* %17, align 2
  %38 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 6
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = sub i16 %39, %41
  store i16 %42, i16* %19, align 2
  ret void
}

define void @helper_phsubd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %5 = load i32* %4, align 4
  %6 = sub nsw i32 %3, %5
  store i32 %6, i32* %2, align 4
  %7 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %8 = load i32* %7, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %10 = load i32* %9, align 4
  %11 = sub nsw i32 %8, %10
  store i32 %11, i32* %4, align 4
  %12 = inttoptr i64 %su to [4 x i32]*
  %13 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 0
  %14 = load i32* %13, align 4
  %15 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 1
  %16 = load i32* %15, align 4
  %17 = sub nsw i32 %14, %16
  store i32 %17, i32* %7, align 4
  %18 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 2
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds [4 x i32]* %12, i64 0, i64 3
  %21 = load i32* %20, align 4
  %22 = sub nsw i32 %19, %21
  store i32 %22, i32* %9, align 4
  ret void
}

define void @helper_phsubsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %6 = load i16* %5, align 2
  %7 = sext i16 %6 to i32
  %8 = sub nsw i32 %4, %7
  %9 = icmp slt i32 %8, -32768
  br i1 %9, label %satsw.exit, label %10

; <label>:10                                      ; preds = %0
  %11 = icmp sgt i32 %8, 32767
  %12 = trunc i32 %8 to i16
  %phitmp = select i1 %11, i16 32767, i16 %12
  br label %satsw.exit

satsw.exit:                                       ; preds = %10, %0
  %.0.i = phi i16 [ -32768, %0 ], [ %phitmp, %10 ]
  store i16 %.0.i, i16* %2, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = icmp slt i32 %19, -32768
  br i1 %20, label %satsw.exit44, label %21

; <label>:21                                      ; preds = %satsw.exit
  %22 = icmp sgt i32 %19, 32767
  %23 = trunc i32 %19 to i16
  %phitmp45 = select i1 %22, i16 32767, i16 %23
  br label %satsw.exit44

satsw.exit44:                                     ; preds = %21, %satsw.exit
  %.0.i43 = phi i16 [ -32768, %satsw.exit ], [ %phitmp45, %21 ]
  store i16 %.0.i43, i16* %5, align 2
  %24 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %25 = load i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = icmp slt i32 %30, -32768
  br i1 %31, label %satsw.exit41, label %32

; <label>:32                                      ; preds = %satsw.exit44
  %33 = icmp sgt i32 %30, 32767
  %34 = trunc i32 %30 to i16
  %phitmp46 = select i1 %33, i16 32767, i16 %34
  br label %satsw.exit41

satsw.exit41:                                     ; preds = %32, %satsw.exit44
  %.0.i40 = phi i16 [ -32768, %satsw.exit44 ], [ %phitmp46, %32 ]
  store i16 %.0.i40, i16* %13, align 2
  %35 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = sub nsw i32 %37, %40
  %42 = icmp slt i32 %41, -32768
  br i1 %42, label %satsw.exit38, label %43

; <label>:43                                      ; preds = %satsw.exit41
  %44 = icmp sgt i32 %41, 32767
  %45 = trunc i32 %41 to i16
  %phitmp47 = select i1 %44, i16 32767, i16 %45
  br label %satsw.exit38

satsw.exit38:                                     ; preds = %43, %satsw.exit41
  %.0.i37 = phi i16 [ -32768, %satsw.exit41 ], [ %phitmp47, %43 ]
  store i16 %.0.i37, i16* %16, align 2
  %46 = inttoptr i64 %su to [8 x i16]*
  %47 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 0
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 1
  %51 = load i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %53, -32768
  br i1 %54, label %satsw.exit35, label %55

; <label>:55                                      ; preds = %satsw.exit38
  %56 = icmp sgt i32 %53, 32767
  %57 = trunc i32 %53 to i16
  %phitmp48 = select i1 %56, i16 32767, i16 %57
  br label %satsw.exit35

satsw.exit35:                                     ; preds = %55, %satsw.exit38
  %.0.i34 = phi i16 [ -32768, %satsw.exit38 ], [ %phitmp48, %55 ]
  store i16 %.0.i34, i16* %24, align 2
  %58 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 2
  %59 = load i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 3
  %62 = load i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = icmp slt i32 %64, -32768
  br i1 %65, label %satsw.exit32, label %66

; <label>:66                                      ; preds = %satsw.exit35
  %67 = icmp sgt i32 %64, 32767
  %68 = trunc i32 %64 to i16
  %phitmp49 = select i1 %67, i16 32767, i16 %68
  br label %satsw.exit32

satsw.exit32:                                     ; preds = %66, %satsw.exit35
  %.0.i31 = phi i16 [ -32768, %satsw.exit35 ], [ %phitmp49, %66 ]
  store i16 %.0.i31, i16* %27, align 2
  %69 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 4
  %70 = load i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 5
  %73 = load i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = sub nsw i32 %71, %74
  %76 = icmp slt i32 %75, -32768
  br i1 %76, label %satsw.exit29, label %77

; <label>:77                                      ; preds = %satsw.exit32
  %78 = icmp sgt i32 %75, 32767
  %79 = trunc i32 %75 to i16
  %phitmp50 = select i1 %78, i16 32767, i16 %79
  br label %satsw.exit29

satsw.exit29:                                     ; preds = %77, %satsw.exit32
  %.0.i28 = phi i16 [ -32768, %satsw.exit32 ], [ %phitmp50, %77 ]
  store i16 %.0.i28, i16* %35, align 2
  %80 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 6
  %81 = load i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = getelementptr inbounds [8 x i16]* %46, i64 0, i64 7
  %84 = load i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = sub nsw i32 %82, %85
  %87 = icmp slt i32 %86, -32768
  br i1 %87, label %satsw.exit26, label %88

; <label>:88                                      ; preds = %satsw.exit29
  %89 = icmp sgt i32 %86, 32767
  %90 = trunc i32 %86 to i16
  %phitmp51 = select i1 %89, i16 32767, i16 %90
  br label %satsw.exit26

satsw.exit26:                                     ; preds = %88, %satsw.exit29
  %.0.i25 = phi i16 [ -32768, %satsw.exit29 ], [ %phitmp51, %88 ]
  store i16 %.0.i25, i16* %38, align 2
  ret void
}

define void @helper_pabsb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = icmp slt i8 %3, 0
  %5 = sub i8 0, %3
  %6 = select i1 %4, i8 %5, i8 %3
  %7 = inttoptr i64 %du to [16 x i8]*
  %8 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 0
  store i8 %6, i8* %8, align 1
  %9 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %10 = load i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = sub i8 0, %10
  %13 = select i1 %11, i8 %12, i8 %10
  %14 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 1
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = sub i8 0, %16
  %19 = select i1 %17, i8 %18, i8 %16
  %20 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 2
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %22 = load i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = sub i8 0, %22
  %25 = select i1 %23, i8 %24, i8 %22
  %26 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %28 = load i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = sub i8 0, %28
  %31 = select i1 %29, i8 %30, i8 %28
  %32 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 4
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %34 = load i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  %36 = sub i8 0, %34
  %37 = select i1 %35, i8 %36, i8 %34
  %38 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 5
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %40 = load i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  %42 = sub i8 0, %40
  %43 = select i1 %41, i8 %42, i8 %40
  %44 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 6
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %46 = load i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  %48 = sub i8 0, %46
  %49 = select i1 %47, i8 %48, i8 %46
  %50 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 7
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %52 = load i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = sub i8 0, %52
  %55 = select i1 %53, i8 %54, i8 %52
  %56 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 8
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %58 = load i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  %60 = sub i8 0, %58
  %61 = select i1 %59, i8 %60, i8 %58
  %62 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 9
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %64 = load i8* %63, align 1
  %65 = icmp slt i8 %64, 0
  %66 = sub i8 0, %64
  %67 = select i1 %65, i8 %66, i8 %64
  %68 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 10
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %70 = load i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  %72 = sub i8 0, %70
  %73 = select i1 %71, i8 %72, i8 %70
  %74 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 11
  store i8 %73, i8* %74, align 1
  %75 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %76 = load i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  %78 = sub i8 0, %76
  %79 = select i1 %77, i8 %78, i8 %76
  %80 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 12
  store i8 %79, i8* %80, align 1
  %81 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %82 = load i8* %81, align 1
  %83 = icmp slt i8 %82, 0
  %84 = sub i8 0, %82
  %85 = select i1 %83, i8 %84, i8 %82
  %86 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 13
  store i8 %85, i8* %86, align 1
  %87 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %88 = load i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  %90 = sub i8 0, %88
  %91 = select i1 %89, i8 %90, i8 %88
  %92 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 14
  store i8 %91, i8* %92, align 1
  %93 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %94 = load i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  %96 = sub i8 0, %94
  %97 = select i1 %95, i8 %96, i8 %94
  %98 = getelementptr inbounds [16 x i8]* %7, i64 0, i64 15
  store i8 %97, i8* %98, align 1
  ret void
}

define void @helper_pabsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = icmp slt i16 %3, 0
  %5 = sub i16 0, %3
  %6 = select i1 %4, i16 %5, i16 %3
  %7 = inttoptr i64 %du to [8 x i16]*
  %8 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 0
  store i16 %6, i16* %8, align 2
  %9 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %10 = load i16* %9, align 2
  %11 = icmp slt i16 %10, 0
  %12 = sub i16 0, %10
  %13 = select i1 %11, i16 %12, i16 %10
  %14 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 1
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp slt i16 %16, 0
  %18 = sub i16 0, %16
  %19 = select i1 %17, i16 %18, i16 %16
  %20 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 2
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %22 = load i16* %21, align 2
  %23 = icmp slt i16 %22, 0
  %24 = sub i16 0, %22
  %25 = select i1 %23, i16 %24, i16 %22
  %26 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 3
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %28 = load i16* %27, align 2
  %29 = icmp slt i16 %28, 0
  %30 = sub i16 0, %28
  %31 = select i1 %29, i16 %30, i16 %28
  %32 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 4
  store i16 %31, i16* %32, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %34 = load i16* %33, align 2
  %35 = icmp slt i16 %34, 0
  %36 = sub i16 0, %34
  %37 = select i1 %35, i16 %36, i16 %34
  %38 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 5
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %40 = load i16* %39, align 2
  %41 = icmp slt i16 %40, 0
  %42 = sub i16 0, %40
  %43 = select i1 %41, i16 %42, i16 %40
  %44 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 6
  store i16 %43, i16* %44, align 2
  %45 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %46 = load i16* %45, align 2
  %47 = icmp slt i16 %46, 0
  %48 = sub i16 0, %46
  %49 = select i1 %47, i16 %48, i16 %46
  %50 = getelementptr inbounds [8 x i16]* %7, i64 0, i64 7
  store i16 %49, i16* %50, align 2
  ret void
}

define void @helper_pabsd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  %5 = sub nsw i32 0, %3
  %6 = select i1 %4, i32 %5, i32 %3
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %10 = load i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 0, %10
  %13 = select i1 %11, i32 %12, i32 %10
  %14 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

define void @helper_pmulhrsw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %su to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  %7 = load i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = mul nsw i32 %8, %4
  %10 = add nsw i32 %9, 16384
  %11 = lshr i32 %10, 15
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %14 = load i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = mul nsw i32 %18, %15
  %20 = add nsw i32 %19, 16384
  %21 = lshr i32 %20, 15
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %13, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %24 = load i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  %27 = load i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = add nsw i32 %29, 16384
  %31 = lshr i32 %30, 15
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %23, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = mul nsw i32 %38, %35
  %40 = add nsw i32 %39, 16384
  %41 = lshr i32 %40, 15
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %33, align 2
  %43 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %44 = load i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  %47 = load i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = mul nsw i32 %48, %45
  %50 = add nsw i32 %49, 16384
  %51 = lshr i32 %50, 15
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %43, align 2
  %53 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %54 = load i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  %57 = load i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %55
  %60 = add nsw i32 %59, 16384
  %61 = lshr i32 %60, 15
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %53, align 2
  %63 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %64 = load i16* %63, align 2
  %65 = sext i16 %64 to i32
  %66 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  %67 = load i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = mul nsw i32 %68, %65
  %70 = add nsw i32 %69, 16384
  %71 = lshr i32 %70, 15
  %72 = trunc i32 %71 to i16
  store i16 %72, i16* %63, align 2
  %73 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %74 = load i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  %77 = load i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = mul nsw i32 %78, %75
  %80 = add nsw i32 %79, 16384
  %81 = lshr i32 %80, 15
  %82 = trunc i32 %81 to i16
  store i16 %82, i16* %73, align 2
  ret void
}

define void @helper_psignb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = icmp sgt i8 %3, -1
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = icmp eq i8 %3, 0
  %.pre = inttoptr i64 %du to [16 x i8]*
  %.pre95 = getelementptr inbounds [16 x i8]* %.pre, i64 0, i64 0
  br i1 %6, label %._crit_edge94, label %7

; <label>:7                                       ; preds = %5
  %8 = load i8* %.pre95, align 1
  br label %._crit_edge94

; <label>:9                                       ; preds = %0
  %10 = inttoptr i64 %du to [16 x i8]*
  %11 = getelementptr inbounds [16 x i8]* %10, i64 0, i64 0
  %12 = load i8* %11, align 1
  %13 = sub i8 0, %12
  br label %._crit_edge94

._crit_edge94:                                    ; preds = %9, %7, %5
  %.pre-phi96 = phi i8* [ %.pre95, %7 ], [ %11, %9 ], [ %.pre95, %5 ]
  %.pre-phi = phi [16 x i8]* [ %.pre, %7 ], [ %10, %9 ], [ %.pre, %5 ]
  %14 = phi i8 [ %8, %7 ], [ %13, %9 ], [ 0, %5 ]
  store i8 %14, i8* %.pre-phi96, align 1
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %16 = load i8* %15, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %._crit_edge94
  %19 = icmp eq i8 %16, 0
  %.pre97 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 1
  br i1 %19, label %._crit_edge93, label %20

; <label>:20                                      ; preds = %18
  %21 = load i8* %.pre97, align 1
  br label %._crit_edge93

; <label>:22                                      ; preds = %._crit_edge94
  %23 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 1
  %24 = load i8* %23, align 1
  %25 = sub i8 0, %24
  br label %._crit_edge93

._crit_edge93:                                    ; preds = %22, %20, %18
  %.pre-phi98 = phi i8* [ %.pre97, %20 ], [ %23, %22 ], [ %.pre97, %18 ]
  %26 = phi i8 [ %21, %20 ], [ %25, %22 ], [ 0, %18 ]
  store i8 %26, i8* %.pre-phi98, align 1
  %27 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %28 = load i8* %27, align 1
  %29 = icmp sgt i8 %28, -1
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %._crit_edge93
  %31 = icmp eq i8 %28, 0
  %.pre99 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 2
  br i1 %31, label %._crit_edge92, label %32

; <label>:32                                      ; preds = %30
  %33 = load i8* %.pre99, align 1
  br label %._crit_edge92

; <label>:34                                      ; preds = %._crit_edge93
  %35 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 2
  %36 = load i8* %35, align 1
  %37 = sub i8 0, %36
  br label %._crit_edge92

._crit_edge92:                                    ; preds = %34, %32, %30
  %.pre-phi100 = phi i8* [ %.pre99, %32 ], [ %35, %34 ], [ %.pre99, %30 ]
  %38 = phi i8 [ %33, %32 ], [ %37, %34 ], [ 0, %30 ]
  store i8 %38, i8* %.pre-phi100, align 1
  %39 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %40 = load i8* %39, align 1
  %41 = icmp sgt i8 %40, -1
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %._crit_edge92
  %43 = icmp eq i8 %40, 0
  %.pre101 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 3
  br i1 %43, label %._crit_edge91, label %44

; <label>:44                                      ; preds = %42
  %45 = load i8* %.pre101, align 1
  br label %._crit_edge91

; <label>:46                                      ; preds = %._crit_edge92
  %47 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 3
  %48 = load i8* %47, align 1
  %49 = sub i8 0, %48
  br label %._crit_edge91

._crit_edge91:                                    ; preds = %46, %44, %42
  %.pre-phi102 = phi i8* [ %.pre101, %44 ], [ %47, %46 ], [ %.pre101, %42 ]
  %50 = phi i8 [ %45, %44 ], [ %49, %46 ], [ 0, %42 ]
  store i8 %50, i8* %.pre-phi102, align 1
  %51 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %52 = load i8* %51, align 1
  %53 = icmp sgt i8 %52, -1
  br i1 %53, label %54, label %58

; <label>:54                                      ; preds = %._crit_edge91
  %55 = icmp eq i8 %52, 0
  %.pre103 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 4
  br i1 %55, label %._crit_edge90, label %56

; <label>:56                                      ; preds = %54
  %57 = load i8* %.pre103, align 1
  br label %._crit_edge90

; <label>:58                                      ; preds = %._crit_edge91
  %59 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 4
  %60 = load i8* %59, align 1
  %61 = sub i8 0, %60
  br label %._crit_edge90

._crit_edge90:                                    ; preds = %58, %56, %54
  %.pre-phi104 = phi i8* [ %.pre103, %56 ], [ %59, %58 ], [ %.pre103, %54 ]
  %62 = phi i8 [ %57, %56 ], [ %61, %58 ], [ 0, %54 ]
  store i8 %62, i8* %.pre-phi104, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %64 = load i8* %63, align 1
  %65 = icmp sgt i8 %64, -1
  br i1 %65, label %66, label %70

; <label>:66                                      ; preds = %._crit_edge90
  %67 = icmp eq i8 %64, 0
  %.pre105 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 5
  br i1 %67, label %._crit_edge89, label %68

; <label>:68                                      ; preds = %66
  %69 = load i8* %.pre105, align 1
  br label %._crit_edge89

; <label>:70                                      ; preds = %._crit_edge90
  %71 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 5
  %72 = load i8* %71, align 1
  %73 = sub i8 0, %72
  br label %._crit_edge89

._crit_edge89:                                    ; preds = %70, %68, %66
  %.pre-phi106 = phi i8* [ %.pre105, %68 ], [ %71, %70 ], [ %.pre105, %66 ]
  %74 = phi i8 [ %69, %68 ], [ %73, %70 ], [ 0, %66 ]
  store i8 %74, i8* %.pre-phi106, align 1
  %75 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %76 = load i8* %75, align 1
  %77 = icmp sgt i8 %76, -1
  br i1 %77, label %78, label %82

; <label>:78                                      ; preds = %._crit_edge89
  %79 = icmp eq i8 %76, 0
  %.pre107 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 6
  br i1 %79, label %._crit_edge88, label %80

; <label>:80                                      ; preds = %78
  %81 = load i8* %.pre107, align 1
  br label %._crit_edge88

; <label>:82                                      ; preds = %._crit_edge89
  %83 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 6
  %84 = load i8* %83, align 1
  %85 = sub i8 0, %84
  br label %._crit_edge88

._crit_edge88:                                    ; preds = %82, %80, %78
  %.pre-phi108 = phi i8* [ %.pre107, %80 ], [ %83, %82 ], [ %.pre107, %78 ]
  %86 = phi i8 [ %81, %80 ], [ %85, %82 ], [ 0, %78 ]
  store i8 %86, i8* %.pre-phi108, align 1
  %87 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %88 = load i8* %87, align 1
  %89 = icmp sgt i8 %88, -1
  br i1 %89, label %90, label %94

; <label>:90                                      ; preds = %._crit_edge88
  %91 = icmp eq i8 %88, 0
  %.pre109 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 7
  br i1 %91, label %._crit_edge87, label %92

; <label>:92                                      ; preds = %90
  %93 = load i8* %.pre109, align 1
  br label %._crit_edge87

; <label>:94                                      ; preds = %._crit_edge88
  %95 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 7
  %96 = load i8* %95, align 1
  %97 = sub i8 0, %96
  br label %._crit_edge87

._crit_edge87:                                    ; preds = %94, %92, %90
  %.pre-phi110 = phi i8* [ %.pre109, %92 ], [ %95, %94 ], [ %.pre109, %90 ]
  %98 = phi i8 [ %93, %92 ], [ %97, %94 ], [ 0, %90 ]
  store i8 %98, i8* %.pre-phi110, align 1
  %99 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %100 = load i8* %99, align 1
  %101 = icmp sgt i8 %100, -1
  br i1 %101, label %102, label %106

; <label>:102                                     ; preds = %._crit_edge87
  %103 = icmp eq i8 %100, 0
  %.pre111 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 8
  br i1 %103, label %._crit_edge86, label %104

; <label>:104                                     ; preds = %102
  %105 = load i8* %.pre111, align 1
  br label %._crit_edge86

; <label>:106                                     ; preds = %._crit_edge87
  %107 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 8
  %108 = load i8* %107, align 1
  %109 = sub i8 0, %108
  br label %._crit_edge86

._crit_edge86:                                    ; preds = %106, %104, %102
  %.pre-phi112 = phi i8* [ %.pre111, %104 ], [ %107, %106 ], [ %.pre111, %102 ]
  %110 = phi i8 [ %105, %104 ], [ %109, %106 ], [ 0, %102 ]
  store i8 %110, i8* %.pre-phi112, align 1
  %111 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %112 = load i8* %111, align 1
  %113 = icmp sgt i8 %112, -1
  br i1 %113, label %114, label %118

; <label>:114                                     ; preds = %._crit_edge86
  %115 = icmp eq i8 %112, 0
  %.pre113 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 9
  br i1 %115, label %._crit_edge85, label %116

; <label>:116                                     ; preds = %114
  %117 = load i8* %.pre113, align 1
  br label %._crit_edge85

; <label>:118                                     ; preds = %._crit_edge86
  %119 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 9
  %120 = load i8* %119, align 1
  %121 = sub i8 0, %120
  br label %._crit_edge85

._crit_edge85:                                    ; preds = %118, %116, %114
  %.pre-phi114 = phi i8* [ %.pre113, %116 ], [ %119, %118 ], [ %.pre113, %114 ]
  %122 = phi i8 [ %117, %116 ], [ %121, %118 ], [ 0, %114 ]
  store i8 %122, i8* %.pre-phi114, align 1
  %123 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %124 = load i8* %123, align 1
  %125 = icmp sgt i8 %124, -1
  br i1 %125, label %126, label %130

; <label>:126                                     ; preds = %._crit_edge85
  %127 = icmp eq i8 %124, 0
  %.pre115 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 10
  br i1 %127, label %._crit_edge84, label %128

; <label>:128                                     ; preds = %126
  %129 = load i8* %.pre115, align 1
  br label %._crit_edge84

; <label>:130                                     ; preds = %._crit_edge85
  %131 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 10
  %132 = load i8* %131, align 1
  %133 = sub i8 0, %132
  br label %._crit_edge84

._crit_edge84:                                    ; preds = %130, %128, %126
  %.pre-phi116 = phi i8* [ %.pre115, %128 ], [ %131, %130 ], [ %.pre115, %126 ]
  %134 = phi i8 [ %129, %128 ], [ %133, %130 ], [ 0, %126 ]
  store i8 %134, i8* %.pre-phi116, align 1
  %135 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %136 = load i8* %135, align 1
  %137 = icmp sgt i8 %136, -1
  br i1 %137, label %138, label %142

; <label>:138                                     ; preds = %._crit_edge84
  %139 = icmp eq i8 %136, 0
  %.pre117 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 11
  br i1 %139, label %._crit_edge83, label %140

; <label>:140                                     ; preds = %138
  %141 = load i8* %.pre117, align 1
  br label %._crit_edge83

; <label>:142                                     ; preds = %._crit_edge84
  %143 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 11
  %144 = load i8* %143, align 1
  %145 = sub i8 0, %144
  br label %._crit_edge83

._crit_edge83:                                    ; preds = %142, %140, %138
  %.pre-phi118 = phi i8* [ %.pre117, %140 ], [ %143, %142 ], [ %.pre117, %138 ]
  %146 = phi i8 [ %141, %140 ], [ %145, %142 ], [ 0, %138 ]
  store i8 %146, i8* %.pre-phi118, align 1
  %147 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %148 = load i8* %147, align 1
  %149 = icmp sgt i8 %148, -1
  br i1 %149, label %150, label %154

; <label>:150                                     ; preds = %._crit_edge83
  %151 = icmp eq i8 %148, 0
  %.pre119 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 12
  br i1 %151, label %._crit_edge82, label %152

; <label>:152                                     ; preds = %150
  %153 = load i8* %.pre119, align 1
  br label %._crit_edge82

; <label>:154                                     ; preds = %._crit_edge83
  %155 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 12
  %156 = load i8* %155, align 1
  %157 = sub i8 0, %156
  br label %._crit_edge82

._crit_edge82:                                    ; preds = %154, %152, %150
  %.pre-phi120 = phi i8* [ %.pre119, %152 ], [ %155, %154 ], [ %.pre119, %150 ]
  %158 = phi i8 [ %153, %152 ], [ %157, %154 ], [ 0, %150 ]
  store i8 %158, i8* %.pre-phi120, align 1
  %159 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %160 = load i8* %159, align 1
  %161 = icmp sgt i8 %160, -1
  br i1 %161, label %162, label %166

; <label>:162                                     ; preds = %._crit_edge82
  %163 = icmp eq i8 %160, 0
  %.pre121 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 13
  br i1 %163, label %._crit_edge81, label %164

; <label>:164                                     ; preds = %162
  %165 = load i8* %.pre121, align 1
  br label %._crit_edge81

; <label>:166                                     ; preds = %._crit_edge82
  %167 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 13
  %168 = load i8* %167, align 1
  %169 = sub i8 0, %168
  br label %._crit_edge81

._crit_edge81:                                    ; preds = %166, %164, %162
  %.pre-phi122 = phi i8* [ %.pre121, %164 ], [ %167, %166 ], [ %.pre121, %162 ]
  %170 = phi i8 [ %165, %164 ], [ %169, %166 ], [ 0, %162 ]
  store i8 %170, i8* %.pre-phi122, align 1
  %171 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %172 = load i8* %171, align 1
  %173 = icmp sgt i8 %172, -1
  br i1 %173, label %174, label %178

; <label>:174                                     ; preds = %._crit_edge81
  %175 = icmp eq i8 %172, 0
  %.pre123 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 14
  br i1 %175, label %._crit_edge80, label %176

; <label>:176                                     ; preds = %174
  %177 = load i8* %.pre123, align 1
  br label %._crit_edge80

; <label>:178                                     ; preds = %._crit_edge81
  %179 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 14
  %180 = load i8* %179, align 1
  %181 = sub i8 0, %180
  br label %._crit_edge80

._crit_edge80:                                    ; preds = %178, %176, %174
  %.pre-phi124 = phi i8* [ %.pre123, %176 ], [ %179, %178 ], [ %.pre123, %174 ]
  %182 = phi i8 [ %177, %176 ], [ %181, %178 ], [ 0, %174 ]
  store i8 %182, i8* %.pre-phi124, align 1
  %183 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %184 = load i8* %183, align 1
  %185 = icmp sgt i8 %184, -1
  br i1 %185, label %186, label %190

; <label>:186                                     ; preds = %._crit_edge80
  %187 = icmp eq i8 %184, 0
  %.pre125 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 15
  br i1 %187, label %._crit_edge, label %188

; <label>:188                                     ; preds = %186
  %189 = load i8* %.pre125, align 1
  br label %._crit_edge

; <label>:190                                     ; preds = %._crit_edge80
  %191 = getelementptr inbounds [16 x i8]* %.pre-phi, i64 0, i64 15
  %192 = load i8* %191, align 1
  %193 = sub i8 0, %192
  br label %._crit_edge

._crit_edge:                                      ; preds = %190, %188, %186
  %.pre-phi126 = phi i8* [ %.pre125, %188 ], [ %191, %190 ], [ %.pre125, %186 ]
  %194 = phi i8 [ %189, %188 ], [ %193, %190 ], [ 0, %186 ]
  store i8 %194, i8* %.pre-phi126, align 1
  ret void
}

define void @helper_psignw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = icmp sgt i16 %3, -1
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = icmp eq i16 %3, 0
  %.pre = inttoptr i64 %du to [8 x i16]*
  %.pre47 = getelementptr inbounds [8 x i16]* %.pre, i64 0, i64 0
  br i1 %6, label %._crit_edge46, label %7

; <label>:7                                       ; preds = %5
  %8 = load i16* %.pre47, align 2
  br label %._crit_edge46

; <label>:9                                       ; preds = %0
  %10 = inttoptr i64 %du to [8 x i16]*
  %11 = getelementptr inbounds [8 x i16]* %10, i64 0, i64 0
  %12 = load i16* %11, align 2
  %13 = sub i16 0, %12
  br label %._crit_edge46

._crit_edge46:                                    ; preds = %9, %7, %5
  %.pre-phi48 = phi i16* [ %.pre47, %7 ], [ %11, %9 ], [ %.pre47, %5 ]
  %.pre-phi = phi [8 x i16]* [ %.pre, %7 ], [ %10, %9 ], [ %.pre, %5 ]
  %14 = phi i16 [ %8, %7 ], [ %13, %9 ], [ 0, %5 ]
  store i16 %14, i16* %.pre-phi48, align 2
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %16 = load i16* %15, align 2
  %17 = icmp sgt i16 %16, -1
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %._crit_edge46
  %19 = icmp eq i16 %16, 0
  %.pre49 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 1
  br i1 %19, label %._crit_edge45, label %20

; <label>:20                                      ; preds = %18
  %21 = load i16* %.pre49, align 2
  br label %._crit_edge45

; <label>:22                                      ; preds = %._crit_edge46
  %23 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 1
  %24 = load i16* %23, align 2
  %25 = sub i16 0, %24
  br label %._crit_edge45

._crit_edge45:                                    ; preds = %22, %20, %18
  %.pre-phi50 = phi i16* [ %.pre49, %20 ], [ %23, %22 ], [ %.pre49, %18 ]
  %26 = phi i16 [ %21, %20 ], [ %25, %22 ], [ 0, %18 ]
  store i16 %26, i16* %.pre-phi50, align 2
  %27 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %28 = load i16* %27, align 2
  %29 = icmp sgt i16 %28, -1
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %._crit_edge45
  %31 = icmp eq i16 %28, 0
  %.pre51 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 2
  br i1 %31, label %._crit_edge44, label %32

; <label>:32                                      ; preds = %30
  %33 = load i16* %.pre51, align 2
  br label %._crit_edge44

; <label>:34                                      ; preds = %._crit_edge45
  %35 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 2
  %36 = load i16* %35, align 2
  %37 = sub i16 0, %36
  br label %._crit_edge44

._crit_edge44:                                    ; preds = %34, %32, %30
  %.pre-phi52 = phi i16* [ %.pre51, %32 ], [ %35, %34 ], [ %.pre51, %30 ]
  %38 = phi i16 [ %33, %32 ], [ %37, %34 ], [ 0, %30 ]
  store i16 %38, i16* %.pre-phi52, align 2
  %39 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %40 = load i16* %39, align 2
  %41 = icmp sgt i16 %40, -1
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %._crit_edge44
  %43 = icmp eq i16 %40, 0
  %.pre53 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 3
  br i1 %43, label %._crit_edge43, label %44

; <label>:44                                      ; preds = %42
  %45 = load i16* %.pre53, align 2
  br label %._crit_edge43

; <label>:46                                      ; preds = %._crit_edge44
  %47 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 3
  %48 = load i16* %47, align 2
  %49 = sub i16 0, %48
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %46, %44, %42
  %.pre-phi54 = phi i16* [ %.pre53, %44 ], [ %47, %46 ], [ %.pre53, %42 ]
  %50 = phi i16 [ %45, %44 ], [ %49, %46 ], [ 0, %42 ]
  store i16 %50, i16* %.pre-phi54, align 2
  %51 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %52 = load i16* %51, align 2
  %53 = icmp sgt i16 %52, -1
  br i1 %53, label %54, label %58

; <label>:54                                      ; preds = %._crit_edge43
  %55 = icmp eq i16 %52, 0
  %.pre55 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 4
  br i1 %55, label %._crit_edge42, label %56

; <label>:56                                      ; preds = %54
  %57 = load i16* %.pre55, align 2
  br label %._crit_edge42

; <label>:58                                      ; preds = %._crit_edge43
  %59 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 4
  %60 = load i16* %59, align 2
  %61 = sub i16 0, %60
  br label %._crit_edge42

._crit_edge42:                                    ; preds = %58, %56, %54
  %.pre-phi56 = phi i16* [ %.pre55, %56 ], [ %59, %58 ], [ %.pre55, %54 ]
  %62 = phi i16 [ %57, %56 ], [ %61, %58 ], [ 0, %54 ]
  store i16 %62, i16* %.pre-phi56, align 2
  %63 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %64 = load i16* %63, align 2
  %65 = icmp sgt i16 %64, -1
  br i1 %65, label %66, label %70

; <label>:66                                      ; preds = %._crit_edge42
  %67 = icmp eq i16 %64, 0
  %.pre57 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 5
  br i1 %67, label %._crit_edge41, label %68

; <label>:68                                      ; preds = %66
  %69 = load i16* %.pre57, align 2
  br label %._crit_edge41

; <label>:70                                      ; preds = %._crit_edge42
  %71 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 5
  %72 = load i16* %71, align 2
  %73 = sub i16 0, %72
  br label %._crit_edge41

._crit_edge41:                                    ; preds = %70, %68, %66
  %.pre-phi58 = phi i16* [ %.pre57, %68 ], [ %71, %70 ], [ %.pre57, %66 ]
  %74 = phi i16 [ %69, %68 ], [ %73, %70 ], [ 0, %66 ]
  store i16 %74, i16* %.pre-phi58, align 2
  %75 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %76 = load i16* %75, align 2
  %77 = icmp sgt i16 %76, -1
  br i1 %77, label %78, label %82

; <label>:78                                      ; preds = %._crit_edge41
  %79 = icmp eq i16 %76, 0
  %.pre59 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 6
  br i1 %79, label %._crit_edge40, label %80

; <label>:80                                      ; preds = %78
  %81 = load i16* %.pre59, align 2
  br label %._crit_edge40

; <label>:82                                      ; preds = %._crit_edge41
  %83 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 6
  %84 = load i16* %83, align 2
  %85 = sub i16 0, %84
  br label %._crit_edge40

._crit_edge40:                                    ; preds = %82, %80, %78
  %.pre-phi60 = phi i16* [ %.pre59, %80 ], [ %83, %82 ], [ %.pre59, %78 ]
  %86 = phi i16 [ %81, %80 ], [ %85, %82 ], [ 0, %78 ]
  store i16 %86, i16* %.pre-phi60, align 2
  %87 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %88 = load i16* %87, align 2
  %89 = icmp sgt i16 %88, -1
  br i1 %89, label %90, label %94

; <label>:90                                      ; preds = %._crit_edge40
  %91 = icmp eq i16 %88, 0
  %.pre61 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 7
  br i1 %91, label %._crit_edge, label %92

; <label>:92                                      ; preds = %90
  %93 = load i16* %.pre61, align 2
  br label %._crit_edge

; <label>:94                                      ; preds = %._crit_edge40
  %95 = getelementptr inbounds [8 x i16]* %.pre-phi, i64 0, i64 7
  %96 = load i16* %95, align 2
  %97 = sub i16 0, %96
  br label %._crit_edge

._crit_edge:                                      ; preds = %94, %92, %90
  %.pre-phi62 = phi i16* [ %.pre61, %92 ], [ %95, %94 ], [ %.pre61, %90 ]
  %98 = phi i16 [ %93, %92 ], [ %97, %94 ], [ 0, %90 ]
  store i16 %98, i16* %.pre-phi62, align 2
  ret void
}

define void @helper_psignd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %3, 0
  %.pre = inttoptr i64 %du to [4 x i32]*
  %.pre23 = getelementptr inbounds [4 x i32]* %.pre, i64 0, i64 0
  br i1 %6, label %._crit_edge22, label %7

; <label>:7                                       ; preds = %5
  %8 = load i32* %.pre23, align 4
  br label %._crit_edge22

; <label>:9                                       ; preds = %0
  %10 = inttoptr i64 %du to [4 x i32]*
  %11 = getelementptr inbounds [4 x i32]* %10, i64 0, i64 0
  %12 = load i32* %11, align 4
  %13 = sub nsw i32 0, %12
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %9, %7, %5
  %.pre-phi24 = phi i32* [ %.pre23, %7 ], [ %11, %9 ], [ %.pre23, %5 ]
  %.pre-phi = phi [4 x i32]* [ %.pre, %7 ], [ %10, %9 ], [ %.pre, %5 ]
  %14 = phi i32 [ %8, %7 ], [ %13, %9 ], [ 0, %5 ]
  store i32 %14, i32* %.pre-phi24, align 4
  %15 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %16 = load i32* %15, align 4
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %._crit_edge22
  %19 = icmp eq i32 %16, 0
  %.pre25 = getelementptr inbounds [4 x i32]* %.pre-phi, i64 0, i64 1
  br i1 %19, label %._crit_edge21, label %20

; <label>:20                                      ; preds = %18
  %21 = load i32* %.pre25, align 4
  br label %._crit_edge21

; <label>:22                                      ; preds = %._crit_edge22
  %23 = getelementptr inbounds [4 x i32]* %.pre-phi, i64 0, i64 1
  %24 = load i32* %23, align 4
  %25 = sub nsw i32 0, %24
  br label %._crit_edge21

._crit_edge21:                                    ; preds = %22, %20, %18
  %.pre-phi26 = phi i32* [ %.pre25, %20 ], [ %23, %22 ], [ %.pre25, %18 ]
  %26 = phi i32 [ %21, %20 ], [ %25, %22 ], [ 0, %18 ]
  store i32 %26, i32* %.pre-phi26, align 4
  %27 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %28 = load i32* %27, align 4
  %29 = icmp sgt i32 %28, -1
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %._crit_edge21
  %31 = icmp eq i32 %28, 0
  %.pre27 = getelementptr inbounds [4 x i32]* %.pre-phi, i64 0, i64 2
  br i1 %31, label %._crit_edge20, label %32

; <label>:32                                      ; preds = %30
  %33 = load i32* %.pre27, align 4
  br label %._crit_edge20

; <label>:34                                      ; preds = %._crit_edge21
  %35 = getelementptr inbounds [4 x i32]* %.pre-phi, i64 0, i64 2
  %36 = load i32* %35, align 4
  %37 = sub nsw i32 0, %36
  br label %._crit_edge20

._crit_edge20:                                    ; preds = %34, %32, %30
  %.pre-phi28 = phi i32* [ %.pre27, %32 ], [ %35, %34 ], [ %.pre27, %30 ]
  %38 = phi i32 [ %33, %32 ], [ %37, %34 ], [ 0, %30 ]
  store i32 %38, i32* %.pre-phi28, align 4
  %39 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %40 = load i32* %39, align 4
  %41 = icmp sgt i32 %40, -1
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %._crit_edge20
  %43 = icmp eq i32 %40, 0
  %.pre29 = getelementptr inbounds [4 x i32]* %.pre-phi, i64 0, i64 3
  br i1 %43, label %._crit_edge, label %44

; <label>:44                                      ; preds = %42
  %45 = load i32* %.pre29, align 4
  br label %._crit_edge

; <label>:46                                      ; preds = %._crit_edge20
  %47 = getelementptr inbounds [4 x i32]* %.pre-phi, i64 0, i64 3
  %48 = load i32* %47, align 4
  %49 = sub nsw i32 0, %48
  br label %._crit_edge

._crit_edge:                                      ; preds = %46, %44, %42
  %.pre-phi30 = phi i32* [ %.pre29, %44 ], [ %47, %46 ], [ %.pre29, %42 ]
  %50 = phi i32 [ %45, %44 ], [ %49, %46 ], [ 0, %42 ]
  store i32 %50, i32* %.pre-phi30, align 4
  ret void
}

define void @helper_palignr_xmm(i64 %du, i64 %su, i32 %shift) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = icmp sgt i32 %shift, 31
  br i1 %3, label %130, label %4

; <label>:4                                       ; preds = %0
  %5 = shl i32 %shift, 3
  %.off = add i32 %5, 63
  %6 = icmp ult i32 %.off, 127
  br i1 %6, label %7, label %18

; <label>:7                                       ; preds = %4
  %8 = icmp sgt i32 %5, 0
  %9 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %10 = load i64* %9, align 8
  br i1 %8, label %11, label %.thread

; <label>:11                                      ; preds = %7
  %12 = zext i32 %5 to i64
  %13 = lshr i64 %10, %12
  br label %18

.thread:                                          ; preds = %7
  %14 = sub nsw i32 0, %5
  %15 = zext i32 %14 to i64
  %16 = shl i64 %10, %15
  %17 = add nsw i32 %5, -64
  br label %34

; <label>:18                                      ; preds = %11, %4
  %19 = phi i64 [ %13, %11 ], [ 0, %4 ]
  %20 = add nsw i32 %5, -64
  %21 = icmp slt i32 %20, 64
  %22 = icmp sgt i32 %5, 0
  %or.cond44 = and i1 %21, %22
  br i1 %or.cond44, label %23, label %34

; <label>:23                                      ; preds = %18
  %24 = icmp sgt i32 %20, 0
  %25 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %26 = load i64* %25, align 8
  br i1 %24, label %27, label %30

; <label>:27                                      ; preds = %23
  %28 = zext i32 %20 to i64
  %29 = lshr i64 %26, %28
  br label %34

; <label>:30                                      ; preds = %23
  %31 = sub i32 64, %5
  %32 = zext i32 %31 to i64
  %33 = shl i64 %26, %32
  br label %34

; <label>:34                                      ; preds = %30, %27, %18, %.thread
  %or.cond4452 = phi i1 [ true, %27 ], [ true, %30 ], [ false, %18 ], [ false, %.thread ]
  %35 = phi i1 [ true, %27 ], [ true, %30 ], [ %22, %18 ], [ false, %.thread ]
  %36 = phi i32 [ %20, %27 ], [ %20, %30 ], [ %20, %18 ], [ %17, %.thread ]
  %37 = phi i64 [ %19, %27 ], [ %19, %30 ], [ %19, %18 ], [ %16, %.thread ]
  %38 = phi i64 [ %29, %27 ], [ %33, %30 ], [ 0, %18 ], [ 0, %.thread ]
  %39 = or i64 %38, %37
  %40 = add nsw i32 %5, -128
  %.off53 = add i32 %5, -65
  %41 = icmp ult i32 %.off53, 127
  br i1 %41, label %42, label %53

; <label>:42                                      ; preds = %34
  %43 = icmp sgt i32 %40, 0
  %44 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %45 = load i64* %44, align 8
  br i1 %43, label %46, label %49

; <label>:46                                      ; preds = %42
  %47 = zext i32 %40 to i64
  %48 = lshr i64 %45, %47
  br label %53

; <label>:49                                      ; preds = %42
  %50 = sub i32 128, %5
  %51 = zext i32 %50 to i64
  %52 = shl i64 %45, %51
  br label %53

; <label>:53                                      ; preds = %49, %46, %34
  %54 = phi i64 [ %48, %46 ], [ %52, %49 ], [ 0, %34 ]
  %55 = or i64 %39, %54
  %56 = add nsw i32 %5, -192
  %.off54 = add i32 %5, -129
  %57 = icmp ult i32 %.off54, 127
  br i1 %57, label %58, label %69

; <label>:58                                      ; preds = %53
  %59 = icmp sgt i32 %56, 0
  %60 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %61 = load i64* %60, align 8
  br i1 %59, label %62, label %.thread55

; <label>:62                                      ; preds = %58
  %63 = zext i32 %56 to i64
  %64 = lshr i64 %61, %63
  br label %69

.thread55:                                        ; preds = %58
  %65 = sub i32 192, %5
  %66 = zext i32 %65 to i64
  %67 = shl i64 %61, %66
  %68 = or i64 %55, %67
  br label %86

; <label>:69                                      ; preds = %62, %53
  %70 = phi i64 [ %64, %62 ], [ 0, %53 ]
  %71 = or i64 %55, %70
  %72 = add nsw i32 %5, 64
  %73 = icmp slt i32 %5, 0
  %74 = icmp sgt i32 %72, -64
  %or.cond47 = and i1 %73, %74
  br i1 %or.cond47, label %75, label %86

; <label>:75                                      ; preds = %69
  %76 = icmp sgt i32 %72, 0
  %77 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %78 = load i64* %77, align 8
  br i1 %76, label %79, label %82

; <label>:79                                      ; preds = %75
  %80 = zext i32 %72 to i64
  %81 = lshr i64 %78, %80
  br label %86

; <label>:82                                      ; preds = %75
  %83 = sub i32 -64, %5
  %84 = zext i32 %83 to i64
  %85 = shl i64 %78, %84
  br label %86

; <label>:86                                      ; preds = %82, %79, %69, %.thread55
  %87 = phi i64 [ %71, %79 ], [ %71, %82 ], [ %71, %69 ], [ %68, %.thread55 ]
  %88 = phi i64 [ %81, %79 ], [ %85, %82 ], [ 0, %69 ], [ 0, %.thread55 ]
  br i1 %6, label %89, label %99

; <label>:89                                      ; preds = %86
  %90 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %91 = load i64* %90, align 8
  br i1 %35, label %92, label %95

; <label>:92                                      ; preds = %89
  %93 = zext i32 %5 to i64
  %94 = lshr i64 %91, %93
  br label %99

; <label>:95                                      ; preds = %89
  %96 = sub nsw i32 0, %5
  %97 = zext i32 %96 to i64
  %98 = shl i64 %91, %97
  br label %99

; <label>:99                                      ; preds = %95, %92, %86
  %100 = phi i64 [ %94, %92 ], [ %98, %95 ], [ 0, %86 ]
  %101 = or i64 %100, %88
  br i1 %or.cond4452, label %102, label %113

; <label>:102                                     ; preds = %99
  %103 = icmp sgt i32 %36, 0
  %104 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %105 = load i64* %104, align 8
  br i1 %103, label %106, label %109

; <label>:106                                     ; preds = %102
  %107 = zext i32 %36 to i64
  %108 = lshr i64 %105, %107
  br label %113

; <label>:109                                     ; preds = %102
  %110 = sub i32 64, %5
  %111 = zext i32 %110 to i64
  %112 = shl i64 %105, %111
  br label %113

; <label>:113                                     ; preds = %109, %106, %99
  %114 = phi i64 [ %108, %106 ], [ %112, %109 ], [ 0, %99 ]
  %115 = or i64 %101, %114
  br i1 %41, label %116, label %127

; <label>:116                                     ; preds = %113
  %117 = icmp sgt i32 %40, 0
  %118 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %119 = load i64* %118, align 8
  br i1 %117, label %120, label %123

; <label>:120                                     ; preds = %116
  %121 = zext i32 %40 to i64
  %122 = lshr i64 %119, %121
  br label %127

; <label>:123                                     ; preds = %116
  %124 = sub i32 128, %5
  %125 = zext i32 %124 to i64
  %126 = shl i64 %119, %125
  br label %127

; <label>:127                                     ; preds = %123, %120, %113
  %128 = phi i64 [ %122, %120 ], [ %126, %123 ], [ 0, %113 ]
  %129 = or i64 %115, %128
  br label %130

; <label>:130                                     ; preds = %127, %0
  %r.sroa.1.0 = phi i64 [ %129, %127 ], [ 0, %0 ]
  %r.sroa.0.0 = phi i64 [ %87, %127 ], [ 0, %0 ]
  %r.sroa.0.0..idx = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %r.sroa.0.0, i64* %r.sroa.0.0..idx, align 8
  %r.sroa.1.8..idx1 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %r.sroa.1.0, i64* %r.sroa.1.8..idx1, align 8
  ret void
}

define void @helper_pblendvb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 30, i64 0
  %3 = bitcast %union.XMMReg* %2 to i8*
  %4 = load i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  %su.du = select i1 %5, i64 %su, i64 %du
  %.pn = inttoptr i64 %su.du to [16 x i8]*
  %.sink.in = getelementptr inbounds [16 x i8]* %.pn, i64 0, i64 0
  %.sink = load i8* %.sink.in, align 1
  %6 = inttoptr i64 %du to [16 x i8]*
  %7 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 0
  store i8 %.sink, i8* %7, align 1
  %8 = load %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State* %8, i64 0, i32 30, i64 0
  %10 = bitcast %union.XMMReg* %9 to [16 x i8]*
  %11 = getelementptr inbounds [16 x i8]* %10, i64 0, i64 1
  %12 = load i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %0
  %15 = inttoptr i64 %su to [16 x i8]*
  br label %16

; <label>:16                                      ; preds = %14, %0
  %.pn63 = phi [16 x i8]* [ %15, %14 ], [ %6, %0 ]
  %.sink1.in = getelementptr inbounds [16 x i8]* %.pn63, i64 0, i64 1
  %.sink1 = load i8* %.sink1.in, align 1
  %17 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 1
  store i8 %.sink1, i8* %17, align 1
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 30, i64 0
  %20 = bitcast %union.XMMReg* %19 to [16 x i8]*
  %21 = getelementptr inbounds [16 x i8]* %20, i64 0, i64 2
  %22 = load i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %26

; <label>:24                                      ; preds = %16
  %25 = inttoptr i64 %su to [16 x i8]*
  br label %26

; <label>:26                                      ; preds = %24, %16
  %.pn64 = phi [16 x i8]* [ %25, %24 ], [ %6, %16 ]
  %.sink2.in = getelementptr inbounds [16 x i8]* %.pn64, i64 0, i64 2
  %.sink2 = load i8* %.sink2.in, align 1
  %27 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 2
  store i8 %.sink2, i8* %27, align 1
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 30, i64 0
  %30 = bitcast %union.XMMReg* %29 to [16 x i8]*
  %31 = getelementptr inbounds [16 x i8]* %30, i64 0, i64 3
  %32 = load i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %34, label %36

; <label>:34                                      ; preds = %26
  %35 = inttoptr i64 %su to [16 x i8]*
  br label %36

; <label>:36                                      ; preds = %34, %26
  %.pn65 = phi [16 x i8]* [ %35, %34 ], [ %6, %26 ]
  %.sink3.in = getelementptr inbounds [16 x i8]* %.pn65, i64 0, i64 3
  %.sink3 = load i8* %.sink3.in, align 1
  %37 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 3
  store i8 %.sink3, i8* %37, align 1
  %38 = load %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State* %38, i64 0, i32 30, i64 0
  %40 = bitcast %union.XMMReg* %39 to [16 x i8]*
  %41 = getelementptr inbounds [16 x i8]* %40, i64 0, i64 4
  %42 = load i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %36
  %45 = inttoptr i64 %su to [16 x i8]*
  br label %46

; <label>:46                                      ; preds = %44, %36
  %.pn66 = phi [16 x i8]* [ %45, %44 ], [ %6, %36 ]
  %.sink4.in = getelementptr inbounds [16 x i8]* %.pn66, i64 0, i64 4
  %.sink4 = load i8* %.sink4.in, align 1
  %47 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 4
  store i8 %.sink4, i8* %47, align 1
  %48 = load %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State* %48, i64 0, i32 30, i64 0
  %50 = bitcast %union.XMMReg* %49 to [16 x i8]*
  %51 = getelementptr inbounds [16 x i8]* %50, i64 0, i64 5
  %52 = load i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %54, label %56

; <label>:54                                      ; preds = %46
  %55 = inttoptr i64 %su to [16 x i8]*
  br label %56

; <label>:56                                      ; preds = %54, %46
  %.pn67 = phi [16 x i8]* [ %55, %54 ], [ %6, %46 ]
  %.sink5.in = getelementptr inbounds [16 x i8]* %.pn67, i64 0, i64 5
  %.sink5 = load i8* %.sink5.in, align 1
  %57 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 5
  store i8 %.sink5, i8* %57, align 1
  %58 = load %struct.CPUX86State** @env, align 8
  %59 = getelementptr inbounds %struct.CPUX86State* %58, i64 0, i32 30, i64 0
  %60 = bitcast %union.XMMReg* %59 to [16 x i8]*
  %61 = getelementptr inbounds [16 x i8]* %60, i64 0, i64 6
  %62 = load i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %56
  %65 = inttoptr i64 %su to [16 x i8]*
  br label %66

; <label>:66                                      ; preds = %64, %56
  %.pn68 = phi [16 x i8]* [ %65, %64 ], [ %6, %56 ]
  %.sink6.in = getelementptr inbounds [16 x i8]* %.pn68, i64 0, i64 6
  %.sink6 = load i8* %.sink6.in, align 1
  %67 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 6
  store i8 %.sink6, i8* %67, align 1
  %68 = load %struct.CPUX86State** @env, align 8
  %69 = getelementptr inbounds %struct.CPUX86State* %68, i64 0, i32 30, i64 0
  %70 = bitcast %union.XMMReg* %69 to [16 x i8]*
  %71 = getelementptr inbounds [16 x i8]* %70, i64 0, i64 7
  %72 = load i8* %71, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %76

; <label>:74                                      ; preds = %66
  %75 = inttoptr i64 %su to [16 x i8]*
  br label %76

; <label>:76                                      ; preds = %74, %66
  %.pn69 = phi [16 x i8]* [ %75, %74 ], [ %6, %66 ]
  %.sink7.in = getelementptr inbounds [16 x i8]* %.pn69, i64 0, i64 7
  %.sink7 = load i8* %.sink7.in, align 1
  %77 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 7
  store i8 %.sink7, i8* %77, align 1
  %78 = load %struct.CPUX86State** @env, align 8
  %79 = getelementptr inbounds %struct.CPUX86State* %78, i64 0, i32 30, i64 0, i32 0, i64 1
  %80 = bitcast i64* %79 to i8*
  %81 = load i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %83, label %85

; <label>:83                                      ; preds = %76
  %84 = inttoptr i64 %su to [16 x i8]*
  br label %85

; <label>:85                                      ; preds = %83, %76
  %.pn70 = phi [16 x i8]* [ %84, %83 ], [ %6, %76 ]
  %.sink8.in = getelementptr inbounds [16 x i8]* %.pn70, i64 0, i64 8
  %.sink8 = load i8* %.sink8.in, align 1
  %86 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 8
  store i8 %.sink8, i8* %86, align 1
  %87 = load %struct.CPUX86State** @env, align 8
  %88 = getelementptr inbounds %struct.CPUX86State* %87, i64 0, i32 30, i64 0
  %89 = bitcast %union.XMMReg* %88 to [16 x i8]*
  %90 = getelementptr inbounds [16 x i8]* %89, i64 0, i64 9
  %91 = load i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %95

; <label>:93                                      ; preds = %85
  %94 = inttoptr i64 %su to [16 x i8]*
  br label %95

; <label>:95                                      ; preds = %93, %85
  %.pn71 = phi [16 x i8]* [ %94, %93 ], [ %6, %85 ]
  %.sink9.in = getelementptr inbounds [16 x i8]* %.pn71, i64 0, i64 9
  %.sink9 = load i8* %.sink9.in, align 1
  %96 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 9
  store i8 %.sink9, i8* %96, align 1
  %97 = load %struct.CPUX86State** @env, align 8
  %98 = getelementptr inbounds %struct.CPUX86State* %97, i64 0, i32 30, i64 0
  %99 = bitcast %union.XMMReg* %98 to [16 x i8]*
  %100 = getelementptr inbounds [16 x i8]* %99, i64 0, i64 10
  %101 = load i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %105

; <label>:103                                     ; preds = %95
  %104 = inttoptr i64 %su to [16 x i8]*
  br label %105

; <label>:105                                     ; preds = %103, %95
  %.pn72 = phi [16 x i8]* [ %104, %103 ], [ %6, %95 ]
  %.sink10.in = getelementptr inbounds [16 x i8]* %.pn72, i64 0, i64 10
  %.sink10 = load i8* %.sink10.in, align 1
  %106 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 10
  store i8 %.sink10, i8* %106, align 1
  %107 = load %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State* %107, i64 0, i32 30, i64 0
  %109 = bitcast %union.XMMReg* %108 to [16 x i8]*
  %110 = getelementptr inbounds [16 x i8]* %109, i64 0, i64 11
  %111 = load i8* %110, align 1
  %112 = icmp slt i8 %111, 0
  br i1 %112, label %113, label %115

; <label>:113                                     ; preds = %105
  %114 = inttoptr i64 %su to [16 x i8]*
  br label %115

; <label>:115                                     ; preds = %113, %105
  %.pn73 = phi [16 x i8]* [ %114, %113 ], [ %6, %105 ]
  %.sink11.in = getelementptr inbounds [16 x i8]* %.pn73, i64 0, i64 11
  %.sink11 = load i8* %.sink11.in, align 1
  %116 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 11
  store i8 %.sink11, i8* %116, align 1
  %117 = load %struct.CPUX86State** @env, align 8
  %118 = getelementptr inbounds %struct.CPUX86State* %117, i64 0, i32 30, i64 0
  %119 = bitcast %union.XMMReg* %118 to [16 x i8]*
  %120 = getelementptr inbounds [16 x i8]* %119, i64 0, i64 12
  %121 = load i8* %120, align 1
  %122 = icmp slt i8 %121, 0
  br i1 %122, label %123, label %125

; <label>:123                                     ; preds = %115
  %124 = inttoptr i64 %su to [16 x i8]*
  br label %125

; <label>:125                                     ; preds = %123, %115
  %.pn74 = phi [16 x i8]* [ %124, %123 ], [ %6, %115 ]
  %.sink12.in = getelementptr inbounds [16 x i8]* %.pn74, i64 0, i64 12
  %.sink12 = load i8* %.sink12.in, align 1
  %126 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 12
  store i8 %.sink12, i8* %126, align 1
  %127 = load %struct.CPUX86State** @env, align 8
  %128 = getelementptr inbounds %struct.CPUX86State* %127, i64 0, i32 30, i64 0
  %129 = bitcast %union.XMMReg* %128 to [16 x i8]*
  %130 = getelementptr inbounds [16 x i8]* %129, i64 0, i64 13
  %131 = load i8* %130, align 1
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %125
  %134 = inttoptr i64 %su to [16 x i8]*
  br label %135

; <label>:135                                     ; preds = %133, %125
  %.pn75 = phi [16 x i8]* [ %134, %133 ], [ %6, %125 ]
  %.sink13.in = getelementptr inbounds [16 x i8]* %.pn75, i64 0, i64 13
  %.sink13 = load i8* %.sink13.in, align 1
  %136 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 13
  store i8 %.sink13, i8* %136, align 1
  %137 = load %struct.CPUX86State** @env, align 8
  %138 = getelementptr inbounds %struct.CPUX86State* %137, i64 0, i32 30, i64 0
  %139 = bitcast %union.XMMReg* %138 to [16 x i8]*
  %140 = getelementptr inbounds [16 x i8]* %139, i64 0, i64 14
  %141 = load i8* %140, align 1
  %142 = icmp slt i8 %141, 0
  br i1 %142, label %143, label %145

; <label>:143                                     ; preds = %135
  %144 = inttoptr i64 %su to [16 x i8]*
  br label %145

; <label>:145                                     ; preds = %143, %135
  %.pn76 = phi [16 x i8]* [ %144, %143 ], [ %6, %135 ]
  %.sink14.in = getelementptr inbounds [16 x i8]* %.pn76, i64 0, i64 14
  %.sink14 = load i8* %.sink14.in, align 1
  %146 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 14
  store i8 %.sink14, i8* %146, align 1
  %147 = load %struct.CPUX86State** @env, align 8
  %148 = getelementptr inbounds %struct.CPUX86State* %147, i64 0, i32 30, i64 0
  %149 = bitcast %union.XMMReg* %148 to [16 x i8]*
  %150 = getelementptr inbounds [16 x i8]* %149, i64 0, i64 15
  %151 = load i8* %150, align 1
  %152 = icmp slt i8 %151, 0
  br i1 %152, label %153, label %155

; <label>:153                                     ; preds = %145
  %154 = inttoptr i64 %su to [16 x i8]*
  br label %155

; <label>:155                                     ; preds = %153, %145
  %.pn77 = phi [16 x i8]* [ %154, %153 ], [ %6, %145 ]
  %.sink15.in = getelementptr inbounds [16 x i8]* %.pn77, i64 0, i64 15
  %.sink15 = load i8* %.sink15.in, align 1
  %156 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 15
  store i8 %.sink15, i8* %156, align 1
  ret void
}

define void @helper_blendvps_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 30, i64 0
  %3 = bitcast %union.XMMReg* %2 to i32*
  %4 = load i32* %3, align 4
  %5 = icmp slt i32 %4, 0
  %su.du = select i1 %5, i64 %su, i64 %du
  %.pn = inttoptr i64 %su.du to [4 x i32]*
  %.in = getelementptr inbounds [4 x i32]* %.pn, i64 0, i64 0
  %6 = load i32* %.in, align 4
  %7 = inttoptr i64 %du to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  store i32 %6, i32* %8, align 4
  %9 = load %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State* %9, i64 0, i32 30, i64 0
  %11 = bitcast %union.XMMReg* %10 to [4 x i32]*
  %12 = getelementptr inbounds [4 x i32]* %11, i64 0, i64 1
  %13 = load i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %0
  %16 = inttoptr i64 %su to [4 x i32]*
  br label %17

; <label>:17                                      ; preds = %15, %0
  %.pn15 = phi [4 x i32]* [ %16, %15 ], [ %7, %0 ]
  %.in12 = getelementptr inbounds [4 x i32]* %.pn15, i64 0, i64 1
  %18 = load i32* %.in12, align 4
  %19 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 1
  store i32 %18, i32* %19, align 4
  %20 = load %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State* %20, i64 0, i32 30, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %27

; <label>:25                                      ; preds = %17
  %26 = inttoptr i64 %su to [4 x i32]*
  br label %27

; <label>:27                                      ; preds = %25, %17
  %.pn16 = phi [4 x i32]* [ %26, %25 ], [ %7, %17 ]
  %.in13 = getelementptr inbounds [4 x i32]* %.pn16, i64 0, i64 2
  %28 = load i32* %.in13, align 4
  %29 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 2
  store i32 %28, i32* %29, align 4
  %30 = load %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State* %30, i64 0, i32 30, i64 0
  %32 = bitcast %union.XMMReg* %31 to [4 x i32]*
  %33 = getelementptr inbounds [4 x i32]* %32, i64 0, i64 3
  %34 = load i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %27
  %37 = inttoptr i64 %su to [4 x i32]*
  br label %38

; <label>:38                                      ; preds = %36, %27
  %.pn17 = phi [4 x i32]* [ %37, %36 ], [ %7, %27 ]
  %.in14 = getelementptr inbounds [4 x i32]* %.pn17, i64 0, i64 3
  %39 = load i32* %.in14, align 4
  %40 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 3
  store i32 %39, i32* %40, align 4
  ret void
}

define void @helper_blendvpd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 30, i64 0, i32 0, i64 0
  %5 = load i64* %4, align 8
  %6 = icmp slt i64 %5, 0
  %. = select i1 %6, %union.XMMReg* %2, %union.XMMReg* %1
  %.in = getelementptr inbounds %union.XMMReg* %., i64 0, i32 0, i64 0
  %7 = load i64* %.in, align 8
  %8 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  %9 = load %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State* %9, i64 0, i32 30, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = icmp slt i64 %11, 0
  %.pn7 = select i1 %12, %union.XMMReg* %2, %union.XMMReg* %1
  %.in6 = getelementptr inbounds %union.XMMReg* %.pn7, i64 0, i32 0, i64 1
  %13 = load i64* %.in6, align 8
  %14 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

define void @helper_ptest_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = and i64 %6, %4
  %8 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %9 = load i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = and i64 %11, %9
  %13 = or i64 %12, %7
  %14 = xor i64 %6, -1
  %15 = and i64 %4, %14
  %16 = xor i64 %11, -1
  %17 = and i64 %9, %16
  %18 = or i64 %17, %15
  %19 = icmp ne i64 %13, 0
  %20 = select i1 %19, i32 0, i32 64
  %not. = icmp eq i64 %18, 0
  %21 = zext i1 %not. to i32
  %22 = or i32 %20, %21
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 3
  store i32 %22, i32* %24, align 4
  ret void
}

define void @helper_pmovsxbw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i16
  %5 = inttoptr i64 %du to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  store i16 %4, i16* %6, align 2
  %7 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = sext i8 %8 to i16
  %10 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %12 = load i8* %11, align 1
  %13 = sext i8 %12 to i16
  %14 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %16 = load i8* %15, align 1
  %17 = sext i8 %16 to i16
  %18 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %20 = load i8* %19, align 1
  %21 = sext i8 %20 to i16
  %22 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %24 = load i8* %23, align 1
  %25 = sext i8 %24 to i16
  %26 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %28 = load i8* %27, align 1
  %29 = sext i8 %28 to i16
  %30 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  store i16 %29, i16* %30, align 2
  %31 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i16
  %34 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  store i16 %33, i16* %34, align 2
  ret void
}

define void @helper_pmovsxbd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = inttoptr i64 %du to [4 x i32]*
  %6 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 0
  store i32 %4, i32* %6, align 4
  %7 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 1
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %12 = load i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 2
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %16 = load i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 3
  store i32 %17, i32* %18, align 4
  ret void
}

define void @helper_pmovsxbq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [16 x i8]*
  %3 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 0
  %4 = load i8* %3, align 1
  %5 = sext i8 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = sext i8 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pmovsxwd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = inttoptr i64 %du to [4 x i32]*
  %6 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 0
  store i32 %4, i32* %6, align 4
  %7 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %8 = load i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 1
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %12 = load i16* %11, align 2
  %13 = sext i16 %12 to i32
  %14 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 2
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %16 = load i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 3
  store i32 %17, i32* %18, align 4
  ret void
}

define void @helper_pmovsxwq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [8 x i16]*
  %3 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 0
  %4 = load i16* %3, align 2
  %5 = sext i16 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 1
  %8 = load i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pmovsxdq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 1
  %8 = load i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pmovzxbw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i16
  %5 = inttoptr i64 %du to [8 x i16]*
  %6 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 0
  store i16 %4, i16* %6, align 2
  %7 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i16
  %10 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 1
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %12 = load i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 2
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %16 = load i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 3
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %20 = load i8* %19, align 1
  %21 = zext i8 %20 to i16
  %22 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 4
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 5
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 6
  store i16 %29, i16* %30, align 2
  %31 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i16
  %34 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 7
  store i16 %33, i16* %34, align 2
  ret void
}

define void @helper_pmovzxbd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = inttoptr i64 %du to [4 x i32]*
  %6 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 0
  store i32 %4, i32* %6, align 4
  %7 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 1
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %12 = load i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 2
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %16 = load i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 3
  store i32 %17, i32* %18, align 4
  ret void
}

define void @helper_pmovzxbq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [16 x i8]*
  %3 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 0
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds [16 x i8]* %2, i64 0, i64 1
  %8 = load i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pmovzxwd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %su to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = inttoptr i64 %du to [4 x i32]*
  %6 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 0
  store i32 %4, i32* %6, align 4
  %7 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %8 = load i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 1
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %12 = load i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 2
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %16 = load i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i32]* %5, i64 0, i64 3
  store i32 %17, i32* %18, align 4
  ret void
}

define void @helper_pmovzxwq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [8 x i16]*
  %3 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 0
  %4 = load i16* %3, align 2
  %5 = zext i16 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 1
  %8 = load i16* %7, align 2
  %9 = zext i16 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pmovzxdq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 1
  %8 = load i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pmuldq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %du to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 0
  %4 = load i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = inttoptr i64 %su to [4 x i32]*
  %7 = getelementptr inbounds [4 x i32]* %6, i64 0, i64 0
  %8 = load i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, %5
  %11 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds [4 x i32]* %2, i64 0, i64 2
  %13 = load i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [4 x i32]* %6, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = mul nsw i64 %17, %14
  %19 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %18, i64* %19, align 8
  ret void
}

define void @helper_pcmpeqq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64* %9, align 8
  %11 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %9, align 8
  ret void
}

define void @helper_packusdw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %satuw.exit, label %5

; <label>:5                                       ; preds = %0
  %6 = icmp sgt i32 %3, 65535
  %7 = trunc i32 %3 to i16
  %phitmp = select i1 %6, i16 -1, i16 %7
  br label %satuw.exit

satuw.exit:                                       ; preds = %5, %0
  %.0.i = phi i16 [ 0, %0 ], [ %phitmp, %5 ]
  %8 = inttoptr i64 %du to [8 x i16]*
  %9 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 0
  store i16 %.0.i, i16* %9, align 2
  %10 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %satuw.exit36, label %13

; <label>:13                                      ; preds = %satuw.exit
  %14 = icmp sgt i32 %11, 65535
  %15 = trunc i32 %11 to i16
  %phitmp37 = select i1 %14, i16 -1, i16 %15
  br label %satuw.exit36

satuw.exit36:                                     ; preds = %13, %satuw.exit
  %.0.i35 = phi i16 [ 0, %satuw.exit ], [ %phitmp37, %13 ]
  %16 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 1
  store i16 %.0.i35, i16* %16, align 2
  %17 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %18 = load i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %satuw.exit33, label %20

; <label>:20                                      ; preds = %satuw.exit36
  %21 = icmp sgt i32 %18, 65535
  %22 = trunc i32 %18 to i16
  %phitmp38 = select i1 %21, i16 -1, i16 %22
  br label %satuw.exit33

satuw.exit33:                                     ; preds = %20, %satuw.exit36
  %.0.i32 = phi i16 [ 0, %satuw.exit36 ], [ %phitmp38, %20 ]
  %23 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 2
  store i16 %.0.i32, i16* %23, align 2
  %24 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %25 = load i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %satuw.exit30, label %27

; <label>:27                                      ; preds = %satuw.exit33
  %28 = icmp sgt i32 %25, 65535
  %29 = trunc i32 %25 to i16
  %phitmp39 = select i1 %28, i16 -1, i16 %29
  br label %satuw.exit30

satuw.exit30:                                     ; preds = %27, %satuw.exit33
  %.0.i29 = phi i16 [ 0, %satuw.exit33 ], [ %phitmp39, %27 ]
  %30 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 3
  store i16 %.0.i29, i16* %30, align 2
  %31 = inttoptr i64 %su to [4 x i32]*
  %32 = getelementptr inbounds [4 x i32]* %31, i64 0, i64 0
  %33 = load i32* %32, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %satuw.exit27, label %35

; <label>:35                                      ; preds = %satuw.exit30
  %36 = icmp sgt i32 %33, 65535
  %37 = trunc i32 %33 to i16
  %phitmp40 = select i1 %36, i16 -1, i16 %37
  br label %satuw.exit27

satuw.exit27:                                     ; preds = %35, %satuw.exit30
  %.0.i26 = phi i16 [ 0, %satuw.exit30 ], [ %phitmp40, %35 ]
  %38 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 4
  store i16 %.0.i26, i16* %38, align 2
  %39 = getelementptr inbounds [4 x i32]* %31, i64 0, i64 1
  %40 = load i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %satuw.exit24, label %42

; <label>:42                                      ; preds = %satuw.exit27
  %43 = icmp sgt i32 %40, 65535
  %44 = trunc i32 %40 to i16
  %phitmp41 = select i1 %43, i16 -1, i16 %44
  br label %satuw.exit24

satuw.exit24:                                     ; preds = %42, %satuw.exit27
  %.0.i23 = phi i16 [ 0, %satuw.exit27 ], [ %phitmp41, %42 ]
  %45 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 5
  store i16 %.0.i23, i16* %45, align 2
  %46 = getelementptr inbounds [4 x i32]* %31, i64 0, i64 2
  %47 = load i32* %46, align 4
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %satuw.exit21, label %49

; <label>:49                                      ; preds = %satuw.exit24
  %50 = icmp sgt i32 %47, 65535
  %51 = trunc i32 %47 to i16
  %phitmp42 = select i1 %50, i16 -1, i16 %51
  br label %satuw.exit21

satuw.exit21:                                     ; preds = %49, %satuw.exit24
  %.0.i20 = phi i16 [ 0, %satuw.exit24 ], [ %phitmp42, %49 ]
  %52 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 6
  store i16 %.0.i20, i16* %52, align 2
  %53 = getelementptr inbounds [4 x i32]* %31, i64 0, i64 3
  %54 = load i32* %53, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %satuw.exit18, label %56

; <label>:56                                      ; preds = %satuw.exit21
  %57 = icmp sgt i32 %54, 65535
  %58 = trunc i32 %54 to i16
  %phitmp43 = select i1 %57, i16 -1, i16 %58
  br label %satuw.exit18

satuw.exit18:                                     ; preds = %56, %satuw.exit21
  %.0.i17 = phi i16 [ 0, %satuw.exit21 ], [ %phitmp43, %56 ]
  %59 = getelementptr inbounds [8 x i16]* %8, i64 0, i64 7
  store i16 %.0.i17, i16* %59, align 2
  ret void
}

define void @helper_pminsb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp slt i8 %3, %6
  %. = select i1 %7, i8 %3, i8 %6
  store i8 %., i8* %2, align 1
  %8 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = icmp slt i8 %9, %11
  %.sink1 = select i1 %12, i8 %9, i8 %11
  store i8 %.sink1, i8* %8, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp slt i8 %14, %16
  %.95 = select i1 %17, i8 %14, i8 %16
  store i8 %.95, i8* %13, align 1
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = icmp slt i8 %19, %21
  %.sink3 = select i1 %22, i8 %19, i8 %21
  store i8 %.sink3, i8* %18, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = icmp slt i8 %24, %26
  %.96 = select i1 %27, i8 %24, i8 %26
  store i8 %.96, i8* %23, align 1
  %28 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = icmp slt i8 %29, %31
  %.sink5 = select i1 %32, i8 %29, i8 %31
  store i8 %.sink5, i8* %28, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = icmp slt i8 %34, %36
  %.97 = select i1 %37, i8 %34, i8 %36
  store i8 %.97, i8* %33, align 1
  %38 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = icmp slt i8 %39, %41
  %.sink7 = select i1 %42, i8 %39, i8 %41
  store i8 %.sink7, i8* %38, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %46 = load i8* %45, align 1
  %47 = icmp slt i8 %44, %46
  %.98 = select i1 %47, i8 %44, i8 %46
  store i8 %.98, i8* %43, align 1
  %48 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %49 = load i8* %48, align 1
  %50 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %51 = load i8* %50, align 1
  %52 = icmp slt i8 %49, %51
  %.sink9 = select i1 %52, i8 %49, i8 %51
  store i8 %.sink9, i8* %48, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %54 = load i8* %53, align 1
  %55 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %56 = load i8* %55, align 1
  %57 = icmp slt i8 %54, %56
  %.99 = select i1 %57, i8 %54, i8 %56
  store i8 %.99, i8* %53, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %59 = load i8* %58, align 1
  %60 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %61 = load i8* %60, align 1
  %62 = icmp slt i8 %59, %61
  %.sink11 = select i1 %62, i8 %59, i8 %61
  store i8 %.sink11, i8* %58, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %66 = load i8* %65, align 1
  %67 = icmp slt i8 %64, %66
  %.100 = select i1 %67, i8 %64, i8 %66
  store i8 %.100, i8* %63, align 1
  %68 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %69 = load i8* %68, align 1
  %70 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %71 = load i8* %70, align 1
  %72 = icmp slt i8 %69, %71
  %.sink13 = select i1 %72, i8 %69, i8 %71
  store i8 %.sink13, i8* %68, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %74 = load i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %76 = load i8* %75, align 1
  %77 = icmp slt i8 %74, %76
  %.101 = select i1 %77, i8 %74, i8 %76
  store i8 %.101, i8* %73, align 1
  %78 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %79 = load i8* %78, align 1
  %80 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %81 = load i8* %80, align 1
  %82 = icmp slt i8 %79, %81
  %.sink15 = select i1 %82, i8 %79, i8 %81
  store i8 %.sink15, i8* %78, align 1
  ret void
}

define void @helper_pminsd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp slt i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp slt i32 %9, %11
  %13 = select i1 %12, i32 %9, i32 %11
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %17 = load i32* %16, align 4
  %18 = icmp slt i32 %15, %17
  %.20 = select i1 %18, i32 %15, i32 %17
  store i32 %.20, i32* %14, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp slt i32 %20, %22
  %24 = select i1 %23, i32 %20, i32 %22
  store i32 %24, i32* %19, align 4
  ret void
}

define void @helper_pminuw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp ult i16 %3, %6
  %. = select i1 %7, i16 %3, i16 %6
  store i16 %., i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = icmp ult i16 %9, %11
  %.sink1 = select i1 %12, i16 %9, i16 %11
  store i16 %.sink1, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp ult i16 %14, %16
  %.47 = select i1 %17, i16 %14, i16 %16
  store i16 %.47, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp ult i16 %19, %21
  %.sink3 = select i1 %22, i16 %19, i16 %21
  store i16 %.sink3, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = icmp ult i16 %24, %26
  %.48 = select i1 %27, i16 %24, i16 %26
  store i16 %.48, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = icmp ult i16 %29, %31
  %.sink5 = select i1 %32, i16 %29, i16 %31
  store i16 %.sink5, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = icmp ult i16 %34, %36
  %.49 = select i1 %37, i16 %34, i16 %36
  store i16 %.49, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = icmp ult i16 %39, %41
  %.sink7 = select i1 %42, i16 %39, i16 %41
  store i16 %.sink7, i16* %38, align 2
  ret void
}

define void @helper_pminud_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp ult i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp ult i32 %9, %11
  %13 = select i1 %12, i32 %9, i32 %11
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %17 = load i32* %16, align 4
  %18 = icmp ult i32 %15, %17
  %.20 = select i1 %18, i32 %15, i32 %17
  store i32 %.20, i32* %14, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp ult i32 %20, %22
  %24 = select i1 %23, i32 %20, i32 %22
  store i32 %24, i32* %19, align 4
  ret void
}

define void @helper_pmaxsb_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [16 x i8]*
  %2 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 0
  %3 = load i8* %2, align 1
  %4 = inttoptr i64 %su to [16 x i8]*
  %5 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 0
  %6 = load i8* %5, align 1
  %7 = icmp sgt i8 %3, %6
  %. = select i1 %7, i8 %3, i8 %6
  store i8 %., i8* %2, align 1
  %8 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 1
  %9 = load i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 1
  %11 = load i8* %10, align 1
  %12 = icmp sgt i8 %9, %11
  %.sink1 = select i1 %12, i8 %9, i8 %11
  store i8 %.sink1, i8* %8, align 1
  %13 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 2
  %14 = load i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 2
  %16 = load i8* %15, align 1
  %17 = icmp sgt i8 %14, %16
  %.95 = select i1 %17, i8 %14, i8 %16
  store i8 %.95, i8* %13, align 1
  %18 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 3
  %19 = load i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 3
  %21 = load i8* %20, align 1
  %22 = icmp sgt i8 %19, %21
  %.sink3 = select i1 %22, i8 %19, i8 %21
  store i8 %.sink3, i8* %18, align 1
  %23 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 4
  %24 = load i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 4
  %26 = load i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %.96 = select i1 %27, i8 %24, i8 %26
  store i8 %.96, i8* %23, align 1
  %28 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 5
  %29 = load i8* %28, align 1
  %30 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 5
  %31 = load i8* %30, align 1
  %32 = icmp sgt i8 %29, %31
  %.sink5 = select i1 %32, i8 %29, i8 %31
  store i8 %.sink5, i8* %28, align 1
  %33 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 6
  %34 = load i8* %33, align 1
  %35 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 6
  %36 = load i8* %35, align 1
  %37 = icmp sgt i8 %34, %36
  %.97 = select i1 %37, i8 %34, i8 %36
  store i8 %.97, i8* %33, align 1
  %38 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 7
  %39 = load i8* %38, align 1
  %40 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 7
  %41 = load i8* %40, align 1
  %42 = icmp sgt i8 %39, %41
  %.sink7 = select i1 %42, i8 %39, i8 %41
  store i8 %.sink7, i8* %38, align 1
  %43 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 8
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 8
  %46 = load i8* %45, align 1
  %47 = icmp sgt i8 %44, %46
  %.98 = select i1 %47, i8 %44, i8 %46
  store i8 %.98, i8* %43, align 1
  %48 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 9
  %49 = load i8* %48, align 1
  %50 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 9
  %51 = load i8* %50, align 1
  %52 = icmp sgt i8 %49, %51
  %.sink9 = select i1 %52, i8 %49, i8 %51
  store i8 %.sink9, i8* %48, align 1
  %53 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 10
  %54 = load i8* %53, align 1
  %55 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 10
  %56 = load i8* %55, align 1
  %57 = icmp sgt i8 %54, %56
  %.99 = select i1 %57, i8 %54, i8 %56
  store i8 %.99, i8* %53, align 1
  %58 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 11
  %59 = load i8* %58, align 1
  %60 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 11
  %61 = load i8* %60, align 1
  %62 = icmp sgt i8 %59, %61
  %.sink11 = select i1 %62, i8 %59, i8 %61
  store i8 %.sink11, i8* %58, align 1
  %63 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 12
  %64 = load i8* %63, align 1
  %65 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 12
  %66 = load i8* %65, align 1
  %67 = icmp sgt i8 %64, %66
  %.100 = select i1 %67, i8 %64, i8 %66
  store i8 %.100, i8* %63, align 1
  %68 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 13
  %69 = load i8* %68, align 1
  %70 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 13
  %71 = load i8* %70, align 1
  %72 = icmp sgt i8 %69, %71
  %.sink13 = select i1 %72, i8 %69, i8 %71
  store i8 %.sink13, i8* %68, align 1
  %73 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 14
  %74 = load i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 14
  %76 = load i8* %75, align 1
  %77 = icmp sgt i8 %74, %76
  %.101 = select i1 %77, i8 %74, i8 %76
  store i8 %.101, i8* %73, align 1
  %78 = getelementptr inbounds [16 x i8]* %1, i64 0, i64 15
  %79 = load i8* %78, align 1
  %80 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 15
  %81 = load i8* %80, align 1
  %82 = icmp sgt i8 %79, %81
  %.sink15 = select i1 %82, i8 %79, i8 %81
  store i8 %.sink15, i8* %78, align 1
  ret void
}

define void @helper_pmaxsd_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp sgt i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp sgt i32 %9, %11
  %13 = select i1 %12, i32 %9, i32 %11
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %17 = load i32* %16, align 4
  %18 = icmp sgt i32 %15, %17
  %.20 = select i1 %18, i32 %15, i32 %17
  store i32 %.20, i32* %14, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp sgt i32 %20, %22
  %24 = select i1 %23, i32 %20, i32 %22
  store i32 %24, i32* %19, align 4
  ret void
}

define void @helper_pmaxuw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [8 x i16]*
  %2 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 0
  %3 = load i16* %2, align 2
  %4 = inttoptr i64 %su to [8 x i16]*
  %5 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp ugt i16 %3, %6
  %. = select i1 %7, i16 %3, i16 %6
  store i16 %., i16* %2, align 2
  %8 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 1
  %9 = load i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 1
  %11 = load i16* %10, align 2
  %12 = icmp ugt i16 %9, %11
  %.sink1 = select i1 %12, i16 %9, i16 %11
  store i16 %.sink1, i16* %8, align 2
  %13 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 2
  %14 = load i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 2
  %16 = load i16* %15, align 2
  %17 = icmp ugt i16 %14, %16
  %.47 = select i1 %17, i16 %14, i16 %16
  store i16 %.47, i16* %13, align 2
  %18 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 3
  %19 = load i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 3
  %21 = load i16* %20, align 2
  %22 = icmp ugt i16 %19, %21
  %.sink3 = select i1 %22, i16 %19, i16 %21
  store i16 %.sink3, i16* %18, align 2
  %23 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 4
  %24 = load i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 4
  %26 = load i16* %25, align 2
  %27 = icmp ugt i16 %24, %26
  %.48 = select i1 %27, i16 %24, i16 %26
  store i16 %.48, i16* %23, align 2
  %28 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 5
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 5
  %31 = load i16* %30, align 2
  %32 = icmp ugt i16 %29, %31
  %.sink5 = select i1 %32, i16 %29, i16 %31
  store i16 %.sink5, i16* %28, align 2
  %33 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 6
  %34 = load i16* %33, align 2
  %35 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 6
  %36 = load i16* %35, align 2
  %37 = icmp ugt i16 %34, %36
  %.49 = select i1 %37, i16 %34, i16 %36
  store i16 %.49, i16* %33, align 2
  %38 = getelementptr inbounds [8 x i16]* %1, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 7
  %41 = load i16* %40, align 2
  %42 = icmp ugt i16 %39, %41
  %.sink7 = select i1 %42, i16 %39, i16 %41
  store i16 %.sink7, i16* %38, align 2
  ret void
}

define void @helper_pmaxud_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = icmp ugt i32 %3, %6
  %. = select i1 %7, i32 %3, i32 %6
  store i32 %., i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp ugt i32 %9, %11
  %13 = select i1 %12, i32 %9, i32 %11
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %15 = load i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %17 = load i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  %.20 = select i1 %18, i32 %15, i32 %17
  store i32 %.20, i32* %14, align 4
  %19 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %20 = load i32* %19, align 4
  %21 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %22 = load i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = select i1 %23, i32 %20, i32 %22
  store i32 %24, i32* %19, align 4
  ret void
}

define void @helper_pmulld_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to [4 x i32]*
  %2 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 0
  %3 = load i32* %2, align 4
  %4 = inttoptr i64 %su to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = mul nsw i32 %6, %3
  store i32 %7, i32* %2, align 4
  %8 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  %11 = load i32* %10, align 4
  %12 = mul nsw i32 %11, %9
  store i32 %12, i32* %8, align 4
  %13 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 2
  %14 = load i32* %13, align 4
  %15 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  %16 = load i32* %15, align 4
  %17 = mul nsw i32 %16, %14
  store i32 %17, i32* %13, align 4
  %18 = getelementptr inbounds [4 x i32]* %1, i64 0, i64 3
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  %21 = load i32* %20, align 4
  %22 = mul nsw i32 %21, %19
  store i32 %22, i32* %18, align 4
  ret void
}

define void @helper_phminposuw_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to [8 x i16]*
  %3 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 1
  %4 = load i16* %3, align 2
  %5 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 0
  %6 = load i16* %5, align 2
  %7 = icmp ult i16 %4, %6
  %. = zext i1 %7 to i32
  %8 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 2
  %9 = load i16* %8, align 2
  %10 = zext i1 %7 to i64
  %11 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %10
  %12 = load i16* %11, align 2
  %13 = icmp ult i16 %9, %12
  %idx.1 = select i1 %13, i32 2, i32 %.
  %14 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 3
  %15 = load i16* %14, align 2
  %16 = zext i32 %idx.1 to i64
  %17 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %16
  %18 = load i16* %17, align 2
  %19 = icmp ult i16 %15, %18
  %.idx.1 = select i1 %19, i32 3, i32 %idx.1
  %20 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 4
  %21 = load i16* %20, align 2
  %22 = zext i32 %.idx.1 to i64
  %23 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %22
  %24 = load i16* %23, align 2
  %25 = icmp ult i16 %21, %24
  %idx.3 = select i1 %25, i32 4, i32 %.idx.1
  %26 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 5
  %27 = load i16* %26, align 2
  %28 = zext i32 %idx.3 to i64
  %29 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %28
  %30 = load i16* %29, align 2
  %31 = icmp ult i16 %27, %30
  %.idx.3 = select i1 %31, i32 5, i32 %idx.3
  %32 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 6
  %33 = load i16* %32, align 2
  %34 = zext i32 %.idx.3 to i64
  %35 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %34
  %36 = load i16* %35, align 2
  %37 = icmp ult i16 %33, %36
  %idx.5 = select i1 %37, i32 6, i32 %.idx.3
  %38 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 7
  %39 = load i16* %38, align 2
  %40 = sext i32 %idx.5 to i64
  %41 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %40
  %42 = load i16* %41, align 2
  %43 = icmp ult i16 %39, %42
  %.idx.5 = select i1 %43, i32 7, i32 %idx.5
  %44 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %44, align 8
  %45 = inttoptr i64 %du to [4 x i32]*
  %46 = getelementptr inbounds [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %46, align 4
  %47 = trunc i32 %.idx.5 to i16
  %48 = inttoptr i64 %du to [8 x i16]*
  %49 = getelementptr inbounds [8 x i16]* %48, i64 0, i64 1
  store i16 %47, i16* %49, align 2
  %50 = sext i32 %.idx.5 to i64
  %51 = getelementptr inbounds [8 x i16]* %2, i64 0, i64 %50
  %52 = load i16* %51, align 2
  %53 = getelementptr inbounds [8 x i16]* %48, i64 0, i64 0
  store i16 %52, i16* %53, align 2
  ret void
}

define void @helper_roundps_xmm(i64 %du, i64 %su, i32 %mode) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 28
  %3 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 28, i32 1
  %4 = load i8* %3, align 1
  %5 = and i32 %mode, 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %0
  %8 = and i32 %mode, 3
  switch i32 %8, label %13 [
    i32 0, label %9
    i32 1, label %10
    i32 2, label %11
    i32 3, label %12
  ]

; <label>:9                                       ; preds = %7
  tail call void @set_float_rounding_mode(i32 0, %struct.float_status* %2) nounwind
  br label %13

; <label>:10                                      ; preds = %7
  tail call void @set_float_rounding_mode(i32 1, %struct.float_status* %2) nounwind
  br label %13

; <label>:11                                      ; preds = %7
  tail call void @set_float_rounding_mode(i32 2, %struct.float_status* %2) nounwind
  br label %13

; <label>:12                                      ; preds = %7
  tail call void @set_float_rounding_mode(i32 3, %struct.float_status* %2) nounwind
  br label %13

; <label>:13                                      ; preds = %12, %11, %10, %9, %7, %0
  %14 = inttoptr i64 %su to [4 x i32]*
  %15 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 0
  %16 = load i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 28
  %20 = tail call i64 @float64_round_to_int(i64 %17, %struct.float_status* %19) nounwind
  %21 = trunc i64 %20 to i32
  %22 = inttoptr i64 %du to [4 x i32]*
  %23 = getelementptr inbounds [4 x i32]* %22, i64 0, i64 0
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 1
  %25 = load i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = load %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State* %27, i64 0, i32 28
  %29 = tail call i64 @float64_round_to_int(i64 %26, %struct.float_status* %28) nounwind
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds [4 x i32]* %22, i64 0, i64 1
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 2
  %33 = load i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = load %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 28
  %37 = tail call i64 @float64_round_to_int(i64 %34, %struct.float_status* %36) nounwind
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds [4 x i32]* %22, i64 0, i64 2
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 3
  %41 = load i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = load %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State* %43, i64 0, i32 28
  %45 = tail call i64 @float64_round_to_int(i64 %42, %struct.float_status* %44) nounwind
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds [4 x i32]* %22, i64 0, i64 3
  store i32 %46, i32* %47, align 4
  %48 = load %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State* %48, i64 0, i32 28, i32 1
  store i8 %4, i8* %49, align 1
  ret void
}

declare void @set_float_rounding_mode(i32, %struct.float_status*)

declare i64 @float64_round_to_int(i64, %struct.float_status*)

define void @helper_roundpd_xmm(i64 %du, i64 %su, i32 %mode) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 28
  %5 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 28, i32 1
  %6 = load i8* %5, align 1
  %7 = and i32 %mode, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %15

; <label>:9                                       ; preds = %0
  %10 = and i32 %mode, 3
  switch i32 %10, label %15 [
    i32 0, label %11
    i32 1, label %12
    i32 2, label %13
    i32 3, label %14
  ]

; <label>:11                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 0, %struct.float_status* %4) nounwind
  br label %15

; <label>:12                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 1, %struct.float_status* %4) nounwind
  br label %15

; <label>:13                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 2, %struct.float_status* %4) nounwind
  br label %15

; <label>:14                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 3, %struct.float_status* %4) nounwind
  br label %15

; <label>:15                                      ; preds = %14, %13, %12, %11, %9, %0
  %16 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %17 = load i64* %16, align 8
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 28
  %20 = tail call i64 @float64_round_to_int(i64 %17, %struct.float_status* %19) nounwind
  %21 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %23 = load i64* %22, align 8
  %24 = load %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 28
  %26 = tail call i64 @float64_round_to_int(i64 %23, %struct.float_status* %25) nounwind
  %27 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %26, i64* %27, align 8
  %28 = load %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State* %28, i64 0, i32 28, i32 1
  store i8 %6, i8* %29, align 1
  ret void
}

define void @helper_roundss_xmm(i64 %du, i64 %su, i32 %mode) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 28
  %3 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 28, i32 1
  %4 = load i8* %3, align 1
  %5 = and i32 %mode, 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %0
  %8 = and i32 %mode, 3
  switch i32 %8, label %13 [
    i32 0, label %9
    i32 1, label %10
    i32 2, label %11
    i32 3, label %12
  ]

; <label>:9                                       ; preds = %7
  tail call void @set_float_rounding_mode(i32 0, %struct.float_status* %2) nounwind
  br label %13

; <label>:10                                      ; preds = %7
  tail call void @set_float_rounding_mode(i32 1, %struct.float_status* %2) nounwind
  br label %13

; <label>:11                                      ; preds = %7
  tail call void @set_float_rounding_mode(i32 2, %struct.float_status* %2) nounwind
  br label %13

; <label>:12                                      ; preds = %7
  tail call void @set_float_rounding_mode(i32 3, %struct.float_status* %2) nounwind
  br label %13

; <label>:13                                      ; preds = %12, %11, %10, %9, %7, %0
  %14 = inttoptr i64 %su to [4 x i32]*
  %15 = getelementptr inbounds [4 x i32]* %14, i64 0, i64 0
  %16 = load i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 28
  %20 = tail call i64 @float64_round_to_int(i64 %17, %struct.float_status* %19) nounwind
  %21 = trunc i64 %20 to i32
  %22 = inttoptr i64 %du to [4 x i32]*
  %23 = getelementptr inbounds [4 x i32]* %22, i64 0, i64 0
  store i32 %21, i32* %23, align 4
  %24 = load %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State* %24, i64 0, i32 28, i32 1
  store i8 %4, i8* %25, align 1
  ret void
}

define void @helper_roundsd_xmm(i64 %du, i64 %su, i32 %mode) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 28
  %5 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 28, i32 1
  %6 = load i8* %5, align 1
  %7 = and i32 %mode, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %15

; <label>:9                                       ; preds = %0
  %10 = and i32 %mode, 3
  switch i32 %10, label %15 [
    i32 0, label %11
    i32 1, label %12
    i32 2, label %13
    i32 3, label %14
  ]

; <label>:11                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 0, %struct.float_status* %4) nounwind
  br label %15

; <label>:12                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 1, %struct.float_status* %4) nounwind
  br label %15

; <label>:13                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 2, %struct.float_status* %4) nounwind
  br label %15

; <label>:14                                      ; preds = %9
  tail call void @set_float_rounding_mode(i32 3, %struct.float_status* %4) nounwind
  br label %15

; <label>:15                                      ; preds = %14, %13, %12, %11, %9, %0
  %16 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %17 = load i64* %16, align 8
  %18 = load %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State* %18, i64 0, i32 28
  %20 = tail call i64 @float64_round_to_int(i64 %17, %struct.float_status* %19) nounwind
  %21 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %20, i64* %21, align 8
  %22 = load %struct.CPUX86State** @env, align 8
  %23 = getelementptr inbounds %struct.CPUX86State* %22, i64 0, i32 28, i32 1
  store i8 %6, i8* %23, align 1
  ret void
}

define void @helper_blendps_xmm(i64 %du, i64 %su, i32 %imm) nounwind uwtable {
  %1 = and i32 %imm, 1
  %2 = icmp eq i32 %1, 0
  %du.su = select i1 %2, i64 %du, i64 %su
  %.pn = inttoptr i64 %du.su to [4 x i32]*
  %.in = getelementptr inbounds [4 x i32]* %.pn, i64 0, i64 0
  %3 = load i32* %.in, align 4
  %4 = inttoptr i64 %du to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  store i32 %3, i32* %5, align 4
  %6 = and i32 %imm, 2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %su to [4 x i32]*
  br label %10

; <label>:10                                      ; preds = %8, %0
  %.pn19 = phi [4 x i32]* [ %9, %8 ], [ %4, %0 ]
  %.in16 = getelementptr inbounds [4 x i32]* %.pn19, i64 0, i64 1
  %11 = load i32* %.in16, align 4
  %12 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = and i32 %imm, 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %10
  %16 = inttoptr i64 %su to [4 x i32]*
  br label %17

; <label>:17                                      ; preds = %15, %10
  %.pn20 = phi [4 x i32]* [ %16, %15 ], [ %4, %10 ]
  %.in17 = getelementptr inbounds [4 x i32]* %.pn20, i64 0, i64 2
  %18 = load i32* %.in17, align 4
  %19 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 2
  store i32 %18, i32* %19, align 4
  %20 = and i32 %imm, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

; <label>:22                                      ; preds = %17
  %23 = inttoptr i64 %su to [4 x i32]*
  br label %24

; <label>:24                                      ; preds = %22, %17
  %.pn21 = phi [4 x i32]* [ %23, %22 ], [ %4, %17 ]
  %.in18 = getelementptr inbounds [4 x i32]* %.pn21, i64 0, i64 3
  %25 = load i32* %.in18, align 4
  %26 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  ret void
}

define void @helper_blendpd_xmm(i64 %du, i64 %su, i32 %imm) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = and i32 %imm, 1
  %4 = icmp eq i32 %3, 0
  %. = select i1 %4, %union.XMMReg* %1, %union.XMMReg* %2
  %.in = getelementptr inbounds %union.XMMReg* %., i64 0, i32 0, i64 0
  %5 = load i64* %.in, align 8
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  %7 = and i32 %imm, 2
  %8 = icmp eq i32 %7, 0
  %.pn9 = select i1 %8, %union.XMMReg* %1, %union.XMMReg* %2
  %.in8 = getelementptr inbounds %union.XMMReg* %.pn9, i64 0, i32 0, i64 1
  %9 = load i64* %.in8, align 8
  %10 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 %9, i64* %10, align 8
  ret void
}

define void @helper_pblendw_xmm(i64 %du, i64 %su, i32 %imm) nounwind uwtable {
  %1 = and i32 %imm, 1
  %2 = icmp eq i32 %1, 0
  %du.su = select i1 %2, i64 %du, i64 %su
  %.pn = inttoptr i64 %du.su to [8 x i16]*
  %.sink.in = getelementptr inbounds [8 x i16]* %.pn, i64 0, i64 0
  %.sink = load i16* %.sink.in, align 2
  %3 = inttoptr i64 %du to [8 x i16]*
  %4 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 0
  store i16 %.sink, i16* %4, align 2
  %5 = and i32 %imm, 2
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7                                       ; preds = %0
  %8 = inttoptr i64 %su to [8 x i16]*
  br label %9

; <label>:9                                       ; preds = %7, %0
  %.pn39 = phi [8 x i16]* [ %8, %7 ], [ %3, %0 ]
  %.sink1.in = getelementptr inbounds [8 x i16]* %.pn39, i64 0, i64 1
  %.sink1 = load i16* %.sink1.in, align 2
  %10 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 1
  store i16 %.sink1, i16* %10, align 2
  %11 = and i32 %imm, 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

; <label>:13                                      ; preds = %9
  %14 = inttoptr i64 %su to [8 x i16]*
  br label %15

; <label>:15                                      ; preds = %13, %9
  %.pn40 = phi [8 x i16]* [ %14, %13 ], [ %3, %9 ]
  %.sink2.in = getelementptr inbounds [8 x i16]* %.pn40, i64 0, i64 2
  %.sink2 = load i16* %.sink2.in, align 2
  %16 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 2
  store i16 %.sink2, i16* %16, align 2
  %17 = and i32 %imm, 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

; <label>:19                                      ; preds = %15
  %20 = inttoptr i64 %su to [8 x i16]*
  br label %21

; <label>:21                                      ; preds = %19, %15
  %.pn41 = phi [8 x i16]* [ %20, %19 ], [ %3, %15 ]
  %.sink3.in = getelementptr inbounds [8 x i16]* %.pn41, i64 0, i64 3
  %.sink3 = load i16* %.sink3.in, align 2
  %22 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 3
  store i16 %.sink3, i16* %22, align 2
  %23 = and i32 %imm, 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

; <label>:25                                      ; preds = %21
  %26 = inttoptr i64 %su to [8 x i16]*
  br label %27

; <label>:27                                      ; preds = %25, %21
  %.pn42 = phi [8 x i16]* [ %26, %25 ], [ %3, %21 ]
  %.sink4.in = getelementptr inbounds [8 x i16]* %.pn42, i64 0, i64 4
  %.sink4 = load i16* %.sink4.in, align 2
  %28 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 4
  store i16 %.sink4, i16* %28, align 2
  %29 = and i32 %imm, 32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %33, label %31

; <label>:31                                      ; preds = %27
  %32 = inttoptr i64 %su to [8 x i16]*
  br label %33

; <label>:33                                      ; preds = %31, %27
  %.pn43 = phi [8 x i16]* [ %32, %31 ], [ %3, %27 ]
  %.sink5.in = getelementptr inbounds [8 x i16]* %.pn43, i64 0, i64 5
  %.sink5 = load i16* %.sink5.in, align 2
  %34 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 5
  store i16 %.sink5, i16* %34, align 2
  %35 = and i32 %imm, 64
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

; <label>:37                                      ; preds = %33
  %38 = inttoptr i64 %su to [8 x i16]*
  br label %39

; <label>:39                                      ; preds = %37, %33
  %.pn44 = phi [8 x i16]* [ %38, %37 ], [ %3, %33 ]
  %.sink6.in = getelementptr inbounds [8 x i16]* %.pn44, i64 0, i64 6
  %.sink6 = load i16* %.sink6.in, align 2
  %40 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 6
  store i16 %.sink6, i16* %40, align 2
  %41 = and i32 %imm, 128
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %45, label %43

; <label>:43                                      ; preds = %39
  %44 = inttoptr i64 %su to [8 x i16]*
  br label %45

; <label>:45                                      ; preds = %43, %39
  %.pn45 = phi [8 x i16]* [ %44, %43 ], [ %3, %39 ]
  %.sink7.in = getelementptr inbounds [8 x i16]* %.pn45, i64 0, i64 7
  %.sink7 = load i16* %.sink7.in, align 2
  %46 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 7
  store i16 %.sink7, i16* %46, align 2
  ret void
}

define void @helper_dpps_xmm(i64 %du, i64 %su, i32 %mask) nounwind uwtable {
  %1 = and i32 %mask, 16
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %16, label %3

; <label>:3                                       ; preds = %0
  %4 = inttoptr i64 %du to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32]* %4, i64 0, i64 0
  %6 = load i32* %5, align 4
  %7 = inttoptr i64 %su to [4 x i32]*
  %8 = getelementptr inbounds [4 x i32]* %7, i64 0, i64 0
  %9 = load i32* %8, align 4
  %10 = load %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State* %10, i64 0, i32 28
  %12 = tail call i32 @float32_mul(i32 %6, i32 %9, %struct.float_status* %11) nounwind
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 28
  %15 = tail call i32 @float32_add(i32 0, i32 %12, %struct.float_status* %14) nounwind
  br label %16

; <label>:16                                      ; preds = %3, %0
  %iresult.0 = phi i32 [ %15, %3 ], [ 0, %0 ]
  %17 = and i32 %mask, 32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

; <label>:19                                      ; preds = %16
  %20 = inttoptr i64 %du to [4 x i32]*
  %21 = getelementptr inbounds [4 x i32]* %20, i64 0, i64 1
  %22 = load i32* %21, align 4
  %23 = inttoptr i64 %su to [4 x i32]*
  %24 = getelementptr inbounds [4 x i32]* %23, i64 0, i64 1
  %25 = load i32* %24, align 4
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 28
  %28 = tail call i32 @float32_mul(i32 %22, i32 %25, %struct.float_status* %27) nounwind
  %29 = load %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State* %29, i64 0, i32 28
  %31 = tail call i32 @float32_add(i32 %iresult.0, i32 %28, %struct.float_status* %30) nounwind
  br label %32

; <label>:32                                      ; preds = %19, %16
  %iresult.1 = phi i32 [ %31, %19 ], [ %iresult.0, %16 ]
  %33 = and i32 %mask, 64
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %48, label %35

; <label>:35                                      ; preds = %32
  %36 = inttoptr i64 %du to [4 x i32]*
  %37 = getelementptr inbounds [4 x i32]* %36, i64 0, i64 2
  %38 = load i32* %37, align 4
  %39 = inttoptr i64 %su to [4 x i32]*
  %40 = getelementptr inbounds [4 x i32]* %39, i64 0, i64 2
  %41 = load i32* %40, align 4
  %42 = load %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State* %42, i64 0, i32 28
  %44 = tail call i32 @float32_mul(i32 %38, i32 %41, %struct.float_status* %43) nounwind
  %45 = load %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 28
  %47 = tail call i32 @float32_add(i32 %iresult.1, i32 %44, %struct.float_status* %46) nounwind
  br label %48

; <label>:48                                      ; preds = %35, %32
  %iresult.2 = phi i32 [ %47, %35 ], [ %iresult.1, %32 ]
  %49 = and i32 %mask, 128
  %50 = icmp eq i32 %49, 0
  %.pre = inttoptr i64 %du to [4 x i32]*
  %.pre27 = getelementptr inbounds [4 x i32]* %.pre, i64 0, i64 3
  br i1 %50, label %._crit_edge, label %51

; <label>:51                                      ; preds = %48
  %52 = load i32* %.pre27, align 4
  %53 = inttoptr i64 %su to [4 x i32]*
  %54 = getelementptr inbounds [4 x i32]* %53, i64 0, i64 3
  %55 = load i32* %54, align 4
  %56 = load %struct.CPUX86State** @env, align 8
  %57 = getelementptr inbounds %struct.CPUX86State* %56, i64 0, i32 28
  %58 = tail call i32 @float32_mul(i32 %52, i32 %55, %struct.float_status* %57) nounwind
  %59 = load %struct.CPUX86State** @env, align 8
  %60 = getelementptr inbounds %struct.CPUX86State* %59, i64 0, i32 28
  %61 = tail call i32 @float32_add(i32 %iresult.2, i32 %58, %struct.float_status* %60) nounwind
  br label %._crit_edge

._crit_edge:                                      ; preds = %51, %48
  %iresult.3 = phi i32 [ %61, %51 ], [ %iresult.2, %48 ]
  %62 = and i32 %mask, 1
  %63 = icmp ne i32 %62, 0
  %64 = select i1 %63, i32 %iresult.3, i32 0
  %65 = getelementptr inbounds [4 x i32]* %.pre, i64 0, i64 0
  store i32 %64, i32* %65, align 4
  %66 = and i32 %mask, 2
  %67 = icmp ne i32 %66, 0
  %68 = select i1 %67, i32 %iresult.3, i32 0
  %69 = getelementptr inbounds [4 x i32]* %.pre, i64 0, i64 1
  store i32 %68, i32* %69, align 4
  %70 = and i32 %mask, 4
  %71 = icmp ne i32 %70, 0
  %72 = select i1 %71, i32 %iresult.3, i32 0
  %73 = getelementptr inbounds [4 x i32]* %.pre, i64 0, i64 2
  store i32 %72, i32* %73, align 4
  %74 = and i32 %mask, 8
  %75 = icmp ne i32 %74, 0
  %76 = select i1 %75, i32 %iresult.3, i32 0
  store i32 %76, i32* %.pre27, align 4
  ret void
}

define void @helper_dppd_xmm(i64 %du, i64 %su, i32 %mask) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = and i32 %mask, 16
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %16, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %7 = load i64* %6, align 8
  %8 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %9 = load i64* %8, align 8
  %10 = load %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State* %10, i64 0, i32 28
  %12 = tail call i64 @float64_mul(i64 %7, i64 %9, %struct.float_status* %11) nounwind
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 28
  %15 = tail call i64 @float64_add(i64 0, i64 %12, %struct.float_status* %14) nounwind
  br label %16

; <label>:16                                      ; preds = %5, %0
  %iresult.0 = phi i64 [ %15, %5 ], [ 0, %0 ]
  %17 = and i32 %mask, 32
  %18 = icmp eq i32 %17, 0
  %.pre = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  br i1 %18, label %._crit_edge, label %19

; <label>:19                                      ; preds = %16
  %20 = load i64* %.pre, align 8
  %21 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %22 = load i64* %21, align 8
  %23 = load %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State* %23, i64 0, i32 28
  %25 = tail call i64 @float64_mul(i64 %20, i64 %22, %struct.float_status* %24) nounwind
  %26 = load %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State* %26, i64 0, i32 28
  %28 = tail call i64 @float64_add(i64 %iresult.0, i64 %25, %struct.float_status* %27) nounwind
  br label %._crit_edge

._crit_edge:                                      ; preds = %19, %16
  %iresult.1 = phi i64 [ %28, %19 ], [ %iresult.0, %16 ]
  %29 = and i32 %mask, 1
  %30 = icmp ne i32 %29, 0
  %31 = select i1 %30, i64 %iresult.1, i64 0
  %32 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %31, i64* %32, align 8
  %33 = and i32 %mask, 2
  %34 = icmp ne i32 %33, 0
  %35 = select i1 %34, i64 %iresult.1, i64 0
  store i64 %35, i64* %.pre, align 8
  ret void
}

define void @helper_mpsadbw_xmm(i64 %du, i64 %su, i32 %offset) nounwind uwtable {
  %r = alloca %union.XMMReg, align 8
  %1 = bitcast %union.XMMReg* %r to i8*
  %2 = shl i32 %offset, 2
  %3 = and i32 %2, 12
  %4 = and i32 %offset, 4
  %5 = bitcast %union.XMMReg* %r to [8 x i16]*
  %6 = inttoptr i64 %du to [16 x i8]*
  %7 = zext i32 %3 to i64
  %8 = inttoptr i64 %su to [16 x i8]*
  %9 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 %7
  %10 = or i32 %3, 1
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 %11
  %13 = or i32 %3, 2
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 %14
  %16 = or i32 %3, 3
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [16 x i8]* %8, i64 0, i64 %17
  %19 = zext i32 %4 to i64
  br label %20

; <label>:20                                      ; preds = %20, %0
  %indvars.iv29 = phi i64 [ %19, %0 ], [ %indvars.iv.next30, %20 ]
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %20 ]
  %21 = getelementptr inbounds [8 x i16]* %5, i64 0, i64 %indvars.iv
  store i16 0, i16* %21, align 2
  %22 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 %indvars.iv29
  %23 = load i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = load i8* %9, align 1
  %26 = zext i8 %25 to i32
  %27 = sub nsw i32 %24, %26
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %.0.i = select i1 %28, i32 %29, i32 %27
  %30 = trunc i32 %.0.i to i16
  store i16 %30, i16* %21, align 2
  %indvars.iv.next30 = add i64 %indvars.iv29, 1
  %31 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 %indvars.iv.next30
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = load i8* %12, align 1
  %35 = zext i8 %34 to i32
  %36 = sub nsw i32 %33, %35
  %37 = icmp slt i32 %36, 0
  %38 = sub nsw i32 0, %36
  %.0.i26 = select i1 %37, i32 %38, i32 %36
  %39 = add nsw i32 %.0.i26, %.0.i
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %21, align 2
  %41 = add nsw i64 %indvars.iv29, 2
  %42 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 %41
  %43 = load i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = load i8* %15, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %44, %46
  %48 = icmp slt i32 %47, 0
  %49 = sub nsw i32 0, %47
  %.0.i25 = select i1 %48, i32 %49, i32 %47
  %50 = add nsw i32 %.0.i25, %39
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %21, align 2
  %52 = add nsw i64 %indvars.iv29, 3
  %53 = getelementptr inbounds [16 x i8]* %6, i64 0, i64 %52
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = load i8* %18, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %55, %57
  %59 = icmp slt i32 %58, 0
  %60 = sub nsw i32 0, %58
  %.0.i24 = select i1 %59, i32 %60, i32 %58
  %61 = add nsw i32 %.0.i24, %50
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %21, align 2
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 8
  br i1 %exitcond, label %63, label %20

; <label>:63                                      ; preds = %20
  %64 = inttoptr i64 %du to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %1, i64 16, i32 8, i1 false)
  ret void
}

define void @helper_pcmpgtq_xmm(i64 %du, i64 %su) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = inttoptr i64 %su to %union.XMMReg*
  %3 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 0
  %6 = load i64* %5, align 8
  %7 = icmp ugt i64 %4, %6
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64* %9, align 8
  %11 = getelementptr inbounds %union.XMMReg* %2, i64 0, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %9, align 8
  ret void
}

define void @helper_pcmpestri_xmm(i64 %du, i64 %su, i32 %ctrl) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %3 = load i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  %5 = sub nsw i32 0, %3
  %.0.i.i = select i1 %4, i32 %5, i32 %3
  %6 = and i32 %ctrl, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %15, label %8

; <label>:8                                       ; preds = %0
  %9 = icmp sgt i32 %.0.i.i, 8
  %10 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %11 = load i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %.0.i.i718 = select i1 %12, i32 %13, i32 %11
  %..0.i.i = select i1 %9, i32 8, i32 %.0.i.i
  %14 = icmp sgt i32 %.0.i.i718, 8
  br i1 %14, label %pcmp_elen.exit9, label %22

; <label>:15                                      ; preds = %0
  %16 = icmp sgt i32 %.0.i.i, 16
  %17 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %18 = load i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  %20 = sub nsw i32 0, %18
  %.0.i.i711 = select i1 %19, i32 %20, i32 %18
  %..0.i.i25 = select i1 %16, i32 16, i32 %.0.i.i
  %21 = icmp sgt i32 %.0.i.i711, 16
  br i1 %21, label %pcmp_elen.exit9, label %22

; <label>:22                                      ; preds = %15, %8
  %.0.i.i716 = phi i32 [ %.0.i.i711, %15 ], [ %.0.i.i718, %8 ]
  %.0.i12 = phi i32 [ %..0.i.i25, %15 ], [ %..0.i.i, %8 ]
  br label %pcmp_elen.exit9

pcmp_elen.exit9:                                  ; preds = %22, %15, %8
  %.0.i13 = phi i32 [ %.0.i12, %22 ], [ %..0.i.i, %8 ], [ %..0.i.i25, %15 ]
  %.0.i8 = phi i32 [ %.0.i.i716, %22 ], [ 8, %8 ], [ 16, %15 ]
  %23 = sub i32 0, %.0.i8
  %sext = shl i32 %ctrl, 24
  %24 = ashr exact i32 %sext, 24
  %25 = shl i32 %ctrl, 3
  %26 = and i32 %25, 8
  %27 = xor i32 %26, 15
  %28 = add i32 %.0.i13, -1
  %29 = add nsw i32 %.0.i8, -1
  %30 = icmp slt i32 %28, %27
  %31 = select i1 %30, i32 64, i32 0
  %32 = icmp slt i32 %29, %27
  %33 = select i1 %32, i32 128, i32 0
  %34 = or i32 %33, %31
  %35 = getelementptr inbounds %struct.CPUX86State* %1, i64 0, i32 3
  store i32 %34, i32* %35, align 4
  %36 = lshr i32 %24, 2
  %37 = and i32 %36, 3
  switch i32 %37, label %.loopexit.i [
    i32 0, label %.preheader.i
    i32 1, label %.preheader135.i
    i32 2, label %161
    i32 3, label %212
  ]

.preheader135.i:                                  ; preds = %pcmp_elen.exit9
  %38 = icmp sgt i32 %.0.i13, 0
  br i1 %38, label %.lr.ph139.i, label %.loopexit.i

.lr.ph139.i:                                      ; preds = %.preheader135.i
  %39 = and i32 %ctrl, 3
  %40 = inttoptr i64 %su to [8 x i16]*
  %41 = add nsw i32 %.0.i8, -2
  %42 = or i32 %41, 1
  %43 = icmp sgt i32 %42, -1
  %44 = inttoptr i64 %du to [8 x i16]*
  %45 = inttoptr i64 %du to [16 x i8]*
  %46 = inttoptr i64 %su to [16 x i8]*
  %47 = sext i32 %42 to i64
  %48 = sext i32 %.0.i13 to i64
  br label %99

.preheader.i:                                     ; preds = %pcmp_elen.exit9
  %49 = icmp sgt i32 %.0.i13, 0
  br i1 %49, label %.lr.ph128.i, label %.loopexit.i

.lr.ph128.i:                                      ; preds = %.preheader.i
  %50 = and i32 %ctrl, 3
  %51 = inttoptr i64 %su to [8 x i16]*
  %52 = icmp sgt i32 %.0.i8, 0
  %53 = inttoptr i64 %du to [8 x i16]*
  %54 = inttoptr i64 %du to [16 x i8]*
  %55 = inttoptr i64 %su to [16 x i8]*
  %56 = sext i32 %.0.i8 to i64
  %57 = sext i32 %.0.i13 to i64
  br label %58

; <label>:58                                      ; preds = %._crit_edge.i, %.lr.ph128.i
  %indvars.iv159.in.i = phi i64 [ %57, %.lr.ph128.i ], [ %indvars.iv159.i, %._crit_edge.i ]
  %res.0126.i = phi i32 [ 0, %.lr.ph128.i ], [ %res.1.lcssa.i, %._crit_edge.i ]
  %indvars.iv159.i = add i64 %indvars.iv159.in.i, -1
  %59 = shl i32 %res.0126.i, 1
  switch i32 %50, label %72 [
    i32 0, label %60
    i32 1, label %64
    i32 2, label %68
  ]

; <label>:60                                      ; preds = %58
  %61 = getelementptr inbounds [16 x i8]* %55, i64 0, i64 %indvars.iv159.i
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i32
  br label %pcmp_val.exit.i

; <label>:64                                      ; preds = %58
  %65 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 %indvars.iv159.i
  %66 = load i16* %65, align 2
  %67 = zext i16 %66 to i32
  br label %pcmp_val.exit.i

; <label>:68                                      ; preds = %58
  %69 = getelementptr inbounds [16 x i8]* %55, i64 0, i64 %indvars.iv159.i
  %70 = load i8* %69, align 1
  %71 = sext i8 %70 to i32
  br label %pcmp_val.exit.i

; <label>:72                                      ; preds = %58
  %73 = getelementptr inbounds [8 x i16]* %51, i64 0, i64 %indvars.iv159.i
  %74 = load i16* %73, align 2
  %75 = sext i16 %74 to i32
  br label %pcmp_val.exit.i

pcmp_val.exit.i:                                  ; preds = %72, %68, %64, %60
  %.0.i.i10 = phi i32 [ %75, %72 ], [ %71, %68 ], [ %67, %64 ], [ %63, %60 ]
  br i1 %52, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %indvars.iv.in.i = phi i64 [ %indvars.iv.i, %pcmp_val.exit111.i ], [ %56, %pcmp_val.exit.i ]
  %res.1124.i = phi i32 [ %94, %pcmp_val.exit111.i ], [ %59, %pcmp_val.exit.i ]
  %indvars.iv.i = add i64 %indvars.iv.in.i, -1
  switch i32 %50, label %88 [
    i32 0, label %76
    i32 1, label %80
    i32 2, label %84
  ]

; <label>:76                                      ; preds = %.lr.ph.i
  %77 = getelementptr inbounds [16 x i8]* %54, i64 0, i64 %indvars.iv.i
  %78 = load i8* %77, align 1
  %79 = zext i8 %78 to i32
  br label %pcmp_val.exit111.i

; <label>:80                                      ; preds = %.lr.ph.i
  %81 = getelementptr inbounds [8 x i16]* %53, i64 0, i64 %indvars.iv.i
  %82 = load i16* %81, align 2
  %83 = zext i16 %82 to i32
  br label %pcmp_val.exit111.i

; <label>:84                                      ; preds = %.lr.ph.i
  %85 = getelementptr inbounds [16 x i8]* %54, i64 0, i64 %indvars.iv.i
  %86 = load i8* %85, align 1
  %87 = sext i8 %86 to i32
  br label %pcmp_val.exit111.i

; <label>:88                                      ; preds = %.lr.ph.i
  %89 = getelementptr inbounds [8 x i16]* %53, i64 0, i64 %indvars.iv.i
  %90 = load i16* %89, align 2
  %91 = sext i16 %90 to i32
  br label %pcmp_val.exit111.i

pcmp_val.exit111.i:                               ; preds = %88, %84, %80, %76
  %.0.i110.i = phi i32 [ %91, %88 ], [ %87, %84 ], [ %83, %80 ], [ %79, %76 ]
  %92 = icmp eq i32 %.0.i.i10, %.0.i110.i
  %93 = zext i1 %92 to i32
  %94 = or i32 %93, %res.1124.i
  %95 = trunc i64 %indvars.iv.i to i32
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %.lr.ph.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %res.1.lcssa.i = phi i32 [ %59, %pcmp_val.exit.i ], [ %94, %pcmp_val.exit111.i ]
  %97 = trunc i64 %indvars.iv159.i to i32
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %58, label %.loopexit.i

; <label>:99                                      ; preds = %._crit_edge133.i, %.lr.ph139.i
  %indvars.iv164.in.i = phi i64 [ %48, %.lr.ph139.i ], [ %indvars.iv164.i, %._crit_edge133.i ]
  %res.2137.i = phi i32 [ 0, %.lr.ph139.i ], [ %res.3.lcssa.i, %._crit_edge133.i ]
  %indvars.iv164.i = add i64 %indvars.iv164.in.i, -1
  %100 = shl i32 %res.2137.i, 1
  switch i32 %39, label %113 [
    i32 0, label %101
    i32 1, label %105
    i32 2, label %109
  ]

; <label>:101                                     ; preds = %99
  %102 = getelementptr inbounds [16 x i8]* %46, i64 0, i64 %indvars.iv164.i
  %103 = load i8* %102, align 1
  %104 = zext i8 %103 to i32
  br label %pcmp_val.exit109.i

; <label>:105                                     ; preds = %99
  %106 = getelementptr inbounds [8 x i16]* %40, i64 0, i64 %indvars.iv164.i
  %107 = load i16* %106, align 2
  %108 = zext i16 %107 to i32
  br label %pcmp_val.exit109.i

; <label>:109                                     ; preds = %99
  %110 = getelementptr inbounds [16 x i8]* %46, i64 0, i64 %indvars.iv164.i
  %111 = load i8* %110, align 1
  %112 = sext i8 %111 to i32
  br label %pcmp_val.exit109.i

; <label>:113                                     ; preds = %99
  %114 = getelementptr inbounds [8 x i16]* %40, i64 0, i64 %indvars.iv164.i
  %115 = load i16* %114, align 2
  %116 = sext i16 %115 to i32
  br label %pcmp_val.exit109.i

pcmp_val.exit109.i:                               ; preds = %113, %109, %105, %101
  %.0.i108.i = phi i32 [ %116, %113 ], [ %112, %109 ], [ %108, %105 ], [ %104, %101 ]
  br i1 %43, label %.lr.ph132.i, label %._crit_edge133.i

.lr.ph132.i:                                      ; preds = %153, %pcmp_val.exit109.i
  %indvars.iv162.i = phi i64 [ %indvars.iv.next163.i, %153 ], [ %47, %pcmp_val.exit109.i ]
  %res.3130.i = phi i32 [ %156, %153 ], [ %100, %pcmp_val.exit109.i ]
  switch i32 %39, label %129 [
    i32 0, label %117
    i32 1, label %121
    i32 2, label %125
  ]

; <label>:117                                     ; preds = %.lr.ph132.i
  %118 = getelementptr inbounds [16 x i8]* %45, i64 0, i64 %indvars.iv162.i
  %119 = load i8* %118, align 1
  %120 = zext i8 %119 to i32
  br label %pcmp_val.exit107.i

; <label>:121                                     ; preds = %.lr.ph132.i
  %122 = getelementptr inbounds [8 x i16]* %44, i64 0, i64 %indvars.iv162.i
  %123 = load i16* %122, align 2
  %124 = zext i16 %123 to i32
  br label %pcmp_val.exit107.i

; <label>:125                                     ; preds = %.lr.ph132.i
  %126 = getelementptr inbounds [16 x i8]* %45, i64 0, i64 %indvars.iv162.i
  %127 = load i8* %126, align 1
  %128 = sext i8 %127 to i32
  br label %pcmp_val.exit107.i

; <label>:129                                     ; preds = %.lr.ph132.i
  %130 = getelementptr inbounds [8 x i16]* %44, i64 0, i64 %indvars.iv162.i
  %131 = load i16* %130, align 2
  %132 = sext i16 %131 to i32
  br label %pcmp_val.exit107.i

pcmp_val.exit107.i:                               ; preds = %129, %125, %121, %117
  %.0.i106.i = phi i32 [ %132, %129 ], [ %128, %125 ], [ %124, %121 ], [ %120, %117 ]
  %133 = icmp sgt i32 %.0.i106.i, %.0.i108.i
  br i1 %133, label %153, label %134

; <label>:134                                     ; preds = %pcmp_val.exit107.i
  %135 = add nsw i64 %indvars.iv162.i, -1
  switch i32 %39, label %148 [
    i32 0, label %136
    i32 1, label %140
    i32 2, label %144
  ]

; <label>:136                                     ; preds = %134
  %137 = getelementptr inbounds [16 x i8]* %45, i64 0, i64 %135
  %138 = load i8* %137, align 1
  %139 = zext i8 %138 to i32
  br label %pcmp_val.exit105.i

; <label>:140                                     ; preds = %134
  %141 = getelementptr inbounds [8 x i16]* %44, i64 0, i64 %135
  %142 = load i16* %141, align 2
  %143 = zext i16 %142 to i32
  br label %pcmp_val.exit105.i

; <label>:144                                     ; preds = %134
  %145 = getelementptr inbounds [16 x i8]* %45, i64 0, i64 %135
  %146 = load i8* %145, align 1
  %147 = sext i8 %146 to i32
  br label %pcmp_val.exit105.i

; <label>:148                                     ; preds = %134
  %149 = getelementptr inbounds [8 x i16]* %44, i64 0, i64 %135
  %150 = load i16* %149, align 2
  %151 = sext i16 %150 to i32
  br label %pcmp_val.exit105.i

pcmp_val.exit105.i:                               ; preds = %148, %144, %140, %136
  %.0.i104.i = phi i32 [ %151, %148 ], [ %147, %144 ], [ %143, %140 ], [ %139, %136 ]
  %152 = icmp sge i32 %.0.i104.i, %.0.i108.i
  br label %153

; <label>:153                                     ; preds = %pcmp_val.exit105.i, %pcmp_val.exit107.i
  %154 = phi i1 [ false, %pcmp_val.exit107.i ], [ %152, %pcmp_val.exit105.i ]
  %155 = zext i1 %154 to i32
  %156 = or i32 %155, %res.3130.i
  %indvars.iv.next163.i = add i64 %indvars.iv162.i, -2
  %157 = trunc i64 %indvars.iv.next163.i to i32
  %158 = icmp sgt i32 %157, -1
  br i1 %158, label %.lr.ph132.i, label %._crit_edge133.i

._crit_edge133.i:                                 ; preds = %153, %pcmp_val.exit109.i
  %res.3.lcssa.i = phi i32 [ %100, %pcmp_val.exit109.i ], [ %156, %153 ]
  %159 = trunc i64 %indvars.iv164.i to i32
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %99, label %.loopexit.i

; <label>:161                                     ; preds = %pcmp_elen.exit9
  %162 = icmp sgt i32 %28, %29
  %163 = select i1 %162, i32 %28, i32 %29
  %164 = sub nsw i32 %27, %163
  %165 = shl i32 2, %164
  %166 = add nsw i32 %165, -1
  %167 = icmp slt i32 %28, %29
  %168 = select i1 %167, i32 %28, i32 %29
  %169 = sub nsw i32 %163, %168
  %170 = shl i32 %166, %169
  %171 = icmp sgt i32 %168, -1
  br i1 %171, label %.lr.ph145.i, label %.loopexit.i

.lr.ph145.i:                                      ; preds = %161
  %172 = and i32 %ctrl, 3
  %173 = inttoptr i64 %su to [8 x i16]*
  %174 = inttoptr i64 %du to [8 x i16]*
  %175 = inttoptr i64 %su to [16 x i8]*
  %176 = inttoptr i64 %du to [16 x i8]*
  %177 = sub i32 0, %.0.i13
  %178 = icmp sgt i32 %23, %177
  %smax.i = select i1 %178, i32 %23, i32 %177
  %179 = xor i32 %smax.i, -1
  %180 = sext i32 %179 to i64
  br label %181

; <label>:181                                     ; preds = %pcmp_val.exit101.i, %.lr.ph145.i
  %indvars.iv167.i = phi i64 [ %180, %.lr.ph145.i ], [ %indvars.iv.next168.i, %pcmp_val.exit101.i ]
  %res.4142.i = phi i32 [ %170, %.lr.ph145.i ], [ %209, %pcmp_val.exit101.i ]
  %182 = shl i32 %res.4142.i, 1
  switch i32 %172, label %pcmp_val.exit103.i [
    i32 0, label %pcmp_val.exit103.thread.i
    i32 1, label %pcmp_val.exit103.thread114.i
    i32 2, label %pcmp_val.exit103.thread116.i
  ]

pcmp_val.exit103.thread.i:                        ; preds = %181
  %183 = getelementptr inbounds [16 x i8]* %175, i64 0, i64 %indvars.iv167.i
  %184 = load i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = getelementptr inbounds [16 x i8]* %176, i64 0, i64 %indvars.iv167.i
  %187 = load i8* %186, align 1
  %188 = zext i8 %187 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread114.i:                     ; preds = %181
  %189 = getelementptr inbounds [8 x i16]* %173, i64 0, i64 %indvars.iv167.i
  %190 = load i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = getelementptr inbounds [8 x i16]* %174, i64 0, i64 %indvars.iv167.i
  %193 = load i16* %192, align 2
  %194 = zext i16 %193 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread116.i:                     ; preds = %181
  %195 = getelementptr inbounds [16 x i8]* %175, i64 0, i64 %indvars.iv167.i
  %196 = load i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = getelementptr inbounds [16 x i8]* %176, i64 0, i64 %indvars.iv167.i
  %199 = load i8* %198, align 1
  %200 = sext i8 %199 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.i:                               ; preds = %181
  %201 = getelementptr inbounds [8 x i16]* %173, i64 0, i64 %indvars.iv167.i
  %202 = load i16* %201, align 2
  %203 = sext i16 %202 to i32
  %204 = getelementptr inbounds [8 x i16]* %174, i64 0, i64 %indvars.iv167.i
  %205 = load i16* %204, align 2
  %206 = sext i16 %205 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit101.i:                               ; preds = %pcmp_val.exit103.i, %pcmp_val.exit103.thread116.i, %pcmp_val.exit103.thread114.i, %pcmp_val.exit103.thread.i
  %.0.i102112.i = phi i32 [ %203, %pcmp_val.exit103.i ], [ %197, %pcmp_val.exit103.thread116.i ], [ %191, %pcmp_val.exit103.thread114.i ], [ %185, %pcmp_val.exit103.thread.i ]
  %.0.i100.i = phi i32 [ %206, %pcmp_val.exit103.i ], [ %200, %pcmp_val.exit103.thread116.i ], [ %194, %pcmp_val.exit103.thread114.i ], [ %188, %pcmp_val.exit103.thread.i ]
  %207 = icmp eq i32 %.0.i102112.i, %.0.i100.i
  %208 = zext i1 %207 to i32
  %209 = or i32 %208, %182
  %210 = trunc i64 %indvars.iv167.i to i32
  %211 = icmp sgt i32 %210, 0
  %indvars.iv.next168.i = add i64 %indvars.iv167.i, -1
  br i1 %211, label %181, label %.loopexit.i

; <label>:212                                     ; preds = %pcmp_elen.exit9
  %213 = sub nsw i32 %28, %29
  %214 = icmp sgt i32 %213, -1
  br i1 %214, label %.lr.ph157.i, label %.loopexit.i

.lr.ph157.i:                                      ; preds = %212
  %215 = and i32 %ctrl, 3
  %216 = inttoptr i64 %su to [8 x i16]*
  %217 = inttoptr i64 %du to [8 x i16]*
  %218 = inttoptr i64 %su to [16 x i8]*
  %219 = inttoptr i64 %du to [16 x i8]*
  %220 = sub i32 %28, %27
  %221 = sub i32 %220, %.0.i8
  %222 = sub i32 %.0.i13, %.0.i8
  %223 = sext i32 %222 to i64
  br label %224

; <label>:224                                     ; preds = %._crit_edge151.i, %.lr.ph157.i
  %indvars.iv175.i = phi i64 [ %223, %.lr.ph157.i ], [ %indvars.iv.next176.i, %._crit_edge151.i ]
  %indvars.iv170.i = phi i32 [ %221, %.lr.ph157.i ], [ %indvars.iv.next171.i, %._crit_edge151.i ]
  %res.5154.i = phi i32 [ 0, %.lr.ph157.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %225 = shl i32 %res.5154.i, 1
  %226 = or i32 %225, 1
  %227 = trunc i64 %indvars.iv175.i to i32
  %228 = sub nsw i32 %27, %227
  %229 = icmp slt i32 %228, %29
  %..i = select i1 %229, i32 %228, i32 %29
  %230 = icmp sgt i32 %..i, -1
  br i1 %230, label %.lr.ph150.i, label %._crit_edge151.i

.lr.ph150.i:                                      ; preds = %224
  %231 = icmp sgt i32 %indvars.iv170.i, %23
  %smax172.i = select i1 %231, i32 %indvars.iv170.i, i32 %23
  %232 = xor i32 %smax172.i, -1
  %233 = sext i32 %232 to i64
  br label %234

; <label>:234                                     ; preds = %pcmp_val.exit97.i, %.lr.ph150.i
  %indvars.iv173.i = phi i64 [ %233, %.lr.ph150.i ], [ %indvars.iv.next174.i, %pcmp_val.exit97.i ]
  %res.6147.i = phi i32 [ %226, %.lr.ph150.i ], [ %262, %pcmp_val.exit97.i ]
  %235 = add nsw i64 %indvars.iv173.i, %indvars.iv175.i
  switch i32 %215, label %pcmp_val.exit99.i [
    i32 0, label %pcmp_val.exit99.thread.i
    i32 1, label %pcmp_val.exit99.thread120.i
    i32 2, label %pcmp_val.exit99.thread122.i
  ]

pcmp_val.exit99.thread.i:                         ; preds = %234
  %236 = getelementptr inbounds [16 x i8]* %218, i64 0, i64 %235
  %237 = load i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = getelementptr inbounds [16 x i8]* %219, i64 0, i64 %indvars.iv173.i
  %240 = load i8* %239, align 1
  %241 = zext i8 %240 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread120.i:                      ; preds = %234
  %242 = getelementptr inbounds [8 x i16]* %216, i64 0, i64 %235
  %243 = load i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = getelementptr inbounds [8 x i16]* %217, i64 0, i64 %indvars.iv173.i
  %246 = load i16* %245, align 2
  %247 = zext i16 %246 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread122.i:                      ; preds = %234
  %248 = getelementptr inbounds [16 x i8]* %218, i64 0, i64 %235
  %249 = load i8* %248, align 1
  %250 = sext i8 %249 to i32
  %251 = getelementptr inbounds [16 x i8]* %219, i64 0, i64 %indvars.iv173.i
  %252 = load i8* %251, align 1
  %253 = sext i8 %252 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.i:                                ; preds = %234
  %254 = getelementptr inbounds [8 x i16]* %216, i64 0, i64 %235
  %255 = load i16* %254, align 2
  %256 = sext i16 %255 to i32
  %257 = getelementptr inbounds [8 x i16]* %217, i64 0, i64 %indvars.iv173.i
  %258 = load i16* %257, align 2
  %259 = sext i16 %258 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit97.i:                                ; preds = %pcmp_val.exit99.i, %pcmp_val.exit99.thread122.i, %pcmp_val.exit99.thread120.i, %pcmp_val.exit99.thread.i
  %.0.i98118.i = phi i32 [ %256, %pcmp_val.exit99.i ], [ %250, %pcmp_val.exit99.thread122.i ], [ %244, %pcmp_val.exit99.thread120.i ], [ %238, %pcmp_val.exit99.thread.i ]
  %.0.i96.i = phi i32 [ %259, %pcmp_val.exit99.i ], [ %253, %pcmp_val.exit99.thread122.i ], [ %247, %pcmp_val.exit99.thread120.i ], [ %241, %pcmp_val.exit99.thread.i ]
  %260 = icmp eq i32 %.0.i98118.i, %.0.i96.i
  %261 = zext i1 %260 to i32
  %262 = and i32 %261, %res.6147.i
  %263 = trunc i64 %indvars.iv173.i to i32
  %264 = icmp sgt i32 %263, 0
  %indvars.iv.next174.i = add i64 %indvars.iv173.i, -1
  br i1 %264, label %234, label %._crit_edge151.i

._crit_edge151.i:                                 ; preds = %pcmp_val.exit97.i, %224
  %res.6.lcssa.i = phi i32 [ %226, %224 ], [ %262, %pcmp_val.exit97.i ]
  %indvars.iv.next176.i = add i64 %indvars.iv175.i, -1
  %265 = icmp sgt i32 %227, 0
  %indvars.iv.next171.i = add i32 %indvars.iv170.i, -1
  br i1 %265, label %224, label %.loopexit.i

.loopexit.i:                                      ; preds = %._crit_edge151.i, %212, %pcmp_val.exit101.i, %161, %._crit_edge133.i, %._crit_edge.i, %.preheader.i, %.preheader135.i, %pcmp_elen.exit9
  %res.7.i = phi i32 [ 0, %pcmp_elen.exit9 ], [ 0, %.preheader.i ], [ 0, %.preheader135.i ], [ %170, %161 ], [ 0, %212 ], [ %res.1.lcssa.i, %._crit_edge.i ], [ %res.3.lcssa.i, %._crit_edge133.i ], [ %209, %pcmp_val.exit101.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %266 = lshr i32 %24, 4
  %267 = and i32 %266, 3
  switch i32 %267, label %276 [
    i32 1, label %268
    i32 3, label %272
  ]

; <label>:268                                     ; preds = %.loopexit.i
  %269 = shl i32 2, %27
  %270 = add nsw i32 %269, -1
  %271 = xor i32 %res.7.i, %270
  br label %276

; <label>:272                                     ; preds = %.loopexit.i
  %273 = shl i32 2, %28
  %274 = add nsw i32 %273, -1
  %275 = xor i32 %res.7.i, %274
  br label %276

; <label>:276                                     ; preds = %272, %268, %.loopexit.i
  %res.8.i = phi i32 [ %res.7.i, %.loopexit.i ], [ %275, %272 ], [ %271, %268 ]
  %277 = icmp eq i32 %res.8.i, 0
  br i1 %277, label %pcmpxstrx.exit, label %278

; <label>:278                                     ; preds = %276
  %279 = load %struct.CPUX86State** @env, align 8
  %280 = getelementptr inbounds %struct.CPUX86State* %279, i64 0, i32 3
  %281 = load i32* %280, align 4
  %282 = or i32 %281, 1
  store i32 %282, i32* %280, align 4
  %283 = and i32 %res.8.i, 1
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %290, label %285

; <label>:285                                     ; preds = %278
  %286 = load %struct.CPUX86State** @env, align 8
  %287 = getelementptr inbounds %struct.CPUX86State* %286, i64 0, i32 3
  %288 = load i32* %287, align 4
  %289 = or i32 %288, 2048
  store i32 %289, i32* %287, align 4
  br label %290

; <label>:290                                     ; preds = %285, %278
  %291 = and i32 %ctrl, 64
  %292 = icmp ne i32 %291, 0
  %293 = select i1 %292, i32 (i32)* @rffs1, i32 (i32)* @ffs1
  %294 = tail call i32 %293(i32 %res.8.i) nounwind
  %295 = add nsw i32 %294, -1
  %296 = load %struct.CPUX86State** @env, align 8
  %297 = getelementptr inbounds %struct.CPUX86State* %296, i64 0, i32 0, i64 1
  store i32 %295, i32* %297, align 4
  br label %301

pcmpxstrx.exit:                                   ; preds = %276
  %298 = lshr i32 16, %6
  %299 = load %struct.CPUX86State** @env, align 8
  %300 = getelementptr inbounds %struct.CPUX86State* %299, i64 0, i32 0, i64 1
  store i32 %298, i32* %300, align 4
  br label %301

; <label>:301                                     ; preds = %pcmpxstrx.exit, %290
  ret void
}

define internal i32 @rffs1(i32 %val) nounwind uwtable readnone inlinehint alwaysinline {
  %1 = lshr i32 %val, 16
  %2 = icmp eq i32 %1, 0
  %.0. = select i1 %2, i32 %val, i32 %1
  %ret.0.10 = select i1 %2, i32 1, i32 17
  %3 = lshr i32 %.0., 8
  %4 = icmp eq i32 %3, 0
  %.0..1 = select i1 %4, i32 %.0., i32 %3
  %5 = select i1 %4, i32 0, i32 8
  %ret.0..1 = or i32 %5, %ret.0.10
  %6 = lshr i32 %.0..1, 4
  %7 = icmp eq i32 %6, 0
  %.0..2 = select i1 %7, i32 %.0..1, i32 %6
  %8 = select i1 %7, i32 0, i32 4
  %ret.0..2 = or i32 %8, %ret.0..1
  %9 = lshr i32 %.0..2, 2
  %10 = icmp eq i32 %9, 0
  %.0..3 = select i1 %10, i32 %.0..2, i32 %9
  %11 = select i1 %10, i32 0, i32 2
  %ret.0..3 = or i32 %11, %ret.0..2
  %not. = icmp ugt i32 %.0..3, 1
  %12 = zext i1 %not. to i32
  %ret.0..4 = add nsw i32 %12, %ret.0..3
  ret i32 %ret.0..4
}

define internal i32 @ffs1(i32 %val) nounwind uwtable readnone inlinehint alwaysinline {
  %1 = shl i32 %val, 16
  %2 = icmp eq i32 %1, 0
  %.0. = select i1 %2, i32 %val, i32 %1
  %ret.0.10 = select i1 %2, i32 1, i32 17
  %3 = shl i32 %.0., 8
  %4 = icmp eq i32 %3, 0
  %.0..1 = select i1 %4, i32 %.0., i32 %3
  %5 = select i1 %4, i32 0, i32 8
  %ret.0..1 = or i32 %5, %ret.0.10
  %6 = shl i32 %.0..1, 4
  %7 = icmp eq i32 %6, 0
  %.0..2 = select i1 %7, i32 %.0..1, i32 %6
  %8 = select i1 %7, i32 0, i32 4
  %ret.0..2 = or i32 %8, %ret.0..1
  %9 = shl i32 %.0..2, 2
  %10 = icmp eq i32 %9, 0
  %.0..3 = select i1 %10, i32 %.0..2, i32 %9
  %11 = select i1 %10, i32 0, i32 2
  %ret.0..3 = or i32 %11, %ret.0..2
  %.mask = and i32 %.0..3, 2147483647
  %not. = icmp ne i32 %.mask, 0
  %12 = zext i1 %not. to i32
  %ret.0..4 = add nsw i32 %12, %ret.0..3
  ret i32 %ret.0..4
}

define void @helper_pcmpestrm_xmm(i64 %du, i64 %su, i32 %ctrl) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = load %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %4 = load i32* %3, align 4
  %5 = icmp slt i32 %4, 0
  %6 = sub nsw i32 0, %4
  %.0.i.i = select i1 %5, i32 %6, i32 %4
  %7 = and i32 %ctrl, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %16, label %9

; <label>:9                                       ; preds = %0
  %10 = icmp sgt i32 %.0.i.i, 8
  %11 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %12 = load i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  %14 = sub nsw i32 0, %12
  %.0.i.i2232 = select i1 %13, i32 %14, i32 %12
  %..0.i.i = select i1 %10, i32 8, i32 %.0.i.i
  %15 = icmp sgt i32 %.0.i.i2232, 8
  br i1 %15, label %pcmp_elen.exit24, label %23

; <label>:16                                      ; preds = %0
  %17 = icmp sgt i32 %.0.i.i, 16
  %18 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %19 = load i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %.0.i.i2225 = select i1 %20, i32 %21, i32 %19
  %..0.i.i39 = select i1 %17, i32 16, i32 %.0.i.i
  %22 = icmp sgt i32 %.0.i.i2225, 16
  br i1 %22, label %pcmp_elen.exit24, label %23

; <label>:23                                      ; preds = %16, %9
  %.0.i.i2230 = phi i32 [ %.0.i.i2225, %16 ], [ %.0.i.i2232, %9 ]
  %.0.i26 = phi i32 [ %..0.i.i39, %16 ], [ %..0.i.i, %9 ]
  br label %pcmp_elen.exit24

pcmp_elen.exit24:                                 ; preds = %23, %16, %9
  %.0.i27 = phi i32 [ %.0.i26, %23 ], [ %..0.i.i, %9 ], [ %..0.i.i39, %16 ]
  %.0.i23 = phi i32 [ %.0.i.i2230, %23 ], [ 8, %9 ], [ 16, %16 ]
  %24 = sub i32 0, %.0.i23
  %sext40 = shl i32 %ctrl, 24
  %25 = ashr exact i32 %sext40, 24
  %26 = shl i32 %ctrl, 3
  %27 = and i32 %26, 8
  %28 = xor i32 %27, 15
  %29 = add i32 %.0.i27, -1
  %30 = add nsw i32 %.0.i23, -1
  %31 = icmp slt i32 %29, %28
  %32 = select i1 %31, i32 64, i32 0
  %33 = icmp slt i32 %30, %28
  %34 = select i1 %33, i32 128, i32 0
  %35 = or i32 %34, %32
  %36 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 3
  store i32 %35, i32* %36, align 4
  %37 = lshr i32 %25, 2
  %38 = and i32 %37, 3
  switch i32 %38, label %.loopexit.i [
    i32 0, label %.preheader.i
    i32 1, label %.preheader135.i
    i32 2, label %162
    i32 3, label %213
  ]

.preheader135.i:                                  ; preds = %pcmp_elen.exit24
  %39 = icmp sgt i32 %.0.i27, 0
  br i1 %39, label %.lr.ph139.i, label %.loopexit.i

.lr.ph139.i:                                      ; preds = %.preheader135.i
  %40 = and i32 %ctrl, 3
  %41 = inttoptr i64 %su to [8 x i16]*
  %42 = add nsw i32 %.0.i23, -2
  %43 = or i32 %42, 1
  %44 = icmp sgt i32 %43, -1
  %45 = inttoptr i64 %du to [8 x i16]*
  %46 = inttoptr i64 %du to [16 x i8]*
  %47 = inttoptr i64 %su to [16 x i8]*
  %48 = sext i32 %43 to i64
  %49 = sext i32 %.0.i27 to i64
  br label %100

.preheader.i:                                     ; preds = %pcmp_elen.exit24
  %50 = icmp sgt i32 %.0.i27, 0
  br i1 %50, label %.lr.ph128.i, label %.loopexit.i

.lr.ph128.i:                                      ; preds = %.preheader.i
  %51 = and i32 %ctrl, 3
  %52 = inttoptr i64 %su to [8 x i16]*
  %53 = icmp sgt i32 %.0.i23, 0
  %54 = inttoptr i64 %du to [8 x i16]*
  %55 = inttoptr i64 %du to [16 x i8]*
  %56 = inttoptr i64 %su to [16 x i8]*
  %57 = sext i32 %.0.i23 to i64
  %58 = sext i32 %.0.i27 to i64
  br label %59

; <label>:59                                      ; preds = %._crit_edge.i, %.lr.ph128.i
  %indvars.iv159.in.i = phi i64 [ %58, %.lr.ph128.i ], [ %indvars.iv159.i, %._crit_edge.i ]
  %res.0126.i = phi i32 [ 0, %.lr.ph128.i ], [ %res.1.lcssa.i, %._crit_edge.i ]
  %indvars.iv159.i = add i64 %indvars.iv159.in.i, -1
  %60 = shl i32 %res.0126.i, 1
  switch i32 %51, label %73 [
    i32 0, label %61
    i32 1, label %65
    i32 2, label %69
  ]

; <label>:61                                      ; preds = %59
  %62 = getelementptr inbounds [16 x i8]* %56, i64 0, i64 %indvars.iv159.i
  %63 = load i8* %62, align 1
  %64 = zext i8 %63 to i32
  br label %pcmp_val.exit.i

; <label>:65                                      ; preds = %59
  %66 = getelementptr inbounds [8 x i16]* %52, i64 0, i64 %indvars.iv159.i
  %67 = load i16* %66, align 2
  %68 = zext i16 %67 to i32
  br label %pcmp_val.exit.i

; <label>:69                                      ; preds = %59
  %70 = getelementptr inbounds [16 x i8]* %56, i64 0, i64 %indvars.iv159.i
  %71 = load i8* %70, align 1
  %72 = sext i8 %71 to i32
  br label %pcmp_val.exit.i

; <label>:73                                      ; preds = %59
  %74 = getelementptr inbounds [8 x i16]* %52, i64 0, i64 %indvars.iv159.i
  %75 = load i16* %74, align 2
  %76 = sext i16 %75 to i32
  br label %pcmp_val.exit.i

pcmp_val.exit.i:                                  ; preds = %73, %69, %65, %61
  %.0.i.i21 = phi i32 [ %76, %73 ], [ %72, %69 ], [ %68, %65 ], [ %64, %61 ]
  br i1 %53, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %indvars.iv.in.i = phi i64 [ %indvars.iv.i, %pcmp_val.exit111.i ], [ %57, %pcmp_val.exit.i ]
  %res.1124.i = phi i32 [ %95, %pcmp_val.exit111.i ], [ %60, %pcmp_val.exit.i ]
  %indvars.iv.i = add i64 %indvars.iv.in.i, -1
  switch i32 %51, label %89 [
    i32 0, label %77
    i32 1, label %81
    i32 2, label %85
  ]

; <label>:77                                      ; preds = %.lr.ph.i
  %78 = getelementptr inbounds [16 x i8]* %55, i64 0, i64 %indvars.iv.i
  %79 = load i8* %78, align 1
  %80 = zext i8 %79 to i32
  br label %pcmp_val.exit111.i

; <label>:81                                      ; preds = %.lr.ph.i
  %82 = getelementptr inbounds [8 x i16]* %54, i64 0, i64 %indvars.iv.i
  %83 = load i16* %82, align 2
  %84 = zext i16 %83 to i32
  br label %pcmp_val.exit111.i

; <label>:85                                      ; preds = %.lr.ph.i
  %86 = getelementptr inbounds [16 x i8]* %55, i64 0, i64 %indvars.iv.i
  %87 = load i8* %86, align 1
  %88 = sext i8 %87 to i32
  br label %pcmp_val.exit111.i

; <label>:89                                      ; preds = %.lr.ph.i
  %90 = getelementptr inbounds [8 x i16]* %54, i64 0, i64 %indvars.iv.i
  %91 = load i16* %90, align 2
  %92 = sext i16 %91 to i32
  br label %pcmp_val.exit111.i

pcmp_val.exit111.i:                               ; preds = %89, %85, %81, %77
  %.0.i110.i = phi i32 [ %92, %89 ], [ %88, %85 ], [ %84, %81 ], [ %80, %77 ]
  %93 = icmp eq i32 %.0.i.i21, %.0.i110.i
  %94 = zext i1 %93 to i32
  %95 = or i32 %94, %res.1124.i
  %96 = trunc i64 %indvars.iv.i to i32
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %.lr.ph.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %res.1.lcssa.i = phi i32 [ %60, %pcmp_val.exit.i ], [ %95, %pcmp_val.exit111.i ]
  %98 = trunc i64 %indvars.iv159.i to i32
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %59, label %.loopexit.i

; <label>:100                                     ; preds = %._crit_edge133.i, %.lr.ph139.i
  %indvars.iv164.in.i = phi i64 [ %49, %.lr.ph139.i ], [ %indvars.iv164.i, %._crit_edge133.i ]
  %res.2137.i = phi i32 [ 0, %.lr.ph139.i ], [ %res.3.lcssa.i, %._crit_edge133.i ]
  %indvars.iv164.i = add i64 %indvars.iv164.in.i, -1
  %101 = shl i32 %res.2137.i, 1
  switch i32 %40, label %114 [
    i32 0, label %102
    i32 1, label %106
    i32 2, label %110
  ]

; <label>:102                                     ; preds = %100
  %103 = getelementptr inbounds [16 x i8]* %47, i64 0, i64 %indvars.iv164.i
  %104 = load i8* %103, align 1
  %105 = zext i8 %104 to i32
  br label %pcmp_val.exit109.i

; <label>:106                                     ; preds = %100
  %107 = getelementptr inbounds [8 x i16]* %41, i64 0, i64 %indvars.iv164.i
  %108 = load i16* %107, align 2
  %109 = zext i16 %108 to i32
  br label %pcmp_val.exit109.i

; <label>:110                                     ; preds = %100
  %111 = getelementptr inbounds [16 x i8]* %47, i64 0, i64 %indvars.iv164.i
  %112 = load i8* %111, align 1
  %113 = sext i8 %112 to i32
  br label %pcmp_val.exit109.i

; <label>:114                                     ; preds = %100
  %115 = getelementptr inbounds [8 x i16]* %41, i64 0, i64 %indvars.iv164.i
  %116 = load i16* %115, align 2
  %117 = sext i16 %116 to i32
  br label %pcmp_val.exit109.i

pcmp_val.exit109.i:                               ; preds = %114, %110, %106, %102
  %.0.i108.i = phi i32 [ %117, %114 ], [ %113, %110 ], [ %109, %106 ], [ %105, %102 ]
  br i1 %44, label %.lr.ph132.i, label %._crit_edge133.i

.lr.ph132.i:                                      ; preds = %154, %pcmp_val.exit109.i
  %indvars.iv162.i = phi i64 [ %indvars.iv.next163.i, %154 ], [ %48, %pcmp_val.exit109.i ]
  %res.3130.i = phi i32 [ %157, %154 ], [ %101, %pcmp_val.exit109.i ]
  switch i32 %40, label %130 [
    i32 0, label %118
    i32 1, label %122
    i32 2, label %126
  ]

; <label>:118                                     ; preds = %.lr.ph132.i
  %119 = getelementptr inbounds [16 x i8]* %46, i64 0, i64 %indvars.iv162.i
  %120 = load i8* %119, align 1
  %121 = zext i8 %120 to i32
  br label %pcmp_val.exit107.i

; <label>:122                                     ; preds = %.lr.ph132.i
  %123 = getelementptr inbounds [8 x i16]* %45, i64 0, i64 %indvars.iv162.i
  %124 = load i16* %123, align 2
  %125 = zext i16 %124 to i32
  br label %pcmp_val.exit107.i

; <label>:126                                     ; preds = %.lr.ph132.i
  %127 = getelementptr inbounds [16 x i8]* %46, i64 0, i64 %indvars.iv162.i
  %128 = load i8* %127, align 1
  %129 = sext i8 %128 to i32
  br label %pcmp_val.exit107.i

; <label>:130                                     ; preds = %.lr.ph132.i
  %131 = getelementptr inbounds [8 x i16]* %45, i64 0, i64 %indvars.iv162.i
  %132 = load i16* %131, align 2
  %133 = sext i16 %132 to i32
  br label %pcmp_val.exit107.i

pcmp_val.exit107.i:                               ; preds = %130, %126, %122, %118
  %.0.i106.i = phi i32 [ %133, %130 ], [ %129, %126 ], [ %125, %122 ], [ %121, %118 ]
  %134 = icmp sgt i32 %.0.i106.i, %.0.i108.i
  br i1 %134, label %154, label %135

; <label>:135                                     ; preds = %pcmp_val.exit107.i
  %136 = add nsw i64 %indvars.iv162.i, -1
  switch i32 %40, label %149 [
    i32 0, label %137
    i32 1, label %141
    i32 2, label %145
  ]

; <label>:137                                     ; preds = %135
  %138 = getelementptr inbounds [16 x i8]* %46, i64 0, i64 %136
  %139 = load i8* %138, align 1
  %140 = zext i8 %139 to i32
  br label %pcmp_val.exit105.i

; <label>:141                                     ; preds = %135
  %142 = getelementptr inbounds [8 x i16]* %45, i64 0, i64 %136
  %143 = load i16* %142, align 2
  %144 = zext i16 %143 to i32
  br label %pcmp_val.exit105.i

; <label>:145                                     ; preds = %135
  %146 = getelementptr inbounds [16 x i8]* %46, i64 0, i64 %136
  %147 = load i8* %146, align 1
  %148 = sext i8 %147 to i32
  br label %pcmp_val.exit105.i

; <label>:149                                     ; preds = %135
  %150 = getelementptr inbounds [8 x i16]* %45, i64 0, i64 %136
  %151 = load i16* %150, align 2
  %152 = sext i16 %151 to i32
  br label %pcmp_val.exit105.i

pcmp_val.exit105.i:                               ; preds = %149, %145, %141, %137
  %.0.i104.i = phi i32 [ %152, %149 ], [ %148, %145 ], [ %144, %141 ], [ %140, %137 ]
  %153 = icmp sge i32 %.0.i104.i, %.0.i108.i
  br label %154

; <label>:154                                     ; preds = %pcmp_val.exit105.i, %pcmp_val.exit107.i
  %155 = phi i1 [ false, %pcmp_val.exit107.i ], [ %153, %pcmp_val.exit105.i ]
  %156 = zext i1 %155 to i32
  %157 = or i32 %156, %res.3130.i
  %indvars.iv.next163.i = add i64 %indvars.iv162.i, -2
  %158 = trunc i64 %indvars.iv.next163.i to i32
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %.lr.ph132.i, label %._crit_edge133.i

._crit_edge133.i:                                 ; preds = %154, %pcmp_val.exit109.i
  %res.3.lcssa.i = phi i32 [ %101, %pcmp_val.exit109.i ], [ %157, %154 ]
  %160 = trunc i64 %indvars.iv164.i to i32
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %100, label %.loopexit.i

; <label>:162                                     ; preds = %pcmp_elen.exit24
  %163 = icmp sgt i32 %29, %30
  %164 = select i1 %163, i32 %29, i32 %30
  %165 = sub nsw i32 %28, %164
  %166 = shl i32 2, %165
  %167 = add nsw i32 %166, -1
  %168 = icmp slt i32 %29, %30
  %169 = select i1 %168, i32 %29, i32 %30
  %170 = sub nsw i32 %164, %169
  %171 = shl i32 %167, %170
  %172 = icmp sgt i32 %169, -1
  br i1 %172, label %.lr.ph145.i, label %.loopexit.i

.lr.ph145.i:                                      ; preds = %162
  %173 = and i32 %ctrl, 3
  %174 = inttoptr i64 %su to [8 x i16]*
  %175 = inttoptr i64 %du to [8 x i16]*
  %176 = inttoptr i64 %su to [16 x i8]*
  %177 = inttoptr i64 %du to [16 x i8]*
  %178 = sub i32 0, %.0.i27
  %179 = icmp sgt i32 %24, %178
  %smax.i = select i1 %179, i32 %24, i32 %178
  %180 = xor i32 %smax.i, -1
  %181 = sext i32 %180 to i64
  br label %182

; <label>:182                                     ; preds = %pcmp_val.exit101.i, %.lr.ph145.i
  %indvars.iv167.i = phi i64 [ %181, %.lr.ph145.i ], [ %indvars.iv.next168.i, %pcmp_val.exit101.i ]
  %res.4142.i = phi i32 [ %171, %.lr.ph145.i ], [ %210, %pcmp_val.exit101.i ]
  %183 = shl i32 %res.4142.i, 1
  switch i32 %173, label %pcmp_val.exit103.i [
    i32 0, label %pcmp_val.exit103.thread.i
    i32 1, label %pcmp_val.exit103.thread114.i
    i32 2, label %pcmp_val.exit103.thread116.i
  ]

pcmp_val.exit103.thread.i:                        ; preds = %182
  %184 = getelementptr inbounds [16 x i8]* %176, i64 0, i64 %indvars.iv167.i
  %185 = load i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds [16 x i8]* %177, i64 0, i64 %indvars.iv167.i
  %188 = load i8* %187, align 1
  %189 = zext i8 %188 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread114.i:                     ; preds = %182
  %190 = getelementptr inbounds [8 x i16]* %174, i64 0, i64 %indvars.iv167.i
  %191 = load i16* %190, align 2
  %192 = zext i16 %191 to i32
  %193 = getelementptr inbounds [8 x i16]* %175, i64 0, i64 %indvars.iv167.i
  %194 = load i16* %193, align 2
  %195 = zext i16 %194 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread116.i:                     ; preds = %182
  %196 = getelementptr inbounds [16 x i8]* %176, i64 0, i64 %indvars.iv167.i
  %197 = load i8* %196, align 1
  %198 = sext i8 %197 to i32
  %199 = getelementptr inbounds [16 x i8]* %177, i64 0, i64 %indvars.iv167.i
  %200 = load i8* %199, align 1
  %201 = sext i8 %200 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.i:                               ; preds = %182
  %202 = getelementptr inbounds [8 x i16]* %174, i64 0, i64 %indvars.iv167.i
  %203 = load i16* %202, align 2
  %204 = sext i16 %203 to i32
  %205 = getelementptr inbounds [8 x i16]* %175, i64 0, i64 %indvars.iv167.i
  %206 = load i16* %205, align 2
  %207 = sext i16 %206 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit101.i:                               ; preds = %pcmp_val.exit103.i, %pcmp_val.exit103.thread116.i, %pcmp_val.exit103.thread114.i, %pcmp_val.exit103.thread.i
  %.0.i102112.i = phi i32 [ %204, %pcmp_val.exit103.i ], [ %198, %pcmp_val.exit103.thread116.i ], [ %192, %pcmp_val.exit103.thread114.i ], [ %186, %pcmp_val.exit103.thread.i ]
  %.0.i100.i = phi i32 [ %207, %pcmp_val.exit103.i ], [ %201, %pcmp_val.exit103.thread116.i ], [ %195, %pcmp_val.exit103.thread114.i ], [ %189, %pcmp_val.exit103.thread.i ]
  %208 = icmp eq i32 %.0.i102112.i, %.0.i100.i
  %209 = zext i1 %208 to i32
  %210 = or i32 %209, %183
  %211 = trunc i64 %indvars.iv167.i to i32
  %212 = icmp sgt i32 %211, 0
  %indvars.iv.next168.i = add i64 %indvars.iv167.i, -1
  br i1 %212, label %182, label %.loopexit.i

; <label>:213                                     ; preds = %pcmp_elen.exit24
  %214 = sub nsw i32 %29, %30
  %215 = icmp sgt i32 %214, -1
  br i1 %215, label %.lr.ph157.i, label %.loopexit.i

.lr.ph157.i:                                      ; preds = %213
  %216 = and i32 %ctrl, 3
  %217 = inttoptr i64 %su to [8 x i16]*
  %218 = inttoptr i64 %du to [8 x i16]*
  %219 = inttoptr i64 %su to [16 x i8]*
  %220 = inttoptr i64 %du to [16 x i8]*
  %221 = sub i32 %29, %28
  %222 = sub i32 %221, %.0.i23
  %223 = sub i32 %.0.i27, %.0.i23
  %224 = sext i32 %223 to i64
  br label %225

; <label>:225                                     ; preds = %._crit_edge151.i, %.lr.ph157.i
  %indvars.iv175.i = phi i64 [ %224, %.lr.ph157.i ], [ %indvars.iv.next176.i, %._crit_edge151.i ]
  %indvars.iv170.i = phi i32 [ %222, %.lr.ph157.i ], [ %indvars.iv.next171.i, %._crit_edge151.i ]
  %res.5154.i = phi i32 [ 0, %.lr.ph157.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %226 = shl i32 %res.5154.i, 1
  %227 = or i32 %226, 1
  %228 = trunc i64 %indvars.iv175.i to i32
  %229 = sub nsw i32 %28, %228
  %230 = icmp slt i32 %229, %30
  %..i = select i1 %230, i32 %229, i32 %30
  %231 = icmp sgt i32 %..i, -1
  br i1 %231, label %.lr.ph150.i, label %._crit_edge151.i

.lr.ph150.i:                                      ; preds = %225
  %232 = icmp sgt i32 %indvars.iv170.i, %24
  %smax172.i = select i1 %232, i32 %indvars.iv170.i, i32 %24
  %233 = xor i32 %smax172.i, -1
  %234 = sext i32 %233 to i64
  br label %235

; <label>:235                                     ; preds = %pcmp_val.exit97.i, %.lr.ph150.i
  %indvars.iv173.i = phi i64 [ %234, %.lr.ph150.i ], [ %indvars.iv.next174.i, %pcmp_val.exit97.i ]
  %res.6147.i = phi i32 [ %227, %.lr.ph150.i ], [ %263, %pcmp_val.exit97.i ]
  %236 = add nsw i64 %indvars.iv173.i, %indvars.iv175.i
  switch i32 %216, label %pcmp_val.exit99.i [
    i32 0, label %pcmp_val.exit99.thread.i
    i32 1, label %pcmp_val.exit99.thread120.i
    i32 2, label %pcmp_val.exit99.thread122.i
  ]

pcmp_val.exit99.thread.i:                         ; preds = %235
  %237 = getelementptr inbounds [16 x i8]* %219, i64 0, i64 %236
  %238 = load i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = getelementptr inbounds [16 x i8]* %220, i64 0, i64 %indvars.iv173.i
  %241 = load i8* %240, align 1
  %242 = zext i8 %241 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread120.i:                      ; preds = %235
  %243 = getelementptr inbounds [8 x i16]* %217, i64 0, i64 %236
  %244 = load i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = getelementptr inbounds [8 x i16]* %218, i64 0, i64 %indvars.iv173.i
  %247 = load i16* %246, align 2
  %248 = zext i16 %247 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread122.i:                      ; preds = %235
  %249 = getelementptr inbounds [16 x i8]* %219, i64 0, i64 %236
  %250 = load i8* %249, align 1
  %251 = sext i8 %250 to i32
  %252 = getelementptr inbounds [16 x i8]* %220, i64 0, i64 %indvars.iv173.i
  %253 = load i8* %252, align 1
  %254 = sext i8 %253 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.i:                                ; preds = %235
  %255 = getelementptr inbounds [8 x i16]* %217, i64 0, i64 %236
  %256 = load i16* %255, align 2
  %257 = sext i16 %256 to i32
  %258 = getelementptr inbounds [8 x i16]* %218, i64 0, i64 %indvars.iv173.i
  %259 = load i16* %258, align 2
  %260 = sext i16 %259 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit97.i:                                ; preds = %pcmp_val.exit99.i, %pcmp_val.exit99.thread122.i, %pcmp_val.exit99.thread120.i, %pcmp_val.exit99.thread.i
  %.0.i98118.i = phi i32 [ %257, %pcmp_val.exit99.i ], [ %251, %pcmp_val.exit99.thread122.i ], [ %245, %pcmp_val.exit99.thread120.i ], [ %239, %pcmp_val.exit99.thread.i ]
  %.0.i96.i = phi i32 [ %260, %pcmp_val.exit99.i ], [ %254, %pcmp_val.exit99.thread122.i ], [ %248, %pcmp_val.exit99.thread120.i ], [ %242, %pcmp_val.exit99.thread.i ]
  %261 = icmp eq i32 %.0.i98118.i, %.0.i96.i
  %262 = zext i1 %261 to i32
  %263 = and i32 %262, %res.6147.i
  %264 = trunc i64 %indvars.iv173.i to i32
  %265 = icmp sgt i32 %264, 0
  %indvars.iv.next174.i = add i64 %indvars.iv173.i, -1
  br i1 %265, label %235, label %._crit_edge151.i

._crit_edge151.i:                                 ; preds = %pcmp_val.exit97.i, %225
  %res.6.lcssa.i = phi i32 [ %227, %225 ], [ %263, %pcmp_val.exit97.i ]
  %indvars.iv.next176.i = add i64 %indvars.iv175.i, -1
  %266 = icmp sgt i32 %228, 0
  %indvars.iv.next171.i = add i32 %indvars.iv170.i, -1
  br i1 %266, label %225, label %.loopexit.i

.loopexit.i:                                      ; preds = %._crit_edge151.i, %213, %pcmp_val.exit101.i, %162, %._crit_edge133.i, %._crit_edge.i, %.preheader.i, %.preheader135.i, %pcmp_elen.exit24
  %res.7.i = phi i32 [ 0, %pcmp_elen.exit24 ], [ 0, %.preheader.i ], [ 0, %.preheader135.i ], [ %171, %162 ], [ 0, %213 ], [ %res.1.lcssa.i, %._crit_edge.i ], [ %res.3.lcssa.i, %._crit_edge133.i ], [ %210, %pcmp_val.exit101.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %267 = lshr i32 %25, 4
  %268 = and i32 %267, 3
  switch i32 %268, label %277 [
    i32 1, label %269
    i32 3, label %273
  ]

; <label>:269                                     ; preds = %.loopexit.i
  %270 = shl i32 2, %28
  %271 = add nsw i32 %270, -1
  %272 = xor i32 %res.7.i, %271
  br label %277

; <label>:273                                     ; preds = %.loopexit.i
  %274 = shl i32 2, %29
  %275 = add nsw i32 %274, -1
  %276 = xor i32 %res.7.i, %275
  br label %277

; <label>:277                                     ; preds = %273, %269, %.loopexit.i
  %res.8.i = phi i32 [ %res.7.i, %.loopexit.i ], [ %276, %273 ], [ %272, %269 ]
  %278 = icmp eq i32 %res.8.i, 0
  br i1 %278, label %pcmpxstrx.exit, label %279

; <label>:279                                     ; preds = %277
  %280 = load %struct.CPUX86State** @env, align 8
  %281 = getelementptr inbounds %struct.CPUX86State* %280, i64 0, i32 3
  %282 = load i32* %281, align 4
  %283 = or i32 %282, 1
  store i32 %283, i32* %281, align 4
  %284 = and i32 %res.8.i, 1
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %pcmpxstrx.exit, label %286

; <label>:286                                     ; preds = %279
  %287 = load %struct.CPUX86State** @env, align 8
  %288 = getelementptr inbounds %struct.CPUX86State* %287, i64 0, i32 3
  %289 = load i32* %288, align 4
  %290 = or i32 %289, 2048
  store i32 %290, i32* %288, align 4
  br label %pcmpxstrx.exit

pcmpxstrx.exit:                                   ; preds = %286, %279, %277
  %291 = and i32 %ctrl, 64
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %390, label %293

; <label>:293                                     ; preds = %pcmpxstrx.exit
  br i1 %8, label %.preheader, label %.preheader43

.preheader43:                                     ; preds = %293
  %294 = inttoptr i64 %du to [8 x i16]*
  %295 = shl i32 %res.8.i, 31
  %sext20 = ashr exact i32 %295, 31
  %296 = trunc i32 %sext20 to i16
  %297 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 0
  store i16 %296, i16* %297, align 2
  %298 = lshr i32 %res.8.i, 1
  %299 = shl i32 %298, 31
  %sext20.1 = ashr exact i32 %299, 31
  %300 = trunc i32 %sext20.1 to i16
  %301 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 1
  store i16 %300, i16* %301, align 2
  %302 = lshr i32 %res.8.i, 2
  %303 = shl i32 %302, 31
  %sext20.2 = ashr exact i32 %303, 31
  %304 = trunc i32 %sext20.2 to i16
  %305 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 2
  store i16 %304, i16* %305, align 2
  %306 = lshr i32 %res.8.i, 3
  %307 = shl i32 %306, 31
  %sext20.3 = ashr exact i32 %307, 31
  %308 = trunc i32 %sext20.3 to i16
  %309 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 3
  store i16 %308, i16* %309, align 2
  %310 = lshr i32 %res.8.i, 4
  %311 = shl i32 %310, 31
  %sext20.4 = ashr exact i32 %311, 31
  %312 = trunc i32 %sext20.4 to i16
  %313 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 4
  store i16 %312, i16* %313, align 2
  %314 = lshr i32 %res.8.i, 5
  %315 = shl i32 %314, 31
  %sext20.5 = ashr exact i32 %315, 31
  %316 = trunc i32 %sext20.5 to i16
  %317 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 5
  store i16 %316, i16* %317, align 2
  %318 = lshr i32 %res.8.i, 6
  %319 = shl i32 %318, 31
  %sext20.6 = ashr exact i32 %319, 31
  %320 = trunc i32 %sext20.6 to i16
  %321 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 6
  store i16 %320, i16* %321, align 2
  %322 = lshr i32 %res.8.i, 7
  %323 = shl i32 %322, 31
  %sext20.7 = ashr exact i32 %323, 31
  %324 = trunc i32 %sext20.7 to i16
  %325 = getelementptr inbounds [8 x i16]* %294, i64 0, i64 7
  store i16 %324, i16* %325, align 2
  br label %394

.preheader:                                       ; preds = %293
  %326 = inttoptr i64 %du to [16 x i8]*
  %327 = shl i32 %res.8.i, 31
  %sext = ashr exact i32 %327, 31
  %328 = trunc i32 %sext to i8
  %329 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 0
  store i8 %328, i8* %329, align 1
  %330 = lshr i32 %res.8.i, 1
  %331 = shl i32 %330, 31
  %sext.1 = ashr exact i32 %331, 31
  %332 = trunc i32 %sext.1 to i8
  %333 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 1
  store i8 %332, i8* %333, align 1
  %334 = lshr i32 %res.8.i, 2
  %335 = shl i32 %334, 31
  %sext.2 = ashr exact i32 %335, 31
  %336 = trunc i32 %sext.2 to i8
  %337 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 2
  store i8 %336, i8* %337, align 1
  %338 = lshr i32 %res.8.i, 3
  %339 = shl i32 %338, 31
  %sext.3 = ashr exact i32 %339, 31
  %340 = trunc i32 %sext.3 to i8
  %341 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 3
  store i8 %340, i8* %341, align 1
  %342 = lshr i32 %res.8.i, 4
  %343 = shl i32 %342, 31
  %sext.4 = ashr exact i32 %343, 31
  %344 = trunc i32 %sext.4 to i8
  %345 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 4
  store i8 %344, i8* %345, align 1
  %346 = lshr i32 %res.8.i, 5
  %347 = shl i32 %346, 31
  %sext.5 = ashr exact i32 %347, 31
  %348 = trunc i32 %sext.5 to i8
  %349 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 5
  store i8 %348, i8* %349, align 1
  %350 = lshr i32 %res.8.i, 6
  %351 = shl i32 %350, 31
  %sext.6 = ashr exact i32 %351, 31
  %352 = trunc i32 %sext.6 to i8
  %353 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 6
  store i8 %352, i8* %353, align 1
  %354 = lshr i32 %res.8.i, 7
  %355 = shl i32 %354, 31
  %sext.7 = ashr exact i32 %355, 31
  %356 = trunc i32 %sext.7 to i8
  %357 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 7
  store i8 %356, i8* %357, align 1
  %358 = lshr i32 %res.8.i, 8
  %359 = shl i32 %358, 31
  %sext.8 = ashr exact i32 %359, 31
  %360 = trunc i32 %sext.8 to i8
  %361 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 8
  store i8 %360, i8* %361, align 1
  %362 = lshr i32 %res.8.i, 9
  %363 = shl i32 %362, 31
  %sext.9 = ashr exact i32 %363, 31
  %364 = trunc i32 %sext.9 to i8
  %365 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 9
  store i8 %364, i8* %365, align 1
  %366 = lshr i32 %res.8.i, 10
  %367 = shl i32 %366, 31
  %sext.10 = ashr exact i32 %367, 31
  %368 = trunc i32 %sext.10 to i8
  %369 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 10
  store i8 %368, i8* %369, align 1
  %370 = lshr i32 %res.8.i, 11
  %371 = shl i32 %370, 31
  %sext.11 = ashr exact i32 %371, 31
  %372 = trunc i32 %sext.11 to i8
  %373 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 11
  store i8 %372, i8* %373, align 1
  %374 = lshr i32 %res.8.i, 12
  %375 = shl i32 %374, 31
  %sext.12 = ashr exact i32 %375, 31
  %376 = trunc i32 %sext.12 to i8
  %377 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 12
  store i8 %376, i8* %377, align 1
  %378 = lshr i32 %res.8.i, 13
  %379 = shl i32 %378, 31
  %sext.13 = ashr exact i32 %379, 31
  %380 = trunc i32 %sext.13 to i8
  %381 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 13
  store i8 %380, i8* %381, align 1
  %382 = lshr i32 %res.8.i, 14
  %383 = shl i32 %382, 31
  %sext.14 = ashr exact i32 %383, 31
  %384 = trunc i32 %sext.14 to i8
  %385 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 14
  store i8 %384, i8* %385, align 1
  %386 = lshr i32 %res.8.i, 15
  %387 = shl i32 %386, 31
  %sext.15 = ashr exact i32 %387, 31
  %388 = trunc i32 %sext.15 to i8
  %389 = getelementptr inbounds [16 x i8]* %326, i64 0, i64 15
  store i8 %388, i8* %389, align 1
  br label %394

; <label>:390                                     ; preds = %pcmpxstrx.exit
  %391 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %391, align 8
  %392 = zext i32 %res.8.i to i64
  %393 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %392, i64* %393, align 8
  br label %394

; <label>:394                                     ; preds = %390, %.preheader, %.preheader43
  ret void
}

define void @helper_pcmpistri_xmm(i64 %du, i64 %su, i32 %ctrl) nounwind uwtable {
  %1 = and i32 %ctrl, 1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %.preheader.i, label %.preheader10.i

.preheader10.i:                                   ; preds = %0
  %3 = inttoptr i64 %su to [8 x i16]*
  br label %5

.preheader.i:                                     ; preds = %0
  %4 = inttoptr i64 %su to [16 x i8]*
  br label %13

; <label>:5                                       ; preds = %8, %.preheader10.i
  %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %8 ], [ 0, %.preheader10.i ]
  %val.0.i = phi i32 [ %12, %8 ], [ 0, %.preheader10.i ]
  %6 = trunc i64 %indvars.iv12.i to i32
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %8, label %pcmp_ilen.exit

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds [8 x i16]* %3, i64 0, i64 %indvars.iv12.i
  %10 = load i16* %9, align 2
  %11 = icmp eq i16 %10, 0
  %indvars.iv.next13.i = add i64 %indvars.iv12.i, 1
  %12 = add nsw i32 %val.0.i, 1
  br i1 %11, label %pcmp_ilen.exit, label %5

; <label>:13                                      ; preds = %16, %.preheader.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %16 ], [ 0, %.preheader.i ]
  %val.1.i = phi i32 [ %20, %16 ], [ 0, %.preheader.i ]
  %14 = trunc i64 %indvars.iv.i to i32
  %15 = icmp slt i32 %14, 16
  br i1 %15, label %16, label %pcmp_ilen.exit

; <label>:16                                      ; preds = %13
  %17 = getelementptr inbounds [16 x i8]* %4, i64 0, i64 %indvars.iv.i
  %18 = load i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %20 = add nsw i32 %val.1.i, 1
  br i1 %19, label %pcmp_ilen.exit, label %13

pcmp_ilen.exit:                                   ; preds = %16, %13, %8, %5
  %val.2.i = phi i32 [ %val.1.i, %16 ], [ %val.1.i, %13 ], [ %val.0.i, %8 ], [ %val.0.i, %5 ]
  br i1 %2, label %.preheader.i10, label %.preheader10.i9

.preheader10.i9:                                  ; preds = %pcmp_ilen.exit
  %21 = inttoptr i64 %du to [8 x i16]*
  br label %23

.preheader.i10:                                   ; preds = %pcmp_ilen.exit
  %22 = inttoptr i64 %du to [16 x i8]*
  br label %31

; <label>:23                                      ; preds = %26, %.preheader10.i9
  %indvars.iv12.i11 = phi i64 [ %indvars.iv.next13.i13, %26 ], [ 0, %.preheader10.i9 ]
  %val.0.i12 = phi i32 [ %30, %26 ], [ 0, %.preheader10.i9 ]
  %24 = trunc i64 %indvars.iv12.i11 to i32
  %25 = icmp slt i32 %24, 8
  br i1 %25, label %26, label %pcmp_ilen.exit18

; <label>:26                                      ; preds = %23
  %27 = getelementptr inbounds [8 x i16]* %21, i64 0, i64 %indvars.iv12.i11
  %28 = load i16* %27, align 2
  %29 = icmp eq i16 %28, 0
  %indvars.iv.next13.i13 = add i64 %indvars.iv12.i11, 1
  %30 = add nsw i32 %val.0.i12, 1
  br i1 %29, label %pcmp_ilen.exit18, label %23

; <label>:31                                      ; preds = %34, %.preheader.i10
  %indvars.iv.i14 = phi i64 [ %indvars.iv.next.i16, %34 ], [ 0, %.preheader.i10 ]
  %val.1.i15 = phi i32 [ %38, %34 ], [ 0, %.preheader.i10 ]
  %32 = trunc i64 %indvars.iv.i14 to i32
  %33 = icmp slt i32 %32, 16
  br i1 %33, label %34, label %pcmp_ilen.exit18

; <label>:34                                      ; preds = %31
  %35 = getelementptr inbounds [16 x i8]* %22, i64 0, i64 %indvars.iv.i14
  %36 = load i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  %indvars.iv.next.i16 = add i64 %indvars.iv.i14, 1
  %38 = add nsw i32 %val.1.i15, 1
  br i1 %37, label %pcmp_ilen.exit18, label %31

pcmp_ilen.exit18:                                 ; preds = %34, %31, %26, %23
  %val.2.i17 = phi i32 [ %val.1.i15, %34 ], [ %val.1.i15, %31 ], [ %val.0.i12, %26 ], [ %val.0.i12, %23 ]
  %39 = sub i32 0, %val.2.i17
  %sext = shl i32 %ctrl, 24
  %40 = ashr exact i32 %sext, 24
  %41 = shl i32 %ctrl, 3
  %42 = and i32 %41, 8
  %43 = xor i32 %42, 15
  %44 = add i32 %val.2.i, -1
  %45 = add nsw i32 %val.2.i17, -1
  %46 = icmp slt i32 %44, %43
  %47 = select i1 %46, i32 64, i32 0
  %48 = icmp slt i32 %45, %43
  %49 = select i1 %48, i32 128, i32 0
  %50 = or i32 %49, %47
  %51 = load %struct.CPUX86State** @env, align 8
  %52 = getelementptr inbounds %struct.CPUX86State* %51, i64 0, i32 3
  store i32 %50, i32* %52, align 4
  %53 = lshr i32 %40, 2
  %54 = and i32 %53, 3
  switch i32 %54, label %.loopexit.i [
    i32 0, label %.preheader.i19
    i32 1, label %.preheader135.i
    i32 2, label %178
    i32 3, label %229
  ]

.preheader135.i:                                  ; preds = %pcmp_ilen.exit18
  %55 = icmp sgt i32 %val.2.i, 0
  br i1 %55, label %.lr.ph139.i, label %.loopexit.i

.lr.ph139.i:                                      ; preds = %.preheader135.i
  %56 = and i32 %ctrl, 3
  %57 = inttoptr i64 %su to [8 x i16]*
  %58 = add nsw i32 %val.2.i17, -2
  %59 = or i32 %58, 1
  %60 = icmp sgt i32 %59, -1
  %61 = inttoptr i64 %du to [8 x i16]*
  %62 = inttoptr i64 %du to [16 x i8]*
  %63 = inttoptr i64 %su to [16 x i8]*
  %64 = sext i32 %59 to i64
  %65 = sext i32 %val.2.i to i64
  br label %116

.preheader.i19:                                   ; preds = %pcmp_ilen.exit18
  %66 = icmp sgt i32 %val.2.i, 0
  br i1 %66, label %.lr.ph128.i, label %.loopexit.i

.lr.ph128.i:                                      ; preds = %.preheader.i19
  %67 = and i32 %ctrl, 3
  %68 = inttoptr i64 %su to [8 x i16]*
  %69 = icmp sgt i32 %val.2.i17, 0
  %70 = inttoptr i64 %du to [8 x i16]*
  %71 = inttoptr i64 %du to [16 x i8]*
  %72 = inttoptr i64 %su to [16 x i8]*
  %73 = sext i32 %val.2.i17 to i64
  %74 = sext i32 %val.2.i to i64
  br label %75

; <label>:75                                      ; preds = %._crit_edge.i, %.lr.ph128.i
  %indvars.iv159.in.i = phi i64 [ %74, %.lr.ph128.i ], [ %indvars.iv159.i, %._crit_edge.i ]
  %res.0126.i = phi i32 [ 0, %.lr.ph128.i ], [ %res.1.lcssa.i, %._crit_edge.i ]
  %indvars.iv159.i = add i64 %indvars.iv159.in.i, -1
  %76 = shl i32 %res.0126.i, 1
  switch i32 %67, label %89 [
    i32 0, label %77
    i32 1, label %81
    i32 2, label %85
  ]

; <label>:77                                      ; preds = %75
  %78 = getelementptr inbounds [16 x i8]* %72, i64 0, i64 %indvars.iv159.i
  %79 = load i8* %78, align 1
  %80 = zext i8 %79 to i32
  br label %pcmp_val.exit.i

; <label>:81                                      ; preds = %75
  %82 = getelementptr inbounds [8 x i16]* %68, i64 0, i64 %indvars.iv159.i
  %83 = load i16* %82, align 2
  %84 = zext i16 %83 to i32
  br label %pcmp_val.exit.i

; <label>:85                                      ; preds = %75
  %86 = getelementptr inbounds [16 x i8]* %72, i64 0, i64 %indvars.iv159.i
  %87 = load i8* %86, align 1
  %88 = sext i8 %87 to i32
  br label %pcmp_val.exit.i

; <label>:89                                      ; preds = %75
  %90 = getelementptr inbounds [8 x i16]* %68, i64 0, i64 %indvars.iv159.i
  %91 = load i16* %90, align 2
  %92 = sext i16 %91 to i32
  br label %pcmp_val.exit.i

pcmp_val.exit.i:                                  ; preds = %89, %85, %81, %77
  %.0.i.i = phi i32 [ %92, %89 ], [ %88, %85 ], [ %84, %81 ], [ %80, %77 ]
  br i1 %69, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %indvars.iv.in.i = phi i64 [ %indvars.iv.i20, %pcmp_val.exit111.i ], [ %73, %pcmp_val.exit.i ]
  %res.1124.i = phi i32 [ %111, %pcmp_val.exit111.i ], [ %76, %pcmp_val.exit.i ]
  %indvars.iv.i20 = add i64 %indvars.iv.in.i, -1
  switch i32 %67, label %105 [
    i32 0, label %93
    i32 1, label %97
    i32 2, label %101
  ]

; <label>:93                                      ; preds = %.lr.ph.i
  %94 = getelementptr inbounds [16 x i8]* %71, i64 0, i64 %indvars.iv.i20
  %95 = load i8* %94, align 1
  %96 = zext i8 %95 to i32
  br label %pcmp_val.exit111.i

; <label>:97                                      ; preds = %.lr.ph.i
  %98 = getelementptr inbounds [8 x i16]* %70, i64 0, i64 %indvars.iv.i20
  %99 = load i16* %98, align 2
  %100 = zext i16 %99 to i32
  br label %pcmp_val.exit111.i

; <label>:101                                     ; preds = %.lr.ph.i
  %102 = getelementptr inbounds [16 x i8]* %71, i64 0, i64 %indvars.iv.i20
  %103 = load i8* %102, align 1
  %104 = sext i8 %103 to i32
  br label %pcmp_val.exit111.i

; <label>:105                                     ; preds = %.lr.ph.i
  %106 = getelementptr inbounds [8 x i16]* %70, i64 0, i64 %indvars.iv.i20
  %107 = load i16* %106, align 2
  %108 = sext i16 %107 to i32
  br label %pcmp_val.exit111.i

pcmp_val.exit111.i:                               ; preds = %105, %101, %97, %93
  %.0.i110.i = phi i32 [ %108, %105 ], [ %104, %101 ], [ %100, %97 ], [ %96, %93 ]
  %109 = icmp eq i32 %.0.i.i, %.0.i110.i
  %110 = zext i1 %109 to i32
  %111 = or i32 %110, %res.1124.i
  %112 = trunc i64 %indvars.iv.i20 to i32
  %113 = icmp sgt i32 %112, 0
  br i1 %113, label %.lr.ph.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %res.1.lcssa.i = phi i32 [ %76, %pcmp_val.exit.i ], [ %111, %pcmp_val.exit111.i ]
  %114 = trunc i64 %indvars.iv159.i to i32
  %115 = icmp sgt i32 %114, 0
  br i1 %115, label %75, label %.loopexit.i

; <label>:116                                     ; preds = %._crit_edge133.i, %.lr.ph139.i
  %indvars.iv164.in.i = phi i64 [ %65, %.lr.ph139.i ], [ %indvars.iv164.i, %._crit_edge133.i ]
  %res.2137.i = phi i32 [ 0, %.lr.ph139.i ], [ %res.3.lcssa.i, %._crit_edge133.i ]
  %indvars.iv164.i = add i64 %indvars.iv164.in.i, -1
  %117 = shl i32 %res.2137.i, 1
  switch i32 %56, label %130 [
    i32 0, label %118
    i32 1, label %122
    i32 2, label %126
  ]

; <label>:118                                     ; preds = %116
  %119 = getelementptr inbounds [16 x i8]* %63, i64 0, i64 %indvars.iv164.i
  %120 = load i8* %119, align 1
  %121 = zext i8 %120 to i32
  br label %pcmp_val.exit109.i

; <label>:122                                     ; preds = %116
  %123 = getelementptr inbounds [8 x i16]* %57, i64 0, i64 %indvars.iv164.i
  %124 = load i16* %123, align 2
  %125 = zext i16 %124 to i32
  br label %pcmp_val.exit109.i

; <label>:126                                     ; preds = %116
  %127 = getelementptr inbounds [16 x i8]* %63, i64 0, i64 %indvars.iv164.i
  %128 = load i8* %127, align 1
  %129 = sext i8 %128 to i32
  br label %pcmp_val.exit109.i

; <label>:130                                     ; preds = %116
  %131 = getelementptr inbounds [8 x i16]* %57, i64 0, i64 %indvars.iv164.i
  %132 = load i16* %131, align 2
  %133 = sext i16 %132 to i32
  br label %pcmp_val.exit109.i

pcmp_val.exit109.i:                               ; preds = %130, %126, %122, %118
  %.0.i108.i = phi i32 [ %133, %130 ], [ %129, %126 ], [ %125, %122 ], [ %121, %118 ]
  br i1 %60, label %.lr.ph132.i, label %._crit_edge133.i

.lr.ph132.i:                                      ; preds = %170, %pcmp_val.exit109.i
  %indvars.iv162.i = phi i64 [ %indvars.iv.next163.i, %170 ], [ %64, %pcmp_val.exit109.i ]
  %res.3130.i = phi i32 [ %173, %170 ], [ %117, %pcmp_val.exit109.i ]
  switch i32 %56, label %146 [
    i32 0, label %134
    i32 1, label %138
    i32 2, label %142
  ]

; <label>:134                                     ; preds = %.lr.ph132.i
  %135 = getelementptr inbounds [16 x i8]* %62, i64 0, i64 %indvars.iv162.i
  %136 = load i8* %135, align 1
  %137 = zext i8 %136 to i32
  br label %pcmp_val.exit107.i

; <label>:138                                     ; preds = %.lr.ph132.i
  %139 = getelementptr inbounds [8 x i16]* %61, i64 0, i64 %indvars.iv162.i
  %140 = load i16* %139, align 2
  %141 = zext i16 %140 to i32
  br label %pcmp_val.exit107.i

; <label>:142                                     ; preds = %.lr.ph132.i
  %143 = getelementptr inbounds [16 x i8]* %62, i64 0, i64 %indvars.iv162.i
  %144 = load i8* %143, align 1
  %145 = sext i8 %144 to i32
  br label %pcmp_val.exit107.i

; <label>:146                                     ; preds = %.lr.ph132.i
  %147 = getelementptr inbounds [8 x i16]* %61, i64 0, i64 %indvars.iv162.i
  %148 = load i16* %147, align 2
  %149 = sext i16 %148 to i32
  br label %pcmp_val.exit107.i

pcmp_val.exit107.i:                               ; preds = %146, %142, %138, %134
  %.0.i106.i = phi i32 [ %149, %146 ], [ %145, %142 ], [ %141, %138 ], [ %137, %134 ]
  %150 = icmp sgt i32 %.0.i106.i, %.0.i108.i
  br i1 %150, label %170, label %151

; <label>:151                                     ; preds = %pcmp_val.exit107.i
  %152 = add nsw i64 %indvars.iv162.i, -1
  switch i32 %56, label %165 [
    i32 0, label %153
    i32 1, label %157
    i32 2, label %161
  ]

; <label>:153                                     ; preds = %151
  %154 = getelementptr inbounds [16 x i8]* %62, i64 0, i64 %152
  %155 = load i8* %154, align 1
  %156 = zext i8 %155 to i32
  br label %pcmp_val.exit105.i

; <label>:157                                     ; preds = %151
  %158 = getelementptr inbounds [8 x i16]* %61, i64 0, i64 %152
  %159 = load i16* %158, align 2
  %160 = zext i16 %159 to i32
  br label %pcmp_val.exit105.i

; <label>:161                                     ; preds = %151
  %162 = getelementptr inbounds [16 x i8]* %62, i64 0, i64 %152
  %163 = load i8* %162, align 1
  %164 = sext i8 %163 to i32
  br label %pcmp_val.exit105.i

; <label>:165                                     ; preds = %151
  %166 = getelementptr inbounds [8 x i16]* %61, i64 0, i64 %152
  %167 = load i16* %166, align 2
  %168 = sext i16 %167 to i32
  br label %pcmp_val.exit105.i

pcmp_val.exit105.i:                               ; preds = %165, %161, %157, %153
  %.0.i104.i = phi i32 [ %168, %165 ], [ %164, %161 ], [ %160, %157 ], [ %156, %153 ]
  %169 = icmp sge i32 %.0.i104.i, %.0.i108.i
  br label %170

; <label>:170                                     ; preds = %pcmp_val.exit105.i, %pcmp_val.exit107.i
  %171 = phi i1 [ false, %pcmp_val.exit107.i ], [ %169, %pcmp_val.exit105.i ]
  %172 = zext i1 %171 to i32
  %173 = or i32 %172, %res.3130.i
  %indvars.iv.next163.i = add i64 %indvars.iv162.i, -2
  %174 = trunc i64 %indvars.iv.next163.i to i32
  %175 = icmp sgt i32 %174, -1
  br i1 %175, label %.lr.ph132.i, label %._crit_edge133.i

._crit_edge133.i:                                 ; preds = %170, %pcmp_val.exit109.i
  %res.3.lcssa.i = phi i32 [ %117, %pcmp_val.exit109.i ], [ %173, %170 ]
  %176 = trunc i64 %indvars.iv164.i to i32
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %116, label %.loopexit.i

; <label>:178                                     ; preds = %pcmp_ilen.exit18
  %179 = icmp sgt i32 %44, %45
  %180 = select i1 %179, i32 %44, i32 %45
  %181 = sub nsw i32 %43, %180
  %182 = shl i32 2, %181
  %183 = add nsw i32 %182, -1
  %184 = icmp slt i32 %44, %45
  %185 = select i1 %184, i32 %44, i32 %45
  %186 = sub nsw i32 %180, %185
  %187 = shl i32 %183, %186
  %188 = icmp sgt i32 %185, -1
  br i1 %188, label %.lr.ph145.i, label %.loopexit.i

.lr.ph145.i:                                      ; preds = %178
  %189 = and i32 %ctrl, 3
  %190 = inttoptr i64 %su to [8 x i16]*
  %191 = inttoptr i64 %du to [8 x i16]*
  %192 = inttoptr i64 %su to [16 x i8]*
  %193 = inttoptr i64 %du to [16 x i8]*
  %194 = sub i32 0, %val.2.i
  %195 = icmp sgt i32 %39, %194
  %smax.i = select i1 %195, i32 %39, i32 %194
  %196 = xor i32 %smax.i, -1
  %197 = sext i32 %196 to i64
  br label %198

; <label>:198                                     ; preds = %pcmp_val.exit101.i, %.lr.ph145.i
  %indvars.iv167.i = phi i64 [ %197, %.lr.ph145.i ], [ %indvars.iv.next168.i, %pcmp_val.exit101.i ]
  %res.4142.i = phi i32 [ %187, %.lr.ph145.i ], [ %226, %pcmp_val.exit101.i ]
  %199 = shl i32 %res.4142.i, 1
  switch i32 %189, label %pcmp_val.exit103.i [
    i32 0, label %pcmp_val.exit103.thread.i
    i32 1, label %pcmp_val.exit103.thread114.i
    i32 2, label %pcmp_val.exit103.thread116.i
  ]

pcmp_val.exit103.thread.i:                        ; preds = %198
  %200 = getelementptr inbounds [16 x i8]* %192, i64 0, i64 %indvars.iv167.i
  %201 = load i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = getelementptr inbounds [16 x i8]* %193, i64 0, i64 %indvars.iv167.i
  %204 = load i8* %203, align 1
  %205 = zext i8 %204 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread114.i:                     ; preds = %198
  %206 = getelementptr inbounds [8 x i16]* %190, i64 0, i64 %indvars.iv167.i
  %207 = load i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = getelementptr inbounds [8 x i16]* %191, i64 0, i64 %indvars.iv167.i
  %210 = load i16* %209, align 2
  %211 = zext i16 %210 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread116.i:                     ; preds = %198
  %212 = getelementptr inbounds [16 x i8]* %192, i64 0, i64 %indvars.iv167.i
  %213 = load i8* %212, align 1
  %214 = sext i8 %213 to i32
  %215 = getelementptr inbounds [16 x i8]* %193, i64 0, i64 %indvars.iv167.i
  %216 = load i8* %215, align 1
  %217 = sext i8 %216 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.i:                               ; preds = %198
  %218 = getelementptr inbounds [8 x i16]* %190, i64 0, i64 %indvars.iv167.i
  %219 = load i16* %218, align 2
  %220 = sext i16 %219 to i32
  %221 = getelementptr inbounds [8 x i16]* %191, i64 0, i64 %indvars.iv167.i
  %222 = load i16* %221, align 2
  %223 = sext i16 %222 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit101.i:                               ; preds = %pcmp_val.exit103.i, %pcmp_val.exit103.thread116.i, %pcmp_val.exit103.thread114.i, %pcmp_val.exit103.thread.i
  %.0.i102112.i = phi i32 [ %220, %pcmp_val.exit103.i ], [ %214, %pcmp_val.exit103.thread116.i ], [ %208, %pcmp_val.exit103.thread114.i ], [ %202, %pcmp_val.exit103.thread.i ]
  %.0.i100.i = phi i32 [ %223, %pcmp_val.exit103.i ], [ %217, %pcmp_val.exit103.thread116.i ], [ %211, %pcmp_val.exit103.thread114.i ], [ %205, %pcmp_val.exit103.thread.i ]
  %224 = icmp eq i32 %.0.i102112.i, %.0.i100.i
  %225 = zext i1 %224 to i32
  %226 = or i32 %225, %199
  %227 = trunc i64 %indvars.iv167.i to i32
  %228 = icmp sgt i32 %227, 0
  %indvars.iv.next168.i = add i64 %indvars.iv167.i, -1
  br i1 %228, label %198, label %.loopexit.i

; <label>:229                                     ; preds = %pcmp_ilen.exit18
  %230 = sub nsw i32 %44, %45
  %231 = icmp sgt i32 %230, -1
  br i1 %231, label %.lr.ph157.i, label %.loopexit.i

.lr.ph157.i:                                      ; preds = %229
  %232 = and i32 %ctrl, 3
  %233 = inttoptr i64 %su to [8 x i16]*
  %234 = inttoptr i64 %du to [8 x i16]*
  %235 = inttoptr i64 %su to [16 x i8]*
  %236 = inttoptr i64 %du to [16 x i8]*
  %237 = sub i32 %44, %43
  %238 = sub i32 %237, %val.2.i17
  %239 = sub i32 %val.2.i, %val.2.i17
  %240 = sext i32 %239 to i64
  br label %241

; <label>:241                                     ; preds = %._crit_edge151.i, %.lr.ph157.i
  %indvars.iv175.i = phi i64 [ %240, %.lr.ph157.i ], [ %indvars.iv.next176.i, %._crit_edge151.i ]
  %indvars.iv170.i = phi i32 [ %238, %.lr.ph157.i ], [ %indvars.iv.next171.i, %._crit_edge151.i ]
  %res.5154.i = phi i32 [ 0, %.lr.ph157.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %242 = shl i32 %res.5154.i, 1
  %243 = or i32 %242, 1
  %244 = trunc i64 %indvars.iv175.i to i32
  %245 = sub nsw i32 %43, %244
  %246 = icmp slt i32 %245, %45
  %..i = select i1 %246, i32 %245, i32 %45
  %247 = icmp sgt i32 %..i, -1
  br i1 %247, label %.lr.ph150.i, label %._crit_edge151.i

.lr.ph150.i:                                      ; preds = %241
  %248 = icmp sgt i32 %indvars.iv170.i, %39
  %smax172.i = select i1 %248, i32 %indvars.iv170.i, i32 %39
  %249 = xor i32 %smax172.i, -1
  %250 = sext i32 %249 to i64
  br label %251

; <label>:251                                     ; preds = %pcmp_val.exit97.i, %.lr.ph150.i
  %indvars.iv173.i = phi i64 [ %250, %.lr.ph150.i ], [ %indvars.iv.next174.i, %pcmp_val.exit97.i ]
  %res.6147.i = phi i32 [ %243, %.lr.ph150.i ], [ %279, %pcmp_val.exit97.i ]
  %252 = add nsw i64 %indvars.iv173.i, %indvars.iv175.i
  switch i32 %232, label %pcmp_val.exit99.i [
    i32 0, label %pcmp_val.exit99.thread.i
    i32 1, label %pcmp_val.exit99.thread120.i
    i32 2, label %pcmp_val.exit99.thread122.i
  ]

pcmp_val.exit99.thread.i:                         ; preds = %251
  %253 = getelementptr inbounds [16 x i8]* %235, i64 0, i64 %252
  %254 = load i8* %253, align 1
  %255 = zext i8 %254 to i32
  %256 = getelementptr inbounds [16 x i8]* %236, i64 0, i64 %indvars.iv173.i
  %257 = load i8* %256, align 1
  %258 = zext i8 %257 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread120.i:                      ; preds = %251
  %259 = getelementptr inbounds [8 x i16]* %233, i64 0, i64 %252
  %260 = load i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = getelementptr inbounds [8 x i16]* %234, i64 0, i64 %indvars.iv173.i
  %263 = load i16* %262, align 2
  %264 = zext i16 %263 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread122.i:                      ; preds = %251
  %265 = getelementptr inbounds [16 x i8]* %235, i64 0, i64 %252
  %266 = load i8* %265, align 1
  %267 = sext i8 %266 to i32
  %268 = getelementptr inbounds [16 x i8]* %236, i64 0, i64 %indvars.iv173.i
  %269 = load i8* %268, align 1
  %270 = sext i8 %269 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.i:                                ; preds = %251
  %271 = getelementptr inbounds [8 x i16]* %233, i64 0, i64 %252
  %272 = load i16* %271, align 2
  %273 = sext i16 %272 to i32
  %274 = getelementptr inbounds [8 x i16]* %234, i64 0, i64 %indvars.iv173.i
  %275 = load i16* %274, align 2
  %276 = sext i16 %275 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit97.i:                                ; preds = %pcmp_val.exit99.i, %pcmp_val.exit99.thread122.i, %pcmp_val.exit99.thread120.i, %pcmp_val.exit99.thread.i
  %.0.i98118.i = phi i32 [ %273, %pcmp_val.exit99.i ], [ %267, %pcmp_val.exit99.thread122.i ], [ %261, %pcmp_val.exit99.thread120.i ], [ %255, %pcmp_val.exit99.thread.i ]
  %.0.i96.i = phi i32 [ %276, %pcmp_val.exit99.i ], [ %270, %pcmp_val.exit99.thread122.i ], [ %264, %pcmp_val.exit99.thread120.i ], [ %258, %pcmp_val.exit99.thread.i ]
  %277 = icmp eq i32 %.0.i98118.i, %.0.i96.i
  %278 = zext i1 %277 to i32
  %279 = and i32 %278, %res.6147.i
  %280 = trunc i64 %indvars.iv173.i to i32
  %281 = icmp sgt i32 %280, 0
  %indvars.iv.next174.i = add i64 %indvars.iv173.i, -1
  br i1 %281, label %251, label %._crit_edge151.i

._crit_edge151.i:                                 ; preds = %pcmp_val.exit97.i, %241
  %res.6.lcssa.i = phi i32 [ %243, %241 ], [ %279, %pcmp_val.exit97.i ]
  %indvars.iv.next176.i = add i64 %indvars.iv175.i, -1
  %282 = icmp sgt i32 %244, 0
  %indvars.iv.next171.i = add i32 %indvars.iv170.i, -1
  br i1 %282, label %241, label %.loopexit.i

.loopexit.i:                                      ; preds = %._crit_edge151.i, %229, %pcmp_val.exit101.i, %178, %._crit_edge133.i, %._crit_edge.i, %.preheader.i19, %.preheader135.i, %pcmp_ilen.exit18
  %res.7.i = phi i32 [ 0, %pcmp_ilen.exit18 ], [ 0, %.preheader.i19 ], [ 0, %.preheader135.i ], [ %187, %178 ], [ 0, %229 ], [ %res.1.lcssa.i, %._crit_edge.i ], [ %res.3.lcssa.i, %._crit_edge133.i ], [ %226, %pcmp_val.exit101.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %283 = lshr i32 %40, 4
  %284 = and i32 %283, 3
  switch i32 %284, label %293 [
    i32 1, label %285
    i32 3, label %289
  ]

; <label>:285                                     ; preds = %.loopexit.i
  %286 = shl i32 2, %43
  %287 = add nsw i32 %286, -1
  %288 = xor i32 %res.7.i, %287
  br label %293

; <label>:289                                     ; preds = %.loopexit.i
  %290 = shl i32 2, %44
  %291 = add nsw i32 %290, -1
  %292 = xor i32 %res.7.i, %291
  br label %293

; <label>:293                                     ; preds = %289, %285, %.loopexit.i
  %res.8.i = phi i32 [ %res.7.i, %.loopexit.i ], [ %292, %289 ], [ %288, %285 ]
  %294 = icmp eq i32 %res.8.i, 0
  br i1 %294, label %pcmpxstrx.exit, label %295

; <label>:295                                     ; preds = %293
  %296 = load %struct.CPUX86State** @env, align 8
  %297 = getelementptr inbounds %struct.CPUX86State* %296, i64 0, i32 3
  %298 = load i32* %297, align 4
  %299 = or i32 %298, 1
  store i32 %299, i32* %297, align 4
  %300 = and i32 %res.8.i, 1
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %307, label %302

; <label>:302                                     ; preds = %295
  %303 = load %struct.CPUX86State** @env, align 8
  %304 = getelementptr inbounds %struct.CPUX86State* %303, i64 0, i32 3
  %305 = load i32* %304, align 4
  %306 = or i32 %305, 2048
  store i32 %306, i32* %304, align 4
  br label %307

; <label>:307                                     ; preds = %302, %295
  %308 = and i32 %ctrl, 64
  %309 = icmp ne i32 %308, 0
  %310 = select i1 %309, i32 (i32)* @rffs1, i32 (i32)* @ffs1
  %311 = tail call i32 %310(i32 %res.8.i) nounwind
  %312 = add nsw i32 %311, -1
  %313 = load %struct.CPUX86State** @env, align 8
  %314 = getelementptr inbounds %struct.CPUX86State* %313, i64 0, i32 0, i64 1
  store i32 %312, i32* %314, align 4
  br label %318

pcmpxstrx.exit:                                   ; preds = %293
  %315 = lshr i32 16, %1
  %316 = load %struct.CPUX86State** @env, align 8
  %317 = getelementptr inbounds %struct.CPUX86State* %316, i64 0, i32 0, i64 1
  store i32 %315, i32* %317, align 4
  br label %318

; <label>:318                                     ; preds = %pcmpxstrx.exit, %307
  ret void
}

define void @helper_pcmpistrm_xmm(i64 %du, i64 %su, i32 %ctrl) nounwind uwtable {
  %1 = inttoptr i64 %du to %union.XMMReg*
  %2 = and i32 %ctrl, 1
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %.preheader.i, label %.preheader10.i

.preheader10.i:                                   ; preds = %0
  %4 = inttoptr i64 %su to [8 x i16]*
  br label %6

.preheader.i:                                     ; preds = %0
  %5 = inttoptr i64 %su to [16 x i8]*
  br label %14

; <label>:6                                       ; preds = %9, %.preheader10.i
  %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %9 ], [ 0, %.preheader10.i ]
  %val.0.i = phi i32 [ %13, %9 ], [ 0, %.preheader10.i ]
  %7 = trunc i64 %indvars.iv12.i to i32
  %8 = icmp slt i32 %7, 8
  br i1 %8, label %9, label %pcmp_ilen.exit

; <label>:9                                       ; preds = %6
  %10 = getelementptr inbounds [8 x i16]* %4, i64 0, i64 %indvars.iv12.i
  %11 = load i16* %10, align 2
  %12 = icmp eq i16 %11, 0
  %indvars.iv.next13.i = add i64 %indvars.iv12.i, 1
  %13 = add nsw i32 %val.0.i, 1
  br i1 %12, label %pcmp_ilen.exit, label %6

; <label>:14                                      ; preds = %17, %.preheader.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %17 ], [ 0, %.preheader.i ]
  %val.1.i = phi i32 [ %21, %17 ], [ 0, %.preheader.i ]
  %15 = trunc i64 %indvars.iv.i to i32
  %16 = icmp slt i32 %15, 16
  br i1 %16, label %17, label %pcmp_ilen.exit

; <label>:17                                      ; preds = %14
  %18 = getelementptr inbounds [16 x i8]* %5, i64 0, i64 %indvars.iv.i
  %19 = load i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %21 = add nsw i32 %val.1.i, 1
  br i1 %20, label %pcmp_ilen.exit, label %14

pcmp_ilen.exit:                                   ; preds = %17, %14, %9, %6
  %val.2.i = phi i32 [ %val.1.i, %17 ], [ %val.1.i, %14 ], [ %val.0.i, %9 ], [ %val.0.i, %6 ]
  br i1 %3, label %.preheader.i26, label %.preheader10.i25

.preheader10.i25:                                 ; preds = %pcmp_ilen.exit
  %22 = inttoptr i64 %du to [8 x i16]*
  br label %24

.preheader.i26:                                   ; preds = %pcmp_ilen.exit
  %23 = inttoptr i64 %du to [16 x i8]*
  br label %32

; <label>:24                                      ; preds = %27, %.preheader10.i25
  %indvars.iv12.i27 = phi i64 [ %indvars.iv.next13.i29, %27 ], [ 0, %.preheader10.i25 ]
  %val.0.i28 = phi i32 [ %31, %27 ], [ 0, %.preheader10.i25 ]
  %25 = trunc i64 %indvars.iv12.i27 to i32
  %26 = icmp slt i32 %25, 8
  br i1 %26, label %27, label %pcmp_ilen.exit34

; <label>:27                                      ; preds = %24
  %28 = getelementptr inbounds [8 x i16]* %22, i64 0, i64 %indvars.iv12.i27
  %29 = load i16* %28, align 2
  %30 = icmp eq i16 %29, 0
  %indvars.iv.next13.i29 = add i64 %indvars.iv12.i27, 1
  %31 = add nsw i32 %val.0.i28, 1
  br i1 %30, label %pcmp_ilen.exit34, label %24

; <label>:32                                      ; preds = %35, %.preheader.i26
  %indvars.iv.i30 = phi i64 [ %indvars.iv.next.i32, %35 ], [ 0, %.preheader.i26 ]
  %val.1.i31 = phi i32 [ %39, %35 ], [ 0, %.preheader.i26 ]
  %33 = trunc i64 %indvars.iv.i30 to i32
  %34 = icmp slt i32 %33, 16
  br i1 %34, label %35, label %pcmp_ilen.exit34

; <label>:35                                      ; preds = %32
  %36 = getelementptr inbounds [16 x i8]* %23, i64 0, i64 %indvars.iv.i30
  %37 = load i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  %indvars.iv.next.i32 = add i64 %indvars.iv.i30, 1
  %39 = add nsw i32 %val.1.i31, 1
  br i1 %38, label %pcmp_ilen.exit34, label %32

pcmp_ilen.exit34:                                 ; preds = %35, %32, %27, %24
  %val.2.i33 = phi i32 [ %val.1.i31, %35 ], [ %val.1.i31, %32 ], [ %val.0.i28, %27 ], [ %val.0.i28, %24 ]
  %40 = sub i32 0, %val.2.i33
  %sext35 = shl i32 %ctrl, 24
  %41 = ashr exact i32 %sext35, 24
  %42 = shl i32 %ctrl, 3
  %43 = and i32 %42, 8
  %44 = xor i32 %43, 15
  %45 = add i32 %val.2.i, -1
  %46 = add nsw i32 %val.2.i33, -1
  %47 = icmp slt i32 %45, %44
  %48 = select i1 %47, i32 64, i32 0
  %49 = icmp slt i32 %46, %44
  %50 = select i1 %49, i32 128, i32 0
  %51 = or i32 %50, %48
  %52 = load %struct.CPUX86State** @env, align 8
  %53 = getelementptr inbounds %struct.CPUX86State* %52, i64 0, i32 3
  store i32 %51, i32* %53, align 4
  %54 = lshr i32 %41, 2
  %55 = and i32 %54, 3
  switch i32 %55, label %.loopexit.i [
    i32 0, label %.preheader.i23
    i32 1, label %.preheader135.i
    i32 2, label %179
    i32 3, label %230
  ]

.preheader135.i:                                  ; preds = %pcmp_ilen.exit34
  %56 = icmp sgt i32 %val.2.i, 0
  br i1 %56, label %.lr.ph139.i, label %.loopexit.i

.lr.ph139.i:                                      ; preds = %.preheader135.i
  %57 = and i32 %ctrl, 3
  %58 = inttoptr i64 %su to [8 x i16]*
  %59 = add nsw i32 %val.2.i33, -2
  %60 = or i32 %59, 1
  %61 = icmp sgt i32 %60, -1
  %62 = inttoptr i64 %du to [8 x i16]*
  %63 = inttoptr i64 %du to [16 x i8]*
  %64 = inttoptr i64 %su to [16 x i8]*
  %65 = sext i32 %60 to i64
  %66 = sext i32 %val.2.i to i64
  br label %117

.preheader.i23:                                   ; preds = %pcmp_ilen.exit34
  %67 = icmp sgt i32 %val.2.i, 0
  br i1 %67, label %.lr.ph128.i, label %.loopexit.i

.lr.ph128.i:                                      ; preds = %.preheader.i23
  %68 = and i32 %ctrl, 3
  %69 = inttoptr i64 %su to [8 x i16]*
  %70 = icmp sgt i32 %val.2.i33, 0
  %71 = inttoptr i64 %du to [8 x i16]*
  %72 = inttoptr i64 %du to [16 x i8]*
  %73 = inttoptr i64 %su to [16 x i8]*
  %74 = sext i32 %val.2.i33 to i64
  %75 = sext i32 %val.2.i to i64
  br label %76

; <label>:76                                      ; preds = %._crit_edge.i, %.lr.ph128.i
  %indvars.iv159.in.i = phi i64 [ %75, %.lr.ph128.i ], [ %indvars.iv159.i, %._crit_edge.i ]
  %res.0126.i = phi i32 [ 0, %.lr.ph128.i ], [ %res.1.lcssa.i, %._crit_edge.i ]
  %indvars.iv159.i = add i64 %indvars.iv159.in.i, -1
  %77 = shl i32 %res.0126.i, 1
  switch i32 %68, label %90 [
    i32 0, label %78
    i32 1, label %82
    i32 2, label %86
  ]

; <label>:78                                      ; preds = %76
  %79 = getelementptr inbounds [16 x i8]* %73, i64 0, i64 %indvars.iv159.i
  %80 = load i8* %79, align 1
  %81 = zext i8 %80 to i32
  br label %pcmp_val.exit.i

; <label>:82                                      ; preds = %76
  %83 = getelementptr inbounds [8 x i16]* %69, i64 0, i64 %indvars.iv159.i
  %84 = load i16* %83, align 2
  %85 = zext i16 %84 to i32
  br label %pcmp_val.exit.i

; <label>:86                                      ; preds = %76
  %87 = getelementptr inbounds [16 x i8]* %73, i64 0, i64 %indvars.iv159.i
  %88 = load i8* %87, align 1
  %89 = sext i8 %88 to i32
  br label %pcmp_val.exit.i

; <label>:90                                      ; preds = %76
  %91 = getelementptr inbounds [8 x i16]* %69, i64 0, i64 %indvars.iv159.i
  %92 = load i16* %91, align 2
  %93 = sext i16 %92 to i32
  br label %pcmp_val.exit.i

pcmp_val.exit.i:                                  ; preds = %90, %86, %82, %78
  %.0.i.i = phi i32 [ %93, %90 ], [ %89, %86 ], [ %85, %82 ], [ %81, %78 ]
  br i1 %70, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %indvars.iv.in.i = phi i64 [ %indvars.iv.i24, %pcmp_val.exit111.i ], [ %74, %pcmp_val.exit.i ]
  %res.1124.i = phi i32 [ %112, %pcmp_val.exit111.i ], [ %77, %pcmp_val.exit.i ]
  %indvars.iv.i24 = add i64 %indvars.iv.in.i, -1
  switch i32 %68, label %106 [
    i32 0, label %94
    i32 1, label %98
    i32 2, label %102
  ]

; <label>:94                                      ; preds = %.lr.ph.i
  %95 = getelementptr inbounds [16 x i8]* %72, i64 0, i64 %indvars.iv.i24
  %96 = load i8* %95, align 1
  %97 = zext i8 %96 to i32
  br label %pcmp_val.exit111.i

; <label>:98                                      ; preds = %.lr.ph.i
  %99 = getelementptr inbounds [8 x i16]* %71, i64 0, i64 %indvars.iv.i24
  %100 = load i16* %99, align 2
  %101 = zext i16 %100 to i32
  br label %pcmp_val.exit111.i

; <label>:102                                     ; preds = %.lr.ph.i
  %103 = getelementptr inbounds [16 x i8]* %72, i64 0, i64 %indvars.iv.i24
  %104 = load i8* %103, align 1
  %105 = sext i8 %104 to i32
  br label %pcmp_val.exit111.i

; <label>:106                                     ; preds = %.lr.ph.i
  %107 = getelementptr inbounds [8 x i16]* %71, i64 0, i64 %indvars.iv.i24
  %108 = load i16* %107, align 2
  %109 = sext i16 %108 to i32
  br label %pcmp_val.exit111.i

pcmp_val.exit111.i:                               ; preds = %106, %102, %98, %94
  %.0.i110.i = phi i32 [ %109, %106 ], [ %105, %102 ], [ %101, %98 ], [ %97, %94 ]
  %110 = icmp eq i32 %.0.i.i, %.0.i110.i
  %111 = zext i1 %110 to i32
  %112 = or i32 %111, %res.1124.i
  %113 = trunc i64 %indvars.iv.i24 to i32
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %.lr.ph.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %pcmp_val.exit111.i, %pcmp_val.exit.i
  %res.1.lcssa.i = phi i32 [ %77, %pcmp_val.exit.i ], [ %112, %pcmp_val.exit111.i ]
  %115 = trunc i64 %indvars.iv159.i to i32
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %76, label %.loopexit.i

; <label>:117                                     ; preds = %._crit_edge133.i, %.lr.ph139.i
  %indvars.iv164.in.i = phi i64 [ %66, %.lr.ph139.i ], [ %indvars.iv164.i, %._crit_edge133.i ]
  %res.2137.i = phi i32 [ 0, %.lr.ph139.i ], [ %res.3.lcssa.i, %._crit_edge133.i ]
  %indvars.iv164.i = add i64 %indvars.iv164.in.i, -1
  %118 = shl i32 %res.2137.i, 1
  switch i32 %57, label %131 [
    i32 0, label %119
    i32 1, label %123
    i32 2, label %127
  ]

; <label>:119                                     ; preds = %117
  %120 = getelementptr inbounds [16 x i8]* %64, i64 0, i64 %indvars.iv164.i
  %121 = load i8* %120, align 1
  %122 = zext i8 %121 to i32
  br label %pcmp_val.exit109.i

; <label>:123                                     ; preds = %117
  %124 = getelementptr inbounds [8 x i16]* %58, i64 0, i64 %indvars.iv164.i
  %125 = load i16* %124, align 2
  %126 = zext i16 %125 to i32
  br label %pcmp_val.exit109.i

; <label>:127                                     ; preds = %117
  %128 = getelementptr inbounds [16 x i8]* %64, i64 0, i64 %indvars.iv164.i
  %129 = load i8* %128, align 1
  %130 = sext i8 %129 to i32
  br label %pcmp_val.exit109.i

; <label>:131                                     ; preds = %117
  %132 = getelementptr inbounds [8 x i16]* %58, i64 0, i64 %indvars.iv164.i
  %133 = load i16* %132, align 2
  %134 = sext i16 %133 to i32
  br label %pcmp_val.exit109.i

pcmp_val.exit109.i:                               ; preds = %131, %127, %123, %119
  %.0.i108.i = phi i32 [ %134, %131 ], [ %130, %127 ], [ %126, %123 ], [ %122, %119 ]
  br i1 %61, label %.lr.ph132.i, label %._crit_edge133.i

.lr.ph132.i:                                      ; preds = %171, %pcmp_val.exit109.i
  %indvars.iv162.i = phi i64 [ %indvars.iv.next163.i, %171 ], [ %65, %pcmp_val.exit109.i ]
  %res.3130.i = phi i32 [ %174, %171 ], [ %118, %pcmp_val.exit109.i ]
  switch i32 %57, label %147 [
    i32 0, label %135
    i32 1, label %139
    i32 2, label %143
  ]

; <label>:135                                     ; preds = %.lr.ph132.i
  %136 = getelementptr inbounds [16 x i8]* %63, i64 0, i64 %indvars.iv162.i
  %137 = load i8* %136, align 1
  %138 = zext i8 %137 to i32
  br label %pcmp_val.exit107.i

; <label>:139                                     ; preds = %.lr.ph132.i
  %140 = getelementptr inbounds [8 x i16]* %62, i64 0, i64 %indvars.iv162.i
  %141 = load i16* %140, align 2
  %142 = zext i16 %141 to i32
  br label %pcmp_val.exit107.i

; <label>:143                                     ; preds = %.lr.ph132.i
  %144 = getelementptr inbounds [16 x i8]* %63, i64 0, i64 %indvars.iv162.i
  %145 = load i8* %144, align 1
  %146 = sext i8 %145 to i32
  br label %pcmp_val.exit107.i

; <label>:147                                     ; preds = %.lr.ph132.i
  %148 = getelementptr inbounds [8 x i16]* %62, i64 0, i64 %indvars.iv162.i
  %149 = load i16* %148, align 2
  %150 = sext i16 %149 to i32
  br label %pcmp_val.exit107.i

pcmp_val.exit107.i:                               ; preds = %147, %143, %139, %135
  %.0.i106.i = phi i32 [ %150, %147 ], [ %146, %143 ], [ %142, %139 ], [ %138, %135 ]
  %151 = icmp sgt i32 %.0.i106.i, %.0.i108.i
  br i1 %151, label %171, label %152

; <label>:152                                     ; preds = %pcmp_val.exit107.i
  %153 = add nsw i64 %indvars.iv162.i, -1
  switch i32 %57, label %166 [
    i32 0, label %154
    i32 1, label %158
    i32 2, label %162
  ]

; <label>:154                                     ; preds = %152
  %155 = getelementptr inbounds [16 x i8]* %63, i64 0, i64 %153
  %156 = load i8* %155, align 1
  %157 = zext i8 %156 to i32
  br label %pcmp_val.exit105.i

; <label>:158                                     ; preds = %152
  %159 = getelementptr inbounds [8 x i16]* %62, i64 0, i64 %153
  %160 = load i16* %159, align 2
  %161 = zext i16 %160 to i32
  br label %pcmp_val.exit105.i

; <label>:162                                     ; preds = %152
  %163 = getelementptr inbounds [16 x i8]* %63, i64 0, i64 %153
  %164 = load i8* %163, align 1
  %165 = sext i8 %164 to i32
  br label %pcmp_val.exit105.i

; <label>:166                                     ; preds = %152
  %167 = getelementptr inbounds [8 x i16]* %62, i64 0, i64 %153
  %168 = load i16* %167, align 2
  %169 = sext i16 %168 to i32
  br label %pcmp_val.exit105.i

pcmp_val.exit105.i:                               ; preds = %166, %162, %158, %154
  %.0.i104.i = phi i32 [ %169, %166 ], [ %165, %162 ], [ %161, %158 ], [ %157, %154 ]
  %170 = icmp sge i32 %.0.i104.i, %.0.i108.i
  br label %171

; <label>:171                                     ; preds = %pcmp_val.exit105.i, %pcmp_val.exit107.i
  %172 = phi i1 [ false, %pcmp_val.exit107.i ], [ %170, %pcmp_val.exit105.i ]
  %173 = zext i1 %172 to i32
  %174 = or i32 %173, %res.3130.i
  %indvars.iv.next163.i = add i64 %indvars.iv162.i, -2
  %175 = trunc i64 %indvars.iv.next163.i to i32
  %176 = icmp sgt i32 %175, -1
  br i1 %176, label %.lr.ph132.i, label %._crit_edge133.i

._crit_edge133.i:                                 ; preds = %171, %pcmp_val.exit109.i
  %res.3.lcssa.i = phi i32 [ %118, %pcmp_val.exit109.i ], [ %174, %171 ]
  %177 = trunc i64 %indvars.iv164.i to i32
  %178 = icmp sgt i32 %177, 0
  br i1 %178, label %117, label %.loopexit.i

; <label>:179                                     ; preds = %pcmp_ilen.exit34
  %180 = icmp sgt i32 %45, %46
  %181 = select i1 %180, i32 %45, i32 %46
  %182 = sub nsw i32 %44, %181
  %183 = shl i32 2, %182
  %184 = add nsw i32 %183, -1
  %185 = icmp slt i32 %45, %46
  %186 = select i1 %185, i32 %45, i32 %46
  %187 = sub nsw i32 %181, %186
  %188 = shl i32 %184, %187
  %189 = icmp sgt i32 %186, -1
  br i1 %189, label %.lr.ph145.i, label %.loopexit.i

.lr.ph145.i:                                      ; preds = %179
  %190 = and i32 %ctrl, 3
  %191 = inttoptr i64 %su to [8 x i16]*
  %192 = inttoptr i64 %du to [8 x i16]*
  %193 = inttoptr i64 %su to [16 x i8]*
  %194 = inttoptr i64 %du to [16 x i8]*
  %195 = sub i32 0, %val.2.i
  %196 = icmp sgt i32 %40, %195
  %smax.i = select i1 %196, i32 %40, i32 %195
  %197 = xor i32 %smax.i, -1
  %198 = sext i32 %197 to i64
  br label %199

; <label>:199                                     ; preds = %pcmp_val.exit101.i, %.lr.ph145.i
  %indvars.iv167.i = phi i64 [ %198, %.lr.ph145.i ], [ %indvars.iv.next168.i, %pcmp_val.exit101.i ]
  %res.4142.i = phi i32 [ %188, %.lr.ph145.i ], [ %227, %pcmp_val.exit101.i ]
  %200 = shl i32 %res.4142.i, 1
  switch i32 %190, label %pcmp_val.exit103.i [
    i32 0, label %pcmp_val.exit103.thread.i
    i32 1, label %pcmp_val.exit103.thread114.i
    i32 2, label %pcmp_val.exit103.thread116.i
  ]

pcmp_val.exit103.thread.i:                        ; preds = %199
  %201 = getelementptr inbounds [16 x i8]* %193, i64 0, i64 %indvars.iv167.i
  %202 = load i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = getelementptr inbounds [16 x i8]* %194, i64 0, i64 %indvars.iv167.i
  %205 = load i8* %204, align 1
  %206 = zext i8 %205 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread114.i:                     ; preds = %199
  %207 = getelementptr inbounds [8 x i16]* %191, i64 0, i64 %indvars.iv167.i
  %208 = load i16* %207, align 2
  %209 = zext i16 %208 to i32
  %210 = getelementptr inbounds [8 x i16]* %192, i64 0, i64 %indvars.iv167.i
  %211 = load i16* %210, align 2
  %212 = zext i16 %211 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.thread116.i:                     ; preds = %199
  %213 = getelementptr inbounds [16 x i8]* %193, i64 0, i64 %indvars.iv167.i
  %214 = load i8* %213, align 1
  %215 = sext i8 %214 to i32
  %216 = getelementptr inbounds [16 x i8]* %194, i64 0, i64 %indvars.iv167.i
  %217 = load i8* %216, align 1
  %218 = sext i8 %217 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit103.i:                               ; preds = %199
  %219 = getelementptr inbounds [8 x i16]* %191, i64 0, i64 %indvars.iv167.i
  %220 = load i16* %219, align 2
  %221 = sext i16 %220 to i32
  %222 = getelementptr inbounds [8 x i16]* %192, i64 0, i64 %indvars.iv167.i
  %223 = load i16* %222, align 2
  %224 = sext i16 %223 to i32
  br label %pcmp_val.exit101.i

pcmp_val.exit101.i:                               ; preds = %pcmp_val.exit103.i, %pcmp_val.exit103.thread116.i, %pcmp_val.exit103.thread114.i, %pcmp_val.exit103.thread.i
  %.0.i102112.i = phi i32 [ %221, %pcmp_val.exit103.i ], [ %215, %pcmp_val.exit103.thread116.i ], [ %209, %pcmp_val.exit103.thread114.i ], [ %203, %pcmp_val.exit103.thread.i ]
  %.0.i100.i = phi i32 [ %224, %pcmp_val.exit103.i ], [ %218, %pcmp_val.exit103.thread116.i ], [ %212, %pcmp_val.exit103.thread114.i ], [ %206, %pcmp_val.exit103.thread.i ]
  %225 = icmp eq i32 %.0.i102112.i, %.0.i100.i
  %226 = zext i1 %225 to i32
  %227 = or i32 %226, %200
  %228 = trunc i64 %indvars.iv167.i to i32
  %229 = icmp sgt i32 %228, 0
  %indvars.iv.next168.i = add i64 %indvars.iv167.i, -1
  br i1 %229, label %199, label %.loopexit.i

; <label>:230                                     ; preds = %pcmp_ilen.exit34
  %231 = sub nsw i32 %45, %46
  %232 = icmp sgt i32 %231, -1
  br i1 %232, label %.lr.ph157.i, label %.loopexit.i

.lr.ph157.i:                                      ; preds = %230
  %233 = and i32 %ctrl, 3
  %234 = inttoptr i64 %su to [8 x i16]*
  %235 = inttoptr i64 %du to [8 x i16]*
  %236 = inttoptr i64 %su to [16 x i8]*
  %237 = inttoptr i64 %du to [16 x i8]*
  %238 = sub i32 %45, %44
  %239 = sub i32 %238, %val.2.i33
  %240 = sub i32 %val.2.i, %val.2.i33
  %241 = sext i32 %240 to i64
  br label %242

; <label>:242                                     ; preds = %._crit_edge151.i, %.lr.ph157.i
  %indvars.iv175.i = phi i64 [ %241, %.lr.ph157.i ], [ %indvars.iv.next176.i, %._crit_edge151.i ]
  %indvars.iv170.i = phi i32 [ %239, %.lr.ph157.i ], [ %indvars.iv.next171.i, %._crit_edge151.i ]
  %res.5154.i = phi i32 [ 0, %.lr.ph157.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %243 = shl i32 %res.5154.i, 1
  %244 = or i32 %243, 1
  %245 = trunc i64 %indvars.iv175.i to i32
  %246 = sub nsw i32 %44, %245
  %247 = icmp slt i32 %246, %46
  %..i = select i1 %247, i32 %246, i32 %46
  %248 = icmp sgt i32 %..i, -1
  br i1 %248, label %.lr.ph150.i, label %._crit_edge151.i

.lr.ph150.i:                                      ; preds = %242
  %249 = icmp sgt i32 %indvars.iv170.i, %40
  %smax172.i = select i1 %249, i32 %indvars.iv170.i, i32 %40
  %250 = xor i32 %smax172.i, -1
  %251 = sext i32 %250 to i64
  br label %252

; <label>:252                                     ; preds = %pcmp_val.exit97.i, %.lr.ph150.i
  %indvars.iv173.i = phi i64 [ %251, %.lr.ph150.i ], [ %indvars.iv.next174.i, %pcmp_val.exit97.i ]
  %res.6147.i = phi i32 [ %244, %.lr.ph150.i ], [ %280, %pcmp_val.exit97.i ]
  %253 = add nsw i64 %indvars.iv173.i, %indvars.iv175.i
  switch i32 %233, label %pcmp_val.exit99.i [
    i32 0, label %pcmp_val.exit99.thread.i
    i32 1, label %pcmp_val.exit99.thread120.i
    i32 2, label %pcmp_val.exit99.thread122.i
  ]

pcmp_val.exit99.thread.i:                         ; preds = %252
  %254 = getelementptr inbounds [16 x i8]* %236, i64 0, i64 %253
  %255 = load i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = getelementptr inbounds [16 x i8]* %237, i64 0, i64 %indvars.iv173.i
  %258 = load i8* %257, align 1
  %259 = zext i8 %258 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread120.i:                      ; preds = %252
  %260 = getelementptr inbounds [8 x i16]* %234, i64 0, i64 %253
  %261 = load i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = getelementptr inbounds [8 x i16]* %235, i64 0, i64 %indvars.iv173.i
  %264 = load i16* %263, align 2
  %265 = zext i16 %264 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.thread122.i:                      ; preds = %252
  %266 = getelementptr inbounds [16 x i8]* %236, i64 0, i64 %253
  %267 = load i8* %266, align 1
  %268 = sext i8 %267 to i32
  %269 = getelementptr inbounds [16 x i8]* %237, i64 0, i64 %indvars.iv173.i
  %270 = load i8* %269, align 1
  %271 = sext i8 %270 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit99.i:                                ; preds = %252
  %272 = getelementptr inbounds [8 x i16]* %234, i64 0, i64 %253
  %273 = load i16* %272, align 2
  %274 = sext i16 %273 to i32
  %275 = getelementptr inbounds [8 x i16]* %235, i64 0, i64 %indvars.iv173.i
  %276 = load i16* %275, align 2
  %277 = sext i16 %276 to i32
  br label %pcmp_val.exit97.i

pcmp_val.exit97.i:                                ; preds = %pcmp_val.exit99.i, %pcmp_val.exit99.thread122.i, %pcmp_val.exit99.thread120.i, %pcmp_val.exit99.thread.i
  %.0.i98118.i = phi i32 [ %274, %pcmp_val.exit99.i ], [ %268, %pcmp_val.exit99.thread122.i ], [ %262, %pcmp_val.exit99.thread120.i ], [ %256, %pcmp_val.exit99.thread.i ]
  %.0.i96.i = phi i32 [ %277, %pcmp_val.exit99.i ], [ %271, %pcmp_val.exit99.thread122.i ], [ %265, %pcmp_val.exit99.thread120.i ], [ %259, %pcmp_val.exit99.thread.i ]
  %278 = icmp eq i32 %.0.i98118.i, %.0.i96.i
  %279 = zext i1 %278 to i32
  %280 = and i32 %279, %res.6147.i
  %281 = trunc i64 %indvars.iv173.i to i32
  %282 = icmp sgt i32 %281, 0
  %indvars.iv.next174.i = add i64 %indvars.iv173.i, -1
  br i1 %282, label %252, label %._crit_edge151.i

._crit_edge151.i:                                 ; preds = %pcmp_val.exit97.i, %242
  %res.6.lcssa.i = phi i32 [ %244, %242 ], [ %280, %pcmp_val.exit97.i ]
  %indvars.iv.next176.i = add i64 %indvars.iv175.i, -1
  %283 = icmp sgt i32 %245, 0
  %indvars.iv.next171.i = add i32 %indvars.iv170.i, -1
  br i1 %283, label %242, label %.loopexit.i

.loopexit.i:                                      ; preds = %._crit_edge151.i, %230, %pcmp_val.exit101.i, %179, %._crit_edge133.i, %._crit_edge.i, %.preheader.i23, %.preheader135.i, %pcmp_ilen.exit34
  %res.7.i = phi i32 [ 0, %pcmp_ilen.exit34 ], [ 0, %.preheader.i23 ], [ 0, %.preheader135.i ], [ %188, %179 ], [ 0, %230 ], [ %res.1.lcssa.i, %._crit_edge.i ], [ %res.3.lcssa.i, %._crit_edge133.i ], [ %227, %pcmp_val.exit101.i ], [ %res.6.lcssa.i, %._crit_edge151.i ]
  %284 = lshr i32 %41, 4
  %285 = and i32 %284, 3
  switch i32 %285, label %294 [
    i32 1, label %286
    i32 3, label %290
  ]

; <label>:286                                     ; preds = %.loopexit.i
  %287 = shl i32 2, %44
  %288 = add nsw i32 %287, -1
  %289 = xor i32 %res.7.i, %288
  br label %294

; <label>:290                                     ; preds = %.loopexit.i
  %291 = shl i32 2, %45
  %292 = add nsw i32 %291, -1
  %293 = xor i32 %res.7.i, %292
  br label %294

; <label>:294                                     ; preds = %290, %286, %.loopexit.i
  %res.8.i = phi i32 [ %res.7.i, %.loopexit.i ], [ %293, %290 ], [ %289, %286 ]
  %295 = icmp eq i32 %res.8.i, 0
  br i1 %295, label %pcmpxstrx.exit, label %296

; <label>:296                                     ; preds = %294
  %297 = load %struct.CPUX86State** @env, align 8
  %298 = getelementptr inbounds %struct.CPUX86State* %297, i64 0, i32 3
  %299 = load i32* %298, align 4
  %300 = or i32 %299, 1
  store i32 %300, i32* %298, align 4
  %301 = and i32 %res.8.i, 1
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %pcmpxstrx.exit, label %303

; <label>:303                                     ; preds = %296
  %304 = load %struct.CPUX86State** @env, align 8
  %305 = getelementptr inbounds %struct.CPUX86State* %304, i64 0, i32 3
  %306 = load i32* %305, align 4
  %307 = or i32 %306, 2048
  store i32 %307, i32* %305, align 4
  br label %pcmpxstrx.exit

pcmpxstrx.exit:                                   ; preds = %303, %296, %294
  %308 = and i32 %ctrl, 64
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %407, label %310

; <label>:310                                     ; preds = %pcmpxstrx.exit
  br i1 %3, label %.preheader, label %.preheader38

.preheader38:                                     ; preds = %310
  %311 = inttoptr i64 %du to [8 x i16]*
  %312 = shl i32 %res.8.i, 31
  %sext22 = ashr exact i32 %312, 31
  %313 = trunc i32 %sext22 to i16
  %314 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 0
  store i16 %313, i16* %314, align 2
  %315 = lshr i32 %res.8.i, 1
  %316 = shl i32 %315, 31
  %sext22.1 = ashr exact i32 %316, 31
  %317 = trunc i32 %sext22.1 to i16
  %318 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 1
  store i16 %317, i16* %318, align 2
  %319 = lshr i32 %res.8.i, 2
  %320 = shl i32 %319, 31
  %sext22.2 = ashr exact i32 %320, 31
  %321 = trunc i32 %sext22.2 to i16
  %322 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 2
  store i16 %321, i16* %322, align 2
  %323 = lshr i32 %res.8.i, 3
  %324 = shl i32 %323, 31
  %sext22.3 = ashr exact i32 %324, 31
  %325 = trunc i32 %sext22.3 to i16
  %326 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 3
  store i16 %325, i16* %326, align 2
  %327 = lshr i32 %res.8.i, 4
  %328 = shl i32 %327, 31
  %sext22.4 = ashr exact i32 %328, 31
  %329 = trunc i32 %sext22.4 to i16
  %330 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 4
  store i16 %329, i16* %330, align 2
  %331 = lshr i32 %res.8.i, 5
  %332 = shl i32 %331, 31
  %sext22.5 = ashr exact i32 %332, 31
  %333 = trunc i32 %sext22.5 to i16
  %334 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 5
  store i16 %333, i16* %334, align 2
  %335 = lshr i32 %res.8.i, 6
  %336 = shl i32 %335, 31
  %sext22.6 = ashr exact i32 %336, 31
  %337 = trunc i32 %sext22.6 to i16
  %338 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 6
  store i16 %337, i16* %338, align 2
  %339 = lshr i32 %res.8.i, 7
  %340 = shl i32 %339, 31
  %sext22.7 = ashr exact i32 %340, 31
  %341 = trunc i32 %sext22.7 to i16
  %342 = getelementptr inbounds [8 x i16]* %311, i64 0, i64 7
  store i16 %341, i16* %342, align 2
  br label %411

.preheader:                                       ; preds = %310
  %343 = inttoptr i64 %du to [16 x i8]*
  %344 = shl i32 %res.8.i, 31
  %sext = ashr exact i32 %344, 31
  %345 = trunc i32 %sext to i8
  %346 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 0
  store i8 %345, i8* %346, align 1
  %347 = lshr i32 %res.8.i, 1
  %348 = shl i32 %347, 31
  %sext.1 = ashr exact i32 %348, 31
  %349 = trunc i32 %sext.1 to i8
  %350 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 1
  store i8 %349, i8* %350, align 1
  %351 = lshr i32 %res.8.i, 2
  %352 = shl i32 %351, 31
  %sext.2 = ashr exact i32 %352, 31
  %353 = trunc i32 %sext.2 to i8
  %354 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 2
  store i8 %353, i8* %354, align 1
  %355 = lshr i32 %res.8.i, 3
  %356 = shl i32 %355, 31
  %sext.3 = ashr exact i32 %356, 31
  %357 = trunc i32 %sext.3 to i8
  %358 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 3
  store i8 %357, i8* %358, align 1
  %359 = lshr i32 %res.8.i, 4
  %360 = shl i32 %359, 31
  %sext.4 = ashr exact i32 %360, 31
  %361 = trunc i32 %sext.4 to i8
  %362 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 4
  store i8 %361, i8* %362, align 1
  %363 = lshr i32 %res.8.i, 5
  %364 = shl i32 %363, 31
  %sext.5 = ashr exact i32 %364, 31
  %365 = trunc i32 %sext.5 to i8
  %366 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 5
  store i8 %365, i8* %366, align 1
  %367 = lshr i32 %res.8.i, 6
  %368 = shl i32 %367, 31
  %sext.6 = ashr exact i32 %368, 31
  %369 = trunc i32 %sext.6 to i8
  %370 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 6
  store i8 %369, i8* %370, align 1
  %371 = lshr i32 %res.8.i, 7
  %372 = shl i32 %371, 31
  %sext.7 = ashr exact i32 %372, 31
  %373 = trunc i32 %sext.7 to i8
  %374 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 7
  store i8 %373, i8* %374, align 1
  %375 = lshr i32 %res.8.i, 8
  %376 = shl i32 %375, 31
  %sext.8 = ashr exact i32 %376, 31
  %377 = trunc i32 %sext.8 to i8
  %378 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 8
  store i8 %377, i8* %378, align 1
  %379 = lshr i32 %res.8.i, 9
  %380 = shl i32 %379, 31
  %sext.9 = ashr exact i32 %380, 31
  %381 = trunc i32 %sext.9 to i8
  %382 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 9
  store i8 %381, i8* %382, align 1
  %383 = lshr i32 %res.8.i, 10
  %384 = shl i32 %383, 31
  %sext.10 = ashr exact i32 %384, 31
  %385 = trunc i32 %sext.10 to i8
  %386 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 10
  store i8 %385, i8* %386, align 1
  %387 = lshr i32 %res.8.i, 11
  %388 = shl i32 %387, 31
  %sext.11 = ashr exact i32 %388, 31
  %389 = trunc i32 %sext.11 to i8
  %390 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 11
  store i8 %389, i8* %390, align 1
  %391 = lshr i32 %res.8.i, 12
  %392 = shl i32 %391, 31
  %sext.12 = ashr exact i32 %392, 31
  %393 = trunc i32 %sext.12 to i8
  %394 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 12
  store i8 %393, i8* %394, align 1
  %395 = lshr i32 %res.8.i, 13
  %396 = shl i32 %395, 31
  %sext.13 = ashr exact i32 %396, 31
  %397 = trunc i32 %sext.13 to i8
  %398 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 13
  store i8 %397, i8* %398, align 1
  %399 = lshr i32 %res.8.i, 14
  %400 = shl i32 %399, 31
  %sext.14 = ashr exact i32 %400, 31
  %401 = trunc i32 %sext.14 to i8
  %402 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 14
  store i8 %401, i8* %402, align 1
  %403 = lshr i32 %res.8.i, 15
  %404 = shl i32 %403, 31
  %sext.15 = ashr exact i32 %404, 31
  %405 = trunc i32 %sext.15 to i8
  %406 = getelementptr inbounds [16 x i8]* %343, i64 0, i64 15
  store i8 %405, i8* %406, align 1
  br label %411

; <label>:407                                     ; preds = %pcmpxstrx.exit
  %408 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 1
  store i64 0, i64* %408, align 8
  %409 = zext i32 %res.8.i to i64
  %410 = getelementptr inbounds %union.XMMReg* %1, i64 0, i32 0, i64 0
  store i64 %409, i64* %410, align 8
  br label %411

; <label>:411                                     ; preds = %407, %.preheader, %.preheader38
  ret void
}

define i32 @helper_crc32(i32 %crc1, i32 %msg, i32 %len) nounwind uwtable readnone {
  %1 = sub i32 32, %len
  %2 = lshr i32 -1, %1
  %3 = and i32 %2, %msg
  %4 = xor i32 %3, %crc1
  %5 = icmp eq i32 %len, 0
  br i1 %5, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %crc.06 = phi i32 [ %11, %.lr.ph ], [ %4, %0 ]
  %.05 = phi i32 [ %6, %.lr.ph ], [ %len, %0 ]
  %6 = add i32 %.05, -1
  %7 = lshr i32 %crc.06, 1
  %8 = and i32 %crc.06, 1
  %9 = icmp ne i32 %8, 0
  %10 = select i1 %9, i32 -2097792136, i32 0
  %11 = xor i32 %10, %7
  %12 = icmp eq i32 %6, 0
  br i1 %12, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  %crc.0.lcssa = phi i32 [ %4, %0 ], [ %11, %.lr.ph ]
  ret i32 %crc.0.lcssa
}

define i32 @helper_popcnt(i32 %n, i32 %type) nounwind uwtable {
  %1 = icmp ne i32 %n, 0
  %2 = select i1 %1, i32 0, i32 64
  %3 = load %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 3
  store i32 %2, i32* %4, align 4
  %5 = and i32 %n, 1431655765
  %6 = lshr i32 %n, 1
  %7 = and i32 %6, 1431655765
  %8 = add i32 %7, %5
  %9 = and i32 %8, 858993459
  %10 = lshr i32 %8, 2
  %11 = and i32 %10, 858993459
  %12 = add i32 %11, %9
  %13 = and i32 %12, 252645135
  %14 = lshr i32 %12, 4
  %15 = and i32 %14, 252645135
  %16 = add i32 %15, %13
  %17 = and i32 %16, 16711935
  %18 = lshr i32 %16, 8
  %19 = and i32 %18, 16711935
  %20 = add i32 %19, %17
  %21 = icmp eq i32 %type, 1
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %0
  %fold = add i32 %18, %16
  %23 = and i32 %fold, 255
  br label %28

; <label>:24                                      ; preds = %0
  %25 = and i32 %20, 65535
  %26 = lshr i32 %20, 16
  %27 = add i32 %25, %26
  br label %28

; <label>:28                                      ; preds = %24, %22
  %.0 = phi i32 [ %23, %22 ], [ %27, %24 ]
  ret i32 %.0
}

define i32 @helper_rclb(i32 %t0, i32 %t1) nounwind uwtable {
  %1 = and i32 %t1, 31
  %2 = zext i32 %1 to i64
  %3 = getelementptr inbounds [32 x i8]* @rclb_table, i64 0, i64 %2
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i8 %4, 0
  %7 = load %struct.CPUX86State** @env, align 8
  br i1 %6, label %34, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 5
  %10 = load i32* %9, align 4
  %11 = tail call i32 @helper_cc_compute_all(i32 %10)
  %12 = and i32 %t0, 255
  %13 = shl i32 %12, %5
  %14 = and i32 %11, 1
  %15 = add nsw i32 %5, -1
  %16 = shl i32 %14, %15
  %17 = or i32 %16, %13
  %18 = icmp ugt i8 %4, 1
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %8
  %20 = sub nsw i32 9, %5
  %21 = lshr i32 %12, %20
  %22 = or i32 %17, %21
  br label %23

; <label>:23                                      ; preds = %19, %8
  %res.0 = phi i32 [ %22, %19 ], [ %17, %8 ]
  %24 = and i32 %11, -2050
  %25 = xor i32 %res.0, %t0
  %26 = shl i32 %25, 4
  %27 = and i32 %26, 2048
  %28 = sub nsw i32 8, %5
  %29 = lshr i32 %12, %28
  %30 = and i32 %29, 1
  %31 = or i32 %24, %30
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 %32, i32* %33, align 4
  br label %36

; <label>:34                                      ; preds = %0
  %35 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 -1, i32* %35, align 4
  br label %36

; <label>:36                                      ; preds = %34, %23
  %.0 = phi i32 [ %res.0, %23 ], [ %t0, %34 ]
  ret i32 %.0
}

define i32 @helper_rcrb(i32 %t0, i32 %t1) nounwind uwtable {
  %1 = and i32 %t1, 31
  %2 = zext i32 %1 to i64
  %3 = getelementptr inbounds [32 x i8]* @rclb_table, i64 0, i64 %2
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i8 %4, 0
  %7 = load %struct.CPUX86State** @env, align 8
  br i1 %6, label %34, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 5
  %10 = load i32* %9, align 4
  %11 = tail call i32 @helper_cc_compute_all(i32 %10)
  %12 = and i32 %t0, 255
  %13 = lshr i32 %12, %5
  %14 = and i32 %11, 1
  %15 = sub nsw i32 8, %5
  %16 = shl i32 %14, %15
  %17 = or i32 %16, %13
  %18 = icmp ugt i8 %4, 1
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %8
  %20 = sub nsw i32 9, %5
  %21 = shl i32 %12, %20
  %22 = or i32 %17, %21
  br label %23

; <label>:23                                      ; preds = %19, %8
  %res.0 = phi i32 [ %22, %19 ], [ %17, %8 ]
  %24 = and i32 %11, -2050
  %25 = xor i32 %res.0, %t0
  %26 = shl i32 %25, 4
  %27 = and i32 %26, 2048
  %28 = add nsw i32 %5, -1
  %29 = lshr i32 %12, %28
  %30 = and i32 %29, 1
  %31 = or i32 %24, %30
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 %32, i32* %33, align 4
  br label %36

; <label>:34                                      ; preds = %0
  %35 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 -1, i32* %35, align 4
  br label %36

; <label>:36                                      ; preds = %34, %23
  %.0 = phi i32 [ %res.0, %23 ], [ %t0, %34 ]
  ret i32 %.0
}

define i32 @helper_rclw(i32 %t0, i32 %t1) nounwind uwtable {
  %1 = and i32 %t1, 31
  %2 = zext i32 %1 to i64
  %3 = getelementptr inbounds [32 x i8]* @rclw_table, i64 0, i64 %2
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i8 %4, 0
  %7 = load %struct.CPUX86State** @env, align 8
  br i1 %6, label %34, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 5
  %10 = load i32* %9, align 4
  %11 = tail call i32 @helper_cc_compute_all(i32 %10)
  %12 = and i32 %t0, 65535
  %13 = shl i32 %12, %5
  %14 = and i32 %11, 1
  %15 = add nsw i32 %5, -1
  %16 = shl i32 %14, %15
  %17 = or i32 %16, %13
  %18 = icmp ugt i8 %4, 1
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %8
  %20 = sub nsw i32 17, %5
  %21 = lshr i32 %12, %20
  %22 = or i32 %17, %21
  br label %23

; <label>:23                                      ; preds = %19, %8
  %res.0 = phi i32 [ %22, %19 ], [ %17, %8 ]
  %24 = and i32 %11, -2050
  %25 = xor i32 %res.0, %t0
  %26 = lshr i32 %25, 4
  %27 = and i32 %26, 2048
  %28 = sub nsw i32 16, %5
  %29 = lshr i32 %12, %28
  %30 = and i32 %29, 1
  %31 = or i32 %24, %30
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 %32, i32* %33, align 4
  br label %36

; <label>:34                                      ; preds = %0
  %35 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 -1, i32* %35, align 4
  br label %36

; <label>:36                                      ; preds = %34, %23
  %.0 = phi i32 [ %res.0, %23 ], [ %t0, %34 ]
  ret i32 %.0
}

define i32 @helper_rcrw(i32 %t0, i32 %t1) nounwind uwtable {
  %1 = and i32 %t1, 31
  %2 = zext i32 %1 to i64
  %3 = getelementptr inbounds [32 x i8]* @rclw_table, i64 0, i64 %2
  %4 = load i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i8 %4, 0
  %7 = load %struct.CPUX86State** @env, align 8
  br i1 %6, label %34, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 5
  %10 = load i32* %9, align 4
  %11 = tail call i32 @helper_cc_compute_all(i32 %10)
  %12 = and i32 %t0, 65535
  %13 = lshr i32 %12, %5
  %14 = and i32 %11, 1
  %15 = sub nsw i32 16, %5
  %16 = shl i32 %14, %15
  %17 = or i32 %16, %13
  %18 = icmp ugt i8 %4, 1
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %8
  %20 = sub nsw i32 17, %5
  %21 = shl i32 %12, %20
  %22 = or i32 %17, %21
  br label %23

; <label>:23                                      ; preds = %19, %8
  %res.0 = phi i32 [ %22, %19 ], [ %17, %8 ]
  %24 = and i32 %11, -2050
  %25 = xor i32 %res.0, %t0
  %26 = lshr i32 %25, 4
  %27 = and i32 %26, 2048
  %28 = add nsw i32 %5, -1
  %29 = lshr i32 %12, %28
  %30 = and i32 %29, 1
  %31 = or i32 %24, %30
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 %32, i32* %33, align 4
  br label %36

; <label>:34                                      ; preds = %0
  %35 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 33
  store i32 -1, i32* %35, align 4
  br label %36

; <label>:36                                      ; preds = %34, %23
  %.0 = phi i32 [ %res.0, %23 ], [ %t0, %34 ]
  ret i32 %.0
}

define i32 @helper_rcll(i32 %t0, i32 %t1) nounwind uwtable {
  %1 = and i32 %t1, 31
  %2 = icmp eq i32 %1, 0
  %3 = load %struct.CPUX86State** @env, align 8
  br i1 %2, label %29, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 5
  %6 = load i32* %5, align 4
  %7 = tail call i32 @helper_cc_compute_all(i32 %6)
  %8 = shl i32 %t0, %1
  %9 = and i32 %7, 1
  %10 = add nsw i32 %1, -1
  %11 = shl i32 %9, %10
  %12 = or i32 %11, %8
  %13 = icmp ugt i32 %1, 1
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %4
  %15 = sub nsw i32 33, %1
  %16 = lshr i32 %t0, %15
  %17 = or i32 %12, %16
  br label %18

; <label>:18                                      ; preds = %14, %4
  %res.0 = phi i32 [ %17, %14 ], [ %12, %4 ]
  %19 = and i32 %7, -2050
  %20 = xor i32 %res.0, %t0
  %21 = lshr i32 %20, 20
  %22 = and i32 %21, 2048
  %23 = sub nsw i32 32, %1
  %24 = lshr i32 %t0, %23
  %25 = and i32 %24, 1
  %26 = or i32 %19, %25
  %27 = or i32 %26, %22
  %28 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 33
  store i32 %27, i32* %28, align 4
  br label %31

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 33
  store i32 -1, i32* %30, align 4
  br label %31

; <label>:31                                      ; preds = %29, %18
  %.0 = phi i32 [ %res.0, %18 ], [ %t0, %29 ]
  ret i32 %.0
}

define i32 @helper_rcrl(i32 %t0, i32 %t1) nounwind uwtable {
  %1 = and i32 %t1, 31
  %2 = icmp eq i32 %1, 0
  %3 = load %struct.CPUX86State** @env, align 8
  br i1 %2, label %29, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 5
  %6 = load i32* %5, align 4
  %7 = tail call i32 @helper_cc_compute_all(i32 %6)
  %8 = lshr i32 %t0, %1
  %9 = and i32 %7, 1
  %10 = sub nsw i32 32, %1
  %11 = shl i32 %9, %10
  %12 = or i32 %11, %8
  %13 = icmp ugt i32 %1, 1
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %4
  %15 = sub nsw i32 33, %1
  %16 = shl i32 %t0, %15
  %17 = or i32 %12, %16
  br label %18

; <label>:18                                      ; preds = %14, %4
  %res.0 = phi i32 [ %17, %14 ], [ %12, %4 ]
  %19 = and i32 %7, -2050
  %20 = xor i32 %res.0, %t0
  %21 = lshr i32 %20, 20
  %22 = and i32 %21, 2048
  %23 = add nsw i32 %1, -1
  %24 = lshr i32 %t0, %23
  %25 = and i32 %24, 1
  %26 = or i32 %19, %25
  %27 = or i32 %26, %22
  %28 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 33
  store i32 %27, i32* %28, align 4
  br label %31

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.CPUX86State* %3, i64 0, i32 33
  store i32 -1, i32* %30, align 4
  br label %31

; <label>:31                                      ; preds = %29, %18
  %.0 = phi i32 [ %res.0, %18 ], [ %t0, %29 ]
  ret i32 %.0
}

define i32 @helper_bsf(i32 %t0) nounwind uwtable readnone {
  %1 = and i32 %t0, 1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %0
  %res.03 = phi i32 [ %4, %.lr.ph ], [ %t0, %0 ]
  %count.02 = phi i32 [ %3, %.lr.ph ], [ 0, %0 ]
  %3 = add nsw i32 %count.02, 1
  %4 = lshr i32 %res.03, 1
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %0
  %count.0.lcssa = phi i32 [ 0, %0 ], [ %3, %.lr.ph ]
  ret i32 %count.0.lcssa
}

define i32 @helper_lzcnt(i32 %t0, i32 %wordsize) nounwind uwtable readnone {
  %1 = icmp sgt i32 %wordsize, 0
  %2 = icmp eq i32 %t0, 0
  %or.cond = and i1 %1, %2
  br i1 %or.cond, label %10, label %.preheader

.preheader:                                       ; preds = %0
  %3 = icmp sgt i32 %t0, -1
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %res.011 = phi i32 [ %5, %.lr.ph ], [ %t0, %.preheader ]
  %count.010 = phi i32 [ %4, %.lr.ph ], [ 31, %.preheader ]
  %4 = add nsw i32 %count.010, -1
  %5 = shl i32 %res.011, 1
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %count.0.lcssa = phi i32 [ 31, %.preheader ], [ %4, %.lr.ph ]
  br i1 %1, label %7, label %10

; <label>:7                                       ; preds = %._crit_edge
  %8 = add nsw i32 %wordsize, -1
  %9 = sub i32 %8, %count.0.lcssa
  br label %10

; <label>:10                                      ; preds = %7, %._crit_edge, %0
  %.0 = phi i32 [ %9, %7 ], [ %wordsize, %0 ], [ %count.0.lcssa, %._crit_edge ]
  ret i32 %.0
}

define i32 @helper_bsr(i32 %t0) nounwind uwtable readnone {
  %1 = icmp sgt i32 %t0, -1
  br i1 %1, label %.lr.ph.i, label %helper_lzcnt.exit

.lr.ph.i:                                         ; preds = %.lr.ph.i, %0
  %res.011.i = phi i32 [ %3, %.lr.ph.i ], [ %t0, %0 ]
  %count.010.i = phi i32 [ %2, %.lr.ph.i ], [ 31, %0 ]
  %2 = add nsw i32 %count.010.i, -1
  %3 = shl i32 %res.011.i, 1
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %.lr.ph.i, label %helper_lzcnt.exit

helper_lzcnt.exit:                                ; preds = %.lr.ph.i, %0
  %count.0.lcssa.i = phi i32 [ 31, %0 ], [ %2, %.lr.ph.i ]
  ret i32 %count.0.lcssa.i
}

define i32 @cpu_cc_compute_all(%struct.CPUX86State* %env1, i32 %op) nounwind uwtable {
  %1 = load %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %env1, %struct.CPUX86State** @env, align 8
  %2 = tail call i32 @helper_cc_compute_all(i32 %op)
  store %struct.CPUX86State* %1, %struct.CPUX86State** @env, align 8
  ret i32 %2
}

define i32 @helper_cc_compute_c(i32 %op) nounwind uwtable readonly {
  switch i32 %op, label %200 [
    i32 1, label %1
    i32 2, label %6
    i32 3, label %12
    i32 4, label %18
    i32 6, label %24
    i32 7, label %34
    i32 8, label %44
    i32 10, label %52
    i32 11, label %62
    i32 12, label %72
    i32 14, label %80
    i32 15, label %91
    i32 16, label %102
    i32 18, label %110
    i32 19, label %122
    i32 20, label %134
    i32 40, label %195
    i32 39, label %190
    i32 38, label %185
    i32 26, label %144
    i32 27, label %148
    i32 28, label %152
    i32 30, label %156
    i32 31, label %160
    i32 32, label %164
    i32 34, label %168
    i32 35, label %174
    i32 36, label %180
  ]

; <label>:1                                       ; preds = %0
  %2 = load %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State* %2, i64 0, i32 3
  %4 = load i32* %3, align 4
  %5 = and i32 %4, 1
  br label %200

; <label>:6                                       ; preds = %0
  %7 = load %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State* %7, i64 0, i32 3
  %9 = load i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  %11 = zext i1 %10 to i32
  br label %200

; <label>:12                                      ; preds = %0
  %13 = load %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State* %13, i64 0, i32 3
  %15 = load i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  %17 = zext i1 %16 to i32
  br label %200

; <label>:18                                      ; preds = %0
  %19 = load %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State* %19, i64 0, i32 3
  %21 = load i32* %20, align 4
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  br label %200

; <label>:24                                      ; preds = %0
  %25 = load %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 3
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.CPUX86State* %25, i64 0, i32 4
  %29 = load i32* %28, align 4
  %30 = and i32 %29, 255
  %31 = and i32 %27, 255
  %32 = icmp ult i32 %30, %31
  %33 = zext i1 %32 to i32
  br label %200

; <label>:34                                      ; preds = %0
  %35 = load %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 3
  %37 = load i32* %36, align 4
  %38 = getelementptr inbounds %struct.CPUX86State* %35, i64 0, i32 4
  %39 = load i32* %38, align 4
  %40 = and i32 %39, 65535
  %41 = and i32 %37, 65535
  %42 = icmp ult i32 %40, %41
  %43 = zext i1 %42 to i32
  br label %200

; <label>:44                                      ; preds = %0
  %45 = load %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 3
  %47 = load i32* %46, align 4
  %48 = getelementptr inbounds %struct.CPUX86State* %45, i64 0, i32 4
  %49 = load i32* %48, align 4
  %50 = icmp ult i32 %49, %47
  %51 = zext i1 %50 to i32
  br label %200

; <label>:52                                      ; preds = %0
  %53 = load %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 3
  %55 = load i32* %54, align 4
  %56 = getelementptr inbounds %struct.CPUX86State* %53, i64 0, i32 4
  %57 = load i32* %56, align 4
  %58 = and i32 %57, 255
  %59 = and i32 %55, 255
  %60 = icmp ule i32 %58, %59
  %61 = zext i1 %60 to i32
  br label %200

; <label>:62                                      ; preds = %0
  %63 = load %struct.CPUX86State** @env, align 8
  %64 = getelementptr inbounds %struct.CPUX86State* %63, i64 0, i32 3
  %65 = load i32* %64, align 4
  %66 = getelementptr inbounds %struct.CPUX86State* %63, i64 0, i32 4
  %67 = load i32* %66, align 4
  %68 = and i32 %67, 65535
  %69 = and i32 %65, 65535
  %70 = icmp ule i32 %68, %69
  %71 = zext i1 %70 to i32
  br label %200

; <label>:72                                      ; preds = %0
  %73 = load %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 3
  %75 = load i32* %74, align 4
  %76 = getelementptr inbounds %struct.CPUX86State* %73, i64 0, i32 4
  %77 = load i32* %76, align 4
  %78 = icmp ule i32 %77, %75
  %79 = zext i1 %78 to i32
  br label %200

; <label>:80                                      ; preds = %0
  %81 = load %struct.CPUX86State** @env, align 8
  %82 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 4
  %83 = load i32* %82, align 4
  %84 = getelementptr inbounds %struct.CPUX86State* %81, i64 0, i32 3
  %85 = load i32* %84, align 4
  %86 = add i32 %85, %83
  %87 = and i32 %86, 255
  %88 = and i32 %85, 255
  %89 = icmp ult i32 %87, %88
  %90 = zext i1 %89 to i32
  br label %200

; <label>:91                                      ; preds = %0
  %92 = load %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State* %92, i64 0, i32 4
  %94 = load i32* %93, align 4
  %95 = getelementptr inbounds %struct.CPUX86State* %92, i64 0, i32 3
  %96 = load i32* %95, align 4
  %97 = add i32 %96, %94
  %98 = and i32 %97, 65535
  %99 = and i32 %96, 65535
  %100 = icmp ult i32 %98, %99
  %101 = zext i1 %100 to i32
  br label %200

; <label>:102                                     ; preds = %0
  %103 = load %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State* %103, i64 0, i32 4
  %105 = load i32* %104, align 4
  %106 = getelementptr inbounds %struct.CPUX86State* %103, i64 0, i32 3
  %107 = load i32* %106, align 4
  %uadd.i = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %105, i32 %107) nounwind
  %108 = extractvalue { i32, i1 } %uadd.i, 1
  %109 = zext i1 %108 to i32
  br label %200

; <label>:110                                     ; preds = %0
  %111 = load %struct.CPUX86State** @env, align 8
  %112 = getelementptr inbounds %struct.CPUX86State* %111, i64 0, i32 4
  %113 = load i32* %112, align 4
  %114 = getelementptr inbounds %struct.CPUX86State* %111, i64 0, i32 3
  %115 = load i32* %114, align 4
  %116 = add i32 %113, 1
  %117 = add i32 %116, %115
  %118 = and i32 %117, 255
  %119 = and i32 %115, 255
  %120 = icmp ule i32 %118, %119
  %121 = zext i1 %120 to i32
  br label %200

; <label>:122                                     ; preds = %0
  %123 = load %struct.CPUX86State** @env, align 8
  %124 = getelementptr inbounds %struct.CPUX86State* %123, i64 0, i32 4
  %125 = load i32* %124, align 4
  %126 = getelementptr inbounds %struct.CPUX86State* %123, i64 0, i32 3
  %127 = load i32* %126, align 4
  %128 = add i32 %125, 1
  %129 = add i32 %128, %127
  %130 = and i32 %129, 65535
  %131 = and i32 %127, 65535
  %132 = icmp ule i32 %130, %131
  %133 = zext i1 %132 to i32
  br label %200

; <label>:134                                     ; preds = %0
  %135 = load %struct.CPUX86State** @env, align 8
  %136 = getelementptr inbounds %struct.CPUX86State* %135, i64 0, i32 4
  %137 = load i32* %136, align 4
  %138 = getelementptr inbounds %struct.CPUX86State* %135, i64 0, i32 3
  %139 = load i32* %138, align 4
  %140 = add i32 %137, 1
  %141 = add i32 %140, %139
  %142 = icmp ule i32 %141, %139
  %143 = zext i1 %142 to i32
  br label %200

; <label>:144                                     ; preds = %0
  %145 = load %struct.CPUX86State** @env, align 8
  %146 = getelementptr inbounds %struct.CPUX86State* %145, i64 0, i32 3
  %147 = load i32* %146, align 4
  br label %200

; <label>:148                                     ; preds = %0
  %149 = load %struct.CPUX86State** @env, align 8
  %150 = getelementptr inbounds %struct.CPUX86State* %149, i64 0, i32 3
  %151 = load i32* %150, align 4
  br label %200

; <label>:152                                     ; preds = %0
  %153 = load %struct.CPUX86State** @env, align 8
  %154 = getelementptr inbounds %struct.CPUX86State* %153, i64 0, i32 3
  %155 = load i32* %154, align 4
  br label %200

; <label>:156                                     ; preds = %0
  %157 = load %struct.CPUX86State** @env, align 8
  %158 = getelementptr inbounds %struct.CPUX86State* %157, i64 0, i32 3
  %159 = load i32* %158, align 4
  br label %200

; <label>:160                                     ; preds = %0
  %161 = load %struct.CPUX86State** @env, align 8
  %162 = getelementptr inbounds %struct.CPUX86State* %161, i64 0, i32 3
  %163 = load i32* %162, align 4
  br label %200

; <label>:164                                     ; preds = %0
  %165 = load %struct.CPUX86State** @env, align 8
  %166 = getelementptr inbounds %struct.CPUX86State* %165, i64 0, i32 3
  %167 = load i32* %166, align 4
  br label %200

; <label>:168                                     ; preds = %0
  %169 = load %struct.CPUX86State** @env, align 8
  %170 = getelementptr inbounds %struct.CPUX86State* %169, i64 0, i32 3
  %171 = load i32* %170, align 4
  %172 = lshr i32 %171, 7
  %173 = and i32 %172, 1
  br label %200

; <label>:174                                     ; preds = %0
  %175 = load %struct.CPUX86State** @env, align 8
  %176 = getelementptr inbounds %struct.CPUX86State* %175, i64 0, i32 3
  %177 = load i32* %176, align 4
  %178 = lshr i32 %177, 15
  %179 = and i32 %178, 1
  br label %200

; <label>:180                                     ; preds = %0
  %181 = load %struct.CPUX86State** @env, align 8
  %182 = getelementptr inbounds %struct.CPUX86State* %181, i64 0, i32 3
  %183 = load i32* %182, align 4
  %184 = lshr i32 %183, 31
  br label %200

; <label>:185                                     ; preds = %0
  %186 = load %struct.CPUX86State** @env, align 8
  %187 = getelementptr inbounds %struct.CPUX86State* %186, i64 0, i32 3
  %188 = load i32* %187, align 4
  %189 = and i32 %188, 1
  br label %200

; <label>:190                                     ; preds = %0
  %191 = load %struct.CPUX86State** @env, align 8
  %192 = getelementptr inbounds %struct.CPUX86State* %191, i64 0, i32 3
  %193 = load i32* %192, align 4
  %194 = and i32 %193, 1
  br label %200

; <label>:195                                     ; preds = %0
  %196 = load %struct.CPUX86State** @env, align 8
  %197 = getelementptr inbounds %struct.CPUX86State* %196, i64 0, i32 3
  %198 = load i32* %197, align 4
  %199 = and i32 %198, 1
  br label %200

; <label>:200                                     ; preds = %195, %190, %185, %180, %174, %168, %164, %160, %156, %152, %148, %144, %134, %122, %110, %102, %91, %80, %72, %62, %52, %44, %34, %24, %18, %12, %6, %1, %0
  %.0 = phi i32 [ %199, %195 ], [ %194, %190 ], [ %189, %185 ], [ %184, %180 ], [ %179, %174 ], [ %173, %168 ], [ %167, %164 ], [ %163, %160 ], [ %159, %156 ], [ %155, %152 ], [ %151, %148 ], [ %147, %144 ], [ %143, %134 ], [ %133, %122 ], [ %121, %110 ], [ %109, %102 ], [ %101, %91 ], [ %90, %80 ], [ %79, %72 ], [ %71, %62 ], [ %61, %52 ], [ %51, %44 ], [ %43, %34 ], [ %33, %24 ], [ %23, %18 ], [ %17, %12 ], [ %11, %6 ], [ %5, %1 ], [ 0, %0 ]
  ret i32 %.0
}

declare void @stw_phys(i64, i32)

declare { i64, i16 } @float64_to_floatx80(i64, %struct.float_status*)

declare i64 @floatx80_to_float64(i64, i16, %struct.float_status*)

declare void @cpu_abort(%struct.CPUX86State*, i8*, ...) noreturn

define internal fastcc void @tss_load_seg(i32 %seg_reg, i32 %selector) nounwind uwtable {
  %1 = and i32 %selector, 65532
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %153, label %3

; <label>:3                                       ; preds = %0
  %4 = and i32 %selector, 4
  %5 = icmp eq i32 %4, 0
  %6 = load %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 10
  %8 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 12
  %dt.0.i = select i1 %5, %struct.SegmentCache* %8, %struct.SegmentCache* %7
  %9 = or i32 %selector, 7
  %10 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 2
  %11 = load i32* %10, align 4
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %43, label %13

; <label>:13                                      ; preds = %3
  %14 = and i32 %selector, -8
  %15 = getelementptr inbounds %struct.SegmentCache* %dt.0.i, i64 0, i32 1
  %16 = load i32* %15, align 4
  %17 = add i32 %16, %14
  %18 = lshr i32 %17, 12
  %19 = and i32 %18, 255
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 0, i64 %20, i32 0
  %22 = load i32* %21, align 4
  %23 = and i32 %17, -4093
  %24 = icmp eq i32 %22, %23
  %25 = zext i32 %17 to i64
  br i1 %24, label %26, label %ldl_kernel.exit.i, !prof !0

; <label>:26                                      ; preds = %13
  %27 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 0, i64 %20, i32 3
  %28 = load i64* %27, align 8
  %29 = add i64 %28, %25
  br label %ldl_kernel.exit.i

ldl_kernel.exit.i:                                ; preds = %26, %13
  %res.0.in.in.i.i = phi i64 [ %29, %26 ], [ %25, %13 ]
  %res.0.in.i.i = inttoptr i64 %res.0.in.in.i.i to i32*
  %res.0.i.i = load i32* %res.0.in.i.i, align 4
  %30 = add i32 %17, 4
  %31 = lshr i32 %30, 12
  %32 = and i32 %31, 255
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 0, i64 %33, i32 0
  %35 = load i32* %34, align 4
  %36 = and i32 %30, -4093
  %37 = icmp eq i32 %35, %36
  %38 = zext i32 %30 to i64
  br i1 %37, label %39, label %44, !prof !0

; <label>:39                                      ; preds = %ldl_kernel.exit.i
  %40 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 71, i64 0, i64 %33, i32 3
  %41 = load i64* %40, align 8
  %42 = add i64 %41, %38
  br label %44

; <label>:43                                      ; preds = %3
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:44                                      ; preds = %39, %ldl_kernel.exit.i
  %res.0.in.in.i8.i = phi i64 [ %42, %39 ], [ %38, %ldl_kernel.exit.i ]
  %res.0.in.i9.i = inttoptr i64 %res.0.in.in.i8.i to i32*
  %res.0.i10.i = load i32* %res.0.in.i9.i, align 4
  %45 = and i32 %res.0.i10.i, 4096
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

; <label>:47                                      ; preds = %44
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:48                                      ; preds = %44
  %49 = and i32 %selector, 3
  %50 = lshr i32 %res.0.i10.i, 13
  %51 = and i32 %50, 3
  %52 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 7
  %53 = load i32* %52, align 4
  %54 = and i32 %53, 3
  %55 = icmp eq i32 %seg_reg, 1
  br i1 %55, label %56, label %63

; <label>:56                                      ; preds = %48
  %57 = and i32 %res.0.i10.i, 2048
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %56
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:60                                      ; preds = %56
  %61 = icmp eq i32 %51, %49
  br i1 %61, label %83, label %62

; <label>:62                                      ; preds = %60
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:63                                      ; preds = %48
  %64 = icmp eq i32 %seg_reg, 2
  %65 = and i32 %res.0.i10.i, 2560
  br i1 %64, label %66, label %73

; <label>:66                                      ; preds = %63
  %67 = icmp eq i32 %65, 512
  br i1 %67, label %69, label %68

; <label>:68                                      ; preds = %66
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:69                                      ; preds = %66
  %70 = icmp eq i32 %51, %54
  %71 = icmp eq i32 %51, %49
  %or.cond31 = and i1 %70, %71
  br i1 %or.cond31, label %83, label %72

; <label>:72                                      ; preds = %69
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:73                                      ; preds = %63
  %74 = icmp eq i32 %65, 2048
  br i1 %74, label %75, label %76

; <label>:75                                      ; preds = %73
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:76                                      ; preds = %73
  %77 = and i32 %res.0.i10.i, 3072
  %78 = icmp ult i32 %77, 3072
  br i1 %78, label %79, label %83

; <label>:79                                      ; preds = %76
  %80 = icmp ult i32 %51, %54
  %81 = icmp ult i32 %51, %49
  %or.cond34 = or i1 %80, %81
  br i1 %or.cond34, label %82, label %83

; <label>:82                                      ; preds = %79
  tail call fastcc void @raise_exception_err(i32 10, i32 %1) noreturn
  unreachable

; <label>:83                                      ; preds = %79, %76, %69, %60
  %84 = and i32 %res.0.i10.i, 32768
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

; <label>:86                                      ; preds = %83
  tail call fastcc void @raise_exception_err(i32 11, i32 %1) noreturn
  unreachable

; <label>:87                                      ; preds = %83
  %88 = lshr i32 %res.0.i.i, 16
  %89 = shl i32 %res.0.i10.i, 16
  %90 = and i32 %89, 16711680
  %91 = and i32 %res.0.i10.i, -16777216
  %92 = or i32 %91, %88
  %93 = or i32 %92, %90
  %94 = and i32 %res.0.i.i, 65535
  %95 = and i32 %res.0.i10.i, 983040
  %96 = or i32 %95, %94
  %97 = and i32 %res.0.i10.i, 8388608
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %get_seg_limit.exit, label %99

; <label>:99                                      ; preds = %87
  %100 = shl nuw i32 %96, 12
  %101 = or i32 %100, 4095
  br label %get_seg_limit.exit

get_seg_limit.exit:                               ; preds = %99, %87
  %limit.0.i = phi i32 [ %101, %99 ], [ %96, %87 ]
  %102 = sext i32 %seg_reg to i64
  %103 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 %102, i32 0
  store i32 %selector, i32* %103, align 4
  %104 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 %102, i32 1
  store i32 %93, i32* %104, align 4
  %105 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 %102, i32 2
  store i32 %limit.0.i, i32* %105, align 4
  %106 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 %102, i32 3
  store i32 %res.0.i10.i, i32* %106, align 4
  br i1 %55, label %107, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %get_seg_limit.exit
  %.pre.i = load i32* %52, align 4
  br label %115

; <label>:107                                     ; preds = %get_seg_limit.exit
  %108 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 1, i32 3
  %109 = load i32* %108, align 4
  %110 = lshr i32 %109, 18
  %111 = and i32 %110, 16
  %112 = load i32* %52, align 4
  %113 = and i32 %112, -32785
  %114 = or i32 %113, %111
  store i32 %114, i32* %52, align 4
  br label %115

; <label>:115                                     ; preds = %107, %._crit_edge.i
  %116 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %114, %107 ]
  %117 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 2, i32 3
  %118 = load i32* %117, align 4
  %119 = lshr i32 %118, 17
  %120 = and i32 %119, 32
  %121 = and i32 %116, 32768
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %cpu_x86_load_seg_cache.exit

; <label>:123                                     ; preds = %115
  %124 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 14, i64 0
  %125 = load i32* %124, align 4
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %136, label %128

; <label>:128                                     ; preds = %123
  %129 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 2
  %130 = load i32* %129, align 4
  %131 = and i32 %130, 131072
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %136

; <label>:133                                     ; preds = %128
  %134 = and i32 %116, 16
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %138

; <label>:136                                     ; preds = %133, %128, %123
  %137 = or i32 %120, 64
  br label %cpu_x86_load_seg_cache.exit

; <label>:138                                     ; preds = %133
  %139 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 3, i32 1
  %140 = load i32* %139, align 4
  %141 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 0, i32 1
  %142 = load i32* %141, align 4
  %143 = or i32 %142, %140
  %144 = getelementptr inbounds %struct.CPUX86State* %6, i64 0, i32 9, i64 2, i32 1
  %145 = load i32* %144, align 4
  %146 = or i32 %143, %145
  %147 = icmp ne i32 %146, 0
  %148 = zext i1 %147 to i32
  %149 = shl nuw nsw i32 %148, 6
  %150 = or i32 %149, %120
  br label %cpu_x86_load_seg_cache.exit

cpu_x86_load_seg_cache.exit:                      ; preds = %138, %136, %115
  %new_hflags.0.i = phi i32 [ %120, %115 ], [ %137, %136 ], [ %150, %138 ]
  %151 = and i32 %116, -97
  %152 = or i32 %new_hflags.0.i, %151
  store i32 %152, i32* %52, align 4
  br label %156

; <label>:153                                     ; preds = %0
  %seg_reg.off = add i32 %seg_reg, -1
  %154 = icmp ult i32 %seg_reg.off, 2
  br i1 %154, label %155, label %156

; <label>:155                                     ; preds = %153
  tail call fastcc void @raise_exception_err(i32 10, i32 0) noreturn
  unreachable

; <label>:156                                     ; preds = %153, %cpu_x86_load_seg_cache.exit
  ret void
}

declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) nounwind readnone

declare i32 @puts(i8* nocapture) nounwind

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) nounwind

declare i32 @fputc(i32, %struct._IO_FILE* nocapture) nounwind

declare double @exp2(double)

declare double @ldexp(double, i32)

!0 = metadata !{metadata !"branch_weights", i32 64, i32 4}
